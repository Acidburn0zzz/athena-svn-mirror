<refentry id="libgnomecanvas-GnomeCanvas">
<refmeta>
<refentrytitle>GnomeCanvas</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMECANVAS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GnomeCanvas</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;libgnomecanvas/libgnomecanvas.h&gt;


struct      <link linkend="GnomeCanvas">GnomeCanvas</link>;
typedef     <link linkend="GnomeCanvasBuf">GnomeCanvasBuf</link>;

<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="gnome-canvas-new">gnome_canvas_new</link>                (void);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="gnome-canvas-new-aa">gnome_canvas_new_aa</link>             (void);
<link linkend="GnomeCanvasGroup">GnomeCanvasGroup</link>* <link linkend="gnome-canvas-root">gnome_canvas_root</link>         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);
void        <link linkend="gnome-canvas-set-scroll-region">gnome_canvas_set_scroll_region</link>  (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> x1,
                                             <link linkend="double">double</link> y1,
                                             <link linkend="double">double</link> x2,
                                             <link linkend="double">double</link> y2);
void        <link linkend="gnome-canvas-get-scroll-region">gnome_canvas_get_scroll_region</link>  (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> *x1,
                                             <link linkend="double">double</link> *y1,
                                             <link linkend="double">double</link> *x2,
                                             <link linkend="double">double</link> *y2);
void        <link linkend="gnome-canvas-set-center-scroll-region">gnome_canvas_set_center_scroll_region</link>
                                            (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="gboolean">gboolean</link> center_scroll_region);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-canvas-get-center-scroll-region">gnome_canvas_get_center_scroll_region</link>
                                            (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);
void        <link linkend="gnome-canvas-set-pixels-per-unit">gnome_canvas_set_pixels_per_unit</link>
                                            (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> n);
void        <link linkend="gnome-canvas-scroll-to">gnome_canvas_scroll_to</link>          (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int cx,
                                             int cy);
void        <link linkend="gnome-canvas-get-scroll-offsets">gnome_canvas_get_scroll_offsets</link> (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int *cx,
                                             int *cy);
void        <link linkend="gnome-canvas-update-now">gnome_canvas_update_now</link>         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);
<link linkend="GnomeCanvasItem">GnomeCanvasItem</link>* <link linkend="gnome-canvas-get-item-at">gnome_canvas_get_item_at</link>   (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> x,
                                             <link linkend="double">double</link> y);
void        <link linkend="gnome-canvas-request-redraw-uta">gnome_canvas_request_redraw_uta</link> (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="ArtUta">ArtUta</link> *uta);
void        <link linkend="gnome-canvas-request-redraw">gnome_canvas_request_redraw</link>     (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int x1,
                                             int y1,
                                             int x2,
                                             int y2);
void        <link linkend="gnome-canvas-w2c-affine">gnome_canvas_w2c_affine</link>         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> affine[6]);
void        <link linkend="gnome-canvas-w2c">gnome_canvas_w2c</link>                (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> wx,
                                             <link linkend="double">double</link> wy,
                                             int *cx,
                                             int *cy);
void        <link linkend="gnome-canvas-w2c-d">gnome_canvas_w2c_d</link>              (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> wx,
                                             <link linkend="double">double</link> wy,
                                             <link linkend="double">double</link> *cx,
                                             <link linkend="double">double</link> *cy);
void        <link linkend="gnome-canvas-c2w">gnome_canvas_c2w</link>                (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int cx,
                                             int cy,
                                             <link linkend="double">double</link> *wx,
                                             <link linkend="double">double</link> *wy);
void        <link linkend="gnome-canvas-window-to-world">gnome_canvas_window_to_world</link>    (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> winx,
                                             <link linkend="double">double</link> winy,
                                             <link linkend="double">double</link> *worldx,
                                             <link linkend="double">double</link> *worldy);
void        <link linkend="gnome-canvas-world-to-window">gnome_canvas_world_to_window</link>    (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> worldx,
                                             <link linkend="double">double</link> worldy,
                                             <link linkend="double">double</link> *winx,
                                             <link linkend="double">double</link> *winy);
int         <link linkend="gnome-canvas-get-color">gnome_canvas_get_color</link>          (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             const char *spec,
                                             <link linkend="GdkColor">GdkColor</link> *color);
<link linkend="gulong">gulong</link>      <link linkend="gnome-canvas-get-color-pixel">gnome_canvas_get_color_pixel</link>    (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="guint">guint</link> rgba);
void        <link linkend="gnome-canvas-set-stipple-origin">gnome_canvas_set_stipple_origin</link> (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="GdkGC">GdkGC</link> *gc);
void        <link linkend="gnome-canvas-set-dither">gnome_canvas_set_dither</link>         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="GdkRgbDither">GdkRgbDither</link> dither);
<link linkend="GdkRgbDither">GdkRgbDither</link> <link linkend="gnome-canvas-get-dither">gnome_canvas_get_dither</link>        (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);

</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeCanvas">struct GnomeCanvas</title>
<programlisting>struct GnomeCanvas {

	GtkLayout layout;

	/* Root canvas group */
	GnomeCanvasItem *root;

	/* Area that needs redrawing, stored as a microtile array */
	ArtUta *redraw_area;

	/* The item containing the mouse pointer, or NULL if none */
	GnomeCanvasItem *current_item;

	/* Item that is about to become current (used to track deletions and such) */
	GnomeCanvasItem *new_current_item;

	/* Item that holds a pointer grab, or NULL if none */
	GnomeCanvasItem *grabbed_item;

	/* If non-NULL, the currently focused item */
	GnomeCanvasItem *focused_item;

	/* GC for temporary draw pixmap */
	GdkGC *pixmap_gc;

	/* Event on which selection of current item is based */
	GdkEvent pick_event;

	/* Scrolling region */
	double scroll_x1, scroll_y1;
	double scroll_x2, scroll_y2;

	/* Scaling factor to be used for display */
	double pixels_per_unit;

	/* Idle handler ID */
	guint idle_id;

	/* Signal handler ID for destruction of the root item */
	guint root_destroy_id;

	/* Area that is being redrawn.  Contains (x1, y1) but not (x2, y2).
	 * Specified in canvas pixel coordinates.
	 */
	int redraw_x1, redraw_y1;
	int redraw_x2, redraw_y2;

	/* Offsets of the temprary drawing pixmap */
	int draw_xofs, draw_yofs;

	/* Internal pixel offsets when zoomed out */
	int zoom_xofs, zoom_yofs;

	/* Last known modifier state, for deferred repick when a button is down */
	int state;

	/* Event mask specified when grabbing an item */
	guint grabbed_event_mask;

	/* Tolerance distance for picking items */
	int close_enough;

	/* Whether the canvas should center the scroll region in the middle of
	 * the window if the scroll region is smaller than the window.
	 */
	unsigned int center_scroll_region : 1;

	/* Whether items need update at next idle loop iteration */
	unsigned int need_update : 1;

	/* Whether the canvas needs redrawing at the next idle loop iteration */
	unsigned int need_redraw : 1;

	/* Whether current item will be repicked at next idle loop iteration */
	unsigned int need_repick : 1;

	/* For use by internal pick_current_item() function */
	unsigned int left_grabbed_item : 1;

	/* For use by internal pick_current_item() function */
	unsigned int in_repick : 1;

	/* Whether the canvas is in antialiased mode or not */
	unsigned int aa : 1;

	/* Which dither mode to use for antialiased mode drawing */
	GdkRgbDither dither;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeCanvasBuf">GnomeCanvasBuf</title>
<programlisting>typedef struct {
	/* 24-bit RGB buffer for rendering */
	guchar *buf;

	/* Rectangle describing the rendering area */
	ArtIRect rect;

	/* Rowstride for the buffer */
	int buf_rowstride;

	/* Background color, given as 0xrrggbb */
	guint32 bg_color;

	/* Invariant: at least one of the following flags is true. */

	/* Set when the render rectangle area is the solid color bg_color */
	unsigned int is_bg : 1;

	/* Set when the render rectangle area is represented by the buf */
	unsigned int is_buf : 1;
} GnomeCanvasBuf;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-new">gnome_canvas_new ()</title>
<programlisting><link linkend="GtkWidget">GtkWidget</link>*  gnome_canvas_new                (void);</programlisting>
<para>
Creates a new empty canvas in non-antialiased mode.  If you wish to use the
&amp;GnomeCanvasImage item inside this canvas, then you must push the gdk_imlib
visual and colormap before calling this function, and they can be popped
afterwards.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A newly-created canvas.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-new-aa">gnome_canvas_new_aa ()</title>
<programlisting><link linkend="GtkWidget">GtkWidget</link>*  gnome_canvas_new_aa             (void);</programlisting>
<para>
Creates a new empty canvas in antialiased mode.  You should push the GdkRGB
visual and colormap before calling this functions, and they can be popped
afterwards.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A newly-created antialiased canvas.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-root">gnome_canvas_root ()</title>
<programlisting><link linkend="GnomeCanvasGroup">GnomeCanvasGroup</link>* gnome_canvas_root         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);</programlisting>
<para>
Queries the root group of a canvas.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The root group of the specified canvas.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-set-scroll-region">gnome_canvas_set_scroll_region ()</title>
<programlisting>void        gnome_canvas_set_scroll_region  (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> x1,
                                             <link linkend="double">double</link> y1,
                                             <link linkend="double">double</link> x2,
                                             <link linkend="double">double</link> y2);</programlisting>
<para>
Sets the scrolling region of a canvas to the specified rectangle.  The canvas
will then be able to scroll only within this region.  The view of the canvas
is adjusted as appropriate to display as much of the new region as possible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x1</parameter>&nbsp;:</term>
<listitem><simpara> Leftmost limit of the scrolling region.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&nbsp;:</term>
<listitem><simpara> Upper limit of the scrolling region.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&nbsp;:</term>
<listitem><simpara> Rightmost limit of the scrolling region.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&nbsp;:</term>
<listitem><simpara> Lower limit of the scrolling region.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-get-scroll-region">gnome_canvas_get_scroll_region ()</title>
<programlisting>void        gnome_canvas_get_scroll_region  (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> *x1,
                                             <link linkend="double">double</link> *y1,
                                             <link linkend="double">double</link> *x2,
                                             <link linkend="double">double</link> *y2);</programlisting>
<para>
Queries the scrolling region of a canvas.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x1</parameter>&nbsp;:</term>
<listitem><simpara> Leftmost limit of the scrolling region (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&nbsp;:</term>
<listitem><simpara> Upper limit of the scrolling region (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&nbsp;:</term>
<listitem><simpara> Rightmost limit of the scrolling region (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&nbsp;:</term>
<listitem><simpara> Lower limit of the scrolling region (return value).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-set-center-scroll-region">gnome_canvas_set_center_scroll_region ()</title>
<programlisting>void        gnome_canvas_set_center_scroll_region
                                            (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="gboolean">gboolean</link> center_scroll_region);</programlisting>
<para>
When the scrolling region of the canvas is smaller than the canvas window,
e.g.  the allocation of the canvas, it can be either centered on the window
or simply made to be on the upper-left corner on the window.  This function
lets you configure this property.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>center_scroll_region</parameter>&nbsp;:</term>
<listitem><simpara> Whether to center the scrolling region in the canvas
window when it is smaller than the canvas' allocation.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-get-center-scroll-region">gnome_canvas_get_center_scroll_region ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_canvas_get_center_scroll_region
                                            (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);</programlisting>
<para>
Returns whether the canvas is set to center the scrolling region in the window
if the former is smaller than the canvas' allocation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> Whether the scroll region is being centered in the canvas window.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-set-pixels-per-unit">gnome_canvas_set_pixels_per_unit ()</title>
<programlisting>void        gnome_canvas_set_pixels_per_unit
                                            (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> n);</programlisting>
<para>
Sets the zooming factor of a canvas by specifying the number of pixels that
correspond to one canvas unit.
</para>
<para>
The anchor point for zooming, i.e. the point that stays fixed and all others
zoom inwards or outwards from it, depends on whether the canvas is set to
center the scrolling region or not.  You can control this using the
<link linkend="gnome-canvas-set-center-scroll-region">gnome_canvas_set_center_scroll_region</link>() function.  If the canvas is set to
center the scroll region, then the center of the canvas window is used as the
anchor point for zooming.  Otherwise, the upper-left corner of the canvas
window is used as the anchor point.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> The number of pixels that correspond to one canvas unit.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-scroll-to">gnome_canvas_scroll_to ()</title>
<programlisting>void        gnome_canvas_scroll_to          (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int cx,
                                             int cy);</programlisting>
<para>
Makes a canvas scroll to the specified offsets, given in canvas pixel units.
The canvas will adjust the view so that it is not outside the scrolling
region.  This function is typically not used, as it is better to hook
scrollbars to the canvas layout's scrolling adjusments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cx</parameter>&nbsp;:</term>
<listitem><simpara> Horizontal scrolling offset in canvas pixel units.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cy</parameter>&nbsp;:</term>
<listitem><simpara> Vertical scrolling offset in canvas pixel units.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-get-scroll-offsets">gnome_canvas_get_scroll_offsets ()</title>
<programlisting>void        gnome_canvas_get_scroll_offsets (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int *cx,
                                             int *cy);</programlisting>
<para>
Queries the scrolling offsets of a canvas.  The values are returned in canvas
pixel units.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cx</parameter>&nbsp;:</term>
<listitem><simpara> Horizontal scrolling offset (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cy</parameter>&nbsp;:</term>
<listitem><simpara> Vertical scrolling offset (return value).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-update-now">gnome_canvas_update_now ()</title>
<programlisting>void        gnome_canvas_update_now         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);</programlisting>
<para>
Forces an immediate update and redraw of a canvas.  If the canvas does not
have any pending update or redraw requests, then no action is taken.  This is
typically only used by applications that need explicit control of when the
display is updated, like games.  It is not needed by normal applications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-get-item-at">gnome_canvas_get_item_at ()</title>
<programlisting><link linkend="GnomeCanvasItem">GnomeCanvasItem</link>* gnome_canvas_get_item_at   (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> x,
                                             <link linkend="double">double</link> y);</programlisting>
<para>
Looks for the item that is under the specified position, which must be
specified in world coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X position in world coordinates.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y position in world coordinates.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The sought item, or NULL if no item is at the specified
coordinates.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-request-redraw-uta">gnome_canvas_request_redraw_uta ()</title>
<programlisting>void        gnome_canvas_request_redraw_uta (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="ArtUta">ArtUta</link> *uta);</programlisting>
<para>
Informs a canvas that the specified area, given as a microtile array, needs
to be repainted.  To be used only by item implementations.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uta</parameter>&nbsp;:</term>
<listitem><simpara> Microtile array that specifies the area to be redrawn.  It will
be freed by this function, so the argument you pass will be invalid
after you call this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-request-redraw">gnome_canvas_request_redraw ()</title>
<programlisting>void        gnome_canvas_request_redraw     (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int x1,
                                             int y1,
                                             int x2,
                                             int y2);</programlisting>
<para>
Convenience function that informs a canvas that the specified rectangle needs
to be repainted.  This function converts the rectangle to a microtile array
and feeds it to <link linkend="gnome-canvas-request-redraw-uta">gnome_canvas_request_redraw_uta</link>().  The rectangle includes
<parameter>x1</parameter> and <parameter>y1</parameter>, but not <parameter>x2</parameter> and <parameter>y2</parameter>.  To be used only by item implementations.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x1</parameter>&nbsp;:</term>
<listitem><simpara> Leftmost coordinate of the rectangle to be redrawn.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&nbsp;:</term>
<listitem><simpara> Upper coordinate of the rectangle to be redrawn.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&nbsp;:</term>
<listitem><simpara> Rightmost coordinate of the rectangle to be redrawn, plus 1.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&nbsp;:</term>
<listitem><simpara> Lower coordinate of the rectangle to be redrawn, plus 1.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-w2c-affine">gnome_canvas_w2c_affine ()</title>
<programlisting>void        gnome_canvas_w2c_affine         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> affine[6]);</programlisting>
<para>
Gets the affine transform that converts from world coordinates to canvas
pixel coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>affine</parameter>&nbsp;:</term>
<listitem><simpara> An affine transformation matrix (return value).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-w2c">gnome_canvas_w2c ()</title>
<programlisting>void        gnome_canvas_w2c                (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> wx,
                                             <link linkend="double">double</link> wy,
                                             int *cx,
                                             int *cy);</programlisting>
<para>
Converts world coordinates into canvas pixel coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wx</parameter>&nbsp;:</term>
<listitem><simpara> World X coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wy</parameter>&nbsp;:</term>
<listitem><simpara> World Y coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cx</parameter>&nbsp;:</term>
<listitem><simpara> X pixel coordinate (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cy</parameter>&nbsp;:</term>
<listitem><simpara> Y pixel coordinate (return value).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-w2c-d">gnome_canvas_w2c_d ()</title>
<programlisting>void        gnome_canvas_w2c_d              (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> wx,
                                             <link linkend="double">double</link> wy,
                                             <link linkend="double">double</link> *cx,
                                             <link linkend="double">double</link> *cy);</programlisting>
<para>
Converts world coordinates into canvas pixel coordinates.  This version</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wx</parameter>&nbsp;:</term>
<listitem><simpara> World X coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wy</parameter>&nbsp;:</term>
<listitem><simpara> World Y coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cx</parameter>&nbsp;:</term>
<listitem><simpara> X pixel coordinate (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cy</parameter>&nbsp;:</term>
<listitem><simpara> Y pixel coordinate (return value).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-c2w">gnome_canvas_c2w ()</title>
<programlisting>void        gnome_canvas_c2w                (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             int cx,
                                             int cy,
                                             <link linkend="double">double</link> *wx,
                                             <link linkend="double">double</link> *wy);</programlisting>
<para>
Converts canvas pixel coordinates to world coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cx</parameter>&nbsp;:</term>
<listitem><simpara> Canvas pixel X coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cy</parameter>&nbsp;:</term>
<listitem><simpara> Canvas pixel Y coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wx</parameter>&nbsp;:</term>
<listitem><simpara> X world coordinate (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wy</parameter>&nbsp;:</term>
<listitem><simpara> Y world coordinate (return value).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-window-to-world">gnome_canvas_window_to_world ()</title>
<programlisting>void        gnome_canvas_window_to_world    (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> winx,
                                             <link linkend="double">double</link> winy,
                                             <link linkend="double">double</link> *worldx,
                                             <link linkend="double">double</link> *worldy);</programlisting>
<para>
Converts window-relative coordinates into world coordinates.  You can use
this when you need to convert mouse coordinates into world coordinates, for
example.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>winx</parameter>&nbsp;:</term>
<listitem><simpara> Window-relative X coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>winy</parameter>&nbsp;:</term>
<listitem><simpara> Window-relative Y coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>worldx</parameter>&nbsp;:</term>
<listitem><simpara> X world coordinate (return value).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>worldy</parameter>&nbsp;:</term>
<listitem><simpara> Y world coordinate (return value).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-world-to-window">gnome_canvas_world_to_window ()</title>
<programlisting>void        gnome_canvas_world_to_window    (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="double">double</link> worldx,
                                             <link linkend="double">double</link> worldy,
                                             <link linkend="double">double</link> *winx,
                                             <link linkend="double">double</link> *winy);</programlisting>
<para>
Converts world coordinates into window-relative coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>worldx</parameter>&nbsp;:</term>
<listitem><simpara> World X coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>worldy</parameter>&nbsp;:</term>
<listitem><simpara> World Y coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>winx</parameter>&nbsp;:</term>
<listitem><simpara> X window-relative coordinate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>winy</parameter>&nbsp;:</term>
<listitem><simpara> Y window-relative coordinate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-get-color">gnome_canvas_get_color ()</title>
<programlisting>int         gnome_canvas_get_color          (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             const char *spec,
                                             <link linkend="GdkColor">GdkColor</link> *color);</programlisting>
<para>
Allocates a color based on the specified X color specification.  As a
convenience to item implementations, it returns TRUE if the color was
allocated, or FALSE if the specification was NULL.  A NULL color
specification is considered as "transparent" by the canvas.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>spec</parameter>&nbsp;:</term>
<listitem><simpara> X color specification, or NULL for "transparent".
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> Returns the allocated color.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if <parameter>spec</parameter> is non-NULL and the color is allocated.  If <parameter>spec</parameter>
is NULL, then returns FALSE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-get-color-pixel">gnome_canvas_get_color_pixel ()</title>
<programlisting><link linkend="gulong">gulong</link>      gnome_canvas_get_color_pixel    (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="guint">guint</link> rgba);</programlisting>
<para>
Allocates a color from the RGBA value passed into this function.  The alpha
opacity value is discarded, since normal X colors do not support it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgba</parameter>&nbsp;:</term>
<listitem><simpara> RGBA color specification.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> Allocated pixel value corresponding to the specified color.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-set-stipple-origin">gnome_canvas_set_stipple_origin ()</title>
<programlisting>void        gnome_canvas_set_stipple_origin (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="GdkGC">GdkGC</link> *gc);</programlisting>
<para>
Sets the stipple origin of the specified GC as is appropriate for the canvas,
so that it will be aligned with other stipple patterns used by canvas items.
This is typically only needed by item implementations.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>gc</parameter>&nbsp;:</term>
<listitem><simpara> GC on which to set the stipple origin.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-set-dither">gnome_canvas_set_dither ()</title>
<programlisting>void        gnome_canvas_set_dither         (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas,
                                             <link linkend="GdkRgbDither">GdkRgbDither</link> dither);</programlisting>
<para>
Controls dithered rendering for antialiased canvases. The value of
dither should be <link linkend="GDK-RGB-DITHER-NONE-CAPS">GDK_RGB_DITHER_NONE</link>, <link linkend="GDK-RGB-DITHER-NORMAL-CAPS">GDK_RGB_DITHER_NORMAL</link>, or
<link linkend="GDK-RGB-DITHER-MAX-CAPS">GDK_RGB_DITHER_MAX</link>. The default canvas setting is
<link linkend="GDK-RGB-DITHER-NORMAL-CAPS">GDK_RGB_DITHER_NORMAL</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dither</parameter>&nbsp;:</term>
<listitem><simpara> Type of dithering used to render an antialiased canvas.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-get-dither">gnome_canvas_get_dither ()</title>
<programlisting><link linkend="GdkRgbDither">GdkRgbDither</link> gnome_canvas_get_dither        (<link linkend="GnomeCanvas">GnomeCanvas</link> *canvas);</programlisting>
<para>
Returns the type of dithering used to render an antialiased canvas.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>canvas</parameter>&nbsp;:</term>
<listitem><simpara> A canvas.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The dither setting.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
