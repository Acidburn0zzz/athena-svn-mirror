<refentry id="libgnomecanvas-GnomeCanvasPathDef">
<refmeta>
<refentrytitle>gnome-canvas-path-def</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMECANVAS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-canvas-path-def</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;libgnomecanvas/libgnomecanvas.h&gt;


struct      <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>;

<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-new">gnome_canvas_path_def_new</link>
                                            (void);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-new-sized">gnome_canvas_path_def_new_sized</link>
                                            (<link linkend="gint">gint</link> length);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-new-from-bpath">gnome_canvas_path_def_new_from_bpath</link>
                                            (<link linkend="ArtBpath">ArtBpath</link> *bpath);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-new-from-static-bpath">gnome_canvas_path_def_new_from_static_bpath</link>
                                            (<link linkend="ArtBpath">ArtBpath</link> *bpath);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-new-from-foreign-bpath">gnome_canvas_path_def_new_from_foreign_bpath</link>
                                            (<link linkend="ArtBpath">ArtBpath</link> *bpath);
void        <link linkend="gnome-canvas-path-def-ref">gnome_canvas_path_def_ref</link>       (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
void        <link linkend="gnome-canvas-path-def-finish">gnome_canvas_path_def_finish</link>    (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
void        <link linkend="gnome-canvas-path-def-ensure-space">gnome_canvas_path_def_ensure_space</link>
                                            (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gint">gint</link> space);
void        <link linkend="gnome-canvas-path-def-copy">gnome_canvas_path_def_copy</link>      (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *dst,
                                             const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *src);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-duplicate">gnome_canvas_path_def_duplicate</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-concat">gnome_canvas_path_def_concat</link>
                                            (const <link linkend="GSList">GSList</link> *list);
<link linkend="GSList">GSList</link>*     <link linkend="gnome-canvas-path-def-split">gnome_canvas_path_def_split</link>     (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-open-parts">gnome_canvas_path_def_open_parts</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-closed-parts">gnome_canvas_path_def_closed_parts</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-path-def-close-all">gnome_canvas_path_def_close_all</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
void        <link linkend="gnome-canvas-path-def-unref">gnome_canvas_path_def_unref</link>     (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
void        <link linkend="gnome-canvas-path-def-reset">gnome_canvas_path_def_reset</link>     (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
void        <link linkend="gnome-canvas-path-def-moveto">gnome_canvas_path_def_moveto</link>    (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x,
                                             <link linkend="gdouble">gdouble</link> y);
void        <link linkend="gnome-canvas-path-def-lineto">gnome_canvas_path_def_lineto</link>    (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x,
                                             <link linkend="gdouble">gdouble</link> y);
void        <link linkend="gnome-canvas-path-def-lineto-moving">gnome_canvas_path_def_lineto_moving</link>
                                            (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x,
                                             <link linkend="gdouble">gdouble</link> y);
void        <link linkend="gnome-canvas-path-def-curveto">gnome_canvas_path_def_curveto</link>   (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x0,
                                             <link linkend="gdouble">gdouble</link> y0,
                                             <link linkend="gdouble">gdouble</link> x1,
                                             <link linkend="gdouble">gdouble</link> y1,
                                             <link linkend="gdouble">gdouble</link> x2,
                                             <link linkend="gdouble">gdouble</link> y2);
void        <link linkend="gnome-canvas-path-def-closepath">gnome_canvas_path_def_closepath</link> (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
void        <link linkend="gnome-canvas-path-def-closepath-current">gnome_canvas_path_def_closepath_current</link>
                                            (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="ArtBpath">ArtBpath</link>*   <link linkend="gnome-canvas-path-def-bpath">gnome_canvas_path_def_bpath</link>     (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="gint">gint</link>        <link linkend="gnome-canvas-path-def-length">gnome_canvas_path_def_length</link>    (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-canvas-path-def-is-empty">gnome_canvas_path_def_is_empty</link>  (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-canvas-path-def-has-currentpoint">gnome_canvas_path_def_has_currentpoint</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
void        <link linkend="gnome-canvas-path-def-currentpoint">gnome_canvas_path_def_currentpoint</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="ArtPoint">ArtPoint</link> *p);
<link linkend="ArtBpath">ArtBpath</link>*   <link linkend="gnome-canvas-path-def-last-bpath">gnome_canvas_path_def_last_bpath</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="ArtBpath">ArtBpath</link>*   <link linkend="gnome-canvas-path-def-first-bpath">gnome_canvas_path_def_first_bpath</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-canvas-path-def-any-open">gnome_canvas_path_def_any_open</link>  (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-canvas-path-def-all-open">gnome_canvas_path_def_all_open</link>  (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-canvas-path-def-any-closed">gnome_canvas_path_def_any_closed</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-canvas-path-def-all-closed">gnome_canvas_path_def_all_closed</link>
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeCanvasPathDef">struct GnomeCanvasPathDef</title>
<programlisting>struct GnomeCanvasPathDef;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-new">gnome_canvas_path_def_new ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_new
                                            (void);</programlisting>
<para>
This function creates a new empty <link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the new canvas path definition. 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-new-sized">gnome_canvas_path_def_new_sized ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_new_sized
                                            (<link linkend="gint">gint</link> length);</programlisting>
<para>
This funtion creates a new <link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link> with <parameter>length</parameter>
number of points allocated. It is useful, if you know the exact
number of points in path, so you can avoid automatic point
array reallocation.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>length</parameter>&nbsp;:</entry>
<entry> number of points to allocate for the path
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the new canvas path definition
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-new-from-bpath">gnome_canvas_path_def_new_from_bpath ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_new_from_bpath
                                            (<link linkend="ArtBpath">ArtBpath</link> *bpath);</programlisting>
<para>
This function constructs a new <link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link> and uses the
passed <parameter>bpath</parameter> as the contents.  The passed bpath should not be
static as the path definition is editable when constructed with
this function. Also, passed bpath will be freed with art_free, if
path is destroyed, so use it with caution.
For constructing a <link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link>
from (non-modifiable) bpath use
<link linkend="gnome-canvas-path-def-new-from-static-bpath">gnome_canvas_path_def_new_from_static_bpath</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>bpath</parameter>&nbsp;:</entry>
<entry> libart bezier path
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the new canvas path definition that is populated with the
passed bezier path, if the <parameter>bpath</parameter> is bad NULL is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-new-from-static-bpath">gnome_canvas_path_def_new_from_static_bpath ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_new_from_static_bpath
                                            (<link linkend="ArtBpath">ArtBpath</link> *bpath);</programlisting>
<para>
This function constructs a new <link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link> and
references the passed <parameter>bpath</parameter> as its contents.  The
<link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link> returned from this function is to be
considered static and non-editable (meaning you cannot change the
path from what you passed in <parameter>bpath</parameter>). The bpath will not be freed,
if path will be destroyed, so use it with caution.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>bpath</parameter>&nbsp;:</entry>
<entry> libart bezier path
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the new canvas path definition that references the passed
<parameter>bpath</parameter>, or if the path is bad NULL is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-new-from-foreign-bpath">gnome_canvas_path_def_new_from_foreign_bpath ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_new_from_foreign_bpath
                                            (<link linkend="ArtBpath">ArtBpath</link> *bpath);</programlisting>
<para>
This function constructs a new <link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link> and
duplicates the contents of the passed <parameter>bpath</parameter> in the definition.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>bpath</parameter>&nbsp;:</entry>
<entry> libart bezier path
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the newly created <link linkend="gnome-canvas-path-def">gnome_canvas_path_def</link> or NULL if the
path is invalid.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-ref">gnome_canvas_path_def_ref ()</title>
<programlisting>void        gnome_canvas_path_def_ref       (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
Increment the reference count of the GnomeCanvasPathDef.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-finish">gnome_canvas_path_def_finish ()</title>
<programlisting>void        gnome_canvas_path_def_finish    (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
Trims dynamic point array to exact length of path.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-ensure-space">gnome_canvas_path_def_ensure_space ()</title>
<programlisting>void        gnome_canvas_path_def_ensure_space
                                            (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gint">gint</link> space);</programlisting>
<para>
This function ensures that enough space for <parameter>space</parameter> points is
allocated at the end of the path.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><parameter>space</parameter>&nbsp;:</entry>
<entry> number of points to guarantee are allocated at the end of
the path.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-copy">gnome_canvas_path_def_copy ()</title>
<programlisting>void        gnome_canvas_path_def_copy      (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *dst,
                                             const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *src);</programlisting>
<para>
This function copies the contents <parameter>src</parameter> to <parameter>dest</parameter>. The old <parameter>dest</parameter> path
array is freed and <parameter>dest</parameter> is marked as non-static (editable),
regardless of the status of <parameter>src</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dst</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef where the contents of <parameter>src</parameter> will be stored.
</entry></row>
<row><entry align="right"><parameter>src</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef whose contents will be copied it <parameter>src</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-duplicate">gnome_canvas_path_def_duplicate ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_duplicate
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function duplicates the passed <parameter>path</parameter>. The new path is
marked as non-static regardless of the state of original.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef to duplicate
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a GnomeCanvasPathDef which is a duplicate of <parameter>path</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-concat">gnome_canvas_path_def_concat ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_concat
                                            (const <link linkend="GSList">GSList</link> *list);</programlisting>
<para>
This function concatenates a list of GnomeCanvasPathDefs into one
newly created GnomeCanvasPathDef.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry> a GSList of GnomeCanvasPathDefs to concatenate into one new
path.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new GnomeCanvasPathDef
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-split">gnome_canvas_path_def_split ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gnome_canvas_path_def_split     (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function splits the passed <parameter>path</parameter> into a list of
GnomeCanvasPathDefs which represent each segment of the origional
path.  The path is split when ever an ART_MOVETO or ART_MOVETO_OPEN
is encountered. The closedness of resulting paths is set accordingly
to closedness of corresponding segment.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a list of GnomeCanvasPathDef(s).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-open-parts">gnome_canvas_path_def_open_parts ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_open_parts
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function creates a new GnomeCanvasPathDef that contains all of
the open segments on the passed <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new GnomeCanvasPathDef that contains all of the open segemtns in <parameter>path</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-closed-parts">gnome_canvas_path_def_closed_parts ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_closed_parts
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns a new GnomeCanvasPathDef that contains the
all of close parts of passed <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new GnomeCanvasPathDef that contains all of the closed
parts of passed <parameter>path</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-close-all">gnome_canvas_path_def_close_all ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_path_def_close_all
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function closes all of the open segments in the passed path
and returns a new GnomeCanvasPathDef.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a GnomeCanvasPathDef that contains the contents of <parameter>path</parameter>
but has modified the path is fully closed
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-unref">gnome_canvas_path_def_unref ()</title>
<programlisting>void        gnome_canvas_path_def_unref     (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
Decrease the reference count of the passed <parameter>path</parameter>.  If the reference
count is &lt; 1 the path is deallocated.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-reset">gnome_canvas_path_def_reset ()</title>
<programlisting>void        gnome_canvas_path_def_reset     (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function clears the contents of the passed <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-moveto">gnome_canvas_path_def_moveto ()</title>
<programlisting>void        gnome_canvas_path_def_moveto    (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x,
                                             <link linkend="gdouble">gdouble</link> y);</programlisting>
<para>
This function adds starts new subpath on <parameter>path</parameter>, and sets its
starting point to <parameter>x</parameter> and <parameter>y</parameter>. If current subpath is empty, it
simply changes its starting coordinates to new values.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> x coordinate
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> y coordinate
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-lineto">gnome_canvas_path_def_lineto ()</title>
<programlisting>void        gnome_canvas_path_def_lineto    (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x,
                                             <link linkend="gdouble">gdouble</link> y);</programlisting>
<para>
This function add a line segment to the passed <parameter>path</parameter> with the
specified <parameter>x</parameter> and <parameter>y</parameter> coordinates.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> x coordinate
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> y coordinate
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-lineto-moving">gnome_canvas_path_def_lineto_moving ()</title>
<programlisting>void        gnome_canvas_path_def_lineto_moving
                                            (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x,
                                             <link linkend="gdouble">gdouble</link> y);</programlisting>
<para>
This functions adds a new line segment with loose endpoint to the path, or
if endpoint is already loose, changes its coordinates to <parameter>x</parameter>, <parameter>y</parameter>. You
can change the coordinates of loose endpoint as many times as you want,
the last ones set will be fixed, if you continue line. This is useful
for handling drawing with mouse.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> x coordinate
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> y coordinate
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-curveto">gnome_canvas_path_def_curveto ()</title>
<programlisting>void        gnome_canvas_path_def_curveto   (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="gdouble">gdouble</link> x0,
                                             <link linkend="gdouble">gdouble</link> y0,
                                             <link linkend="gdouble">gdouble</link> x1,
                                             <link linkend="gdouble">gdouble</link> y1,
                                             <link linkend="gdouble">gdouble</link> x2,
                                             <link linkend="gdouble">gdouble</link> y2);</programlisting>
<para>
This function adds a bezier curve segment to the path definition.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><parameter>x0</parameter>&nbsp;:</entry>
<entry> first control point x coordinate
</entry></row>
<row><entry align="right"><parameter>y0</parameter>&nbsp;:</entry>
<entry> first control point y coordinate
</entry></row>
<row><entry align="right"><parameter>x1</parameter>&nbsp;:</entry>
<entry> second control point x coordinate
</entry></row>
<row><entry align="right"><parameter>y1</parameter>&nbsp;:</entry>
<entry> second control point y coordinate
</entry></row>
<row><entry align="right"><parameter>x2</parameter>&nbsp;:</entry>
<entry> end of curve x coordinate
</entry></row>
<row><entry align="right"><parameter>y2</parameter>&nbsp;:</entry>
<entry> end of curve y coordinate
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-closepath">gnome_canvas_path_def_closepath ()</title>
<programlisting>void        gnome_canvas_path_def_closepath (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function closes the last subpath of <parameter>path</parameter>, adding a ART_LINETO to
subpath starting point, if needed and changing starting pathcode to
ART_MOVETO</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-closepath-current">gnome_canvas_path_def_closepath_current ()</title>
<programlisting>void        gnome_canvas_path_def_closepath_current
                                            (<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function closes the last subpath by setting the coordinates of
the endpoint of the last segment (line or curve) to starting point.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-bpath">gnome_canvas_path_def_bpath ()</title>
<programlisting><link linkend="ArtBpath">ArtBpath</link>*   gnome_canvas_path_def_bpath     (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns a ArtBpath that consists of the path
definition.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> ArtBpath
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-length">gnome_canvas_path_def_length ()</title>
<programlisting><link linkend="gint">gint</link>        gnome_canvas_path_def_length    (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns the length of the path definition.  Not
Euclidian length of the path but rather the number of points on the
path.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> integer, number of points on the path.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-is-empty">gnome_canvas_path_def_is_empty ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_canvas_path_def_is_empty  (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function is a boolean test to see if the path is empty,
meaning containing no line segments.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> boolean, indicating if the path is empty.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-has-currentpoint">gnome_canvas_path_def_has_currentpoint ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_canvas_path_def_has_currentpoint
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function is a boolean test checking to see if the path has a
current point defined. Current point will be set by line operators,
and cleared by closing subpath.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathdef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> boolean, indicating if the path has a current point defined.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-currentpoint">gnome_canvas_path_def_currentpoint ()</title>
<programlisting>void        gnome_canvas_path_def_currentpoint
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path,
                                             <link linkend="ArtPoint">ArtPoint</link> *p);</programlisting>
<para>
Stores the current point of the path definition in the passed ArtPoint <parameter>p</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><parameter>p</parameter>&nbsp;:</entry>
<entry> a ArtPoint where to store the current point
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-last-bpath">gnome_canvas_path_def_last_bpath ()</title>
<programlisting><link linkend="ArtBpath">ArtBpath</link>*   gnome_canvas_path_def_last_bpath
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns pointer to the last ArtBpath segment in the path
definition.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> ArtBpath, being the last segment in the path definition or
null if no line segments have been defined.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-first-bpath">gnome_canvas_path_def_first_bpath ()</title>
<programlisting><link linkend="ArtBpath">ArtBpath</link>*   gnome_canvas_path_def_first_bpath
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns the first ArtBpath point in the definition.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> ArtBpath being the first point in the path definition or
null if no points are defined
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-any-open">gnome_canvas_path_def_any_open ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_canvas_path_def_any_open  (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns a boolean value indicating if the path has
any open segments.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> boolean, indicating if the path has any open segments.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-all-open">gnome_canvas_path_def_all_open ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_canvas_path_def_all_open  (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns a boolean value indicating if the path only
contains open segments.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> boolean, indicating if the path has all open segments.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-any-closed">gnome_canvas_path_def_any_closed ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_canvas_path_def_any_closed
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns a boolean valid indicating if the path has
any closed segements.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> boolean, indicating if the path has any closed segments.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-path-def-all-closed">gnome_canvas_path_def_all_closed ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_canvas_path_def_all_closed
                                            (const <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *path);</programlisting>
<para>
This function returns a boolean value indicating if the path only
contains closed segments.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a GnomeCanvasPathDef
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> boolean, indicating if the path has all closed segments.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
