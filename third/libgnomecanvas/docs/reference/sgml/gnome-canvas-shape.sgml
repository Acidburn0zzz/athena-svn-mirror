<refentry id="libgnomecanvas-GnomeCanvasShape">
<refmeta>
<refentrytitle>GnomeCanvasShape</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMECANVAS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GnomeCanvasShape</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;libgnomecanvas/libgnomecanvas.h&gt;


struct      <link linkend="GnomeCanvasShape">GnomeCanvasShape</link>;
struct      <link linkend="GnomeCanvasShapePriv">GnomeCanvasShapePriv</link>;

void        <link linkend="gnome-canvas-shape-set-path-def">gnome_canvas_shape_set_path_def</link> (<link linkend="GnomeCanvasShape">GnomeCanvasShape</link> *shape,
                                             <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *def);
<link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* <link linkend="gnome-canvas-shape-get-path-def">gnome_canvas_shape_get_path_def</link>
                                            (<link linkend="GnomeCanvasShape">GnomeCanvasShape</link> *shape);

</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeCanvasShape">struct GnomeCanvasShape</title>
<programlisting>struct GnomeCanvasShape {

	GnomeCanvasItem item;

	GnomeCanvasShapePriv *priv;	/* Private data */
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeCanvasShapePriv">struct GnomeCanvasShapePriv</title>
<programlisting>struct GnomeCanvasShapePriv;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-shape-set-path-def">gnome_canvas_shape_set_path_def ()</title>
<programlisting>void        gnome_canvas_shape_set_path_def (<link linkend="GnomeCanvasShape">GnomeCanvasShape</link> *shape,
                                             <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> *def);</programlisting>
<para>
This function sets the the GnomeCanvasPathDef used by the
GnomeCanvasShape. Notice, that it does not request updates, as
it is meant to be used from item implementations, from inside
update queue.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>shape</parameter>&nbsp;:</term>
<listitem><simpara> a GnomeCanvasShape
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>def</parameter>&nbsp;:</term>
<listitem><simpara> a GnomeCanvasPathDef 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-canvas-shape-get-path-def">gnome_canvas_shape_get_path_def ()</title>
<programlisting><link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link>* gnome_canvas_shape_get_path_def
                                            (<link linkend="GnomeCanvasShape">GnomeCanvasShape</link> *shape);</programlisting>
<para>
This function returns the <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> that the shape
currently uses.  It adds a reference to the <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> and
returns it, if there is not a <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> set for the shape
it returns NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>shape</parameter>&nbsp;:</term>
<listitem><simpara> a GnomeCanvasShape
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="GnomeCanvasPathDef">GnomeCanvasPathDef</link> or NULL if none is set for the shape.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
