
/* $Id: eazelproxy.idl,v 1.1.1.1 2001-01-16 15:26:06 ghudson Exp $
 * 
 * Copyright (C) 2000 Eazel, Inc
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Author:  Michael Fleming <mfleming@eazel.com>
 *
 */

module EazelProxy {
	enum LoginState { 
		UNAUTHENTICATED, 
		AUTHENTICATING, 
		AUTHENTICATED, 
		PASSWORD_CHANGING
	};

	exception NoDefaultUser {};
	exception NoSuchUser {};

	struct AuthnFailInfo {
		long	code;
		string	http_result;
	};

	struct User {
		string		user_name;
		LoginState 	login_state;
		unsigned short 	proxy_port;
		boolean		is_default;
		string		services_redirect_uri;
		string		services_login_path;
		string		login_http_response;
	};

	typedef sequence<User> UserList;

	interface AuthnCallback {
		void succeeded (in User user); 
		void failed (in User user, in AuthnFailInfo fail_info);
	};

	interface UserListener {
		void user_authenticated (in User user);
		void user_authenticated_no_longer (in User user, in AuthnFailInfo info);
		void user_logout (in User user);
	};

	// this is fairly similar to the above User structure... hmm.
	struct AuthnInfo {
		string		username;
		string		password;
		string		services_redirect_uri;	// may be "" to use the default
		string		services_login_path;	// may be "" to use the default
	};

	enum AuthnPromptKind {
		Initial,		// This user is being authned for a
					// new session
		InitialRetry,		// Initial auth, a try has failed
		InitialFail,		// Initial auth, repeated attempts have failed
					// (reply to this call is ignored)
		Reauthn,		// Reauthenticate existing session
		ReauthnRetry,		// Reauthn, a try has failed
		ReauthnFail		// Reauth, repeated attempts have failed 
					// (reply to this call is ignored)
	};

	interface UserPrompter {
		boolean		prompt_authenticate (
					in User user,
					in AuthnPromptKind kind,
					out AuthnInfo authninfo
				);
	};

	interface UserControl {
		User get_default_user() raises (NoDefaultUser);
		UserList get_active_users();
		void prompt_authenticate_user (
			in AuthnInfo authinfo, 
			in boolean is_default, 
			in UserPrompter prompter,
			in AuthnCallback callback
		);
		void authenticate_user (
			in AuthnInfo authinfo, 
			in boolean is_default, 
			in AuthnCallback callback
		);
		boolean set_new_user_password (
			in AuthnInfo authinfo,
			in string new_password,
			in AuthnCallback callback
		) raises (NoSuchUser); 
		string get_authn_header_for_port (
			in unsigned short port_number,
			in string path,
			in string method
		);
		boolean logout_user (in unsigned short port_number);

		void add_listener (in UserListener listener);
		void remove_listener (in UserListener listener);
	};
};
