/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef eazelproxy_H
#define eazelproxy_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(_EazelProxy_LoginState_defined)
#define _EazelProxy_LoginState_defined 1
   typedef enum
   {
      EazelProxy_UNAUTHENTICATED,
      EazelProxy_AUTHENTICATING,
      EazelProxy_AUTHENTICATED,
      EazelProxy_PASSWORD_CHANGING
   }
   EazelProxy_LoginState;
#if !defined(TC_IMPL_TC_EazelProxy_LoginState_0)
#define TC_IMPL_TC_EazelProxy_LoginState_0 'e'
#define TC_IMPL_TC_EazelProxy_LoginState_1 'a'
#define TC_IMPL_TC_EazelProxy_LoginState_2 'z'
#define TC_IMPL_TC_EazelProxy_LoginState_3 'e'
#define TC_IMPL_TC_EazelProxy_LoginState_4 'l'
#define TC_IMPL_TC_EazelProxy_LoginState_5 'p'
#define TC_IMPL_TC_EazelProxy_LoginState_6 'r'
#define TC_IMPL_TC_EazelProxy_LoginState_7 'o'
#define TC_IMPL_TC_EazelProxy_LoginState_8 'x'
#define TC_IMPL_TC_EazelProxy_LoginState_9 'y'
   extern const struct CORBA_TypeCode_struct TC_EazelProxy_LoginState_struct;
#define TC_EazelProxy_LoginState ((CORBA_TypeCode)&TC_EazelProxy_LoginState_struct)
#endif
#endif
#define ex_EazelProxy_NoDefaultUser "IDL:EazelProxy/NoDefaultUser:1.0"
   void _ORBIT_EazelProxy_NoDefaultUser_demarshal(GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev);
   void _ORBIT_EazelProxy_NoDefaultUser_marshal(GIOPSendBuffer *
						_ORBIT_send_buffer,
						CORBA_Environment * ev);
#if !defined(_EazelProxy_NoDefaultUser_defined)
#define _EazelProxy_NoDefaultUser_defined 1
   typedef struct
   {
      int dummy;
   }
   EazelProxy_NoDefaultUser;

#if !defined(TC_IMPL_TC_EazelProxy_NoDefaultUser_0)
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_0 'e'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_1 'a'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_2 'z'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_3 'e'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_4 'l'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_5 'p'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_6 'r'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_7 'o'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_8 'x'
#define TC_IMPL_TC_EazelProxy_NoDefaultUser_9 'y'
   extern const struct CORBA_TypeCode_struct
      TC_EazelProxy_NoDefaultUser_struct;
#define TC_EazelProxy_NoDefaultUser ((CORBA_TypeCode)&TC_EazelProxy_NoDefaultUser_struct)
#endif
#define EazelProxy_NoDefaultUser__alloc() NULL
   extern gpointer EazelProxy_NoDefaultUser__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_EazelProxy_NoSuchUser "IDL:EazelProxy/NoSuchUser:1.0"
   void _ORBIT_EazelProxy_NoSuchUser_demarshal(GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev);
   void _ORBIT_EazelProxy_NoSuchUser_marshal(GIOPSendBuffer *
					     _ORBIT_send_buffer,
					     CORBA_Environment * ev);
#if !defined(_EazelProxy_NoSuchUser_defined)
#define _EazelProxy_NoSuchUser_defined 1
   typedef struct
   {
      int dummy;
   }
   EazelProxy_NoSuchUser;

#if !defined(TC_IMPL_TC_EazelProxy_NoSuchUser_0)
#define TC_IMPL_TC_EazelProxy_NoSuchUser_0 'e'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_1 'a'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_2 'z'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_3 'e'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_4 'l'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_5 'p'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_6 'r'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_7 'o'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_8 'x'
#define TC_IMPL_TC_EazelProxy_NoSuchUser_9 'y'
   extern const struct CORBA_TypeCode_struct TC_EazelProxy_NoSuchUser_struct;
#define TC_EazelProxy_NoSuchUser ((CORBA_TypeCode)&TC_EazelProxy_NoSuchUser_struct)
#endif
#define EazelProxy_NoSuchUser__alloc() NULL
   extern gpointer EazelProxy_NoSuchUser__free(gpointer mem, gpointer dat,
					       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_EazelProxy_AuthnFailInfo_defined)
#define _EazelProxy_AuthnFailInfo_defined 1
   typedef struct
   {
      CORBA_long code;
      CORBA_char *http_result;
   }
   EazelProxy_AuthnFailInfo;

#if !defined(TC_IMPL_TC_EazelProxy_AuthnFailInfo_0)
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_0 'e'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_1 'a'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_2 'z'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_3 'e'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_4 'l'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_5 'p'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_6 'r'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_7 'o'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_8 'x'
#define TC_IMPL_TC_EazelProxy_AuthnFailInfo_9 'y'
   extern const struct CORBA_TypeCode_struct
      TC_EazelProxy_AuthnFailInfo_struct;
#define TC_EazelProxy_AuthnFailInfo ((CORBA_TypeCode)&TC_EazelProxy_AuthnFailInfo_struct)
#endif
   extern EazelProxy_AuthnFailInfo *EazelProxy_AuthnFailInfo__alloc(void);
   extern gpointer EazelProxy_AuthnFailInfo__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_EazelProxy_User_defined)
#define _EazelProxy_User_defined 1
   typedef struct
   {
      CORBA_char *user_name;
      EazelProxy_LoginState login_state;
      CORBA_unsigned_short proxy_port;
      CORBA_boolean is_default;
      CORBA_char *services_redirect_uri;
      CORBA_char *services_login_path;
      CORBA_char *login_http_response;
   }
   EazelProxy_User;

#if !defined(TC_IMPL_TC_EazelProxy_User_0)
#define TC_IMPL_TC_EazelProxy_User_0 'e'
#define TC_IMPL_TC_EazelProxy_User_1 'a'
#define TC_IMPL_TC_EazelProxy_User_2 'z'
#define TC_IMPL_TC_EazelProxy_User_3 'e'
#define TC_IMPL_TC_EazelProxy_User_4 'l'
#define TC_IMPL_TC_EazelProxy_User_5 'p'
#define TC_IMPL_TC_EazelProxy_User_6 'r'
#define TC_IMPL_TC_EazelProxy_User_7 'o'
#define TC_IMPL_TC_EazelProxy_User_8 'x'
#define TC_IMPL_TC_EazelProxy_User_9 'y'
   extern const struct CORBA_TypeCode_struct TC_EazelProxy_User_struct;
#define TC_EazelProxy_User ((CORBA_TypeCode)&TC_EazelProxy_User_struct)
#endif
   extern EazelProxy_User *EazelProxy_User__alloc(void);
   extern gpointer EazelProxy_User__free(gpointer mem, gpointer dat,
					 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_EazelProxy_User) && !defined(_CORBA_sequence_EazelProxy_User_defined)
#define ORBIT_DECL_CORBA_sequence_EazelProxy_User 1
#define _CORBA_sequence_EazelProxy_User_defined 1
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_0 'e'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_1 'a'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_2 'z'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_3 'e'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_4 'l'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_5 'p'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_6 'r'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_7 'o'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_8 'x'
#define ORBIT_IMPL_CORBA_sequence_EazelProxy_User_9 'y'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      EazelProxy_User *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_EazelProxy_User;
#if !defined(TC_IMPL_TC_CORBA_sequence_EazelProxy_User_0)
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_0 'e'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_1 'a'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_2 'z'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_3 'e'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_4 'l'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_5 'p'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_6 'r'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_7 'o'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_8 'x'
#define TC_IMPL_TC_CORBA_sequence_EazelProxy_User_9 'y'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_EazelProxy_User_struct;
#define TC_CORBA_sequence_EazelProxy_User ((CORBA_TypeCode)&TC_CORBA_sequence_EazelProxy_User_struct)
#endif
   extern CORBA_sequence_EazelProxy_User
      *CORBA_sequence_EazelProxy_User__alloc(void);
   extern gpointer CORBA_sequence_EazelProxy_User__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
   EazelProxy_User
      *CORBA_sequence_EazelProxy_User_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_EazelProxy_UserList_defined)
#define _EazelProxy_UserList_defined 1
   typedef CORBA_sequence_EazelProxy_User EazelProxy_UserList;
#if !defined(TC_IMPL_TC_EazelProxy_UserList_0)
#define TC_IMPL_TC_EazelProxy_UserList_0 'e'
#define TC_IMPL_TC_EazelProxy_UserList_1 'a'
#define TC_IMPL_TC_EazelProxy_UserList_2 'z'
#define TC_IMPL_TC_EazelProxy_UserList_3 'e'
#define TC_IMPL_TC_EazelProxy_UserList_4 'l'
#define TC_IMPL_TC_EazelProxy_UserList_5 'p'
#define TC_IMPL_TC_EazelProxy_UserList_6 'r'
#define TC_IMPL_TC_EazelProxy_UserList_7 'o'
#define TC_IMPL_TC_EazelProxy_UserList_8 'x'
#define TC_IMPL_TC_EazelProxy_UserList_9 'y'
   extern const struct CORBA_TypeCode_struct TC_EazelProxy_UserList_struct;
#define TC_EazelProxy_UserList ((CORBA_TypeCode)&TC_EazelProxy_UserList_struct)
#endif
   extern EazelProxy_UserList *EazelProxy_UserList__alloc(void);
   extern gpointer EazelProxy_UserList__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_EazelProxy_AuthnCallback) && !defined(_EazelProxy_AuthnCallback_defined)
#define ORBIT_DECL_EazelProxy_AuthnCallback 1
#define _EazelProxy_AuthnCallback_defined 1
#define EazelProxy_AuthnCallback__free CORBA_Object__free
   typedef CORBA_Object EazelProxy_AuthnCallback;
   extern CORBA_unsigned_long EazelProxy_AuthnCallback__classid;
#if !defined(TC_IMPL_TC_EazelProxy_AuthnCallback_0)
#define TC_IMPL_TC_EazelProxy_AuthnCallback_0 'e'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_1 'a'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_2 'z'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_3 'e'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_4 'l'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_5 'p'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_6 'r'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_7 'o'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_8 'x'
#define TC_IMPL_TC_EazelProxy_AuthnCallback_9 'y'
   extern const struct CORBA_TypeCode_struct
      TC_EazelProxy_AuthnCallback_struct;
#define TC_EazelProxy_AuthnCallback ((CORBA_TypeCode)&TC_EazelProxy_AuthnCallback_struct)
#endif
#endif
#if !defined(ORBIT_DECL_EazelProxy_UserListener) && !defined(_EazelProxy_UserListener_defined)
#define ORBIT_DECL_EazelProxy_UserListener 1
#define _EazelProxy_UserListener_defined 1
#define EazelProxy_UserListener__free CORBA_Object__free
   typedef CORBA_Object EazelProxy_UserListener;
   extern CORBA_unsigned_long EazelProxy_UserListener__classid;
#if !defined(TC_IMPL_TC_EazelProxy_UserListener_0)
#define TC_IMPL_TC_EazelProxy_UserListener_0 'e'
#define TC_IMPL_TC_EazelProxy_UserListener_1 'a'
#define TC_IMPL_TC_EazelProxy_UserListener_2 'z'
#define TC_IMPL_TC_EazelProxy_UserListener_3 'e'
#define TC_IMPL_TC_EazelProxy_UserListener_4 'l'
#define TC_IMPL_TC_EazelProxy_UserListener_5 'p'
#define TC_IMPL_TC_EazelProxy_UserListener_6 'r'
#define TC_IMPL_TC_EazelProxy_UserListener_7 'o'
#define TC_IMPL_TC_EazelProxy_UserListener_8 'x'
#define TC_IMPL_TC_EazelProxy_UserListener_9 'y'
   extern const struct CORBA_TypeCode_struct
      TC_EazelProxy_UserListener_struct;
#define TC_EazelProxy_UserListener ((CORBA_TypeCode)&TC_EazelProxy_UserListener_struct)
#endif
#endif
#if !defined(_EazelProxy_AuthnInfo_defined)
#define _EazelProxy_AuthnInfo_defined 1
   typedef struct
   {
      CORBA_char *username;
      CORBA_char *password;
      CORBA_char *services_redirect_uri;
      CORBA_char *services_login_path;
   }
   EazelProxy_AuthnInfo;

#if !defined(TC_IMPL_TC_EazelProxy_AuthnInfo_0)
#define TC_IMPL_TC_EazelProxy_AuthnInfo_0 'e'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_1 'a'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_2 'z'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_3 'e'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_4 'l'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_5 'p'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_6 'r'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_7 'o'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_8 'x'
#define TC_IMPL_TC_EazelProxy_AuthnInfo_9 'y'
   extern const struct CORBA_TypeCode_struct TC_EazelProxy_AuthnInfo_struct;
#define TC_EazelProxy_AuthnInfo ((CORBA_TypeCode)&TC_EazelProxy_AuthnInfo_struct)
#endif
   extern EazelProxy_AuthnInfo *EazelProxy_AuthnInfo__alloc(void);
   extern gpointer EazelProxy_AuthnInfo__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_EazelProxy_AuthnPromptKind_defined)
#define _EazelProxy_AuthnPromptKind_defined 1
   typedef enum
   {
      EazelProxy_Initial,
      EazelProxy_InitialRetry,
      EazelProxy_InitialFail,
      EazelProxy_Reauthn,
      EazelProxy_ReauthnRetry,
      EazelProxy_ReauthnFail
   }
   EazelProxy_AuthnPromptKind;
#if !defined(TC_IMPL_TC_EazelProxy_AuthnPromptKind_0)
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_0 'e'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_1 'a'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_2 'z'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_3 'e'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_4 'l'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_5 'p'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_6 'r'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_7 'o'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_8 'x'
#define TC_IMPL_TC_EazelProxy_AuthnPromptKind_9 'y'
   extern const struct CORBA_TypeCode_struct
      TC_EazelProxy_AuthnPromptKind_struct;
#define TC_EazelProxy_AuthnPromptKind ((CORBA_TypeCode)&TC_EazelProxy_AuthnPromptKind_struct)
#endif
#endif
#if !defined(ORBIT_DECL_EazelProxy_UserPrompter) && !defined(_EazelProxy_UserPrompter_defined)
#define ORBIT_DECL_EazelProxy_UserPrompter 1
#define _EazelProxy_UserPrompter_defined 1
#define EazelProxy_UserPrompter__free CORBA_Object__free
   typedef CORBA_Object EazelProxy_UserPrompter;
   extern CORBA_unsigned_long EazelProxy_UserPrompter__classid;
#if !defined(TC_IMPL_TC_EazelProxy_UserPrompter_0)
#define TC_IMPL_TC_EazelProxy_UserPrompter_0 'e'
#define TC_IMPL_TC_EazelProxy_UserPrompter_1 'a'
#define TC_IMPL_TC_EazelProxy_UserPrompter_2 'z'
#define TC_IMPL_TC_EazelProxy_UserPrompter_3 'e'
#define TC_IMPL_TC_EazelProxy_UserPrompter_4 'l'
#define TC_IMPL_TC_EazelProxy_UserPrompter_5 'p'
#define TC_IMPL_TC_EazelProxy_UserPrompter_6 'r'
#define TC_IMPL_TC_EazelProxy_UserPrompter_7 'o'
#define TC_IMPL_TC_EazelProxy_UserPrompter_8 'x'
#define TC_IMPL_TC_EazelProxy_UserPrompter_9 'y'
   extern const struct CORBA_TypeCode_struct
      TC_EazelProxy_UserPrompter_struct;
#define TC_EazelProxy_UserPrompter ((CORBA_TypeCode)&TC_EazelProxy_UserPrompter_struct)
#endif
#endif
#if !defined(ORBIT_DECL_EazelProxy_UserControl) && !defined(_EazelProxy_UserControl_defined)
#define ORBIT_DECL_EazelProxy_UserControl 1
#define _EazelProxy_UserControl_defined 1
#define EazelProxy_UserControl__free CORBA_Object__free
   typedef CORBA_Object EazelProxy_UserControl;
   extern CORBA_unsigned_long EazelProxy_UserControl__classid;
#if !defined(TC_IMPL_TC_EazelProxy_UserControl_0)
#define TC_IMPL_TC_EazelProxy_UserControl_0 'e'
#define TC_IMPL_TC_EazelProxy_UserControl_1 'a'
#define TC_IMPL_TC_EazelProxy_UserControl_2 'z'
#define TC_IMPL_TC_EazelProxy_UserControl_3 'e'
#define TC_IMPL_TC_EazelProxy_UserControl_4 'l'
#define TC_IMPL_TC_EazelProxy_UserControl_5 'p'
#define TC_IMPL_TC_EazelProxy_UserControl_6 'r'
#define TC_IMPL_TC_EazelProxy_UserControl_7 'o'
#define TC_IMPL_TC_EazelProxy_UserControl_8 'x'
#define TC_IMPL_TC_EazelProxy_UserControl_9 'y'
   extern const struct CORBA_TypeCode_struct TC_EazelProxy_UserControl_struct;
#define TC_EazelProxy_UserControl ((CORBA_TypeCode)&TC_EazelProxy_UserControl_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*succeeded) (PortableServer_Servant _servant,
			 const EazelProxy_User * user,
			 CORBA_Environment * ev);
      void (*failed) (PortableServer_Servant _servant,
		      const EazelProxy_User * user,
		      const EazelProxy_AuthnFailInfo * fail_info,
		      CORBA_Environment * ev);
   }
   POA_EazelProxy_AuthnCallback__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_EazelProxy_AuthnCallback__epv *EazelProxy_AuthnCallback_epv;
   }
   POA_EazelProxy_AuthnCallback__vepv;
   typedef struct
   {
      void *_private;
      POA_EazelProxy_AuthnCallback__vepv *vepv;
   }
   POA_EazelProxy_AuthnCallback;
   extern void POA_EazelProxy_AuthnCallback__init(PortableServer_Servant
						  servant,
						  CORBA_Environment * ev);
   extern void POA_EazelProxy_AuthnCallback__fini(PortableServer_Servant
						  servant,
						  CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*user_authenticated) (PortableServer_Servant _servant,
				  const EazelProxy_User * user,
				  CORBA_Environment * ev);
      void (*user_authenticated_no_longer) (PortableServer_Servant _servant,
					    const EazelProxy_User * user,
					    const EazelProxy_AuthnFailInfo *
					    info, CORBA_Environment * ev);
      void (*user_logout) (PortableServer_Servant _servant,
			   const EazelProxy_User * user,
			   CORBA_Environment * ev);
   }
   POA_EazelProxy_UserListener__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_EazelProxy_UserListener__epv *EazelProxy_UserListener_epv;
   }
   POA_EazelProxy_UserListener__vepv;
   typedef struct
   {
      void *_private;
      POA_EazelProxy_UserListener__vepv *vepv;
   }
   POA_EazelProxy_UserListener;
   extern void POA_EazelProxy_UserListener__init(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   extern void POA_EazelProxy_UserListener__fini(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_boolean(*prompt_authenticate) (PortableServer_Servant _servant,
					      const EazelProxy_User * user,
					      const EazelProxy_AuthnPromptKind
					      kind,
					      EazelProxy_AuthnInfo **
					      authninfo,
					      CORBA_Environment * ev);
   }
   POA_EazelProxy_UserPrompter__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_EazelProxy_UserPrompter__epv *EazelProxy_UserPrompter_epv;
   }
   POA_EazelProxy_UserPrompter__vepv;
   typedef struct
   {
      void *_private;
      POA_EazelProxy_UserPrompter__vepv *vepv;
   }
   POA_EazelProxy_UserPrompter;
   extern void POA_EazelProxy_UserPrompter__init(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   extern void POA_EazelProxy_UserPrompter__fini(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      EazelProxy_User *(*get_default_user) (PortableServer_Servant _servant,
					    CORBA_Environment * ev);
      EazelProxy_UserList *(*get_active_users) (PortableServer_Servant
						_servant,
						CORBA_Environment * ev);
      void (*prompt_authenticate_user) (PortableServer_Servant _servant,
					const EazelProxy_AuthnInfo * authinfo,
					const CORBA_boolean is_default,
					const EazelProxy_UserPrompter
					prompter,
					const EazelProxy_AuthnCallback
					callback, CORBA_Environment * ev);
      void (*authenticate_user) (PortableServer_Servant _servant,
				 const EazelProxy_AuthnInfo * authinfo,
				 const CORBA_boolean is_default,
				 const EazelProxy_AuthnCallback callback,
				 CORBA_Environment * ev);
       CORBA_boolean(*set_new_user_password) (PortableServer_Servant _servant,
					      const EazelProxy_AuthnInfo *
					      authinfo,
					      const CORBA_char * new_password,
					      const EazelProxy_AuthnCallback
					      callback,
					      CORBA_Environment * ev);
      CORBA_char *(*get_authn_header_for_port) (PortableServer_Servant
						_servant,
						const CORBA_unsigned_short
						port_number,
						const CORBA_char * path,
						const CORBA_char * method,
						CORBA_Environment * ev);
       CORBA_boolean(*logout_user) (PortableServer_Servant _servant,
				    const CORBA_unsigned_short port_number,
				    CORBA_Environment * ev);
      void (*add_listener) (PortableServer_Servant _servant,
			    const EazelProxy_UserListener listener,
			    CORBA_Environment * ev);
      void (*remove_listener) (PortableServer_Servant _servant,
			       const EazelProxy_UserListener listener,
			       CORBA_Environment * ev);
   }
   POA_EazelProxy_UserControl__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_EazelProxy_UserControl__epv *EazelProxy_UserControl_epv;
   }
   POA_EazelProxy_UserControl__vepv;
   typedef struct
   {
      void *_private;
      POA_EazelProxy_UserControl__vepv *vepv;
   }
   POA_EazelProxy_UserControl;
   extern void POA_EazelProxy_UserControl__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_EazelProxy_UserControl__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);

/** prototypes **/
   void EazelProxy_AuthnCallback_succeeded(EazelProxy_AuthnCallback _obj,
					   const EazelProxy_User * user,
					   CORBA_Environment * ev);
   void EazelProxy_AuthnCallback_failed(EazelProxy_AuthnCallback _obj,
					const EazelProxy_User * user,
					const EazelProxy_AuthnFailInfo *
					fail_info, CORBA_Environment * ev);
   void EazelProxy_UserListener_user_authenticated(EazelProxy_UserListener
						   _obj,
						   const EazelProxy_User *
						   user,
						   CORBA_Environment * ev);
   void
      EazelProxy_UserListener_user_authenticated_no_longer
      (EazelProxy_UserListener _obj, const EazelProxy_User * user,
       const EazelProxy_AuthnFailInfo * info, CORBA_Environment * ev);
   void EazelProxy_UserListener_user_logout(EazelProxy_UserListener _obj,
					    const EazelProxy_User * user,
					    CORBA_Environment * ev);
   CORBA_boolean
      EazelProxy_UserPrompter_prompt_authenticate(EazelProxy_UserPrompter
						  _obj,
						  const EazelProxy_User *
						  user,
						  const
						  EazelProxy_AuthnPromptKind
						  kind,
						  EazelProxy_AuthnInfo **
						  authninfo,
						  CORBA_Environment * ev);
   EazelProxy_User
      *EazelProxy_UserControl_get_default_user(EazelProxy_UserControl _obj,
					       CORBA_Environment * ev);
   EazelProxy_UserList
      *EazelProxy_UserControl_get_active_users(EazelProxy_UserControl _obj,
					       CORBA_Environment * ev);
   void EazelProxy_UserControl_prompt_authenticate_user(EazelProxy_UserControl
							_obj,
							const
							EazelProxy_AuthnInfo *
							authinfo,
							const CORBA_boolean
							is_default,
							const
							EazelProxy_UserPrompter
							prompter,
							const
							EazelProxy_AuthnCallback
							callback,
							CORBA_Environment *
							ev);
   void EazelProxy_UserControl_authenticate_user(EazelProxy_UserControl _obj,
						 const EazelProxy_AuthnInfo *
						 authinfo,
						 const CORBA_boolean
						 is_default,
						 const
						 EazelProxy_AuthnCallback
						 callback,
						 CORBA_Environment * ev);
   CORBA_boolean
      EazelProxy_UserControl_set_new_user_password(EazelProxy_UserControl
						   _obj,
						   const EazelProxy_AuthnInfo
						   * authinfo,
						   const CORBA_char *
						   new_password,
						   const
						   EazelProxy_AuthnCallback
						   callback,
						   CORBA_Environment * ev);
   CORBA_char
      *EazelProxy_UserControl_get_authn_header_for_port(EazelProxy_UserControl
							_obj,
							const
							CORBA_unsigned_short
							port_number,
							const CORBA_char *
							path,
							const CORBA_char *
							method,
							CORBA_Environment *
							ev);
   CORBA_boolean EazelProxy_UserControl_logout_user(EazelProxy_UserControl
						    _obj,
						    const CORBA_unsigned_short
						    port_number,
						    CORBA_Environment * ev);
   void EazelProxy_UserControl_add_listener(EazelProxy_UserControl _obj,
					    const EazelProxy_UserListener
					    listener, CORBA_Environment * ev);
   void EazelProxy_UserControl_remove_listener(EazelProxy_UserControl _obj,
					       const EazelProxy_UserListener
					       listener,
					       CORBA_Environment * ev);

   void
      _ORBIT_skel_EazelProxy_AuthnCallback_succeeded
      (POA_EazelProxy_AuthnCallback * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_succeeded) (PortableServer_Servant _servant,
				const EazelProxy_User * user,
				CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_AuthnCallback_failed(POA_EazelProxy_AuthnCallback
						  * _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_failed)
						  (PortableServer_Servant
						   _servant,
						   const EazelProxy_User *
						   user,
						   const
						   EazelProxy_AuthnFailInfo *
						   fail_info,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserListener_user_authenticated
      (POA_EazelProxy_UserListener * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_user_authenticated) (PortableServer_Servant _servant,
					 const EazelProxy_User * user,
					 CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserListener_user_authenticated_no_longer
      (POA_EazelProxy_UserListener * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_user_authenticated_no_longer) (PortableServer_Servant
						   _servant,
						   const EazelProxy_User *
						   user,
						   const
						   EazelProxy_AuthnFailInfo *
						   info,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserListener_user_logout
      (POA_EazelProxy_UserListener * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_user_logout) (PortableServer_Servant _servant,
				  const EazelProxy_User * user,
				  CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserPrompter_prompt_authenticate
      (POA_EazelProxy_UserPrompter * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_prompt_authenticate) (PortableServer_Servant
						  _servant,
						  const EazelProxy_User *
						  user,
						  const
						  EazelProxy_AuthnPromptKind
						  kind,
						  EazelProxy_AuthnInfo **
						  authninfo,
						  CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_get_default_user
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       EazelProxy_User *
       (*_impl_get_default_user) (PortableServer_Servant _servant,
				  CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_get_active_users
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       EazelProxy_UserList *
       (*_impl_get_active_users) (PortableServer_Servant _servant,
				  CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_prompt_authenticate_user
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_prompt_authenticate_user) (PortableServer_Servant
					       _servant,
					       const EazelProxy_AuthnInfo *
					       authinfo,
					       const CORBA_boolean is_default,
					       const EazelProxy_UserPrompter
					       prompter,
					       const EazelProxy_AuthnCallback
					       callback,
					       CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_authenticate_user
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_authenticate_user) (PortableServer_Servant _servant,
					const EazelProxy_AuthnInfo * authinfo,
					const CORBA_boolean is_default,
					const EazelProxy_AuthnCallback
					callback, CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_set_new_user_password
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_set_new_user_password) (PortableServer_Servant
						    _servant,
						    const EazelProxy_AuthnInfo
						    * authinfo,
						    const CORBA_char *
						    new_password,
						    const
						    EazelProxy_AuthnCallback
						    callback,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_get_authn_header_for_port
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_char *
       (*_impl_get_authn_header_for_port) (PortableServer_Servant _servant,
					   const CORBA_unsigned_short
					   port_number,
					   const CORBA_char * path,
					   const CORBA_char * method,
					   CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_logout_user
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_logout_user) (PortableServer_Servant _servant,
					  const CORBA_unsigned_short
					  port_number,
					  CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_add_listener
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_add_listener) (PortableServer_Servant _servant,
				   const EazelProxy_UserListener listener,
				   CORBA_Environment * ev));
   void
      _ORBIT_skel_EazelProxy_UserControl_remove_listener
      (POA_EazelProxy_UserControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_remove_listener) (PortableServer_Servant _servant,
				      const EazelProxy_UserListener listener,
				      CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
