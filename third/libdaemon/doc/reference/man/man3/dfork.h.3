.TH "dfork.h" 3 "7 Apr 2004" "Version 0.6" "libdaemon" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dfork.h \- Contains an API for doing a daemonizing fork().  

.SH SYNOPSIS
.br
.PP
\fC#include <sys/types.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "pid_t \fBdaemon_fork\fP (void)"
.br
.RI "\fIDoes a daemonizing fork(). \fP"
.ti -1c
.RI "int \fBdaemon_retval_init\fP (void)"
.br
.RI "\fIAllocate and initialize resources required by the daemon_retval_xxx() functions. \fP"
.ti -1c
.RI "void \fBdaemon_retval_done\fP (void)"
.br
.RI "\fIFrees the resources allocated by \fBdaemon_retval_init()\fP. \fP"
.ti -1c
.RI "int \fBdaemon_retval_wait\fP (int timeout)"
.br
.RI "\fIReturn the value sent by the child via the \fBdaemon_retval_send()\fP function, but wait only the specified number of seconds before timing out and returning a negative number. \fP"
.ti -1c
.RI "int \fBdaemon_retval_send\fP (int s)"
.br
.RI "\fISend the specified integer to the parent process. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Contains an API for doing a daemonizing fork(). 

You may daemonize by calling \fBdaemon_fork()\fP, a function similar to the plain fork(). If you want to return a return value of the initialization procedure of the child from the parent, you may use the daemon_retval_xxx() functions.
.PP
Definition in file \fBdfork.h\fP.
.SH "Function Documentation"
.PP 
.SS "pid_t daemon_fork (void)"
.PP
Does a daemonizing fork(). For the new daemon process STDIN, STDOUT, STDERR are connected to /dev/null, the process is a session leader, the current directory is changed to /, the umask is set to 777. 
.PP
\fBReturns:\fP
.RS 4
On success, the PID of the child process is returned in the parent's thread of execution, and a 0 is returned in the child's thread of execution. On failure, -1 will be returned in the parent's context, no child process will be created, and errno will be set appropriately. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBtestd.c\fP.
.SS "void daemon_retval_done (void)"
.PP
Frees the resources allocated by \fBdaemon_retval_init()\fP. This should be called if neither \fBdaemon_retval_wait()\fP nor \fBdaemon_retval_send()\fP is called in the current process. The resources allocated by \fBdaemon_retval_init()\fP should be freed in both parent and daemon process. This may be achieved by using \fBdaemon_retval_wait()\fP resp. \fBdaemon_retval_send()\fP, or by using \fBdaemon_retval_done()\fP. 
.PP
\fBExamples: \fP
.in +1c
\fBtestd.c\fP.
.SS "int daemon_retval_init (void)"
.PP
Allocate and initialize resources required by the daemon_retval_xxx() functions. These functions allow the child to send a value to the parent after completing its initialisation. Call this in the parent before forking. 
.PP
\fBReturns:\fP
.RS 4
zero on success, nonzero on failure. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBtestd.c\fP.
.SS "int daemon_retval_send (int s)"
.PP
Send the specified integer to the parent process. Do not send -1 because this signifies a library error. Should be called just once from the daemon process only. A subsequent call to \fBdaemon_retval_done()\fP in the daemon is ignored. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The integer to pass to \fBdaemon_retval_wait()\fP in the parent process 
.RE
.PP
\fBReturns:\fP
.RS 4
Zero on success, nonzero on failure. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBtestd.c\fP.
.SS "int daemon_retval_wait (int timeout)"
.PP
Return the value sent by the child via the \fBdaemon_retval_send()\fP function, but wait only the specified number of seconds before timing out and returning a negative number. Should be called just once from the parent process only. A subsequent call to \fBdaemon_retval_done()\fP in the parent is ignored.
.PP
\fBParameters:\fP
.RS 4
\fItimeout\fP Thetimeout in seconds 
.RE
.PP
\fBReturns:\fP
.RS 4
The integer passed \fBdaemon_retval_send()\fP in the daemon process, or -1 on failure. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBtestd.c\fP.
.SH "Author"
.PP 
Generated automatically by Doxygen for libdaemon from the source code.
