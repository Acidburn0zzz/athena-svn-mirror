This is Info file ifhp.info, produced by Makeinfo-1.64 from the input
file /tmp/sgmltmp.ifhp7895.info.2.

   \input texinfo


File: ifhp.info,  Node: Predefined Options,  Next: Configuration Files,  Prev: Banners and OF Mode Operations,  Up: Top

Predefined Options
******************

   The following is a list of predefined options.
` *Note Tektronix Phaser and AppSocket Support:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Use Tektronix AppSocket
Protocol
` *Note Banners and OF Mode Operations:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' Enable OF banner printing using LANGUAGE
` *Note Banners and OF Mode Operations:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' PATHNAME of
PostScript banner file
` *Note Configuration File Paths:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]' Configuration file pathnames
` *Note crlf FLAG:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Do LF to CRLF
translation
` *Note Debug and Trace:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Debugging level
` *Note Text File Conversion:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]' Default job file language (ps, pcl, raw, text, etc)
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' PJL JOB command END = NNN
value
` *Note Text File Conversion:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]' Pathname of the UNIX file utility
` *Note Operation Configuration Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]' Force status reading from the printer if set
` *Note Text File Conversion:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
Specify job file language to be used (ps, pcl, raw, text, etc)
` *Note File Transfer and Error Status Monitoring:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Log
all status reports from printer if set
` *Note nullpad STRING:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' Send COUNT nulls to force full buffer
condition
` *Note Model Selection:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Specify model name
for configuration selection
` *Note Options Initialization and Setup:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]' Specify model name using a command line option value
` *Note PCL and PostScript End of Job Sequences:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' No PostScript EOJ (CTRL-D)
at start of job
` *Note PCL and PostScript End of Job Sequences:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' No PCL EOJ (CTRL-D) at start of job
` *Note Banners and OF Mode Operations:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]' Number of lines on a text page for banner printing
` *Note Banners and OF Mode Operations:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]' Number of columns on a text page for banner printing
` *Note Synchronization and Pagecounts:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]' Enable pagecounting using the specified lanague (pjl, ps)
` *Note Synchronization and Pagecounts:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ]' Send pagecount command at SECONDS interval
` *Note Synchronization and Pagecounts:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' PostScript code to get pagecount information
` *Note Synchronization and Pagecounts:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]' Timeout getting pagecount after SECONDS
` *Note Operation Configuration Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]' Printer supports PCL if set
` *Note Extending ifhp Capabilties:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' User
PCL options supported
` *Note Operation Configuration Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]' Printer supports PJL if set
` *Note pjl[lowbar]console FLAG:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]' Printer supports messages on console
` *Note File Transfer and Error Status Monitoring:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' PJL
error messages for error codes
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]' Do not allow these PJL commands
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' PJL initializations to be done
` *Note pjl[lowbar]job FLAG:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' PJL JOB and EOJ supported
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' Allow only these PJL commands
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Allow only
these user PJL commands or variables to be set
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Do not allow these PJL
variables to be set
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
Allow these PJL variables to be set
` *Note Operation Configuration Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]' Printer supports PostScript (ps)
` *Note Extending ifhp Capabilties:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]' Support these PostScript user options
` *Note remove[lowbar]ctrl STRING:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]' Support these characters from PostScript jobs
` *Note PJL Initialization:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' PJL JOB command START = NNN value
` *Note Operation Configuration Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Printer
supplies status information
` *Note Statusfile Statusfile[lowbar]max Statusfile[lowbar]min::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]' Status file pathname
` *Note Statusfile Statusfile[lowbar]max Statusfile[lowbar]min::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' Status file has maximum size of NNN Kbytes
` *Note Statusfile Statusfile[lowbar]max Statusfile[lowbar]min::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' Status file has truncated size of NNN
Kbytes
` *Note Summmaryfile:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Summary file pathname
` *Note Synchronization and Pagecounts:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]' Synchronize printer if set
` *Note Synchronization and Pagecounts:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Send synchronization
request at SECONDS interval
` *Note Synchronization and Pagecounts:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Timeout
synchronization request after SECONDS
` *Note tbcp FLAG:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Use Transparent
Binary Communications Protocol for PostScript files
` *Note Operation Configuration Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]' Printer supports text mode
` *Note Text File Conversion:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]' Pathname of text conversion program
` *Note Text File Conversion:: '`' Job language of text converter
output
` *Note Text File Conversion:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]' Temporary file pathname template
` *Note Debug and Trace:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]' Put error and trace
messages on STDERR if set

File: ifhp.info,  Node: Configuration Files,  Next: Font Download Support,  Prev: Predefined Options,  Up: Top

Configuration Files
*******************

Run time options are provided by the command line arguments and values
in the configuration  files.  By convention, the configuration files
are named `ifhp.conf'.

   In order to provide a flexible run time configuration facility, the
location of the configuration files is specifed as follows.
  1. The default list of configuration files is:
     `./ifhp.conf,/etc/ifhp.conf,./ifhp.conf'

  2. The command line option
     `-Tconfig=/path,/path,...'
     can be used to override the default list of configuration files.

   Here is a section of a simple configuration file.
     # languages
     pcl
     statusfile=status
     status
     sync=pcl
     sync_interval=20
     # we force pagecounting off
     #pagecount=pcl
     pagecount@
     [lsqb  ] HP4Si [rsqb  ]
     status@
     end
     [lsqb  ] HP5Si [rsqb  ]
     pjl
     sync=pjl

   The configuration file is used to set flags, option values, and to
cause various `ifhp' actions.  The file has the following structure.
  1.   Blank lines and lines starting with [num   ] are ignored.

  2.   Keys or flags start in column 1.  The syntax is similar to the
     LPRng and BSD file.
          Syntax             Equivalent To    Class
          flag               flag=1           (FLAG)
          flag[commat]       flag=0           (FLAG)
          flag=val           flag=val (string value) STRING
          flag=[rsqb  ] v v  ... [lsqb  ]          LIST

  3. Flags are used for options which take a TRUE/FALSE, 0/1, or ON/OFF
     value, and `ifhp' will substitute the appropriate form or perform
     the assocated action if the flag is TRUE.

  4. Strings are used to set options which require a multicharacter
     value.  The special form `flag[commat]' is used to indicate that
     the operation related to this option is not to be performed.

  5. Lists are used to specify a list of options which can be flags or
     string values.  Lists have the property of `recursive evaluation'
     which means that the individual items in the list will be acted
     upon in order.  This is discussed later in detail.

  6. The list entries are separated by whitespace, and each entry can
     have the form v, v[commat], v=word, or v1[num   ]word, where word
     does not contain whitespace or the [lsqb  ][rsqb  ] characters.

  7. Flag values can be spread over multiple lines.  Lines starting with
     whitespace, are treated as a continuation of the previous flags
     line value.  For example:
          # set string x value 'first\n  second\n  third'
          x= first
            second
            third
          # set list y value [lsqb  ] f1 f2 [rsqb  ]
          y=[lsqb  ] f1
           f2 [rsqb  ]

  8. Selection lines have the form:
          [lsqb  ] glob glob ... [rsqb  ]

     Selection lines divide the configuration file into sections
     corresponding to a particular printer model.   Configuration
     information is extracted from a file until either an 'end' line or
     a selection line is encountered.

  9. An 'end' line consisting of the single work 'end' will terminate
     reading lines from a configuration file.

 10.  As the configuration file is read,  flag lines and values are
     accumulated.  Later values encountered in the file will replace
     earlier values.

* Menu:

* Configuration Selection::
* Option Use::
* Recursive List Expansion::
* String Expansion::
* Language Context::


File: ifhp.info,  Node: Configuration Selection,  Next: Option Use,  Up: Configuration Files

Configuration Selection
=======================

   The recommended format for a  configuration file is to put common
(default) flag settings at the start of the configuration file,
followed by selection sections with overridding and additional flag
values.

   To allow a single file to be used for multiple printer
configurations, you can specify that a section of the file is to be
used ONLY by a various models of printers.  This is is controlled by
the value of the 'model' flag and selection lines of the form:
       [lsqb  ] glob glob ... [rsqb  ]

   The first occurrence of a 'model=xx' line in either the -T options
or the configuration file will set the model flag value to 'xx'.

   The 'model' value is matched against the modelglob values using GLOB
matching.  For example:
     hp*      matches hp4 hp5x
     hp[lsqb  ]45[rsqb  ]   matches hp4 hp5, but not hp5x
     hp[lsqb  ]3-6[rsqb  ]* matches hp3, hp5, hp5x, but not hpiii

   If a matching entry is found,  successive lines will be used until
either another selection line or an 'end' line is encountered.  An
'end' line will terminate reading the current file, and the next
configuration file will be read.

   The default list of configuration files is:
     ifhp.conf, /etc/ifhp.conf, ifhp.conf

   This arrangement allows you to read the ifhp.conf file to get
various model settings,  scan the /etc/ifhp.conf file to get the
generic ones,  and then to rescan the local ifhp.conf file to provide
overrides to values set in the /etc/ifhp.conf file.


File: ifhp.info,  Node: Option Use,  Next: Recursive List Expansion,  Prev: Configuration Selection,  Up: Configuration Files

Option Use
==========

   Options and their values are used to control printer operation.
There are two types of options: those with a predefined or `builtin'
meaning to the `ifhp' filter and those which are simply used to supply
values for expansion during operation.

   The builtin options are listed in later sections, and their use is
explained.  These options can have flag, string, or list values as is
appropriate to their corresponding actions.


File: ifhp.info,  Node: Recursive List Expansion,  Next: String Expansion,  Prev: Option Use,  Up: Configuration Files

Recursive List Expansion
========================

   During normal operation, the `ifhp' filter will perform an operation
by producing a set of strings which will be sent to the printer or
output device.  These strings may be obtained by using the values of
predefined or builtin option names, or by expanding a LIST value.

   A LIST value has the form X=[lsqb  ] v1 v2 ... [rsqb  ].  When a
list value is expanded each of v1, v2 is examined in turn and the
corresponding action or string substitution or builtin evaluation is
carried out.  If v1 has a string value and is not recognized as a
builtin or special option then normally the string value will be used.
     t1=[ p1 p2 p3=end ]
     p1=this is
     p2=[ p3 p4 ]
     p3=a
     p4=test
     p3=living\020\%[lcub  ]p3[rcub  ]

   For example, when expanding `t1' each of `p1' and `p1' is in turn
expanded.  This will produce the strings `"this is"', `"a"', `"test"'
and `"living end"' in turn.

   Some LIST variables are used in printer language specific contexts
and their values are processed appropriately.  For example,
pjl[lowbar]init=[lsqb  ]...[rsqb  ] specifies a set of operations to be
carried out for printers that support PJL, and pcl[lowbar]init=[lsqb
]...[rsqb  ] for PCL printers.  The expansion of the LIST entries is
done in the language specific context.  For PJL this requires that the
output be well formed PJL commands, and for PCL that all whitespace be
removed.

   The context dependent expansion is required because sometimes it is
necessary to do operations both using PJL and PCL or PJL and PS
combinations to ensure correct printer operation.  For this reason,
during expansion the language name and an underscore is prefixed to the
list entry name,  and this is used as the option name during the search.

   For example,  suppose that we have:
         pjl_init=[lsqb  ] test [rsqb  ]
         pcl_init=[lsqb  ] test [rsqb  ]
         initstr=NO
         pjl_initstr=[commat]PJL ECHO YES
         pcl_initstr=\033(*yeS

   When PJL initialization is done, the 'pjl[lowbar]test' LIST will be
expanded, and the PJL string '[commat]PJL ECHO YES' will obtained.
When PCL language specific processing is done,  then the \033(*yeS
string will be obtained.


File: ifhp.info,  Node: String Expansion,  Next: Language Context,  Prev: Recursive List Expansion,  Up: Configuration Files

String Expansion
================

   String values are encoded using a simple PERL/C language like
method.  The \ (escape) character introduces a replacement string.
This has the form:
`Standard Character Replacement'
     ` \f \r \n \t \nnn' where nnn are 3 octal digits are replaced by
     the standard PERL or C character substutions.

`Option Value Replacement'
     `\[percnt]format[lcub  ]option[rcub  ]    \[percnt]format[option]'

     The option name will be relaced by the formatted option value.

`Option Search Order'
     The option value is located using a simple set of rules.
       1. During a recursive option evaluation, expanding `option=word'
          will push the `option=word' combination onto an evaluation
          stack.  This stack is searched in oldest to newest order for
          a match.

       2. If no match was found, and the expression has the form `[lcub
          ]option[rcub  ]' then the `-Zoption=value' command line
          options will be searched for a match.

       3. If no match was found, then the `-Toption=value' command line
          options will be searched for a match.  This allows the `[lcub
          ]option[rcub  ]' to start searching from the -Z command line
          options and `[option]' to start searching from the -T command
          line options.

       4. If no match was found, then the configuration information is
          searched.

       5. If no match was found, then the value is considered undefined,
          and a `"0"' value is used.

`Format'
     The format specifies how the value is to appear, and is similar to
     the printf format usage:
             %[lsqb  ]-[rsqb  ][lsqb  ]0[rsqb  ][lsqb  ]length[lsqb  ].precision[rsqb  ][rsqb  ][lsqb  ]format[rsqb  ]

     The default format is [percnt]d, ie, \[percnt][lcub  ]val[rcub  ]
     would be \[percnt]d[lcub  ]val[rcub  ].  The numerical formats
     supported are: [percnt]d, [percnt]o, [percnt]x, [percnt]X,
     [percnt]e, [percnt]f, and [percnt]g; The [percnt]s format use the
     option string value.

     The format is usually not required, except when fractional values
     of point sizes or string substition rather than numerical
     substition is required.

   For example:
     Configuration:
       pjl_user_opts=[ ... outbin intray ...]
       pjl_outbin=@PJL SET OUTBIN=\%s[lcub  ]outbin[rcub  ]
       intraynum=4
       pjl_intray=@PJL SET INTRAY=\%[lcub  ]intraynum[rcub  ]
     
     Command:
       ifhp -Zoutbin=LEFT

   During PJL language processing, the `-Z' command line options will
be scanned for options which appear in the `pjl[lowbar]user[lowbar]opts'
list.  The `-Toutbin=LEFT' option will be found and will be expanded in
the PJL context by prefixing `pjl[lowbar]' and looking for a string or
list value.  The `pjl[lowbar]outbin' option will be found, and the
`@PJL SET OUTBIN=\[percnt]s[lcub  ]outbin[rcub  ]' string will be
expanded.

   Now we need to search for the `outbin' value.  We first search for
it on the evaluation stack, but there is nothing there yet.  We then
search the `-Z' options and find the `outbin' value, and substition
yields `@PJL SET OUTBIN=LEFT'.

   Next, the `intray' option is found and `pjl[lowbar]intray' is
expanded, which needs a value for `intraynum'.  This is found in the
configuration information, and finally in `@PJL SET INTRAY=4'.
     cpi=5.5
     pcl_cpi=\033\%3.2f[lcub  ]cpi[rcub  ]D

   During PCL option expansion, we might need to expand the
`pcl[lowbar]cpi' option.  When the
`pcl[lowbar]cpi=\033\[percnt]3.2f[lcub  ]cpi[rcub  ]D' string is
expanded, the result is `\033\[percnt]5.00D'.  If the user has specified
`-Tcpi=9' on the command line then the result is `\033\[percnt]9.00D'.


File: ifhp.info,  Node: Language Context,  Prev: String Expansion,  Up: Configuration Files

Language Context
================

   The Tifhp filter sends initialization and configuration commands to
the printer.  Depending on the language, these commands have specific
forms and requirements.  Rather than requiring the user to remember the
details, Tifhp uses the following conventions.

* Menu:

* PJL Language::
* PCL Lanaguage::
* PostScript Language::


File: ifhp.info,  Node: PJL Language,  Next: PCL Lanaguage,  Up: Language Context

PJL Language
------------

   A PJL command has the form `@PJL OPCODE ...'.  A command must start
with `@PJL' and consist of a single string value.  You cannot patch
together options to make a single PJL command.
  1. Before sending any PJL command to the printer, the PJL Universal
     Exit Command (`\033[percnt]-12345X') string is sent to the printer.

  2. Because not all printers support all PJL commands, the Tifhp
     filter performs a couple of checks using the `pjl[lowbar]only' and
     `pjl[lowbar]except' configuration options.  The OPCODE must appear
     in the `pjl[lowbar]only' list and not in the `pjl[lowbar]except'
     list.

  3. Leading and trailing whitespace is removed, and all characters are
     converted to uppercase.

  4. Individual commands have a newline (`\n') appended to them before
     being sent to the printer.


File: ifhp.info,  Node: PCL Lanaguage,  Next: PostScript Language,  Prev: PJL Language,  Up: Language Context

PCL Lanaguage
-------------

   When sending PCL initialization strings to a printer, it is
essential to send nothing that could cause a printable character to be
sent before the actual file contents.  Such output could cause the
location and positioning of text to be altered in unexpected ways.  To
avoid this, the following steps are taken when processing PCL strings.
  1. Before any PCL string is sent to the printer, the PCL End of Job
     (`\033E') string is sent to the printer.

  2. First, all whitespace (blanks, tabs, etc) are removed from the
     string value.

  3. Next, all escaped values are substituted.  At this point you can
     `force' printable strings containing whitespace into the output by
     using the `\nnn' escape mechanism.


File: ifhp.info,  Node: PostScript Language,  Prev: PCL Lanaguage,  Up: Language Context

PostScript Language
-------------------

   The PostScript language processing is very minimal, as there are few
problems sending PostScript to a printer.
  1. Before sending any PostScript initialization strings, the
     PostScript End of Job indicator (`\004' or Control-D) is sent.

  2. Strings are then expanded and the escape sequences are substituted.

  3. Individual strings have a newline (`\n') appended to them before
     being sent to the printer.


File: ifhp.info,  Node: Font Download Support,  Next: Banner Printing,  Prev: Configuration Files,  Up: Top

Font Download Support
*********************

   For historical reasons, there is support for downloading a font or
other file to the printer.  A large amount of the necessary operations
are now in the `ifhp.conf' file.

   The `font[lowbar]download' built-in option supports downloading as
described below.

* Menu:

* PCL Font Downloading::
* PS Font Downloading::
* PJL File Downloading::


File: ifhp.info,  Node: PCL Font Downloading,  Next: PS Font Downloading,  Up: Font Download Support

PCL Font Downloading
====================

   The following shows the a typical `ifhp.conf' file which has PCL
font downloading enabled.
     #
     # Fonts and Font Downloading
     #  fontid is used to set the current font
     pcl_init=[ ... font ... ]
     
     # combination command
     pcl_font=[ delete_fonts font_id font_download font_primary ]
     
     # font control
     #
     font_op=0
     pcl_font_op=\033*c\%[lcub  ]font_op[rcub  ]F
     pcl_delete_fonts=\033*c0F
     
     font_id=1
     pcl_font_id=\033*c\%[lcub  ]font_id[rcub  ]D
     
     # set primary font
     font_primary=1
     pcl_font_primary=\033(\%[lcub  ]font_primary[rcub  ]X
     
     # font directory
     pcl_fontdir=/usr/local/lib/fonts
     
     #default font file
     font=c1201b.10

   To allow users to download a font and have it set up for PCL use, the
`pcl[lowbar]init' option should include the `font' option in an
appropriate position in the intitialization sequence.  As shown above,
this will get expanded into the `pcl[lowbar]delete[lowbar]fonts',
`pcl[lowbar]font[lowbar]id', `pcl[lowbar]font[lowbar]download' (which
is has built-in support), and the `pcl[lowbar]font[lowbar]primary'
options, which are expanded in order.

   The `pcl[lowbar]font[lowbar]download' is supported by the builtin
operation which will find the `pcl[lowbar]fontdir' directory value and
a value for the `font' variable, using values from the `-Z' and `-T'
and configuration information in that order.  If no `font' value is
found, no font will be downloaded.  For example:
     lpr -Tfont=font1,font2

   When the `pcl[lowbar]font[lowbar]download' option is expanded, it
will generate the pathnames `/usr/local/lib/fonts/font1' and
`/usr/local/lib/fonts/font2', open these files, and send their contents
directly to the printer.


File: ifhp.info,  Node: PS Font Downloading,  Next: PJL File Downloading,  Prev: PCL Font Downloading,  Up: Font Download Support

PS Font Downloading
===================

   PostScript font downloading is supported in a similar manner to PCL
font downloading.
     #
     # Fonts and Font Downloading
     #
     ps_init=[ ... font ... ]
     
     # combination command
     pcl_font=[ font_download ]
     
     # font directory
     ps_fontdir=/usr/local/lib/fonts
     
     #default font file
     font=font.ps.10

   In a similar manner to the PCL font downloading, when the
`ps[lowbar]init' list is expanded, the `ps[lowbar]font' entry will be
expanded in turn.  If the `-Zfont=ZapDingbat.ps' is specified, then the
`/usr/local/lib/fonts/ZapDingbat.sp' file will be opened and downloaded
to the printer.


File: ifhp.info,  Node: PJL File Downloading,  Prev: PS Font Downloading,  Up: Font Download Support

PJL File Downloading
====================

   In a similar manner to the above font downloading, you can specify a
configuration or other setup file that should be sent to the printer as
part of the PJL setups.  The following configuration shows how to set
this up.
     #
     # PJL Initialization File Downloading
     #  fontid is used to set the current font
     pjl_init=[ ... setup  ... ]
     
     setup=initval
     font=\%s[lcub  ]setup[rcub  ]
     # setup directory
     pjl_fontdir=/usr/local/lib/fonts
     pjl_setup=[ font_download ]

   The above configuration will cause the value of the `setup' `-Z',
`-T' or configuration option to be used.


File: ifhp.info,  Node: Banner Printing,  Next: Accounting,  Prev: Font Download Support,  Up: Top

Banner Printing
***************

   One of the more difficult administrative issues is whether to print
banners (job separators) or to save the large amount of wasted paper,
time and effort.  The LPRng and `ifhp' combination provide a rather
esoteric set of methods to generate banners, at least one of which
should be suitable for your application.

   You should be aware that some printers have the obnoxious habit of
generating their own banner pages when jobs are transferred via the
RFC1179 protocol.  You should consult the manufacturers documentation
and take the necessary steps to turn printer banner page generation off.

* Menu:

* Banner Printing with LPRng::
* Stand Alone Banner Program::


File: ifhp.info,  Node: Banner Printing with LPRng,  Next: Stand Alone Banner Program,  Up: Banner Printing

Banner Printing with LPRng
==========================

   The following steps need to be done to configure LPRng to print
banners using `ifhp'.
  1. In order to print a banner, the LPRng print spooler will require a
     user name for the banner page to be present in the print job.
     However, since users can request `no banner' via various options
     on the print spooler interface, LPRng provides the handy
     `force[lowbar]banner' option to always force a banner to be
     generated, even if the user has specifically requested that one
     `not' be generated.  This is useful for preventing the
     `disappearing print job' syndrome in large installations.

  2. Next, LPRng must be configured to generate banners.  The `sh'
     (suppress header) option must be off (`sh@').

  3. At this point you need to decide if you want LPRng to generate the
     banner of the `ifhp' filter to generate the banner.  If you want
     LPRng to generate the banner, you can specify a `banner'
     generation program, and inform `ifhp' `not' to generate a banner
     (the default).
          Printcap:
          lp:
          [nbsp  ][nbsp  ]:sh@
          [nbsp  ][nbsp  ]:banner=/usr/local/filters/bannergen
          [nbsp  ][nbsp  ]:if=ifhp[nbsp  ]-Tbanner

  4. If you want `ifhp' to generate a banner, you do not have LPRng
     generate a banner and enable banner printing by `ifhp'.  You also
     can specify the `sb' or short banner option, which will cause a
     very short dummy banner to be generated.  This will be ignored by
     the `ifhp' filter.
          Printcap:
          lp:
          [nbsp  ][nbsp  ]# short banner, save effort
          [nbsp  ][nbsp  ]:sh@:sb
          [nbsp  ][nbsp  ]:if=ifhp -Tbanner

  5. Finally, you have your choice of PCL, PostScript and even Text
     banners.  These can be specified using `banner='`language':
          Printcap:
          lp:

          [nbsp  ][nbsp  ][num   ] short banner, save effort

          [nbsp  ][nbsp  ]:sh@:sb

          [nbsp  ][nbsp  ]:if=ifhp -Tbanner=`language'


File: ifhp.info,  Node: Stand Alone Banner Program,  Prev: Banner Printing with LPRng,  Up: Banner Printing

Stand Alone Banner Program
==========================

   Occasionally it is useful to be able to generate a banner in
`standalone' mode.  For example, you might want to generate a banner
when using an LPRng `bounce queue' to perform filtering operations
before forwarding jobs to another printer.  To do this requires a
stand-alone banner printer.  `ifhp' can be configured to do this by
using:
     ifhp -Tbanner[lowbar]only

   In addition, you can specify the type of banner you want using:
     ifhp -Tbanner[lowbar]only=`language'

   Lastly, in order to be `vintage software compatible', if the ifhp
program is invoked as the `banner' program, this is effectivly the same
as
     ifhp -Tbanner[lowbar]only

   For example, to use this with a bounce queue to an `hp4' printer,
the following printcap entry might be used:
     # for clients, force spooling to server
     lp:lp=lp@server
     # server
     lp:server
       :bq=raw@printer
       :ifhp=model=hp4
       :generate_banner
       :banner=/usr/local/filters/ifhp -Tbanner_only
       :if=/usrlocal/filters/ifhp
       :of=/usrlocal/filters/ifhp


File: ifhp.info,  Node: Accounting,  Next: Monitoring Printer Operation,  Prev: Banner Printing,  Up: Top

Accounting
**********

   In Academic institutions, avoiding printing accounting has been
regarded as a challenge,  an ongoing game of fat cat and poor starving
mouse, between the Adminstration and the downtrodden, poor, overcharged
student.  The following is a lighthearted ramble down the dark lane of
printing accounting.

   We will disregard the fact that if most students put as much effort
into their studies as in finding ways to avoid accounting procedures
then they would be Rhodes Scholar material,  but I digress...

* Menu:

* Page Accounting Algorithm::
* You Used 2000 Pages Out of Quota::
* Bad Jobs - Who Do We Bill?::
* How Do We Update The Database::
* Accounting Shell Script::
* Pagecounter Values::


File: ifhp.info,  Node: Page Accounting Algorithm,  Next: You Used 2000 Pages Out of Quota,  Up: Accounting

Page Accounting Algorithm
=========================

   The accounting procedures put into the LPRng and the ifhp filters may
appear to be extraordinarily complex,  but believe me, they are not.
Firstly, we make the assumption that the printer has some sort of
non-volatile page counter mechanism that is reliable and impervious to
power on/off cycles.  Without this mechanism the enterprising student
ummm... user will simply turn off the printer.  Software that prescans
jobs for line counts and pages is notoriously unreliable,  given even
the most modest efforts of users to hide these procedures.   The cost
of running a PostScript simulator simply to do accounting has its
flaws; without ensuring that the simulator has all of the interesting
security loopholes closed, such as opening files, etc.,  it can become
a trap door to hell for the system administrator.

   Secondly,  we must make the assumption that the student... uhhh...
user will not be able to tinker with the page counter mechanism, i.e.-
they will not be able to roll back the odometer on the printer, `for
the duration of a single job'.  I will digress and point out that a
student actually did this for a challenge;  it only took him a couple
of weeks of study and a fully equipped microcontroller lab, and two (2)
laser printers which he ruined in the experiment.  HP was not amused
when we sent them back under warranty,  claiming that this our 'normal
lab usage.'

   Lastly,  you should not mind a small amount of pilferage, or a few
pages here and there being charged to the wrong account.

   The basic mechanism the ifhp filter uses is to record the page
counter value at the start and end of each part of a print job. Each
record has the form:
     start -qpagecounter ....
     end  -ppages -qpagecounter -telapasedtime ....

   When we use the OF filter and/or banners,  we will see the
individual jobs bracketed by the OF filter records:
     start -q100 -Fo -kcfA100taco -uuser -hhost -R...
     start -q101 -Ff -kcfA100taco -uuser -hhost -R...
     end  -p1 -q102 -Ff -kcfA100taco -uuser -hhost -R...
     start -q102 -Ff -kcfA100taco -uuser -hhost -R...
     end  -p3 -q105 -Ff -kcfA100taco -uuser -hhost -R...
     end  -p5 -q105 -Fo -kcfA100taco -uuser -hhost -R...

   It should be clear from the above that all we need to do is to add up
the values for the -Fo (OF) filter lines and we are done.

   Unfortunately,  this is too simplistic.  If for some reason the job
is killed or terminates due to error conditions,  the OF filter may not
get to finish its work.  Thus,  we may see the following:
     start -q100 -Fo -kcfA100taco -uuser -hhost -R...
     start -q101 -Ff -kcfA100taco -uuser -hhost -R...
     start -q110 -Fo -kcfA101taco -uuser -hhost -R...

   This is a clear indication that the user's job has been terminated.
In this case we need to use the differences between pagecounters of the
start records to do accounting.

   There is a caveat to all of this;  that is the problem of the last
dead job in the list.  If the last line in the accounting file is:
     start -q110 -Fo -kcfA101taco -uuser -hhost -R...

   is the last job finished or did it abort?


File: ifhp.info,  Node: You Used 2000 Pages Out of Quota,  Next: Bad Jobs - Who Do We Bill?,  Prev: Page Accounting Algorithm,  Up: Accounting

You Used 2000 Pages Out of Quota
================================

   Now we move on to the problem of real time accounting.  Due to
limited budgets, etc., many institutions would like to strictly enforce
limits on paper use by students. As jobs are printed their accounts
should be docked for the amount of paper use.  One way to do this is to
have an external accounting procedure update a shared database.  The
ifhp filter has provision for a shell script to be invoked at the start
and end of print job; this is done by both the OF and IF filter.  Thus,
we can blithely assume that there is a central database carefully
getting updates from the LPRng software, probaly from dozens of
different printers, and updating the accounting information, and that
this program can query the database, check limits, and terminate
printing if the limits are exceeded.

   The first question to be asked is simple:  is this worth it?
Perhaps doing accounting as a batch job once an hour/four times a
day/once a day is cheaper than buiding an running such a database.  If
it costs $5K/year for the database software, you might just consider
ignorng the 10,000 pages that get lost in the shuffle and use a simple
set of awk/sed/perl scripts to update a database once an hour.


File: ifhp.info,  Node: Bad Jobs - Who Do We Bill?,  Next: How Do We Update The Database,  Prev: You Used 2000 Pages Out of Quota,  Up: Accounting

Bad Jobs - Who Do We Bill?
==========================

   We inevitably run into an interesting question: what happens if a
job does not complete correctly?

   If you use the completion of the OF filter as a success status, I
have to point out that many students... ummm... users soon find ways to
send jobs to the printer that will cause it to lock up after their
output has been printed. These jobs require power cycling of the
printer and restarting the filter; a bit extreme, perhaps, but it has
happened.

   I suggest that you simply adopt a 'bill to last user of record'
attitude,  using the pagecount information as follows:
     start OF -- starting point for THIS job
     start IF --  nice information, but not useful
     start IF --
     end OF -- ending point for this job - can record infomaiton
     
     start OF --
     if no end OF for previous job,  then treat as end OF and
               update accounting.

   Now somebody is sure to complain that they got charged for a bunch of
pages that they did not use.  This is inevitable;  always carry a can
of oil for the squeaky wheels.  I might make the observation that once
is accident, twice is coincidence, but three times is malice; be wary
of the constant complainer and check out not only him but also his
co-workers.


File: ifhp.info,  Node: How Do We Update The Database,  Next: Accounting Shell Script,  Prev: Bad Jobs - Who Do We Bill?,  Up: Accounting

How Do We Update The Database
=============================

   I suggest that database update be done as follows: maintain a 'last
page reported' record for each printer in the database.

   When a successful job reports in,  check to see that the recorded
pagecount for the printer is in agreement with the one that is reported.

   If this is not the case then you have had some unsuccessful jobs.
In this case I strongly recommend that you have a means to request the
accounting reporting program to go back through the accounting file and
find the last report for the page counter value and try to backtrack
through the accounting files.  The accounting file is one of the first
things to be attacked by students... Ummm...  users.  It should NOT be
kept on and NFS exported or mounted file system.  It should be
carefully pruned and copied, perhaps on an hourly basis.

   Now some adminstrators have fallen in love with network based
printers; do not believe ANYTHING that comes over a network connection
without some form of authentication;  PGP has some very nice Public Key
mechansims for handling this.  This is a major weakness in using a
database for keeping track of accounting - a weak authentication
mechanism may lead to denial of service attacks by students flooding
the database with bogus print usage reports;  suddenly NOBODY can print
and the adminstrator is driven to turning off accounting.

   Good luck.  I am never suprised when I encounter yet another wrinkle
in this area.


File: ifhp.info,  Node: Accounting Shell Script,  Next: Pagecounter Values,  Prev: How Do We Update The Database,  Up: Accounting

Accounting Shell Script
=======================

   The
     accounting=/pathname

   specifies a program to run at the start and end of the `ifhp'
activity.  For an example of a simple script, see the accounting.sh
script in the distribution.


File: ifhp.info,  Node: Pagecounter Values,  Prev: Accounting Shell Script,  Up: Accounting

Pagecounter Values
==================

   The only reliable way to do page counting in the face of PostScript,
PCL, and other mystical printer job languages is to query the printer
and get the current value of a hardware page counter.  Unfortuately,
this may not be a trivial matter.
  1. The page counter may not be updated in real time.  This means that
     you may need to wait a couple of seconds until you are sure that
     the pages have been recorded.  Usually this occurs when the pages
     leave the print engine and are put in the output tray.

  2. Printers do job batching, and when they report job completion the
     job is still being printed.

  3. Some printers report `impressions', i.e.- sides of pages printed,
     rather than pages.  If you are doing duplex printing then you may
     find that your paper count and your page (impression) count differ.

  4. Some printers simply lack page reporting.

   Given these problems, it is more than reasonable to reconsider the
need for accounting, or to work closely with the printer vendor to
understand the interactions of print jobs and reporting of page counts.


File: ifhp.info,  Node: Monitoring Printer Operation,  Next: HP JetDirect Card Support,  Prev: Accounting,  Up: Top

Monitoring Printer Operation
****************************

   Normally the `ifhp' filter will write error and trace messages to the
`statusfile' specified by the command line `-s' option or the
`statusfile=pathname' configuration entry.

   However, there may be a need to get information sent to a central or
other location for system administration purposes.  The
`summaryfile=host[percnt]port' option will cause `ifhp' to  open a UDP
connection to the specified port on the remote host and send the error
and trace information to that location as well.

   The `monitor' program include in the LPRng and `ifhp' distributions
is a template for writing a program to use this information.


File: ifhp.info,  Node: HP JetDirect Card Support,  Prev: Monitoring Printer Operation,  Up: Top

HP JetDirect Card Support
*************************

   The  HPJetDirect  card or external JetDirect box can  be configured
through the printer front panel  or through a set of network files.
Here is a summary of  the  methods  used  from  UNIX  systems, or when
you are desperate, to configure the printer.

* Menu:

* TCP/IP Network Address::
* BOOTP Information::
* Timeouts::


File: ifhp.info,  Node: TCP/IP Network Address,  Next: BOOTP Information,  Up: HP JetDirect Card Support

TCP/IP Network Address
======================

   You can set the network address from the front panel.  Reset  the
printer; use the MENU, +-, SELECT keys as follows:
      MENU  -> MIO MENU (use MENU to display MIO MENU)
      ITEM  -> CFG NETWORK=NO*
      +     -> CFG NETWORK=YES
      ENTER -> CFG NETWORK=YES*
      ITEM  -> TCP/IP=OFF* (use ITEM to display TCP/IP)
      +     -> TCP/IP=ON
      ENTER -> TCP/IP=ON*
      ITEM  -> CFG TCP/IP=NO* (use ITEM to display TCP/IP)
      +     -> CFG TCP/IP=YES
      ENTER -> CFG TCP/IP=YES*
      ITEM  -> BOOTP=NO*
              (Enable BOOTP if you want to - see below)
      ITEM  -> IP BYTE 1=0*
              This is IP address MSB byte.
              Use +- keys to change value, and then ENTER to change
              Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> SM BYTE 1=255*
               This is the subnet mask value
              Use +- keys to change value, and then ENTER to change
              Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> LG BYTE 1=255*
              This is the Syslog server (LoGger) IP address
              Use +- keys to change value, and then ENTER to change
              Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> GW BYTE 1=255*
              This is the subnet gateway (router) IP address
              Use +- keys to change value, and then ENTER to change
              Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> TIMEOUT=90
               This is the connection timeout value.  It puts a limit
              on time between connections.  A value of 10 is reasonable.

