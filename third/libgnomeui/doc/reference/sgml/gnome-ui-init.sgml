<refentry id="libgnomeui-gnome-ui-init">
<refmeta>
<refentrytitle>gnome-ui-init</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-ui-init</refname><refpurpose>Parameters (and deprecated functions) for initializing libgnomeui applications.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;libgnomeui/libgnomeui.h&gt;


#define     <link linkend="LIBGNOMEUI-MODULE-CAPS">LIBGNOMEUI_MODULE</link>
#define     <link linkend="LIBGNOMEUI-PARAM-CRASH-DIALOG-CAPS">LIBGNOMEUI_PARAM_CRASH_DIALOG</link>
#define     <link linkend="LIBGNOMEUI-PARAM-DISPLAY-CAPS">LIBGNOMEUI_PARAM_DISPLAY</link>
#define     <link linkend="LIBGNOMEUI-PARAM-DEFAULT-ICON-CAPS">LIBGNOMEUI_PARAM_DEFAULT_ICON</link>
int         <link linkend="gnome-init-with-popt-table">gnome_init_with_popt_table</link>      (const char *app_id,
                                             const char *app_version,
                                             int argc,
                                             char **argv,
                                             const struct <link linkend="poptOption">poptOption</link> *options,
                                             int flags,
                                             <link linkend="poptContext">poptContext</link> *return_ctx);
#define     <link linkend="gnome-init">gnome_init</link>                      (app_id,app_version,argc,argv)

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The initialization functions in this module are deprecated in favour of calls
to <link linkend="gnome-program-init">gnome_program_init</link>() in the libgnome library.
</para>

<para>
However, this module does provide some extra parameters on top of those already
defined in libgnome that can be passed to the <link linkend="gnome-program-init">gnome_program_init</link>() call. These
should enable libgnomeui applications to control their appearance precisely.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="LIBGNOMEUI-MODULE-CAPS">LIBGNOMEUI_MODULE</title>
<programlisting>#define LIBGNOMEUI_MODULE libgnomeui_module_info_get()
</programlisting>
<para>
A module containing all the information required to initialize libgnomeui and
its dependents. This should be passed to the <link linkend="gnome-program-init">gnome_program_init</link>() call by
applications using libgnomeui.
</para></refsect2>
<refsect2>
<title><anchor id="LIBGNOMEUI-PARAM-CRASH-DIALOG-CAPS">LIBGNOMEUI_PARAM_CRASH_DIALOG</title>
<programlisting>#define LIBGNOMEUI_PARAM_CRASH_DIALOG	"show-crash-dialog"
</programlisting>
<para>
If set to <literal>TRUE</literal>, the standard GNOME crash dialog will appear (offering the user
a chance to automatically file a bug report) should the application crash while
running. Application authors will almost never want to change the default value
of this parameter (<literal>FALSE</literal>). The user may change it however by setting the
<envar>GNOME_DISABLE_CRASH_DIALOG</envar> environment variable or passing
<literal>--disable-crash-dialog</literal> on the command line.
</para></refsect2>
<refsect2>
<title><anchor id="LIBGNOMEUI-PARAM-DISPLAY-CAPS">LIBGNOMEUI_PARAM_DISPLAY</title>
<programlisting>#define LIBGNOMEUI_PARAM_DISPLAY	"display"
</programlisting>
<para>
Initially set to the value of the <envar>DISPLAY</envar> environment variable
or the <literal>--display</literal> value passed on the command line, this
parameter determines which X display the application will start on.
</para></refsect2>
<refsect2>
<title><anchor id="LIBGNOMEUI-PARAM-DEFAULT-ICON-CAPS">LIBGNOMEUI_PARAM_DEFAULT_ICON</title>
<programlisting>#define LIBGNOMEUI_PARAM_DEFAULT_ICON	"default-icon"
</programlisting>
<para>
Set to the full path of the application's default icon. This can only be set by
the application.
</para></refsect2>
<refsect2>
<title><anchor id="gnome-init-with-popt-table">gnome_init_with_popt_table ()</title>
<programlisting>int         gnome_init_with_popt_table      (const char *app_id,
                                             const char *app_version,
                                             int argc,
                                             char **argv,
                                             const struct <link linkend="poptOption">poptOption</link> *options,
                                             int flags,
                                             <link linkend="poptContext">poptContext</link> *return_ctx);</programlisting>
<warning>
<para>
<literal>gnome_init_with_popt_table</literal> is deprecated and should not be used in newly-written code.
</para>
</warning>
<para>
Initializes the application.  This sets up all of the GNOME
internals and prepares them (imlib, gdk, session-management, triggers,
sound, user preferences).
</para>
<para>
Unlike <link linkend="gnome-init">gnome_init</link>, with <link linkend="gnome-init-with-popt-table">gnome_init_with_popt_table</link> you can provide
a table of popt options (popt is the command line argument parsing
library).
</para>
<para>
Deprecated, use <link linkend="gnome-program-init">gnome_program_init</link> with the LIBGNOMEUI_MODULE.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>app_id</parameter>&nbsp;:</entry>
<entry> Application id.
</entry></row>
<row><entry align="right"><parameter>app_version</parameter>&nbsp;:</entry>
<entry> Application version.
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> argument count (for example argc as received by main)
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> argument vector (for example argv as received by main)
</entry></row>
<row><entry align="right"><parameter>options</parameter>&nbsp;:</entry>
<entry> poptOption table with options to parse
</entry></row>
<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
<entry> popt flags.
</entry></row>
<row><entry align="right"><parameter>return_ctx</parameter>&nbsp;:</entry>
<entry> if non-NULL, the popt context is returned here.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> 0 (always)
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-init">gnome_init()</title>
<programlisting>#define     gnome_init(app_id,app_version,argc,argv)</programlisting>
<warning>
<para>
<literal>gnome_init</literal> is deprecated and should not be used in newly-written code.
</para>
</warning>
<para>
This is identical to a call to gnome_init_with_popt_table with <literal>NULL</literal> passed in
as the poptOption table.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>app_id</parameter>&nbsp;:</entry>
<entry>Application id.
</entry></row>
<row><entry align="right"><parameter>app_version</parameter>&nbsp;:</entry>
<entry>Application version.
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry>Argument count (for example, argc as received by the main function).
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry>Argument vector (for example, argv as received by the main function).


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
