<refentry id="GnomeIconList">
<refmeta>
<refentrytitle>GnomeIconList</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GnomeIconList</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;libgnomeui/libgnomeui.h&gt;


struct      <link linkend="GnomeIconListPrivate">GnomeIconListPrivate</link>;
enum        <link linkend="GnomeIconListMode">GnomeIconListMode</link>;
struct      <link linkend="GnomeIconList-struct">GnomeIconList</link>;
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="gnome-icon-list-new">gnome_icon_list_new</link>             (<link linkend="guint">guint</link> icon_width,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adj,
                                             int flags);
void        <link linkend="gnome-icon-list-construct">gnome_icon_list_construct</link>       (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="guint">guint</link> icon_width,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adj,
                                             int flags);
void        <link linkend="gnome-icon-list-set-hadjustment">gnome_icon_list_set_hadjustment</link> (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *hadj);
void        <link linkend="gnome-icon-list-set-vadjustment">gnome_icon_list_set_vadjustment</link> (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *vadj);
void        <link linkend="gnome-icon-list-freeze">gnome_icon_list_freeze</link>          (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
void        <link linkend="gnome-icon-list-thaw">gnome_icon_list_thaw</link>            (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
void        <link linkend="gnome-icon-list-insert">gnome_icon_list_insert</link>          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             const char *icon_filename,
                                             const char *text);
void        <link linkend="gnome-icon-list-insert-pixbuf">gnome_icon_list_insert_pixbuf</link>   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *im,
                                             const char *icon_filename,
                                             const char *text);
int         <link linkend="gnome-icon-list-append">gnome_icon_list_append</link>          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             const char *icon_filename,
                                             const char *text);
int         <link linkend="gnome-icon-list-append-pixbuf">gnome_icon_list_append_pixbuf</link>   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *im,
                                             const char *icon_filename,
                                             const char *text);
void        <link linkend="gnome-icon-list-clear">gnome_icon_list_clear</link>           (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
void        <link linkend="gnome-icon-list-remove">gnome_icon_list_remove</link>          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);
<link linkend="guint">guint</link>       <link linkend="gnome-icon-list-get-num-icons">gnome_icon_list_get_num_icons</link>   (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
<link linkend="GtkSelectionMode">GtkSelectionMode</link> <link linkend="gnome-icon-list-get-selection-mode">gnome_icon_list_get_selection_mode</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
void        <link linkend="gnome-icon-list-set-selection-mode">gnome_icon_list_set_selection_mode</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GtkSelectionMode">GtkSelectionMode</link> mode);
void        <link linkend="gnome-icon-list-select-icon">gnome_icon_list_select_icon</link>     (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);
void        <link linkend="gnome-icon-list-unselect-icon">gnome_icon_list_unselect_icon</link>   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);
int         <link linkend="gnome-icon-list-unselect-all">gnome_icon_list_unselect_all</link>    (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
<link linkend="GList">GList</link>*      <link linkend="gnome-icon-list-get-selection">gnome_icon_list_get_selection</link>   (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
void        <link linkend="gnome-icon-list-focus-icon">gnome_icon_list_focus_icon</link>      (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="gint">gint</link> idx);
void        <link linkend="gnome-icon-list-set-icon-width">gnome_icon_list_set_icon_width</link>  (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int w);
void        <link linkend="gnome-icon-list-set-row-spacing">gnome_icon_list_set_row_spacing</link> (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);
void        <link linkend="gnome-icon-list-set-col-spacing">gnome_icon_list_set_col_spacing</link> (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);
void        <link linkend="gnome-icon-list-set-text-spacing">gnome_icon_list_set_text_spacing</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);
void        <link linkend="gnome-icon-list-set-icon-border">gnome_icon_list_set_icon_border</link> (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);
void        <link linkend="gnome-icon-list-set-separators">gnome_icon_list_set_separators</link>  (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             const char *sep);
<link linkend="gchar">gchar</link>*      <link linkend="gnome-icon-list-get-icon-filename">gnome_icon_list_get_icon_filename</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx);
int         <link linkend="gnome-icon-list-find-icon-from-filename">gnome_icon_list_find_icon_from_filename</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             const char *filename);
void        <link linkend="gnome-icon-list-set-icon-data">gnome_icon_list_set_icon_data</link>   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx,
                                             <link linkend="gpointer">gpointer</link> data);
void        <link linkend="gnome-icon-list-set-icon-data-full">gnome_icon_list_set_icon_data_full</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             <link linkend="gpointer">gpointer</link> data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);
int         <link linkend="gnome-icon-list-find-icon-from-data">gnome_icon_list_find_icon_from_data</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="gpointer">gpointer</link>    <link linkend="gnome-icon-list-get-icon-data">gnome_icon_list_get_icon_data</link>   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);
void        <link linkend="gnome-icon-list-moveto">gnome_icon_list_moveto</link>          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             <link linkend="double">double</link> yalign);
<link linkend="GtkVisibility">GtkVisibility</link> <link linkend="gnome-icon-list-icon-is-visible">gnome_icon_list_icon_is_visible</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);
int         <link linkend="gnome-icon-list-get-icon-at">gnome_icon_list_get_icon_at</link>     (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int x,
                                             int y);
int         <link linkend="gnome-icon-list-get-items-per-line">gnome_icon_list_get_items_per_line</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil);
<link linkend="GnomeIconTextItem">GnomeIconTextItem</link>* <link linkend="gnome-icon-list-get-icon-text-item">gnome_icon_list_get_icon_text_item</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx);
<link linkend="GnomeCanvasPixbuf">GnomeCanvasPixbuf</link>* <link linkend="gnome-icon-list-get-icon-pixbuf-item">gnome_icon_list_get_icon_pixbuf_item</link>
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GtkObject">GtkObject</link>
         +----<link linkend="GtkWidget">GtkWidget</link>
               +----<link linkend="GtkContainer">GtkContainer</link>
                     +----<link linkend="GtkLayout">GtkLayout</link>
                           +----<link linkend="GnomeCanvas">GnomeCanvas</link>
                                 +----GnomeIconList
</synopsis>

</refsect1>


<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="GnomeIconList-focus-icon">focus-icon</link>&quot;
            void        user_function      (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeIconList-move-cursor">move-cursor</link>&quot;
            void        user_function      (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="GtkDirectionType">GtkDirectionType</link> arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeIconList-select-icon">select-icon</link>&quot;
            void        user_function      (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="GdkEvent">GdkEvent</link> *event,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeIconList-text-changed">text-changed</link>&quot;
            <link linkend="gboolean">gboolean</link>    user_function      (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gchar">gchar</link> *arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeIconList-toggle-cursor-selection">toggle-cursor-selection</link>&quot;
            void        user_function      (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeIconList-unselect-icon">unselect-icon</link>&quot;
            void        user_function      (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="GdkEvent">GdkEvent</link> *event,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeIconListPrivate">struct GnomeIconListPrivate</title>
<programlisting>struct GnomeIconListPrivate;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeIconListMode">enum GnomeIconListMode</title>
<programlisting>typedef enum {
	GNOME_ICON_LIST_ICONS,
	GNOME_ICON_LIST_TEXT_BELOW,
	GNOME_ICON_LIST_TEXT_RIGHT
} GnomeIconListMode;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeIconList-struct">struct GnomeIconList</title>
<programlisting>struct GnomeIconList;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-new">gnome_icon_list_new ()</title>
<programlisting><link linkend="GtkWidget">GtkWidget</link>*  gnome_icon_list_new             (<link linkend="guint">guint</link> icon_width,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adj,
                                             int flags);</programlisting>
<para>
Creates a new icon list widget.  The icon columns are allocated a width of
<parameter>icon_width</parameter> pixels.  Icon captions will be word-wrapped to this width as
well.
</para>
<para>
If <parameter>flags</parameter> has the <literal>GNOME_ICON_LIST_IS_EDITABLE</literal> flag set, then the user will
be able to edit the text in the icon captions, and the "text_changed" signal
will be emitted when an icon's text is changed.
</para>
<para>
If <parameter>flags</parameter> has the <literal>GNOME_ICON_LIST_STATIC_TEXT</literal> flags set, then the text
for the icon captions will not be copied inside the icon list; it will only
store the pointers to the original text strings specified by the application.
This is intended to save memory.  If this flag is not set, then the text
strings will be copied and managed internally.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>icon_width</parameter>&nbsp;:</entry>
<entry> Width for the icon columns.
</entry></row>
<row><entry align="right"><parameter>adj</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
<entry> A combination of <literal>GNOME_ICON_LIST_IS_EDITABLE</literal> and
<literal>GNOME_ICON_LIST_STATIC_TEXT</literal>.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a newly-created icon list widget
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-construct">gnome_icon_list_construct ()</title>
<programlisting>void        gnome_icon_list_construct       (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="guint">guint</link> icon_width,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adj,
                                             int flags);</programlisting>
<para>
Constructor for the icon list, to be used by derived classes.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>icon_width</parameter>&nbsp;:</entry>
<entry> Width for the icon columns.
</entry></row>
<row><entry align="right"><parameter>adj</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
<entry> A combination of <literal>GNOME_ICON_LIST_IS_EDITABLE</literal> and <literal>GNOME_ICON_LIST_STATIC_TEXT</literal>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-hadjustment">gnome_icon_list_set_hadjustment ()</title>
<programlisting>void        gnome_icon_list_set_hadjustment (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *hadj);</programlisting>
<para>
Sets the adjustment to be used for horizontal scrolling.  This is normally
not required, as the icon list can be simply inserted in a &amp;GtkScrolledWindow
and scrolling will be handled automatically.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>hadj</parameter>&nbsp;:</entry>
<entry> Adjustment to be used for horizontal scrolling.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-vadjustment">gnome_icon_list_set_vadjustment ()</title>
<programlisting>void        gnome_icon_list_set_vadjustment (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *vadj);</programlisting>
<para>
Sets the adjustment to be used for vertical scrolling.  This is normally not
required, as the icon list can be simply inserted in a &amp;GtkScrolledWindow and
scrolling will be handled automatically.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>vadj</parameter>&nbsp;:</entry>
<entry> Adjustment to be used for horizontal scrolling.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-freeze">gnome_icon_list_freeze ()</title>
<programlisting>void        gnome_icon_list_freeze          (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
Freezes an icon list so that any changes made to it will not be
reflected on the screen until it is thawed with <link linkend="gnome-icon-list-thaw">gnome_icon_list_thaw</link>().
It is recommended to freeze the icon list before inserting or deleting
many icons, for example, so that the layout process will only be executed
once, when the icon list is finally thawed.
</para>
<para>
You can call this function multiple times, but it must be balanced with the
same number of calls to <link linkend="gnome-icon-list-thaw">gnome_icon_list_thaw</link>() before the changes will take
effect.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>  An icon list.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-thaw">gnome_icon_list_thaw ()</title>
<programlisting>void        gnome_icon_list_thaw            (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
Thaws the icon list and performs any pending layout operations.  This
is to be used in conjunction with <link linkend="gnome-icon-list-freeze">gnome_icon_list_freeze</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>  An icon list.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-insert">gnome_icon_list_insert ()</title>
<programlisting>void        gnome_icon_list_insert          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             const char *icon_filename,
                                             const char *text);</programlisting>
<para>
Inserts an icon in the specified icon list.  The icon's image is loaded
from the specified file, and it is inserted at the <parameter>pos</parameter> index.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>           An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry>           Position at which the new icon should be inserted.
</entry></row>
<row><entry align="right"><parameter>icon_filename</parameter>&nbsp;:</entry>
<entry> Name of the file that holds the icon's image.
</entry></row>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry>          Text to be used for the icon's caption.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-insert-pixbuf">gnome_icon_list_insert_pixbuf ()</title>
<programlisting>void        gnome_icon_list_insert_pixbuf   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *im,
                                             const char *icon_filename,
                                             const char *text);</programlisting>
<para>
Inserts an icon in the specified icon list.  The icon is created from the
specified Imlib image, and it is inserted at the <parameter>pos</parameter> index.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>      An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry>      Position at which the new icon should be inserted.
</entry></row>
<row><entry align="right"><parameter>im</parameter>&nbsp;:</entry>
<entry>       Pixbuf image with the icon image.
</entry></row>
<row><entry align="right"><parameter>icon_filename</parameter>&nbsp;:</entry>
<entry> Filename of the image file.
</entry></row>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry>     Text to be used for the icon's caption.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-append">gnome_icon_list_append ()</title>
<programlisting>int         gnome_icon_list_append          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             const char *icon_filename,
                                             const char *text);</programlisting>
<para>
Appends an icon to the specified icon list.  The icon's image is loaded from
the specified file, and it is inserted at the <parameter>pos</parameter> index.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>           An icon list.
</entry></row>
<row><entry align="right"><parameter>icon_filename</parameter>&nbsp;:</entry>
<entry> Name of the file that holds the icon's image.
</entry></row>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry>          Text to be used for the icon's caption.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-append-pixbuf">gnome_icon_list_append_pixbuf ()</title>
<programlisting>int         gnome_icon_list_append_pixbuf   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *im,
                                             const char *icon_filename,
                                             const char *text);</programlisting>
<para>
Appends an icon to the specified icon list.  The icon is created from
the specified Imlib image.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>      An icon list.
</entry></row>
<row><entry align="right"><parameter>im</parameter>&nbsp;:</entry>
<entry>       Pixbuf image with the icon image.
</entry></row>
<row><entry align="right"><parameter>icon_filename</parameter>&nbsp;:</entry>
<entry> Filename of the image file.
</entry></row>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry>     Text to be used for the icon's caption.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-clear">gnome_icon_list_clear ()</title>
<programlisting>void        gnome_icon_list_clear           (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
Clears the contents for the icon list by removing all the icons.  If destroy
handlers were specified for any of the icons, they will be called with the
appropriate data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-remove">gnome_icon_list_remove ()</title>
<programlisting>void        gnome_icon_list_remove          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);</programlisting>
<para>
Removes the icon at index position <parameter>pos</parameter>.  If a destroy handler was specified
for that icon, it will be called with the appropriate data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry> Index of the icon that should be removed.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-num-icons">gnome_icon_list_get_num_icons ()</title>
<programlisting><link linkend="guint">guint</link>       gnome_icon_list_get_num_icons   (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of icons in the icon list.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-selection-mode">gnome_icon_list_get_selection_mode ()</title>
<programlisting><link linkend="GtkSelectionMode">GtkSelectionMode</link> gnome_icon_list_get_selection_mode
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>  An icon list.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the current selection mode for an icon list.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-selection-mode">gnome_icon_list_set_selection_mode ()</title>
<programlisting>void        gnome_icon_list_set_selection_mode
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="GtkSelectionMode">GtkSelectionMode</link> mode);</programlisting>
<para>
Sets the selection mode for an icon list.  The <literal>GTK_SELECTION_MULTIPLE</literal> and
<literal>GTK_SELECTION_EXTENDED</literal> modes are considered equivalent.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>  An icon list.
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry> New selection mode.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-select-icon">gnome_icon_list_select_icon ()</title>
<programlisting>void        gnome_icon_list_select_icon     (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);</programlisting>
<para>
Selects the icon at the index specified by <parameter>pos</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry> Index of the icon to be selected.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-unselect-icon">gnome_icon_list_unselect_icon ()</title>
<programlisting>void        gnome_icon_list_unselect_icon   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);</programlisting>
<para>
Unselects the icon at the index specified by <parameter>pos</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry> Index of the icon to be unselected.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-unselect-all">gnome_icon_list_unselect_all ()</title>
<programlisting>int         gnome_icon_list_unselect_all    (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>   An icon list.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the number of icons in the icon list
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-selection">gnome_icon_list_get_selection ()</title>
<programlisting><link linkend="GList">GList</link>*      gnome_icon_list_get_selection   (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a list of integers with the indices of the currently selected icons.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-focus-icon">gnome_icon_list_focus_icon ()</title>
<programlisting>void        gnome_icon_list_focus_icon      (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="gint">gint</link> idx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>idx</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-icon-width">gnome_icon_list_set_icon_width ()</title>
<programlisting>void        gnome_icon_list_set_icon_width  (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int w);</programlisting>
<para>
Sets the amount of horizontal space allocated to the icons, i.e. the column
width of the icon list.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>w</parameter>&nbsp;:</entry>
<entry>   New width for the icon columns.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-row-spacing">gnome_icon_list_set_row_spacing ()</title>
<programlisting>void        gnome_icon_list_set_row_spacing (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);</programlisting>
<para>
Sets the spacing to be used between rows of icons.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>    An icon list.
</entry></row>
<row><entry align="right"><parameter>pixels</parameter>&nbsp;:</entry>
<entry> Number of pixels for inter-row spacing.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-col-spacing">gnome_icon_list_set_col_spacing ()</title>
<programlisting>void        gnome_icon_list_set_col_spacing (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);</programlisting>
<para>
Sets the spacing to be used between columns of icons.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>    An icon list.
</entry></row>
<row><entry align="right"><parameter>pixels</parameter>&nbsp;:</entry>
<entry> Number of pixels for inter-column spacing.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-text-spacing">gnome_icon_list_set_text_spacing ()</title>
<programlisting>void        gnome_icon_list_set_text_spacing
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);</programlisting>
<para>
Sets the spacing to be used between an icon's image and its text caption.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>    An icon list.
</entry></row>
<row><entry align="right"><parameter>pixels</parameter>&nbsp;:</entry>
<entry> Number of pixels between an icon's image and its caption.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-icon-border">gnome_icon_list_set_icon_border ()</title>
<programlisting>void        gnome_icon_list_set_icon_border (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pixels);</programlisting>
<para>
Sets the width of the border to be displayed around an icon's image.  This is
currently not implemented.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>    An icon list.
</entry></row>
<row><entry align="right"><parameter>pixels</parameter>&nbsp;:</entry>
<entry> Number of border pixels to be used around an icon's image.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-separators">gnome_icon_list_set_separators ()</title>
<programlisting>void        gnome_icon_list_set_separators  (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             const char *sep);</programlisting>
<para>
Sets the characters that can be used as word separators when doing
word-wrapping in the icon text captions.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>sep</parameter>&nbsp;:</entry>
<entry> String with characters to be used as word separators.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-icon-filename">gnome_icon_list_get_icon_filename ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gnome_icon_list_get_icon_filename
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>idx</parameter>&nbsp;:</entry>
<entry> Index of an <parameter>icon</parameter>.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the filename of the icon with index <parameter>idx</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-find-icon-from-filename">gnome_icon_list_find_icon_from_filename ()</title>
<programlisting>int         gnome_icon_list_find_icon_from_filename
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             const char *filename);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>       An icon list.
</entry></row>
<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
<entry>  Filename of an icon.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the index of the icon whose filename is <parameter>filename</parameter> or -1 if
there is no icon with this filename.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-icon-data">gnome_icon_list_set_icon_data ()</title>
<programlisting>void        gnome_icon_list_set_icon_data   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>idx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-set-icon-data-full">gnome_icon_list_set_icon_data_full ()</title>
<programlisting>void        gnome_icon_list_set_icon_data_full
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             <link linkend="gpointer">gpointer</link> data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);</programlisting>
<para>
Associates the <parameter>data</parameter> pointer to the icon at the index specified by <parameter>pos</parameter>.  The
<parameter>destroy</parameter> argument points to a function that will be called when the icon is
destroyed, or NULL if no function is to be called when this happens.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>     An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry>     Index of an icon.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>    User data to set on the icon.
</entry></row>
<row><entry align="right"><parameter>destroy</parameter>&nbsp;:</entry>
<entry> Destroy notification handler for the icon.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-find-icon-from-data">gnome_icon_list_find_icon_from_data ()</title>
<programlisting>int         gnome_icon_list_find_icon_from_data
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>    An icon list.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>   Data pointer associated to an icon.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the index of the icon whose user data has been set to <parameter>data</parameter>,
or -1 if no icon has this data associated to it.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-icon-data">gnome_icon_list_get_icon_data ()</title>
<programlisting><link linkend="gpointer">gpointer</link>    gnome_icon_list_get_icon_data   (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry> Index of an icon.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the user data pointer associated to the icon at the index specified
by <parameter>pos</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-moveto">gnome_icon_list_moveto ()</title>
<programlisting>void        gnome_icon_list_moveto          (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos,
                                             <link linkend="double">double</link> yalign);</programlisting>
<para>
Makes the icon whose index is <parameter>pos</parameter> be visible on the screen.  The icon list
gets scrolled so that the icon is visible.  An alignment of 0.0 represents
the top of the visible part of the icon list, and 1.0 represents the bottom.
An icon can be centered on the icon list.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>    An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry>    Index of an icon.
</entry></row>
<row><entry align="right"><parameter>yalign</parameter>&nbsp;:</entry>
<entry> Vertical alignment of the icon.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-icon-is-visible">gnome_icon_list_icon_is_visible ()</title>
<programlisting><link linkend="GtkVisibility">GtkVisibility</link> gnome_icon_list_icon_is_visible
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int pos);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry> Index of an icon.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>whether the icon at the index specified by <parameter>pos</parameter> is visible.  This
will be <literal>GTK_VISIBILITY_NONE</literal> if the icon is not visible at all,
<literal>GTK_VISIBILITY_PARTIAL</literal> if the icon is at least partially shown, and
<literal>GTK_VISIBILITY_FULL</literal> if the icon is fully visible.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-icon-at">gnome_icon_list_get_icon_at ()</title>
<programlisting>int         gnome_icon_list_get_icon_at     (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int x,
                                             int y);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>   X position in the icon list window.
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry>   Y position in the icon list window.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the index of the icon that is under the specified coordinates, which
are relative to the icon list's window.  If there is no icon in that
position, -1 is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-items-per-line">gnome_icon_list_get_items_per_line ()</title>
<programlisting>int         gnome_icon_list_get_items_per_line
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry> An icon list.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of icons that fit in a line or row.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-icon-text-item">gnome_icon_list_get_icon_text_item ()</title>
<programlisting><link linkend="GnomeIconTextItem">GnomeIconTextItem</link>* gnome_icon_list_get_icon_text_item
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>idx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-icon-list-get-icon-pixbuf-item">gnome_icon_list_get_icon_pixbuf_item ()</title>
<programlisting><link linkend="GnomeCanvasPixbuf">GnomeCanvasPixbuf</link>* gnome_icon_list_get_icon_pixbuf_item
                                            (<link linkend="GnomeIconList">GnomeIconList</link> *gil,
                                             int idx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gil</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>idx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="GnomeIconList-focus-icon">The &quot;focus-icon&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>iconlist</parameter>&nbsp;:</entry>
<entry>the object which received the signal.
</entry></row>
<row><entry align="right"><parameter>arg1</parameter>&nbsp;:</entry>
<entry>

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeIconList-move-cursor">The &quot;move-cursor&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="GtkDirectionType">GtkDirectionType</link> arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>iconlist</parameter>&nbsp;:</entry>
<entry>the object which received the signal.
</entry></row>
<row><entry align="right"><parameter>arg1</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>arg2</parameter>&nbsp;:</entry>
<entry>

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeIconList-select-icon">The &quot;select-icon&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="GdkEvent">GdkEvent</link> *event,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>iconlist</parameter>&nbsp;:</entry>
<entry>the object which received the signal.
</entry></row>
<row><entry align="right"><parameter>arg1</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>event</parameter>&nbsp;:</entry>
<entry>

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeIconList-text-changed">The &quot;text-changed&quot; signal</title>
<programlisting><link linkend="gboolean">gboolean</link>    user_function                  (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gchar">gchar</link> *arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>iconlist</parameter>&nbsp;:</entry>
<entry>the object which received the signal.
</entry></row>
<row><entry align="right"><parameter>arg1</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>arg2</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>

</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeIconList-toggle-cursor-selection">The &quot;toggle-cursor-selection&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>iconlist</parameter>&nbsp;:</entry>
<entry>the object which received the signal.

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeIconList-unselect-icon">The &quot;unselect-icon&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeIconList">GnomeIconList</link> *iconlist,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="GdkEvent">GdkEvent</link> *event,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>iconlist</parameter>&nbsp;:</entry>
<entry>the object which received the signal.
</entry></row>
<row><entry align="right"><parameter>arg1</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>event</parameter>&nbsp;:</entry>
<entry>

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2>
</refsect1>



</refentry>
