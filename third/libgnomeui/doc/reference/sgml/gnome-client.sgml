<refentry id="GnomeClient">
<refmeta>
<refentrytitle>GnomeClient</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GnomeClient</refname><refpurpose>Interactions with the session manager.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;libgnomeui/libgnomeui.h&gt;


#define     <link linkend="GNOME-CLIENT-CONNECTED-CAPS">GNOME_CLIENT_CONNECTED</link>          (obj)
enum        <link linkend="GnomeDialogType">GnomeDialogType</link>;
enum        <link linkend="GnomeRestartStyle">GnomeRestartStyle</link>;
enum        <link linkend="GnomeClientFlags">GnomeClientFlags</link>;
enum        <link linkend="GnomeSaveStyle">GnomeSaveStyle</link>;
enum        <link linkend="GnomeInteractStyle">GnomeInteractStyle</link>;
void        (<link linkend="GnomeInteractFunction">*GnomeInteractFunction</link>)        (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> key,
                                             <link linkend="GnomeDialogType">GnomeDialogType</link> dialog_type,
                                             <link linkend="gpointer">gpointer</link> data);
struct      <link linkend="GnomeClient-struct">GnomeClient</link>;
#define     <link linkend="GNOME-CLIENT-PARAM-SM-CONNECT-CAPS">GNOME_CLIENT_PARAM_SM_CONNECT</link>
<link linkend="GnomeClient">GnomeClient</link>* <link linkend="gnome-master-client">gnome_master_client</link>            (void);
const <link linkend="gchar">gchar</link>* <link linkend="gnome-client-get-config-prefix">gnome_client_get_config_prefix</link> (<link linkend="GnomeClient">GnomeClient</link> *client);
const <link linkend="gchar">gchar</link>* <link linkend="gnome-client-get-global-config-prefix">gnome_client_get_global_config_prefix</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client);
void        <link linkend="gnome-client-set-global-config-prefix">gnome_client_set_global_config_prefix</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *prefix);
<link linkend="GnomeClientFlags">GnomeClientFlags</link> <link linkend="gnome-client-get-flags">gnome_client_get_flags</link>     (<link linkend="GnomeClient">GnomeClient</link> *client);
void        <link linkend="gnome-client-set-restart-style">gnome_client_set_restart_style</link>  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeRestartStyle">GnomeRestartStyle</link> style);
void        <link linkend="gnome-client-set-priority">gnome_client_set_priority</link>       (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="guint">guint</link> priority);
void        <link linkend="gnome-client-set-restart-command">gnome_client_set_restart_command</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);
void        <link linkend="gnome-client-add-static-arg">gnome_client_add_static_arg</link>     (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             ...);
void        <link linkend="gnome-client-set-discard-command">gnome_client_set_discard_command</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);
void        <link linkend="gnome-client-set-resign-command">gnome_client_set_resign_command</link> (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);
void        <link linkend="gnome-client-set-shutdown-command">gnome_client_set_shutdown_command</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);
void        <link linkend="gnome-client-set-current-directory">gnome_client_set_current_directory</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *dir);
void        <link linkend="gnome-client-set-environment">gnome_client_set_environment</link>    (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *name,
                                             const <link linkend="gchar">gchar</link> *value);
void        <link linkend="gnome-client-set-clone-command">gnome_client_set_clone_command</link>  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);
void        <link linkend="gnome-client-set-process-id">gnome_client_set_process_id</link>     (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="pid-t">pid_t</link> pid);
void        <link linkend="gnome-client-set-program">gnome_client_set_program</link>        (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *program);
void        <link linkend="gnome-client-set-user-id">gnome_client_set_user_id</link>        (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *id);
void        <link linkend="gnome-client-save-any-dialog">gnome_client_save_any_dialog</link>    (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GtkDialog">GtkDialog</link> *dialog);
void        <link linkend="gnome-client-save-error-dialog">gnome_client_save_error_dialog</link>  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GtkDialog">GtkDialog</link> *dialog);
void        <link linkend="gnome-client-request-phase-2">gnome_client_request_phase_2</link>    (<link linkend="GnomeClient">GnomeClient</link> *client);
void        <link linkend="gnome-client-request-save">gnome_client_request_save</link>       (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeSaveStyle">GnomeSaveStyle</link> save_style,
                                             <link linkend="gboolean">gboolean</link> shutdown,
                                             <link linkend="GnomeInteractStyle">GnomeInteractStyle</link> interact_style,
                                             <link linkend="gboolean">gboolean</link> fast,
                                             <link linkend="gboolean">gboolean</link> global);
void        <link linkend="gnome-client-flush">gnome_client_flush</link>              (<link linkend="GnomeClient">GnomeClient</link> *client);
void        <link linkend="gnome-client-disable-master-connection">gnome_client_disable_master_connection</link>
                                            (void);
<link linkend="GnomeClient">GnomeClient</link>* <link linkend="gnome-client-new">gnome_client_new</link>               (void);
<link linkend="GnomeClient">GnomeClient</link>* <link linkend="gnome-client-new-without-connection">gnome_client_new_without_connection</link>
                                            (void);
void        <link linkend="gnome-client-connect">gnome_client_connect</link>            (<link linkend="GnomeClient">GnomeClient</link> *client);
void        <link linkend="gnome-client-disconnect">gnome_client_disconnect</link>         (<link linkend="GnomeClient">GnomeClient</link> *client);
void        <link linkend="gnome-client-set-id">gnome_client_set_id</link>             (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *id);
const <link linkend="gchar">gchar</link>* <link linkend="gnome-client-get-id">gnome_client_get_id</link>            (<link linkend="GnomeClient">GnomeClient</link> *client);
const <link linkend="gchar">gchar</link>* <link linkend="gnome-client-get-previous-id">gnome_client_get_previous_id</link>   (<link linkend="GnomeClient">GnomeClient</link> *client);
const <link linkend="gchar">gchar</link>* <link linkend="gnome-client-get-desktop-id">gnome_client_get_desktop_id</link>    (<link linkend="GnomeClient">GnomeClient</link> *client);
void        <link linkend="gnome-client-request-interaction">gnome_client_request_interaction</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeDialogType">GnomeDialogType</link> dialog_type,
                                             <link linkend="GnomeInteractFunction">GnomeInteractFunction</link> function,
                                             <link linkend="gpointer">gpointer</link> data);
void        <link linkend="gnome-client-request-interaction-interp">gnome_client_request_interaction_interp</link>
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeDialogType">GnomeDialogType</link> dialog_type,
                                             <link linkend="GtkCallbackMarshal">GtkCallbackMarshal</link> function,
                                             <link linkend="gpointer">gpointer</link> data,
                                             <link linkend="GtkDestroyNotify">GtkDestroyNotify</link> destroy);
void        <link linkend="gnome-interaction-key-return">gnome_interaction_key_return</link>    (<link linkend="gint">gint</link> key,
                                             <link linkend="gboolean">gboolean</link> cancel_shutdown);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GtkObject">GtkObject</link>
         +----GnomeClient
</synopsis>

</refsect1>


<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="GnomeClient-connect">connect</link>&quot;   void        user_function      (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gboolean">gboolean</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeClient-die">die</link>&quot;       void        user_function      (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeClient-disconnect">disconnect</link>&quot;
            void        user_function      (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeClient-save-complete">save-complete</link>&quot;
            void        user_function      (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeClient-save-yourself">save-yourself</link>&quot;
            <link linkend="gboolean">gboolean</link>    user_function      (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="GnomeSaveStyle">GnomeSaveStyle</link> arg2,
                                            <link linkend="gboolean">gboolean</link> arg3,
                                            <link linkend="GnomeInteractStyle">GnomeInteractStyle</link> arg4,
                                            <link linkend="gboolean">gboolean</link> arg5,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GnomeClient-shutdown-cancelled">shutdown-cancelled</link>&quot;
            void        user_function      (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GNOME-CLIENT-CONNECTED-CAPS">GNOME_CLIENT_CONNECTED()</title>
<programlisting>#define GNOME_CLIENT_CONNECTED(obj) (GNOME_CLIENT (obj)-&gt;smc_conn)
</programlisting>
<para>
Determine if the <link linkend="GnomeClient">GnomeClient</link> instance has connected to the session manager
already.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry>A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><literal>TRUE</literal> if already connected to the session manager, <literal>FALSE</literal> otherwise.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GnomeDialogType">enum GnomeDialogType</title>
<programlisting>typedef enum
{
  GNOME_DIALOG_ERROR,
  GNOME_DIALOG_NORMAL
} GnomeDialogType;
</programlisting>
<para>
The dialogs used by the session manager to handler user interactions.
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>GNOME_DIALOG_ERROR</literal></entry>
<entry>Used when an error has occurred.
</entry>
</row>
<row>
<entry><literal>GNOME_DIALOG_NORMAL</literal></entry>
<entry>Used for all other (non-error) interactions.

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GnomeRestartStyle">enum GnomeRestartStyle</title>
<programlisting>typedef enum
{
  /* update structure when adding an enum */
  GNOME_RESTART_IF_RUNNING,
  GNOME_RESTART_ANYWAY,
  GNOME_RESTART_IMMEDIATELY,
  GNOME_RESTART_NEVER
} GnomeRestartStyle;
</programlisting>
<para>
The various ways in which the session manager can restart a client. Set by
calling <link linkend="gnome-client-set-restart-style">gnome_client_set_restart_style</link>().
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>GNOME_RESTART_IF_RUNNING</literal></entry>
<entry>Restart if the client was running when the previous
session exited.
</entry>
</row>
<row>
<entry><literal>GNOME_RESTART_ANYWAY</literal></entry>
<entry>Restart even if the client was exited before the user
logged out of the previous session.
</entry>
</row>
<row>
<entry><literal>GNOME_RESTART_IMMEDIATELY</literal></entry>
<entry>Restart the client immediately whenever it crashes
or exits.
</entry>
</row>
<row>
<entry><literal>GNOME_RESTART_NEVER</literal></entry>
<entry>Do not restart the client.

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GnomeClientFlags">enum GnomeClientFlags</title>
<programlisting>typedef enum
{
  GNOME_CLIENT_IS_CONNECTED= 1 &lt;&lt; 0,
  GNOME_CLIENT_RESTARTED   = 1 &lt;&lt; 1,
  GNOME_CLIENT_RESTORED    = 1 &lt;&lt; 2
} GnomeClientFlags;
</programlisting>
<para>
Flags indicating the status of a client (as seen by the session manager). Used
as return values by <link linkend="gnome-client-get-flags">gnome_client_get_flags</link>().
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>GNOME_CLIENT_IS_CONNECTED</literal></entry>
<entry>The client is connected to the session manager.
</entry>
</row>
<row>
<entry><literal>GNOME_CLIENT_RESTARTED</literal></entry>
<entry>The client has been restarted (i.e. it has been
running with the same client id previously).
</entry>
</row>
<row>
<entry><literal>GNOME_CLIENT_RESTORED</literal></entry>
<entry>There may be a configuration file from which the
client's state should be restored (applies only to the master client).

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GnomeSaveStyle">enum GnomeSaveStyle</title>
<programlisting>typedef enum
{
  /* update structure when adding an enum */
  GNOME_SAVE_GLOBAL,
  GNOME_SAVE_LOCAL,
  GNOME_SAVE_BOTH
} GnomeSaveStyle;
</programlisting>
<para>
Which pieces of data a client should save when receiving a "SaveYourself" call
from the session manager.
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>GNOME_SAVE_GLOBAL</literal></entry>
<entry>Save data (to somewhere persistent) that affects and is
visible to all users of this application.
</entry>
</row>
<row>
<entry><literal>GNOME_SAVE_LOCAL</literal></entry>
<entry>Save data that only applies to this instance of the
application.
</entry>
</row>
<row>
<entry><literal>GNOME_SAVE_BOTH</literal></entry>
<entry>Save both global and local data.

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GnomeInteractStyle">enum GnomeInteractStyle</title>
<programlisting>typedef enum
{
  GNOME_INTERACT_NONE,
  GNOME_INTERACT_ERRORS,
  GNOME_INTERACT_ANY
} GnomeInteractStyle;
</programlisting>
<para>
Indicates how a "SaveYourself" command should interact with the user.
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>GNOME_INTERACT_NONE</literal></entry>
<entry>The client should never interact with the user.
</entry>
</row>
<row>
<entry><literal>GNOME_INTERACT_ERRORS</literal></entry>
<entry>The client should only interact when there are errors.
</entry>
</row>
<row>
<entry><literal>GNOME_INTERACT_ANY</literal></entry>
<entry>The client cna interact with the user for any reason.

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GnomeInteractFunction">GnomeInteractFunction ()</title>
<programlisting>void        (*GnomeInteractFunction)        (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> key,
                                             <link linkend="GnomeDialogType">GnomeDialogType</link> dialog_type,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
A function called when the client wishes to interact with the user a the
session manager's convenience (usually during shutdown and restarts). All other
clients are blocked from interacting with the user until the <parameter>key</parameter> is released
via a call to <link linkend="gnome-interaction-key-return">gnome_interaction_key_return</link>().
</para>
<para>
Although the function is not obliged to respect the passed in <parameter>dialog_type</parameter>, it
is bad form not to do so.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry>The <link linkend="GnomeClient">GnomeClient</link> instance doing the interaction.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>A unique key.
</entry></row>
<row><entry align="right"><parameter>dialog_type</parameter>&nbsp;:</entry>
<entry>The <link linkend="GnomeDialogType">GnomeDialogType</link> that should be used to do the interaction.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>Application specific data that was specified at the time the callback
was set up.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GnomeClient-struct">struct GnomeClient</title>
<programlisting>struct GnomeClient;</programlisting>
<para>
A widget representing a client and containing information about the client's
interaction with the session manager.
</para></refsect2>
<refsect2>
<title><anchor id="GNOME-CLIENT-PARAM-SM-CONNECT-CAPS">GNOME_CLIENT_PARAM_SM_CONNECT</title>
<programlisting>#define GNOME_CLIENT_PARAM_SM_CONNECT "sm-connect"
</programlisting>
<para>
Passed as a parameter to the application's <link linkend="gnome-program-init">gnome_program_init</link>() call (with a
value of <literal>TRUE</literal> or <literal>FALSE</literal>) to indicate whether the application should attempt to
connect to the session manager or not. Can be overridden by the user passing
<literal>--sm-disable</literal> on the command line and defaults to <literal>TRUE</literal>.
</para></refsect2>
<refsect2>
<title><anchor id="gnome-master-client">gnome_master_client ()</title>
<programlisting><link linkend="GnomeClient">GnomeClient</link>* gnome_master_client            (void);</programlisting>
<para>
Get the master session management client.  This master client gets a client
id, that may be specified by the '--sm-client-id' command line option.  A
master client will be generated by <link linkend="gnome-program-init">gnome_program_init</link>().  If possible the
master client will contact the session manager after command-line parsing is
finished (unless <link linkend="gnome-client-disable-master-connection">gnome_client_disable_master_connection</link>() was called). The
master client will also set the SM_CLIENT_ID property on the client leader
window of your application.
</para>
<para>
Additionally, the master client gets some static arguments set automatically
(see <link linkend="gnome-client-add-static-arg">gnome_client_add_static_arg</link>() for static arguments):
<link linkend="gnome-program-init">gnome_program_init</link>() passes all the command line options which are
recognised by gtk as static arguments to the master client.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>  Pointer to the master client
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-get-config-prefix">gnome_client_get_config_prefix ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gnome_client_get_config_prefix (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Get the config prefix for a client. This config prefix
provides a suitable place to store any details about the state of
the client which can not be described using the app's command line
arguments (as set in the restart command). You may push the
returned value using <link linkend="gnome-config-push-prefix">gnome_config_push_prefix</link>() and read or write
any values you require.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Config prefix. The returned string belongs to libgnomeui library
and should NOT be freed by the caller.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-get-global-config-prefix">gnome_client_get_global_config_prefix ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gnome_client_get_global_config_prefix
                                            (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Get the config prefix that will be returned by
<link linkend="gnome-client-get-config-prefix">gnome_client_get_config_prefix</link>() for clients which have NOT been restarted
or cloned (i.e. for clients started by the user without `--sm-' options).
This config prefix may be used to write the user's preferred config for
these "new" clients.
</para>
<para>
You could also use this prefix as a place to store and retrieve config
details that you wish to apply to ALL instances of the app. However, this
practice limits the users freedom to configure each instance in a different
way so it should be used with caution.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>  The config prefix as a newly allocated string.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-global-config-prefix">gnome_client_set_global_config_prefix ()</title>
<programlisting>void        gnome_client_set_global_config_prefix
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *prefix);</programlisting>
<para>
Set the value used for the global config prefix. The config
prefixes returned by <link linkend="gnome-client-get-config-prefix">gnome_client_get_config_prefix</link>() are formed by
extending this prefix with an unique identifier.
</para>
<para>
The global config prefix defaults to a name based on the name of
the executable. This function allows you to set it to a different
value. It should be called BEFORE retrieving the config prefix for
the first time. Later calls will be ignored.
</para>
<para>
For example, setting a global config prefix of "/app.d/session/"
would ensure that all your session save files or directories would
be gathered together into the app.d directory.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>prefix</parameter>&nbsp;:</entry>
<entry> Prefix for saving the global configuration.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-get-flags">gnome_client_get_flags ()</title>
<programlisting><link linkend="GnomeClientFlags">GnomeClientFlags</link> gnome_client_get_flags     (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Determine the client's status with the session manager.,</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Various <link linkend="GnomeClientFlag">GnomeClientFlag</link> flags which have been or'd together.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-restart-style">gnome_client_set_restart_style ()</title>
<programlisting>void        gnome_client_set_restart_style  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeRestartStyle">GnomeRestartStyle</link> style);</programlisting>
<para>
Tells the session manager how the client should be restarted in future
session. The options are given by the <link linkend="GnomeRestartStyle">GnomeRestartStyle</link> enum.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>style</parameter>&nbsp;:</entry>
<entry> When to restart the client.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-priority">gnome_client_set_priority ()</title>
<programlisting>void        gnome_client_set_priority       (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="guint">guint</link> priority);</programlisting>
<para>
The gnome-session manager restarts clients in order of their
priorities in a similar way to the start up ordering in SysV.
This function allows the app to suggest a position in this
ordering. The value should be between 0 and 99. A default
value of 50 is assigned to apps that do not provide a value.
The user may assign a different priority.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>priority</parameter>&nbsp;:</entry>
<entry> Position of client in session start up ordering.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-restart-command">gnome_client_set_restart_command ()</title>
<programlisting>void        gnome_client_set_restart_command
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);</programlisting>
<para>
When clients crash or the user logs out and back in, they are
restarted. This command should perform the restart.  Executing the restart
command on the local host should reproduce the state of the client at the
time of the session save as closely as possible. Saving config info under
the <link linkend="gnome-client-get-config-prefix">gnome_client_get_config_prefix</link>() is generally useful.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> Number of strings in argv.
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> Argument vector to an <link linkend="execv">execv</link>() to restart the client.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-add-static-arg">gnome_client_add_static_arg ()</title>
<programlisting>void        gnome_client_add_static_arg     (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             ...);</programlisting>
<para>
You can add arguments to your restart command's argv with this
function. This function provides an alternative way of adding new arguments
to the restart command. The arguments are placed before the arguments
specified by <link linkend="gnome-client-set-restart-command">gnome_client_set_restart_command</link>() and after the arguments
recognised by GTK+ that are specified by the user on the original command
line.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
<entry> <literal>NULL</literal>-terminated list of arguments to add to the restart command.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-discard-command">gnome_client_set_discard_command ()</title>
<programlisting>void        gnome_client_set_discard_command
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);</programlisting>
<para>
</para>
<para>
Provides a command to run when a client is removed from the session. It might
delete session-specific config files for example.  Executing the discard
command on the local host should delete the information saved as part of the
session save that was in progress when the discard command was set. For
example:

  <example>
    <title>Setting up a client's discard command</title>
    <programlisting>
gchar *prefix = gnome_client_get_config_prefix (client);
gchar *argv[] = { "rm", "-r", NULL };
argv[2] = gnome_config_get_real_path (prefix);
gnome_client_set_discard_command (client, 3, argv);
    </programlisting>
  </example>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> Number of strings in argv.
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> Vector of strings such as those passed to <link linkend="execv">execv</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-resign-command">gnome_client_set_resign_command ()</title>
<programlisting>void        gnome_client_set_resign_command (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);</programlisting>
<para>
Some clients can be "undone," removing their effects and
deleting any saved state. For example, xmodmap could register a resign
command to undo the keymap changes it saved.
</para>
<para>
Used by clients that use the <link linkend="GNOME-RESTART-ANYWAY-CAPS">GNOME_RESTART_ANYWAY</link> restart style to to undo
their effects (these clients usually perform initialisation functions and
leave effects behind after they die). The resign command combines the
effects of a shutdown command and a discard command. It is executed when the
user decides that the client should cease to be restarted.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> Number of strings in <parameter>argv</parameter>.
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> <link linkend="execv">execv</link>()-style command to undo the effects of the client.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-shutdown-command">gnome_client_set_shutdown_command ()</title>
<programlisting>void        gnome_client_set_shutdown_command
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);</programlisting>
<para>
GNOME_RESTART_ANYWAY clients can set this command to run
when the user logs out but the client is no longer running.
</para>
<para>
Used by clients that use the GNOME_RESTART_ANYWAY restart style to
to undo their effects (these clients usually perform initialisation
functions and leave effects behind after they die).  The shutdown
command simply undoes the effects of the client. It is executed
during a normal logout.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> Number of strings in argv.
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> Command to shutdown the client if the client isn't running.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-current-directory">gnome_client_set_current_directory ()</title>
<programlisting>void        gnome_client_set_current_directory
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *dir);</programlisting>
<para>
Set the directory to be in when running shutdown, discard,
restart, etc. commands.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>dir</parameter>&nbsp;:</entry>
<entry> Directory path.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-environment">gnome_client_set_environment ()</title>
<programlisting>void        gnome_client_set_environment    (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *name,
                                             const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Set an environment variable to be placed in the
client's environment prior to running restart, shutdown, discard, etc. commands.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> Name of the environment variable
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> Value of the environment variable
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-clone-command">gnome_client_set_clone_command ()</title>
<programlisting>void        gnome_client_set_clone_command  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="gint">gint</link> argc,
                                             <link linkend="gchar">gchar</link> *argv[]);</programlisting>
<para>
Set a command the session manager can use to create a new
instance of the application.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> Number of strings in the <parameter>argv</parameter> vector.
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> Argument strings, suitable for use with <link linkend="execv">execv</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-process-id">gnome_client_set_process_id ()</title>
<programlisting>void        gnome_client_set_process_id     (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="pid-t">pid_t</link> pid);</programlisting>
<para>
The client should tell the session manager the result of
<link linkend="getpid">getpid</link>(). However, GNOME does this automatically; so you do not need this
function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>pid</parameter>&nbsp;:</entry>
<entry> PID to set as the client's PID.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-program">gnome_client_set_program ()</title>
<programlisting>void        gnome_client_set_program        (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *program);</programlisting>
<para>
Used to tell the session manager the name of your program. Set
automatically; this function isn't needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>program</parameter>&nbsp;:</entry>
<entry> Name of the program.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-user-id">gnome_client_set_user_id ()</title>
<programlisting>void        gnome_client_set_user_id        (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Tell the session manager the user's login name. GNOME
does this automatically; no need to call the function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> Username.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-save-any-dialog">gnome_client_save_any_dialog ()</title>
<programlisting>void        gnome_client_save_any_dialog    (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GtkDialog">GtkDialog</link> *dialog);</programlisting>
<para>
May be called during a "save_youself" handler to request that a
(modal) dialog is presented to the user. The session manager decides
when the dialog is shown, but it will not be shown it unless the
session manager is sending an interaction style of <link linkend="GNOME-INTERACT-ANY-CAPS">GNOME_INTERACT_ANY</link>.
"Cancel" and "Log out" buttons will be added during a shutdown.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to <link linkend="GnomeClient">GnomeClient</link> object.
</entry></row>
<row><entry align="right"><parameter>dialog</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME dialog widget (a <link linkend="GtkDialog">GtkDialog</link> widget).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-save-error-dialog">gnome_client_save_error_dialog ()</title>
<programlisting>void        gnome_client_save_error_dialog  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GtkDialog">GtkDialog</link> *dialog);</programlisting>
<para>
May be called during a "save_youself" handler when an error has occured
during the save. The session manager decides when the dialog is shown, but
it will not be shown it unless the session manager is sending an interaction
style of <link linkend="GNOME-INTERACT-ANY-CAPS">GNOME_INTERACT_ANY</link>. "Cancel" and "Log out" buttons will be added
during a shutdown.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to <link linkend="GnomeClient">GnomeClient</link> object.
</entry></row>
<row><entry align="right"><parameter>dialog</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME dialog widget (a <link linkend="GtkDialog">GtkDialog</link> widget).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-request-phase-2">gnome_client_request_phase_2 ()</title>
<programlisting>void        gnome_client_request_phase_2    (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Request the session managaer to emit the "save_yourself"
signal for a second time after all the clients in the session have ceased
interacting with the user and entered an idle state. This might be useful if
your app manages other apps and requires that they are in an idle state
before saving its final data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-request-save">gnome_client_request_save ()</title>
<programlisting>void        gnome_client_request_save       (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeSaveStyle">GnomeSaveStyle</link> save_style,
                                             <link linkend="gboolean">gboolean</link> shutdown,
                                             <link linkend="GnomeInteractStyle">GnomeInteractStyle</link> interact_style,
                                             <link linkend="gboolean">gboolean</link> fast,
                                             <link linkend="gboolean">gboolean</link> global);</programlisting>
<para>
Request the session manager to save the session in
some way. The arguments correspond with the arguments passed to the
"save_yourself" signal handler.
</para>
<para>
The save_style indicates whether the save should affect data
accessible to other users (<link linkend="GNOME-SAVE-GLOBAL-CAPS">GNOME_SAVE_GLOBAL</link>) or only the state
visible to the current user (<link linkend="GNOME-SAVE-LOCAL-CAPS">GNOME_SAVE_LOCAL</link>) or both. Setting
shutdown to <literal>TRUE</literal> will initiate a logout. The interact_style
specifies which kinds of interaction will be available. Setting
fast to <literal>TRUE</literal> will limit the save to setting the session manager
properties plus any essential data.  Setting the value of global to
<literal>TRUE</literal> will request that all the other apps in the session do a save
as well. A global save is mandatory when doing a shutdown.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>save_style</parameter>&nbsp;:</entry>
<entry> Save style to request.
</entry></row>
<row><entry align="right"><parameter>shutdown</parameter>&nbsp;:</entry>
<entry> Whether to log out of the session.
</entry></row>
<row><entry align="right"><parameter>interact_style</parameter>&nbsp;:</entry>
<entry> Whether to allow user interaction.
</entry></row>
<row><entry align="right"><parameter>fast</parameter>&nbsp;:</entry>
<entry> Minimize activity to save as soon as possible.
</entry></row>
<row><entry align="right"><parameter>global</parameter>&nbsp;:</entry>
<entry> Request that all other apps in the session also save their state.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-flush">gnome_client_flush ()</title>
<programlisting>void        gnome_client_flush              (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
This will force the underlying connection to the session manager to be
flushed. This is useful if you have some pending changes that you want to
make sure get committed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-disable-master-connection">gnome_client_disable_master_connection ()</title>
<programlisting>void        gnome_client_disable_master_connection
                                            (void);</programlisting>
<warning>
<para>
<literal>gnome_client_disable_master_connection</literal> is deprecated and should not be used in newly-written code.
</para>
</warning>
<para>
Don't connect the master client to the session manager. Usually
invoked by users when they pass the --sm-disable argument to a Gnome application.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-client-new">gnome_client_new ()</title>
<programlisting><link linkend="GnomeClient">GnomeClient</link>* gnome_client_new               (void);</programlisting>
<para>
Allocates memory for a new GNOME session management client
object. After allocating, the client tries to connect to a session manager.
You probably want to use <link linkend="gnome-master-client">gnome_master_client</link>() instead.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Pointer to a newly allocated GNOME session management client object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-new-without-connection">gnome_client_new_without_connection ()</title>
<programlisting><link linkend="GnomeClient">GnomeClient</link>* gnome_client_new_without_connection
                                            (void);</programlisting>
<para>
Allocates memory for a new GNOME session management client
object. You probably want to use <link linkend="gnome-master-client">gnome_master_client</link>() instead.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Pointer to a newly allocated GNOME session management client object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-connect">gnome_client_connect ()</title>
<programlisting>void        gnome_client_connect            (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Causes the client to connect to the session manager.
Usually happens automatically; no need to call this function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-disconnect">gnome_client_disconnect ()</title>
<programlisting>void        gnome_client_disconnect         (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Disconnect the client from the session manager.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-set-id">gnome_client_set_id ()</title>
<programlisting>void        gnome_client_set_id             (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Set the client's session management ID; must be done
before connecting to the session manager. There is usually no reason to call
this function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> Session management ID.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-get-id">gnome_client_get_id ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gnome_client_get_id            (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Returns session management ID</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>  Session management ID for this client; <literal>NULL</literal> if not connected to a
session manager.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-get-previous-id">gnome_client_get_previous_id ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gnome_client_get_previous_id   (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Get the session management ID from the previous session.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Pointer to the session management ID the client had in the last
session, or <literal>NULL</literal> if it was not in a previous session.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-get-desktop-id">gnome_client_get_desktop_id ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gnome_client_get_desktop_id    (<link linkend="GnomeClient">GnomeClient</link> *client);</programlisting>
<para>
Get the client ID of the desktop's current instance, i.e.  if
you consider the desktop as a whole as a session managed app, this
returns its session ID using a GNOME extension to session
management. May return <literal>NULL</literal> for apps not running under a recent
version of gnome-session; apps should handle that case.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> instance.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Session ID of GNOME desktop instance, or <literal>NULL</literal> if none.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-request-interaction">gnome_client_request_interaction ()</title>
<programlisting>void        gnome_client_request_interaction
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeDialogType">GnomeDialogType</link> dialog_type,
                                             <link linkend="GnomeInteractFunction">GnomeInteractFunction</link> function,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Use the following functions, if you want to interact with the
user during a "save_yourself" handler without being restricted to using the
dialog based commands <link linkend="gnome-client-save-any-dialog">gnome_client_save_any_dialog</link>() or
<link linkend="gnome-client-save-error-dialog">gnome_client_save_error_dialog</link>(). Note, however, that overriding the session
manager specified preference in this way (by using arbitrary dialog boxes)
is not very nice.
</para>
<para>
If and when the session manager decides that it's the app's turn to interact
then 'func' will be called with the specified arguments and a unique
'GnomeInteractionKey'. The session manager will block other
clients from interacting until this key is returned with
<link linkend="gnome-interaction-key-return">gnome_interaction_key_return</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> A <link linkend="GnomeClient">GnomeClient</link> object.
</entry></row>
<row><entry align="right"><parameter>dialog_type</parameter>&nbsp;:</entry>
<entry> The type of dialog to create.
</entry></row>
<row><entry align="right"><parameter>function</parameter>&nbsp;:</entry>
<entry> Callback to invoke to perform the interaction.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> Callback data.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-client-request-interaction-interp">gnome_client_request_interaction_interp ()</title>
<programlisting>void        gnome_client_request_interaction_interp
                                            (<link linkend="GnomeClient">GnomeClient</link> *client,
                                             <link linkend="GnomeDialogType">GnomeDialogType</link> dialog_type,
                                             <link linkend="GtkCallbackMarshal">GtkCallbackMarshal</link> function,
                                             <link linkend="gpointer">gpointer</link> data,
                                             <link linkend="GtkDestroyNotify">GtkDestroyNotify</link> destroy);</programlisting>
<para>
Similar to <link linkend="gnome-client-request-interaction">gnome_client_request_interaction</link>(), but used when
you need to destroy the callback data after the interaction.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry> Pointer to GNOME session client object.
</entry></row>
<row><entry align="right"><parameter>dialog_type</parameter>&nbsp;:</entry>
<entry> Type of dialog to show.
</entry></row>
<row><entry align="right"><parameter>function</parameter>&nbsp;:</entry>
<entry> Callback to perform the interaction (a <link linkend="GnomeInteractFunction">GnomeInteractFunction</link>).
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> Callback data.
</entry></row>
<row><entry align="right"><parameter>destroy</parameter>&nbsp;:</entry>
<entry> Function to destroy callback data.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-interaction-key-return">gnome_interaction_key_return ()</title>
<programlisting>void        gnome_interaction_key_return    (<link linkend="gint">gint</link> key,
                                             <link linkend="gboolean">gboolean</link> cancel_shutdown);</programlisting>
<para>
Used in interaction callback to tell the session manager
you are done interacting.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> Key passed to interaction callback
</entry></row>
<row><entry align="right"><parameter>cancel_shutdown</parameter>&nbsp;:</entry>
<entry> If <literal>TRUE</literal>, cancel the shutdown
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="GnomeClient-connect">The &quot;connect&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gboolean">gboolean</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Called once the client has been connected to the signal manager.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry>the object which received the signal.
</entry></row>
<row><entry align="right"><parameter>arg1</parameter>&nbsp;:</entry>
<entry><literal>TRUE</literal> if the application has been restarted.

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeClient-die">The &quot;die&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Called when the session manager wants the client to shut down.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry>the object which received the signal.

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeClient-disconnect">The &quot;disconnect&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Called when the client is disconnected from the session manager.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry>the object which received the signal.

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeClient-save-complete">The &quot;save-complete&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Called when the session manager has finished checkpointing all of the clients.
Clients are then free to change their state.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry>the object which received the signal.

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeClient-save-yourself">The &quot;save-yourself&quot; signal</title>
<programlisting><link linkend="gboolean">gboolean</link>    user_function                  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="GnomeSaveStyle">GnomeSaveStyle</link> arg2,
                                            <link linkend="gboolean">gboolean</link> arg3,
                                            <link linkend="GnomeInteractStyle">GnomeInteractStyle</link> arg4,
                                            <link linkend="gboolean">gboolean</link> arg5,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Called when either a "SaveYourself" or a "SaveYourselfPhase2" call is made by
the session manager.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry>the object which received the signal.
</entry></row>
<row><entry align="right"><parameter>arg1</parameter>&nbsp;:</entry>
<entry>The phase of the "SaveYourself" command ('1' or '2').
</entry></row>
<row><entry align="right"><parameter>arg2</parameter>&nbsp;:</entry>
<entry>The data which should be saved by the client (local, global or both).
</entry></row>
<row><entry align="right"><parameter>arg3</parameter>&nbsp;:</entry>
<entry><literal>TRUE</literal> if the session manager is shutting down.
</entry></row>
<row><entry align="right"><parameter>arg4</parameter>&nbsp;:</entry>
<entry>How the client is allowed to interact with the user while saving.
</entry></row>
<row><entry align="right"><parameter>arg5</parameter>&nbsp;:</entry>
<entry><literal>TRUE</literal> if this is to be a "fast" shutdown (saving minimal data).
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><literal>TRUE</literal> if the "SaveYourself" was completed succesfully, <literal>FALSE</literal>
otherwise.

</entry></row>
</tbody></tgroup></informaltable></refsect2><refsect2><title><anchor id="GnomeClient-shutdown-cancelled">The &quot;shutdown-cancelled&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GnomeClient">GnomeClient</link> *client,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Called if the session manager had sent a "SaveYourself" to all clients in
preparation for shutting down and the shutdown was then cancelled. A client can
then continue running and change its state.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>client</parameter>&nbsp;:</entry>
<entry>the object which received the signal.

</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>user data set when the signal handler was connected.</entry></row>
</tbody></tgroup></informaltable></refsect2>
</refsect1>



</refentry>
