<refentry id="libgnomeui-GnomeThumbnail">
<refmeta>
<refentrytitle>GnomeThumbnail</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GnomeThumbnail</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;libgnomeui/libgnomeui.h&gt;


struct      <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>;
enum        <link linkend="GnomeThumbnailSize">GnomeThumbnailSize</link>;
struct      <link linkend="GnomeThumbnailFactoryClass">GnomeThumbnailFactoryClass</link>;
<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>* <link linkend="gnome-thumbnail-factory-new">gnome_thumbnail_factory_new</link>
                                            (<link linkend="GnomeThumbnailSize">GnomeThumbnailSize</link> size);
char*       <link linkend="gnome-thumbnail-factory-lookup">gnome_thumbnail_factory_lookup</link>  (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-thumbnail-factory-has-valid-failed-thumbnail">gnome_thumbnail_factory_has_valid_failed_thumbnail</link>
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-thumbnail-factory-can-thumbnail">gnome_thumbnail_factory_can_thumbnail</link>
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             const char *mime_type,
                                             <link linkend="time-t">time_t</link> mtime);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  <link linkend="gnome-thumbnail-factory-generate-thumbnail">gnome_thumbnail_factory_generate_thumbnail</link>
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             const char *mime_type);
void        <link linkend="gnome-thumbnail-factory-save-thumbnail">gnome_thumbnail_factory_save_thumbnail</link>
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *thumbnail,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> original_mtime);
void        <link linkend="gnome-thumbnail-factory-create-failed-thumbnail">gnome_thumbnail_factory_create_failed_thumbnail</link>
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  <link linkend="gnome-thumbnail-scale-down-pixbuf">gnome_thumbnail_scale_down_pixbuf</link>
                                            (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             int dest_width,
                                             int dest_height);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-thumbnail-has-uri">gnome_thumbnail_has_uri</link>         (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             const char *uri);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-thumbnail-is-valid">gnome_thumbnail_is_valid</link>        (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);
char*       <link linkend="gnome-thumbnail-md5">gnome_thumbnail_md5</link>             (const char *uri);
char*       <link linkend="gnome-thumbnail-path-for-uri">gnome_thumbnail_path_for_uri</link>    (const char *uri,
                                             <link linkend="GnomeThumbnailSize">GnomeThumbnailSize</link> size);


</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeThumbnailFactory">struct GnomeThumbnailFactory</title>
<programlisting>struct GnomeThumbnailFactory {

	GObject parent;
	
	GnomeThumbnailFactoryPrivate *priv;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeThumbnailSize">enum GnomeThumbnailSize</title>
<programlisting>typedef enum {
  GNOME_THUMBNAIL_SIZE_NORMAL,
  GNOME_THUMBNAIL_SIZE_LARGE
} GnomeThumbnailSize;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeThumbnailFactoryClass">struct GnomeThumbnailFactoryClass</title>
<programlisting>struct GnomeThumbnailFactoryClass {

	GObjectClass parent;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-factory-new">gnome_thumbnail_factory_new ()</title>
<programlisting><link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>* gnome_thumbnail_factory_new
                                            (<link linkend="GnomeThumbnailSize">GnomeThumbnailSize</link> size);</programlisting>
<para>
Creates a new <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>.
</para>
<para>
This function must be called on the main thread.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> The thumbnail size to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-factory-lookup">gnome_thumbnail_factory_lookup ()</title>
<programlisting>char*       gnome_thumbnail_factory_lookup  (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);</programlisting>
<para>
Tries to locate an existing thumbnail for the file specified.
</para>
<para>
Usage of this function is threadsafe.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the uri of a file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mtime</parameter>&nbsp;:</term>
<listitem><simpara> the mtime of the file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The absolute path of the thumbnail, or <literal>NULL</literal> if none exist
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-factory-has-valid-failed-thumbnail">gnome_thumbnail_factory_has_valid_failed_thumbnail ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_thumbnail_factory_has_valid_failed_thumbnail
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);</programlisting>
<para>
Tries to locate an failed thumbnail for the file specified. Writing
and looking for failed thumbnails is important to avoid to try to
thumbnail e.g. broken images several times.
</para>
<para>
Usage of this function is threadsafe.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the uri of a file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mtime</parameter>&nbsp;:</term>
<listitem><simpara> the mtime of the file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if there is a failed thumbnail for the file
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-factory-can-thumbnail">gnome_thumbnail_factory_can_thumbnail ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_thumbnail_factory_can_thumbnail
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             const char *mime_type,
                                             <link linkend="time-t">time_t</link> mtime);</programlisting>
<para>
Returns TRUE if this GnomeIconFactory can (at least try) to thumbnail
this file. Thumbnails or files with failed thumbnails won't be thumbnailed.
</para>
<para>
Usage of this function is threadsafe.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the uri of a file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> the mime type of the file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mtime</parameter>&nbsp;:</term>
<listitem><simpara> the mtime of the file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if the file can be thumbnailed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-factory-generate-thumbnail">gnome_thumbnail_factory_generate_thumbnail ()</title>
<programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  gnome_thumbnail_factory_generate_thumbnail
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             const char *mime_type);</programlisting>
<para>
Tries to generate a thumbnail for the specified file. If it succeeds
it returns a pixbuf that can be used as a thumbnail.
</para>
<para>
Usage of this function is threadsafe.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the uri of a file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> the mime type of the file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> thumbnail pixbuf if thumbnailing succeeded, <literal>NULL</literal> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-factory-save-thumbnail">gnome_thumbnail_factory_save_thumbnail ()</title>
<programlisting>void        gnome_thumbnail_factory_save_thumbnail
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *thumbnail,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> original_mtime);</programlisting>
<para>
Saves <parameter>thumbnail</parameter> at the right place. If the save fails a
failed thumbnail is written.
</para>
<para>
Usage of this function is threadsafe.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>thumbnail</parameter>&nbsp;:</term>
<listitem><simpara> the thumbnail as a pixbuf 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the uri of a file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>original_mtime</parameter>&nbsp;:</term>
<listitem><simpara> the mime type of the file
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-factory-create-failed-thumbnail">gnome_thumbnail_factory_create_failed_thumbnail ()</title>
<programlisting>void        gnome_thumbnail_factory_create_failed_thumbnail
                                            (<link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link> *factory,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);</programlisting>
<para>
Creates a failed thumbnail for the file so that we don't try
to re-thumbnail the file later.
</para>
<para>
Usage of this function is threadsafe.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GnomeThumbnailFactory">GnomeThumbnailFactory</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the uri of a file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mtime</parameter>&nbsp;:</term>
<listitem><simpara> the mime type of the file
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-scale-down-pixbuf">gnome_thumbnail_scale_down_pixbuf ()</title>
<programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  gnome_thumbnail_scale_down_pixbuf
                                            (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             int dest_width,
                                             int dest_height);</programlisting>
<para>
Scales the pixbuf to the desired size. This function
is a lot faster than gdk-pixbuf when scaling down by
large amounts.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pixbuf</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixbuf">GdkPixbuf</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest_width</parameter>&nbsp;:</term>
<listitem><simpara> the desired new width
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest_height</parameter>&nbsp;:</term>
<listitem><simpara> the desired new height
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a scaled pixbuf
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-has-uri">gnome_thumbnail_has_uri ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_thumbnail_has_uri         (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             const char *uri);</programlisting>
<para>
Returns whether the thumbnail has the correct uri embedded in the
Thumb::URI option in the png.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pixbuf</parameter>&nbsp;:</term>
<listitem><simpara> an loaded thumbnail pixbuf
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> a uri
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if the thumbnail is for <parameter>uri</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-is-valid">gnome_thumbnail_is_valid ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_thumbnail_is_valid        (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             const char *uri,
                                             <link linkend="time-t">time_t</link> mtime);</programlisting>
<para>
Returns whether the thumbnail has the correct uri and mtime embedded in the
png options.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pixbuf</parameter>&nbsp;:</term>
<listitem><simpara> an loaded thumbnail <link linkend="GdkPixbuf">GdkPixbuf</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> a uri
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mtime</parameter>&nbsp;:</term>
<listitem><simpara> the mtime
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if the thumbnail has the right <parameter>uri</parameter> and <parameter>mtime</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-md5">gnome_thumbnail_md5 ()</title>
<programlisting>char*       gnome_thumbnail_md5             (const char *uri);</programlisting>
<para>
Calculates the MD5 checksum of the uri. This can be useful
if you want to manually handle thumbnail files.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> an uri
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A string with the MD5 digest of the uri string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-thumbnail-path-for-uri">gnome_thumbnail_path_for_uri ()</title>
<programlisting>char*       gnome_thumbnail_path_for_uri    (const char *uri,
                                             <link linkend="GnomeThumbnailSize">GnomeThumbnailSize</link> size);</programlisting>
<para>
Returns the filename that a thumbnail of size <parameter>size</parameter> for <parameter>uri</parameter> would have.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> an uri
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> a thumbnail size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> an absolute filename
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
