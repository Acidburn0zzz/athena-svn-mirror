/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef GConf_H
#define GConf_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(_ConfigBasicValueType_defined)
#define _ConfigBasicValueType_defined 1
   typedef enum
   {
      BInvalidVal,
      BIntVal,
      BStringVal,
      BFloatVal,
      BBoolVal,
      BSchemaVal
   }
   ConfigBasicValueType;
#if !defined(TC_IMPL_TC_ConfigBasicValueType_0)
#define TC_IMPL_TC_ConfigBasicValueType_0 'G'
#define TC_IMPL_TC_ConfigBasicValueType_1 'C'
#define TC_IMPL_TC_ConfigBasicValueType_2 'o'
#define TC_IMPL_TC_ConfigBasicValueType_3 'n'
#define TC_IMPL_TC_ConfigBasicValueType_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigBasicValueType_struct;
#define TC_ConfigBasicValueType ((CORBA_TypeCode)&TC_ConfigBasicValueType_struct)
#endif
#endif
#if !defined(_ConfigValueType_defined)
#define _ConfigValueType_defined 1
   typedef enum
   {
      InvalidVal,
      IntVal,
      StringVal,
      FloatVal,
      BoolVal,
      SchemaVal,
      ListVal,
      PairVal
   }
   ConfigValueType;
#if !defined(TC_IMPL_TC_ConfigValueType_0)
#define TC_IMPL_TC_ConfigValueType_0 'G'
#define TC_IMPL_TC_ConfigValueType_1 'C'
#define TC_IMPL_TC_ConfigValueType_2 'o'
#define TC_IMPL_TC_ConfigValueType_3 'n'
#define TC_IMPL_TC_ConfigValueType_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigValueType_struct;
#define TC_ConfigValueType ((CORBA_TypeCode)&TC_ConfigValueType_struct)
#endif
#endif
#if !defined(_ConfigSchema_defined)
#define _ConfigSchema_defined 1
   typedef struct
   {
      ConfigValueType value_type;
      ConfigValueType value_list_type;
      ConfigValueType value_car_type;
      ConfigValueType value_cdr_type;
      CORBA_char *locale;
      CORBA_char *short_desc;
      CORBA_char *long_desc;
      CORBA_char *owner;
      CORBA_char *encoded_default_value;
   }
   ConfigSchema;

#if !defined(TC_IMPL_TC_ConfigSchema_0)
#define TC_IMPL_TC_ConfigSchema_0 'G'
#define TC_IMPL_TC_ConfigSchema_1 'C'
#define TC_IMPL_TC_ConfigSchema_2 'o'
#define TC_IMPL_TC_ConfigSchema_3 'n'
#define TC_IMPL_TC_ConfigSchema_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigSchema_struct;
#define TC_ConfigSchema ((CORBA_TypeCode)&TC_ConfigSchema_struct)
#endif
   extern ConfigSchema *ConfigSchema__alloc(void);
   extern gpointer ConfigSchema__free(gpointer mem, gpointer dat,
				      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_ConfigBasicValue_defined)
#define _ConfigBasicValue_defined 1
   typedef struct
   {
      ConfigBasicValueType _d;
      union
      {
	 CORBA_long dummy;
	 CORBA_long int_value;
	 CORBA_char *string_value;
	 CORBA_float float_value;
	 CORBA_boolean bool_value;
	 ConfigSchema schema_value;
      }
      _u;
   }
   ConfigBasicValue;
#if !defined(TC_IMPL_TC_ConfigBasicValue_0)
#define TC_IMPL_TC_ConfigBasicValue_0 'G'
#define TC_IMPL_TC_ConfigBasicValue_1 'C'
#define TC_IMPL_TC_ConfigBasicValue_2 'o'
#define TC_IMPL_TC_ConfigBasicValue_3 'n'
#define TC_IMPL_TC_ConfigBasicValue_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigBasicValue_struct;
#define TC_ConfigBasicValue ((CORBA_TypeCode)&TC_ConfigBasicValue_struct)
#endif
   extern ConfigBasicValue *ConfigBasicValue__alloc(void);
   extern gpointer ConfigBasicValue__free(gpointer mem, gpointer dat,
					  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_ConfigBasicValue) && !defined(_CORBA_sequence_ConfigBasicValue_defined)
#define ORBIT_DECL_CORBA_sequence_ConfigBasicValue 1
#define _CORBA_sequence_ConfigBasicValue_defined 1
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_0 'G'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_1 'C'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_2 'o'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_3 'n'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_4 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      ConfigBasicValue *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_ConfigBasicValue;
#if !defined(TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_0)
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_0 'G'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_1 'C'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_2 'o'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_3 'n'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_ConfigBasicValue_struct;
#define TC_CORBA_sequence_ConfigBasicValue ((CORBA_TypeCode)&TC_CORBA_sequence_ConfigBasicValue_struct)
#endif
   extern CORBA_sequence_ConfigBasicValue
      *CORBA_sequence_ConfigBasicValue__alloc(void);
   extern gpointer CORBA_sequence_ConfigBasicValue__free(gpointer mem,
							 gpointer dat,
							 CORBA_boolean free_strings);	/* ORBit internal use */
   ConfigBasicValue
      *CORBA_sequence_ConfigBasicValue_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_BasicValueList_defined)
#define _BasicValueList_defined 1
   typedef CORBA_sequence_ConfigBasicValue BasicValueList;
#if !defined(TC_IMPL_TC_BasicValueList_0)
#define TC_IMPL_TC_BasicValueList_0 'G'
#define TC_IMPL_TC_BasicValueList_1 'C'
#define TC_IMPL_TC_BasicValueList_2 'o'
#define TC_IMPL_TC_BasicValueList_3 'n'
#define TC_IMPL_TC_BasicValueList_4 'f'
   extern const struct CORBA_TypeCode_struct TC_BasicValueList_struct;
#define TC_BasicValueList ((CORBA_TypeCode)&TC_BasicValueList_struct)
#endif
   extern BasicValueList *BasicValueList__alloc(void);
   extern gpointer BasicValueList__free(gpointer mem, gpointer dat,
					CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_ConfigList_defined)
#define _ConfigList_defined 1
   typedef struct
   {
      BasicValueList seq;
      ConfigBasicValueType list_type;
   }
   ConfigList;

#if !defined(TC_IMPL_TC_ConfigList_0)
#define TC_IMPL_TC_ConfigList_0 'G'
#define TC_IMPL_TC_ConfigList_1 'C'
#define TC_IMPL_TC_ConfigList_2 'o'
#define TC_IMPL_TC_ConfigList_3 'n'
#define TC_IMPL_TC_ConfigList_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigList_struct;
#define TC_ConfigList ((CORBA_TypeCode)&TC_ConfigList_struct)
#endif
   extern ConfigList *ConfigList__alloc(void);
   extern gpointer ConfigList__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_ConfigValue_defined)
#define _ConfigValue_defined 1
   typedef struct
   {
      ConfigValueType _d;
      union
      {
	 CORBA_long dummy;
	 CORBA_long int_value;
	 CORBA_char *string_value;
	 CORBA_float float_value;
	 CORBA_boolean bool_value;
	 ConfigSchema schema_value;
	 ConfigList list_value;
	 BasicValueList pair_value;
      }
      _u;
   }
   ConfigValue;
#if !defined(TC_IMPL_TC_ConfigValue_0)
#define TC_IMPL_TC_ConfigValue_0 'G'
#define TC_IMPL_TC_ConfigValue_1 'C'
#define TC_IMPL_TC_ConfigValue_2 'o'
#define TC_IMPL_TC_ConfigValue_3 'n'
#define TC_IMPL_TC_ConfigValue_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigValue_struct;
#define TC_ConfigValue ((CORBA_TypeCode)&TC_ConfigValue_struct)
#endif
   extern ConfigValue *ConfigValue__alloc(void);
   extern gpointer ConfigValue__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_ConfigDatabase) && !defined(_ConfigDatabase_defined)
#define ORBIT_DECL_ConfigDatabase 1
#define _ConfigDatabase_defined 1
#define ConfigDatabase__free CORBA_Object__free
   typedef CORBA_Object ConfigDatabase;
   extern CORBA_unsigned_long ConfigDatabase__classid;
#if !defined(TC_IMPL_TC_ConfigDatabase_0)
#define TC_IMPL_TC_ConfigDatabase_0 'G'
#define TC_IMPL_TC_ConfigDatabase_1 'C'
#define TC_IMPL_TC_ConfigDatabase_2 'o'
#define TC_IMPL_TC_ConfigDatabase_3 'n'
#define TC_IMPL_TC_ConfigDatabase_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigDatabase_struct;
#define TC_ConfigDatabase ((CORBA_TypeCode)&TC_ConfigDatabase_struct)
#endif
#endif
#if !defined(ORBIT_DECL_ConfigListener) && !defined(_ConfigListener_defined)
#define ORBIT_DECL_ConfigListener 1
#define _ConfigListener_defined 1
#define ConfigListener__free CORBA_Object__free
   typedef CORBA_Object ConfigListener;
   extern CORBA_unsigned_long ConfigListener__classid;
#if !defined(TC_IMPL_TC_ConfigListener_0)
#define TC_IMPL_TC_ConfigListener_0 'G'
#define TC_IMPL_TC_ConfigListener_1 'C'
#define TC_IMPL_TC_ConfigListener_2 'o'
#define TC_IMPL_TC_ConfigListener_3 'n'
#define TC_IMPL_TC_ConfigListener_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigListener_struct;
#define TC_ConfigListener ((CORBA_TypeCode)&TC_ConfigListener_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_ConfigListener_KeyList_defined)
#define _ConfigListener_KeyList_defined 1
   typedef CORBA_sequence_CORBA_string ConfigListener_KeyList;
#if !defined(TC_IMPL_TC_ConfigListener_KeyList_0)
#define TC_IMPL_TC_ConfigListener_KeyList_0 'G'
#define TC_IMPL_TC_ConfigListener_KeyList_1 'C'
#define TC_IMPL_TC_ConfigListener_KeyList_2 'o'
#define TC_IMPL_TC_ConfigListener_KeyList_3 'n'
#define TC_IMPL_TC_ConfigListener_KeyList_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigListener_KeyList_struct;
#define TC_ConfigListener_KeyList ((CORBA_TypeCode)&TC_ConfigListener_KeyList_struct)
#endif
   extern ConfigListener_KeyList *ConfigListener_KeyList__alloc(void);
   extern gpointer ConfigListener_KeyList__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_ConfigErrorType_defined)
#define _ConfigErrorType_defined 1
   typedef enum
   {
      ConfigFailed,
      ConfigNoPermission,
      ConfigBadAddress,
      ConfigBadKey,
      ConfigParseError,
      ConfigCorrupt,
      ConfigTypeMismatch,
      ConfigIsDir,
      ConfigIsKey,
      ConfigOverridden,
      ConfigLockFailed,
      ConfigNoWritableDatabase,
      ConfigInShutdown
   }
   ConfigErrorType;
#if !defined(TC_IMPL_TC_ConfigErrorType_0)
#define TC_IMPL_TC_ConfigErrorType_0 'G'
#define TC_IMPL_TC_ConfigErrorType_1 'C'
#define TC_IMPL_TC_ConfigErrorType_2 'o'
#define TC_IMPL_TC_ConfigErrorType_3 'n'
#define TC_IMPL_TC_ConfigErrorType_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigErrorType_struct;
#define TC_ConfigErrorType ((CORBA_TypeCode)&TC_ConfigErrorType_struct)
#endif
#endif
#define ex_ConfigException "IDL:ConfigException:1.0"
   void _ORBIT_ConfigException_demarshal(GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev);
   void _ORBIT_ConfigException_marshal(GIOPSendBuffer * _ORBIT_send_buffer,
				       CORBA_Environment * ev);
#if !defined(_ConfigException_defined)
#define _ConfigException_defined 1
   typedef struct
   {
      ConfigErrorType err_no;
      CORBA_char *message;
   }
   ConfigException;

#if !defined(TC_IMPL_TC_ConfigException_0)
#define TC_IMPL_TC_ConfigException_0 'G'
#define TC_IMPL_TC_ConfigException_1 'C'
#define TC_IMPL_TC_ConfigException_2 'o'
#define TC_IMPL_TC_ConfigException_3 'n'
#define TC_IMPL_TC_ConfigException_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigException_struct;
#define TC_ConfigException ((CORBA_TypeCode)&TC_ConfigException_struct)
#endif
   extern ConfigException *ConfigException__alloc(void);
   extern gpointer ConfigException__free(gpointer mem, gpointer dat,
					 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_ConfigDatabase) && !defined(_ConfigDatabase_defined)
#define ORBIT_DECL_ConfigDatabase 1
#define _ConfigDatabase_defined 1
#define ConfigDatabase__free CORBA_Object__free
   typedef CORBA_Object ConfigDatabase;
   extern CORBA_unsigned_long ConfigDatabase__classid;
#if !defined(TC_IMPL_TC_ConfigDatabase_0)
#define TC_IMPL_TC_ConfigDatabase_0 'G'
#define TC_IMPL_TC_ConfigDatabase_1 'C'
#define TC_IMPL_TC_ConfigDatabase_2 'o'
#define TC_IMPL_TC_ConfigDatabase_3 'n'
#define TC_IMPL_TC_ConfigDatabase_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigDatabase_struct;
#define TC_ConfigDatabase ((CORBA_TypeCode)&TC_ConfigDatabase_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_ConfigDatabase_KeyList_defined)
#define _ConfigDatabase_KeyList_defined 1
   typedef CORBA_sequence_CORBA_string ConfigDatabase_KeyList;
#if !defined(TC_IMPL_TC_ConfigDatabase_KeyList_0)
#define TC_IMPL_TC_ConfigDatabase_KeyList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_KeyList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_KeyList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_KeyList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_KeyList_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigDatabase_KeyList_struct;
#define TC_ConfigDatabase_KeyList ((CORBA_TypeCode)&TC_ConfigDatabase_KeyList_struct)
#endif
   extern ConfigDatabase_KeyList *ConfigDatabase_KeyList__alloc(void);
   extern gpointer ConfigDatabase_KeyList__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_ConfigValue) && !defined(_CORBA_sequence_ConfigValue_defined)
#define ORBIT_DECL_CORBA_sequence_ConfigValue 1
#define _CORBA_sequence_ConfigValue_defined 1
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_0 'G'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_1 'C'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_2 'o'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_3 'n'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_4 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      ConfigValue *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_ConfigValue;
#if !defined(TC_IMPL_TC_CORBA_sequence_ConfigValue_0)
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_0 'G'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_1 'C'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_2 'o'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_3 'n'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_ConfigValue_struct;
#define TC_CORBA_sequence_ConfigValue ((CORBA_TypeCode)&TC_CORBA_sequence_ConfigValue_struct)
#endif
   extern CORBA_sequence_ConfigValue *CORBA_sequence_ConfigValue__alloc(void);
   extern gpointer CORBA_sequence_ConfigValue__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   ConfigValue *CORBA_sequence_ConfigValue_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_ConfigDatabase_ValueList_defined)
#define _ConfigDatabase_ValueList_defined 1
   typedef CORBA_sequence_ConfigValue ConfigDatabase_ValueList;
#if !defined(TC_IMPL_TC_ConfigDatabase_ValueList_0)
#define TC_IMPL_TC_ConfigDatabase_ValueList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_ValueList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_ValueList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_ValueList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_ValueList_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_ConfigDatabase_ValueList_struct;
#define TC_ConfigDatabase_ValueList ((CORBA_TypeCode)&TC_ConfigDatabase_ValueList_struct)
#endif
   extern ConfigDatabase_ValueList *ConfigDatabase_ValueList__alloc(void);
   extern gpointer ConfigDatabase_ValueList__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_boolean) && !defined(_CORBA_sequence_CORBA_boolean_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_boolean 1
#define _CORBA_sequence_CORBA_boolean_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_4 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_boolean *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_boolean;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_boolean_struct;
#define TC_CORBA_sequence_CORBA_boolean ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_boolean_struct)
#endif
   extern CORBA_sequence_CORBA_boolean
      *CORBA_sequence_CORBA_boolean__alloc(void);
   extern gpointer CORBA_sequence_CORBA_boolean__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_boolean *CORBA_sequence_CORBA_boolean_allocbuf(CORBA_unsigned_long
							len);
#endif
#if !defined(_ConfigDatabase_IsDefaultList_defined)
#define _ConfigDatabase_IsDefaultList_defined 1
   typedef CORBA_sequence_CORBA_boolean ConfigDatabase_IsDefaultList;
#if !defined(TC_IMPL_TC_ConfigDatabase_IsDefaultList_0)
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_ConfigDatabase_IsDefaultList_struct;
#define TC_ConfigDatabase_IsDefaultList ((CORBA_TypeCode)&TC_ConfigDatabase_IsDefaultList_struct)
#endif
   extern ConfigDatabase_IsDefaultList
      *ConfigDatabase_IsDefaultList__alloc(void);
   extern gpointer ConfigDatabase_IsDefaultList__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_boolean) && !defined(_CORBA_sequence_CORBA_boolean_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_boolean 1
#define _CORBA_sequence_CORBA_boolean_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_4 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_boolean *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_boolean;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_boolean_struct;
#define TC_CORBA_sequence_CORBA_boolean ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_boolean_struct)
#endif
   extern CORBA_sequence_CORBA_boolean
      *CORBA_sequence_CORBA_boolean__alloc(void);
   extern gpointer CORBA_sequence_CORBA_boolean__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_boolean *CORBA_sequence_CORBA_boolean_allocbuf(CORBA_unsigned_long
							len);
#endif
#if !defined(_ConfigDatabase_IsWritableList_defined)
#define _ConfigDatabase_IsWritableList_defined 1
   typedef CORBA_sequence_CORBA_boolean ConfigDatabase_IsWritableList;
#if !defined(TC_IMPL_TC_ConfigDatabase_IsWritableList_0)
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_4 'f'
   extern const struct CORBA_TypeCode_struct
      TC_ConfigDatabase_IsWritableList_struct;
#define TC_ConfigDatabase_IsWritableList ((CORBA_TypeCode)&TC_ConfigDatabase_IsWritableList_struct)
#endif
   extern ConfigDatabase_IsWritableList
      *ConfigDatabase_IsWritableList__alloc(void);
   extern gpointer ConfigDatabase_IsWritableList__free(gpointer mem,
						       gpointer dat,
						       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_ConfigServer) && !defined(_ConfigServer_defined)
#define ORBIT_DECL_ConfigServer 1
#define _ConfigServer_defined 1
#define ConfigServer__free CORBA_Object__free
   typedef CORBA_Object ConfigServer;
   extern CORBA_unsigned_long ConfigServer__classid;
#if !defined(TC_IMPL_TC_ConfigServer_0)
#define TC_IMPL_TC_ConfigServer_0 'G'
#define TC_IMPL_TC_ConfigServer_1 'C'
#define TC_IMPL_TC_ConfigServer_2 'o'
#define TC_IMPL_TC_ConfigServer_3 'n'
#define TC_IMPL_TC_ConfigServer_4 'f'
   extern const struct CORBA_TypeCode_struct TC_ConfigServer_struct;
#define TC_ConfigServer ((CORBA_TypeCode)&TC_ConfigServer_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*notify) (PortableServer_Servant _servant,
		      const ConfigDatabase database,
		      const CORBA_unsigned_long cnxn, const CORBA_char * key,
		      const ConfigValue * value,
		      const CORBA_boolean is_default,
		      const CORBA_boolean is_writable,
		      CORBA_Environment * ev);
      void (*ping) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*update_listener) (PortableServer_Servant _servant,
			       const ConfigDatabase database,
			       const CORBA_char * db_address,
			       const CORBA_unsigned_long old_cnxn,
			       const CORBA_char * where,
			       const CORBA_unsigned_long new_cnxn,
			       CORBA_Environment * ev);
      void (*invalidate_cached_values) (PortableServer_Servant _servant,
					const ConfigDatabase database,
					const ConfigListener_KeyList * keys,
					CORBA_Environment * ev);
      void (*drop_all_caches) (PortableServer_Servant _servant,
			       CORBA_Environment * ev);
   }
   POA_ConfigListener__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_ConfigListener__epv *ConfigListener_epv;
   }
   POA_ConfigListener__vepv;
   typedef struct
   {
      void *_private;
      POA_ConfigListener__vepv *vepv;
   }
   POA_ConfigListener;
   extern void POA_ConfigListener__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_ConfigListener__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_unsigned_long(*add_listener) (PortableServer_Servant _servant,
					     const CORBA_char * where,
					     const ConfigListener who,
					     CORBA_Environment * ev);
      void (*remove_listener) (PortableServer_Servant _servant,
			       const CORBA_unsigned_long cnxn,
			       CORBA_Environment * ev);
      ConfigValue *(*lookup) (PortableServer_Servant _servant,
			      const CORBA_char * key, CORBA_Environment * ev);
      ConfigValue *(*lookup_with_locale) (PortableServer_Servant _servant,
					  const CORBA_char * key,
					  const CORBA_char * locale,
					  const CORBA_boolean
					  use_schema_default,
					  CORBA_boolean * value_is_default,
					  CORBA_boolean * value_is_writable,
					  CORBA_Environment * ev);
      ConfigValue *(*lookup_default_value) (PortableServer_Servant _servant,
					    const CORBA_char * key,
					    const CORBA_char * locale,
					    CORBA_Environment * ev);
      void (*batch_lookup) (PortableServer_Servant _servant,
			    const ConfigDatabase_KeyList * keys,
			    const CORBA_char * locale,
			    ConfigDatabase_ValueList ** values,
			    ConfigDatabase_IsDefaultList ** is_defaults,
			    ConfigDatabase_IsWritableList ** is_writables,
			    CORBA_Environment * ev);
      void (*set) (PortableServer_Servant _servant, const CORBA_char * key,
		   const ConfigValue * value, CORBA_Environment * ev);
      void (*unset) (PortableServer_Servant _servant, const CORBA_char * key,
		     CORBA_Environment * ev);
      void (*unset_with_locale) (PortableServer_Servant _servant,
				 const CORBA_char * key,
				 const CORBA_char * locale,
				 CORBA_Environment * ev);
      void (*batch_change) (PortableServer_Servant _servant,
			    const CORBA_char * locale,
			    const ConfigDatabase_KeyList * keys,
			    const ConfigDatabase_ValueList * values,
			    CORBA_Environment * ev);
       CORBA_boolean(*dir_exists) (PortableServer_Servant _servant,
				   const CORBA_char * dir,
				   CORBA_Environment * ev);
      void (*remove_dir) (PortableServer_Servant _servant,
			  const CORBA_char * dir, CORBA_Environment * ev);
      void (*all_entries) (PortableServer_Servant _servant,
			   const CORBA_char * dir, const CORBA_char * locale,
			   ConfigDatabase_KeyList ** keys,
			   ConfigDatabase_ValueList ** values,
			   ConfigDatabase_IsDefaultList ** is_defaults,
			   ConfigDatabase_IsWritableList ** is_writables,
			   CORBA_Environment * ev);
      void (*all_dirs) (PortableServer_Servant _servant,
			const CORBA_char * dir,
			ConfigDatabase_KeyList ** subdirs,
			CORBA_Environment * ev);
      void (*set_schema) (PortableServer_Servant _servant,
			  const CORBA_char * key,
			  const CORBA_char * schema_key,
			  CORBA_Environment * ev);
      void (*sync) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*clear_cache) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
      void (*synchronous_sync) (PortableServer_Servant _servant,
				CORBA_Environment * ev);
   }
   POA_ConfigDatabase__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_ConfigDatabase__epv *ConfigDatabase_epv;
   }
   POA_ConfigDatabase__vepv;
   typedef struct
   {
      void *_private;
      POA_ConfigDatabase__vepv *vepv;
   }
   POA_ConfigDatabase;
   extern void POA_ConfigDatabase__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_ConfigDatabase__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 ConfigDatabase(*get_default_database) (PortableServer_Servant
						_servant,
						CORBA_Environment * ev);
       ConfigDatabase(*get_database) (PortableServer_Servant _servant,
				      const CORBA_char * address,
				      CORBA_Environment * ev);
      void (*add_client) (PortableServer_Servant _servant,
			  const ConfigListener client,
			  CORBA_Environment * ev);
      void (*remove_client) (PortableServer_Servant _servant,
			     const ConfigListener client,
			     CORBA_Environment * ev);
       CORBA_long(*ping) (PortableServer_Servant _servant,
			  CORBA_Environment * ev);
      void (*shutdown) (PortableServer_Servant _servant,
			CORBA_Environment * ev);
   }
   POA_ConfigServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_ConfigServer__epv *ConfigServer_epv;
   }
   POA_ConfigServer__vepv;
   typedef struct
   {
      void *_private;
      POA_ConfigServer__vepv *vepv;
   }
   POA_ConfigServer;
   extern void POA_ConfigServer__init(PortableServer_Servant servant,
				      CORBA_Environment * ev);
   extern void POA_ConfigServer__fini(PortableServer_Servant servant,
				      CORBA_Environment * ev);

/** prototypes **/
   void ConfigListener_notify(ConfigListener _obj,
			      const ConfigDatabase database,
			      const CORBA_unsigned_long cnxn,
			      const CORBA_char * key,
			      const ConfigValue * value,
			      const CORBA_boolean is_default,
			      const CORBA_boolean is_writable,
			      CORBA_Environment * ev);
   void ConfigListener_ping(ConfigListener _obj, CORBA_Environment * ev);
   void ConfigListener_update_listener(ConfigListener _obj,
				       const ConfigDatabase database,
				       const CORBA_char * db_address,
				       const CORBA_unsigned_long old_cnxn,
				       const CORBA_char * where,
				       const CORBA_unsigned_long new_cnxn,
				       CORBA_Environment * ev);
   void ConfigListener_invalidate_cached_values(ConfigListener _obj,
						const ConfigDatabase database,
						const ConfigListener_KeyList *
						keys, CORBA_Environment * ev);
   void ConfigListener_drop_all_caches(ConfigListener _obj,
				       CORBA_Environment * ev);
   CORBA_unsigned_long ConfigDatabase_add_listener(ConfigDatabase _obj,
						   const CORBA_char * where,
						   const ConfigListener who,
						   CORBA_Environment * ev);
   void ConfigDatabase_remove_listener(ConfigDatabase _obj,
				       const CORBA_unsigned_long cnxn,
				       CORBA_Environment * ev);
   ConfigValue *ConfigDatabase_lookup(ConfigDatabase _obj,
				      const CORBA_char * key,
				      CORBA_Environment * ev);
   ConfigValue *ConfigDatabase_lookup_with_locale(ConfigDatabase _obj,
						  const CORBA_char * key,
						  const CORBA_char * locale,
						  const CORBA_boolean
						  use_schema_default,
						  CORBA_boolean *
						  value_is_default,
						  CORBA_boolean *
						  value_is_writable,
						  CORBA_Environment * ev);
   ConfigValue *ConfigDatabase_lookup_default_value(ConfigDatabase _obj,
						    const CORBA_char * key,
						    const CORBA_char * locale,
						    CORBA_Environment * ev);
   void ConfigDatabase_batch_lookup(ConfigDatabase _obj,
				    const ConfigDatabase_KeyList * keys,
				    const CORBA_char * locale,
				    ConfigDatabase_ValueList ** values,
				    ConfigDatabase_IsDefaultList **
				    is_defaults,
				    ConfigDatabase_IsWritableList **
				    is_writables, CORBA_Environment * ev);
   void ConfigDatabase_set(ConfigDatabase _obj, const CORBA_char * key,
			   const ConfigValue * value, CORBA_Environment * ev);
   void ConfigDatabase_unset(ConfigDatabase _obj, const CORBA_char * key,
			     CORBA_Environment * ev);
   void ConfigDatabase_unset_with_locale(ConfigDatabase _obj,
					 const CORBA_char * key,
					 const CORBA_char * locale,
					 CORBA_Environment * ev);
   void ConfigDatabase_batch_change(ConfigDatabase _obj,
				    const CORBA_char * locale,
				    const ConfigDatabase_KeyList * keys,
				    const ConfigDatabase_ValueList * values,
				    CORBA_Environment * ev);
   CORBA_boolean ConfigDatabase_dir_exists(ConfigDatabase _obj,
					   const CORBA_char * dir,
					   CORBA_Environment * ev);
   void ConfigDatabase_remove_dir(ConfigDatabase _obj, const CORBA_char * dir,
				  CORBA_Environment * ev);
   void ConfigDatabase_all_entries(ConfigDatabase _obj,
				   const CORBA_char * dir,
				   const CORBA_char * locale,
				   ConfigDatabase_KeyList ** keys,
				   ConfigDatabase_ValueList ** values,
				   ConfigDatabase_IsDefaultList **
				   is_defaults,
				   ConfigDatabase_IsWritableList **
				   is_writables, CORBA_Environment * ev);
   void ConfigDatabase_all_dirs(ConfigDatabase _obj, const CORBA_char * dir,
				ConfigDatabase_KeyList ** subdirs,
				CORBA_Environment * ev);
   void ConfigDatabase_set_schema(ConfigDatabase _obj, const CORBA_char * key,
				  const CORBA_char * schema_key,
				  CORBA_Environment * ev);
   void ConfigDatabase_sync(ConfigDatabase _obj, CORBA_Environment * ev);
   void ConfigDatabase_clear_cache(ConfigDatabase _obj,
				   CORBA_Environment * ev);
   void ConfigDatabase_synchronous_sync(ConfigDatabase _obj,
					CORBA_Environment * ev);
   ConfigDatabase ConfigServer_get_default_database(ConfigServer _obj,
						    CORBA_Environment * ev);
   ConfigDatabase ConfigServer_get_database(ConfigServer _obj,
					    const CORBA_char * address,
					    CORBA_Environment * ev);
   void ConfigServer_add_client(ConfigServer _obj,
				const ConfigListener client,
				CORBA_Environment * ev);
   void ConfigServer_remove_client(ConfigServer _obj,
				   const ConfigListener client,
				   CORBA_Environment * ev);
   CORBA_long ConfigServer_ping(ConfigServer _obj, CORBA_Environment * ev);
   void ConfigServer_shutdown(ConfigServer _obj, CORBA_Environment * ev);

   void _ORBIT_skel_ConfigListener_notify(POA_ConfigListener * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_notify)
					  (PortableServer_Servant _servant,
					   const ConfigDatabase database,
					   const CORBA_unsigned_long cnxn,
					   const CORBA_char * key,
					   const ConfigValue * value,
					   const CORBA_boolean is_default,
					   const CORBA_boolean is_writable,
					   CORBA_Environment * ev));
   void _ORBIT_skel_ConfigListener_ping(POA_ConfigListener * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					void (*_impl_ping)
					(PortableServer_Servant _servant,
					 CORBA_Environment * ev));
   void _ORBIT_skel_ConfigListener_update_listener(POA_ConfigListener *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void
						   (*_impl_update_listener)
						   (PortableServer_Servant
						    _servant,
						    const ConfigDatabase
						    database,
						    const CORBA_char *
						    db_address,
						    const CORBA_unsigned_long
						    old_cnxn,
						    const CORBA_char * where,
						    const CORBA_unsigned_long
						    new_cnxn,
						    CORBA_Environment * ev));
   void _ORBIT_skel_ConfigListener_invalidate_cached_values(POA_ConfigListener
							    * _ORBIT_servant,
							    GIOPRecvBuffer *
							    _ORBIT_recv_buffer,
							    CORBA_Environment
							    * ev,
							    void
							    (*_impl_invalidate_cached_values)
							    (PortableServer_Servant
							     _servant,
							     const
							     ConfigDatabase
							     database,
							     const
							     ConfigListener_KeyList
							     * keys,
							     CORBA_Environment
							     * ev));
   void _ORBIT_skel_ConfigListener_drop_all_caches(POA_ConfigListener *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void
						   (*_impl_drop_all_caches)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_add_listener(POA_ConfigDatabase *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						CORBA_unsigned_long
						(*_impl_add_listener)
						(PortableServer_Servant
						 _servant,
						 const CORBA_char * where,
						 const ConfigListener who,
						 CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_remove_listener(POA_ConfigDatabase *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void
						   (*_impl_remove_listener)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_unsigned_long
						    cnxn,
						    CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_lookup(POA_ConfigDatabase * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  ConfigValue *
					  (*_impl_lookup)
					  (PortableServer_Servant _servant,
					   const CORBA_char * key,
					   CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_lookup_with_locale(POA_ConfigDatabase *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      ConfigValue *
						      (*_impl_lookup_with_locale)
						      (PortableServer_Servant
						       _servant,
						       const CORBA_char * key,
						       const CORBA_char *
						       locale,
						       const CORBA_boolean
						       use_schema_default,
						       CORBA_boolean *
						       value_is_default,
						       CORBA_boolean *
						       value_is_writable,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_ConfigDatabase_lookup_default_value(POA_ConfigDatabase *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							ConfigValue *
							(*_impl_lookup_default_value)
							(PortableServer_Servant
							 _servant,
							 const CORBA_char *
							 key,
							 const CORBA_char *
							 locale,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_ConfigDatabase_batch_lookup(POA_ConfigDatabase *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_batch_lookup)
						(PortableServer_Servant
						 _servant,
						 const ConfigDatabase_KeyList
						 * keys,
						 const CORBA_char * locale,
						 ConfigDatabase_ValueList **
						 values,
						 ConfigDatabase_IsDefaultList
						 ** is_defaults,
						 ConfigDatabase_IsWritableList
						 ** is_writables,
						 CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_set(POA_ConfigDatabase * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       void (*_impl_set)
				       (PortableServer_Servant _servant,
					const CORBA_char * key,
					const ConfigValue * value,
					CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_unset(POA_ConfigDatabase * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_unset)
					 (PortableServer_Servant _servant,
					  const CORBA_char * key,
					  CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_unset_with_locale(POA_ConfigDatabase *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void
						     (*_impl_unset_with_locale)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_char * key,
						      const CORBA_char *
						      locale,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_ConfigDatabase_batch_change(POA_ConfigDatabase *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_batch_change)
						(PortableServer_Servant
						 _servant,
						 const CORBA_char * locale,
						 const ConfigDatabase_KeyList
						 * keys,
						 const
						 ConfigDatabase_ValueList *
						 values,
						 CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_dir_exists(POA_ConfigDatabase *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_boolean(*_impl_dir_exists)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * dir,
					       CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_remove_dir(POA_ConfigDatabase *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_remove_dir)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * dir,
					       CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_all_entries(POA_ConfigDatabase *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_all_entries)
					       (PortableServer_Servant
						_servant,
						const CORBA_char * dir,
						const CORBA_char * locale,
						ConfigDatabase_KeyList **
						keys,
						ConfigDatabase_ValueList **
						values,
						ConfigDatabase_IsDefaultList
						** is_defaults,
						ConfigDatabase_IsWritableList
						** is_writables,
						CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_all_dirs(POA_ConfigDatabase *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_all_dirs)
					    (PortableServer_Servant _servant,
					     const CORBA_char * dir,
					     ConfigDatabase_KeyList **
					     subdirs,
					     CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_set_schema(POA_ConfigDatabase *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_set_schema)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * key,
					       const CORBA_char * schema_key,
					       CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_sync(POA_ConfigDatabase * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					void (*_impl_sync)
					(PortableServer_Servant _servant,
					 CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_clear_cache(POA_ConfigDatabase *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_clear_cache)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_ConfigDatabase_synchronous_sync(POA_ConfigDatabase *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl_synchronous_sync)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_ConfigServer_get_default_database(POA_ConfigServer *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      ConfigDatabase
						      (*_impl_get_default_database)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_ConfigServer_get_database(POA_ConfigServer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      ConfigDatabase
					      (*_impl_get_database)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * address,
					       CORBA_Environment * ev));
   void _ORBIT_skel_ConfigServer_add_client(POA_ConfigServer * _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_add_client)
					    (PortableServer_Servant _servant,
					     const ConfigListener client,
					     CORBA_Environment * ev));
   void _ORBIT_skel_ConfigServer_remove_client(POA_ConfigServer *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_remove_client)
					       (PortableServer_Servant
						_servant,
						const ConfigListener client,
						CORBA_Environment * ev));
   void _ORBIT_skel_ConfigServer_ping(POA_ConfigServer * _ORBIT_servant,
				      GIOPRecvBuffer * _ORBIT_recv_buffer,
				      CORBA_Environment * ev,
				      CORBA_long(*_impl_ping)
				      (PortableServer_Servant _servant,
				       CORBA_Environment * ev));
   void _ORBIT_skel_ConfigServer_shutdown(POA_ConfigServer * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_shutdown)
					  (PortableServer_Servant _servant,
					   CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
