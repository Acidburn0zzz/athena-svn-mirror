# Kerberos rcp test.
# This is a DejaGnu test script.
# This script tests Kerberos rcp.
# Written by Ian Lance Taylor, Cygnus Support, <ian@cygnus.com>.

# Find the programs we need.  We use the binaries from the build tree
# if they exist.  If they do not, then they must be in PATH.  We
# expect $objdir to be .../kerberos/src.

if ![info exists RCP] {
    set RCP [findfile $objdir/appl/bsd/rcp]
}

if ![info exists KSHD] {
    set KSHD [findfile $objdir/appl/bsd/kshd]
}

# Make sure .klogin is reasonable.
if ![check_klogin rcp] {
    return
}

# Set up the kerberos database.
if {![get_hostname] \
    || ![setup_kerberos_files] \
    || ![setup_kerberos_env] \
    || ![setup_kerberos_db 0]} {
    return
}

# A procedure to start up the rsh daemon (rcp talks to the rsh
# daemon).

proc start_rsh_daemon { option } {
    global KSHD
    global RCP
    global tmppwd
    global kshd_spawn_id
    global kshd_pid

    # The -p argument tells it to accept a single connection, so we
    # don't need to use inetd.  The 3544 is the port to listen at.
    spawn $KSHD -a -p 3544 -P [file dirname $RCP] -s $tmppwd/srvtab -r $tmppwd/krb.conf $option
    set kshd_spawn_id $spawn_id
    set kshd_pid [exp_pid]

    # Give the rsh daemon a few seconds to get set up.
    catch "exec sleep 2"
}

# A procedure to stop the rsh daemon.

proc stop_rsh_daemon { } {
    global kshd_spawn_id
    global kshd_pid

    if [info exists kshd_pid] {
	catch "close -i $kshd_spawn_id"
	catch "exec kill $kshd_pid"
	catch "wait -i $kshd_spawn_id"
	unset kshd_pid
    }
}

# Create a file to use for rcp testing.
set file [open tmpdir/rcp-test w]
puts $file "This file is used for rcp testing."
close $file

# Test that a file was copied correctly.
proc check_file { filename } {
    if ![file exists $filename] {
	verbose "$filename does not exist"
	send_log "$filename does not exist\n"
	return 0
    }

    set file [open $filename r]
    if { [gets $file line] == -1 } {
	verbose "$filename is empty"
	send_log "$filename is empty\n"
	close $file
	return 0
    }

    if ![string match "This file is used for rcp testing." $line] {
	verbose "$filename contains $line"
	send_log "$filename contains $line\n"
	close $file
	return 0
    }

    if { [gets $file line] != -1} {
	verbose "$filename is too long ($line)"
	send_log "$filename is too long ($line)\n"
	close $file
	return 0
    }

    close $file

    return 1
}

# Test copying one file to another.
proc rcp_one_test { testname options frompref topref } {
    global RCP
    global tmppwd

    send_log "rm -f tmpdir/copy\n"
    verbose "exec rm -f tmpdir/copy"
    catch "exec rm -f tmpdir/copy"

    set from [format "%s%s" $frompref $tmppwd/rcp-test]
    set to [format "%s%s" $topref $tmppwd/copy]

    send_log "$RCP $options -P3544 -N -k KRBTEST.COM $from $to\n"
    verbose "$RCP $options -P3544 -N -k KRBTEST.COM $from $to"
    catch "exec $RCP $options -P3544 -N -k KRBTEST.COM $from $to" exec_output

    if ![string match "" $exec_output] {
	send_log "$exec_output\n"
	verbose "$exec_output"
	fail $testname
	return 0
    }

    if ![check_file tmpdir/copy] {
	fail $testname
	return 0
    }

    pass $testname

    return 1
}

# Wrap the tests in a procedure, so that we can kill the daemons if
# we get some sort of error.

proc rcp_test { } {
    global RCP
    global KEY
    global hostname
    global localhostname
    global env

    # Start up the kerberos and kadmind daemons and get a srvtab and a
    # ticket file.
    if {![start_kerberos_daemons 0] \
        || ![add_kerberos_key rcmd.$localhostname 0] \
        || ![setup_srvtab 0] \
	|| ![add_kerberos_key $env(USER) 0] \
	|| ![kinit $env(USER) $env(USER)$KEY 0]} {
	return
    }

    rcp_one_test "local rcp" "" "" ""

    start_rsh_daemon -k
    rcp_one_test "rcp from" "" "$hostname:" ""
    stop_rsh_daemon

    start_rsh_daemon -k
    rcp_one_test "rcp to" "" "" "$hostname:"
    stop_rsh_daemon

    start_rsh_daemon -k
    rcp_one_test "rcp between" "" "$hostname:" "$hostname:"
    stop_rsh_daemon

    start_rsh_daemon -k
    rcp_one_test "encrypted rcp from" "-x" "$hostname:" ""
    stop_rsh_daemon

    start_rsh_daemon -k
    rcp_one_test "encrypted rcp to" "-x" "" "$hostname:"
    stop_rsh_daemon

    start_rsh_daemon -k
    rcp_one_test "encrypted rcp between" "-x" "$hostname:" "$hostname:"
    stop_rsh_daemon
}

# Run the test.
set status [catch rcp_test msg]

# Shut down the kerberos daemons and the rsh daemon.
stop_kerberos_daemons

stop_rsh_daemon

if { $status != 0 } {
    send_error "ERROR: error in rcp.exp\n"
    send_error "$msg\n"
    exit 1
}
