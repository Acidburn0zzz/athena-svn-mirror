#!/usr/progressive/bin/expectk
# expect/TK script for a kadmin GUI
# Copyright 1995 Cygnus Support
# Written by Ian Lance Taylor
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and
# that both that copyright notice and this permission notice appear in
# supporting documentation.  Cygnus Support makes no representations
# about the suitability of this software for any purpose.  It is
# provided "as is" without express or implied warranty.

# The admin principal name to pass to kadmin
set kadmin_name ""

# The realm to pass to kadmin
set kadmin_realm ""

# The spawn ID used to communicate with the kadmin process.
set kadmin_spawn_id -1

# The kadmin process ID.
set kadmin_pid -1

# Whether we are quitting.
set quitting 0

# Whether there is an expect in progress.
set expect_in_progress 0

# Set to hold an error string from kadmin
set kadmin_error ""

# Start up the kadmin process

proc start_kadmin { } {
	global kadmin_name
	global kadmin_realm
	global kadmin_spawn_id
	global kadmin_pid
	global quitting

	if { $kadmin_spawn_id != -1 } {
		return
	}

	set uopt ""
	if ![string match "" $kadmin_name] {
		set uopt {-u$kadmin_name}
	}
	set ropt ""
	if ![string match "" $kadmin_realm] {
		set ropt {-r$kadmin_realm}
	}

	eval "spawn kadmin -m $uopt $ropt"
	set kadmin_spawn_id $spawn_id
	set kadmin_pid [exp_pid]

	expect_after {
		-i $kadmin_spawn_id "Admin password:" {
			get_admin_password
			if { ! $quitting } {
				exp_continue
			}
		}
		-i $kadmin_spawn_id "incorrect password while getting password tickets" {
			set kadmin_error "Incorrect admin password"
		}
		-i $kadmin_spawn_id "Could not find administrating host" {
			set kadmin_error "Can not find server for realm"
		}
		-i $kadmin_spawn_id timeout {
			set kadmin_error "Timeout from kadmin"
		}
		-i $kadmin_spawn_id eof {
			set kadmin_error "Unexpected EOF from kadmin"
		}
	}
}

# Stop the kadmin process

proc stop_kadmin { } {
	global kadmin_spawn_id
	global kadmin_pid
	global timeout

	if { $kadmin_spawn_id == -1 } {
		return
	}

	expect_after

	set otimeout $timeout
	set timeout 2	
	expect {
		-i $kadmin_spawn_id "admin:" {
			exp_send -i $kadmin_spawn_id "quit\r"
		}
		timeout {
			catch "exec kill $kadmin_pid"
		}
	}
	set first 1
	expect {
		-i $kadmin_spawn_id eof { }
		timeout {
			catch "exec kill -9 $kadmin_pid"
			if { $first } {
				set first 0
				exp_continue
			}
		}
	}
	wait -i $kadmin_spawn_id

	set timeout $otimeout

	reset_main_window
	set kadmin_spawn_id -1
	set kadmin_pid -1
}

# Put up a dialog for an error or confirmation message.

proc kadmin_dialog { error confirm help } {
	global error_done
	global error_cancelled
	global error_help

	catch "destroy .error"
	toplevel .error -class Dialog
	if { $confirm } {
		wm title .error "kadmin confirm"
	} else {
		wm title .error "kadmin error"
	}
	wm transient .error .

	frame .error.message -relief raised -bd 1
	message .error.message.message -width 3i -text $error

	frame .error.buttons
	frame .error.buttons.ok -relief sunken -bd 1
	button .error.buttons.ok.ok -text OK -command { set error_done 1 }
	bind .error <Return> {
		.error.buttons.ok.ok flash
		set error_done 1
	}

	if { $confirm } {
		button .error.buttons.cancel -text Cancel -command {
			set error_cancelled 1
			set error_done 1
		}
	}

	button .error.buttons.help -text Help -command {
		set error_help 1
		set error_done 1
	}

	pack .error.message -side top -fill x
	pack .error.message.message -side left -expand 1 -fill both
	pack .error.buttons -side bottom -fill both
	pack .error.buttons.ok -side left -expand 1 -padx 3m -pady 2m
	pack .error.buttons.ok.ok -padx 2m -pady 2m -ipadx 2m -ipady 2m
	if { $confirm } {
		pack .error.buttons.cancel -side left -expand 1 \
			-padx 3m -pady 3m -ipadx 2m -ipady 1m
	}
	pack .error.buttons.help -side left -expand 1 -padx 3m -pady 3m \
		-ipadx 2m -ipady 1m

	wm withdraw .error
	update idletasks
	set x [expr [winfo screenwidth .error] / 2 \
		    - [winfo reqwidth .error] / 2 \
		    - [winfo vrootx [winfo parent .error]]]
	set y [expr [winfo screenheight .error] / 2 \
		    - [winfo reqheight .error] / 2 \
		    - [winfo vrooty [winfo parent .error]]]
	wm geometry .error +$x+$y
	wm deiconify .error

	set oldfocus [focus]
	grab set .error
	focus .error

	set error_done 0
	set error_cancelled 0
	while { $error_done == 0 } {
		set error_help 0
		set error_done 0
		tkwait variable error_done
		if { $error_help } {
			$help .error.help
			set error_done 0
		}
	}

	grab release .error

	destroy .error
	focus $oldfocus

	return $error_cancelled
}

# Handle an error from the kadmin process.

proc handle_kadmin_error { } {
	global kadmin_error

	kadmin_dialog $kadmin_error 0 kadmin_error_help
	stop_kadmin
	set kadmin_error ""
}

# Set up the main window.

proc setup_main_window { } {
	global princ

	wm title . kadmin
	wm minsize . 1 1

	frame .menubar -relief raised -bd 2

	menubutton .menubar.file -text File \
		-menu .menubar.file.menu

	menu .menubar.file.menu
	.menubar.file.menu add command -label "Select Admin Instance..." \
		-command { select_admin_instance }
	.menubar.file.menu add command -label "Change Admin Password..." \
		-command { change_admin_password }
	.menubar.file.menu add command -label "Destroy Tickets" \
		-command { destroy_tickets }
	.menubar.file.menu add command -label Quit \
		-command { quit }

	menubutton .menubar.help -text Help \
		-menu .menubar.help.menu

	menu .menubar.help.menu
	.menubar.help.menu add command -label Help.. \
		-command { kadmin_top_help .help }

	frame .principal
	label .principal.label -text "Principal: "
	entry .principal.principal -width 40 -textvariable princ \
		-relief sunken
	bind .principal.principal <Return> { got_principal 1 }

	frame .buttons
	button .buttons.add -text Add -state disabled \
		-command { add }
	button .buttons.change -text "Change Password" -state disabled \
		-command { change_password }
	button .buttons.delete -text Delete -state disabled \
		-command { delete }

	frame .message
	label .message.message -text ""

	tk_menuBar .menubar \
		.menubar.file \
		.menubar.help
	pack .menubar.file -side left
	pack .menubar.help -side right
	pack .menubar -side top -fill x

	pack .principal -side top -fill x
	pack .principal.label -side left
	pack .principal.principal -side left -padx 2m -pady 2m

	pack .buttons -side top -fill x
	pack .buttons.add .buttons.change .buttons.delete \
		-side left -expand 1

	pack .message -side top -fill x
	pack .message.message -side left -fill x
}

# Reset the main window.

proc reset_main_window { } {
	global princ

	disable_buttons
	set princ ""
}

# Disable all the command buttons.

proc disable_buttons { } {
	.buttons.add configure -state disabled
	.buttons.change configure -state disabled
	.buttons.delete configure -state disabled
}

# This procedure is called when return is pressed on the principal
# name.  It is also called by other functions to set the buttons.

proc got_principal { user } {
	global kadmin_spawn_id
	global kadmin_error
	global princ
	global quitting
	global expect_in_progress

	if { $kadmin_spawn_id == -1 } {
		start_kadmin
	}

	disable_buttons
	if { $user } {
		.message.message configure -text ""
	}

	if [string match "" $princ] {
		return
	}

	incr expect_in_progress
	expect -i $kadmin_spawn_id "admin:"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "get $princ\r"

	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "kadmin: Principal does not exist." {
			if { $user } {
				.message.message configure \
					-text "Principal $princ does not currently exist"
			}
			.buttons.add configure -state normal
		}
		-i $kadmin_spawn_id "Insufficient access" {
			kadmin_dialog \
				"You are not permitted to get principals" \
				0 get_principal_access_help
			reset_main_window
		}
		-i $kadmin_spawn_id "Info in Database for $princ" {
			if { $user } {
				.message.message configure \
					-text "Principal $princ found"
			}
			.buttons.change configure -state normal
			.buttons.delete configure -state normal
		}
		-i $kadmin_spawn_id -re "Principal .*.admin@.* does not exist." {
			kadmin_dialog \
				"You have no admin instance" \
				0 no_admin_instance_help
		}
	}
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
}

# Add a new principal.  This is called by clicking on a button when we
# have a principal which does not exist.

proc add { } {
	global kadmin_spawn_id
	global kadmin_error
	global quitting
	global expect_in_progress
	global princ
	global gpass_cancelled

	if { $kadmin_spawn_id == -1 } {
		start_kadmin
	}

	if [string match "" $princ] {
		return
	}

	set add_princ $princ

	.message.message configure -text ""

	set password [get_password "add"]
	if { $gpass_cancelled } {
		return
	}

	incr expect_in_progress
	expect -i $kadmin_spawn_id "admin:"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "ank $add_princ\r"

	set failed 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "Principal already exists" {
			.message.message configure \
				-text "Principal $add_princ has already been created"
			set failed 1
		}
		-i $kadmin_spawn_id -re "Principal .*.admin@.* does not exist." {
			kadmin_dialog \
				"You have no admin instance" \
				0 no_admin_instance_help
			set failed 1
		}
		-i $kadmin_spawn_id "Password for" { }
	}
	incr expect_in_progress -1

	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $failed } {
		got_principal 0
		return
	}

	exp_send -i $kadmin_spawn_id "$password\r"

	incr expect_in_progress
	expect -i $kadmin_spawn_id "please re-enter Password for"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "$password\r"

	set password "xxxxxxxxxx"

	set failed 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "Insufficient access" {
			kadmin_dialog \
				"You are not permitted to add principals" \
				0 add_principal_access_help
			set failed 1
		}			
		-i $kadmin_spawn_id "added to database" { }
	}
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $failed } {
		return
	}

	.message.message configure -text "$add_princ added"
	reset_main_window
}

# Change the password of a principal.  This is called by clicking on a
# button when we have a valid principal.

proc change_password { } {
	global kadmin_spawn_id
	global kadmin_error
	global quitting
	global expect_in_progress
	global princ
	global gpass_cancelled

	if { $kadmin_spawn_id == -1 } {
		start_kadmin
	}

	if [string match "" $princ] {
		return
	}

	set password [get_password "modification"]
	if { $gpass_cancelled } {
		return
	}

	set change_princ $princ

	.message.message configure -text ""

	incr expect_in_progress
	expect -i $kadmin_spawn_id "admin:"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "cpw $change_princ\r"

	set gone 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "kadmin: Principal does not exist." {
			.message.message configure \
				-text "Principal $change_princ no longer exists"
			set gone 1
		}
		-i $kadmin_spawn_id "New password for" { }
	}
	incr expect_in_progress -1

	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $gone } {
		got_principal 0
		return
	}

	exp_send -i $kadmin_spawn_id "$password\r"

	incr expect_in_progress
	expect -i $kadmin_spawn_id "please re-enter New password for"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "$password\r"

	set password "xxxxxxxxxx"

	set failed 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "Insufficient access" {
			kadmin_dialog \
				"You are not permitted to change passwords" \
				0 change_principal_access_help
			set failed 1
		}			
		-i $kadmin_spawn_id "Password changed for"
	}
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $failed } {
		return
	}

	.message.message configure -text "Password changed for $change_princ"
	reset_main_window
}

# Make the user enter a password.  This is called by add and by
# change_password.  It sets gpass_cancelled if the cancel button was
# pressed.

proc get_password { action } {
	global gpass_password1
	global gpass_password2
	global gpass_cancelled
	global gpass_action

	catch "destroy .gpass"
	toplevel .gpass
	wm title .gpass "kadmin: Get Password"
	wm transient .gpass .

	set done 0
	set gpass_cancelled 0
	set gpass_password1 ""
	set gpass_password2 ""
	set gpass_action $action

	frame .gpass.pass1
	label .gpass.pass1.label -text "Password: "
	entry .gpass.pass1.pass -width 28 -textvariable gpass_password1 \
		-relief sunken
	bind .gpass.pass1.pass <Tab> { focus .gpass.pass2.pass }
	bind .gpass.pass1.pass <Return> { focus .gpass.pass2.pass }

	.gpass.pass1.pass configure -foreground \
		[lindex [.gpass.pass1.pass configure -background] 4]
	.gpass.pass1.pass configure -selectforeground \
		[lindex [.gpass.pass1.pass configure -selectbackground] 4]

	frame .gpass.pass2
	label .gpass.pass2.label -text "Re-enter password: "
	entry .gpass.pass2.pass -width 20 -textvariable gpass_password2 \
		-relief sunken
	bind .gpass.pass2.pass <Tab> { focus .gpass.pass1.pass }
	bind .gpass.pass2.pass <Return> {
		if { $gpass_password1 == $gpass_password2 } {
			set done 1
		} else {
			.gpass.message.message configure -text \
				"Passwords do not match"
			set gpass_password1 ""
			set gpass_password2 ""
			focus .gpass.pass1.pass
		}
	}

	.gpass.pass2.pass configure -foreground \
		[lindex [.gpass.pass2.pass configure -background] 4]
	.gpass.pass2.pass configure -selectforeground \
		[lindex [.gpass.pass2.pass configure -selectbackground] 4]

	frame .gpass.button
	button .gpass.button.cancel -text Cancel -command {
		set gpass_cancelled 1
		set done 1
	}
	button .gpass.button.help -text Help \
		-command { gpass_help .gpass.help $gpass_action }

	frame .gpass.message
	label .gpass.message.message -text ""

	pack .gpass.pass1 -side top -fill x
	pack .gpass.pass1.label -side left
	pack .gpass.pass1.pass -side left -padx 2m -pady 2m
	
	pack .gpass.pass2 -side top -fill x
	pack .gpass.pass2.label -side left
	pack .gpass.pass2.pass -side left -padx 2m -pady 2m

	pack .gpass.button -side top -fill x
	pack .gpass.button.cancel .gpass.button.help -side left -expand 1

	pack .gpass.message -side top -fill x
	pack .gpass.message.message -side left -fill x

	wm withdraw .gpass
	update idletasks
	set x [expr [winfo screenwidth .gpass] / 2 \
		    - [winfo reqwidth .gpass] / 2 \
		    - [winfo vrootx [winfo parent .gpass]]]
	set y [expr [winfo screenheight .gpass] / 2 \
		    - [winfo reqheight .gpass] / 2 \
		    - [winfo vrooty [winfo parent .gpass]]]
	wm geometry .gpass +$x+$y
	wm deiconify .gpass

	set oldfocus [focus]
	grab set .gpass
	focus .gpass.pass1.pass

	tkwait variable done

	grab release .gpass

	set password $gpass_password1
	destroy .gpass
	set gpass_password1 "xxxxxxxxxx"
	set gpass_password2 "xxxxxxxxxx"

	focus $oldfocus

	if { $gpass_cancelled } {
		set password "xxxxxxxxxx"
	}

	return $password
}

# Delete a principal.  This is called by clicking on a button when we
# have a valid principal.

proc delete { } {
	global kadmin_spawn_id
	global kadmin_error
	global quitting
	global expect_in_progress
	global princ

	if { $kadmin_spawn_id == -1 } {
		start_kadmin
	}

	if [string match "" $princ] {
		return
	}

	if [kadmin_dialog "Are you sure you want to delete $princ?" \
			  1 delete_help] {
		return
	}

	set del_princ $princ

	.message.message configure -text ""

	incr expect_in_progress
	expect -i $kadmin_spawn_id "admin:"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "del $del_princ\r"

	set gone 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "kadmin: Principal $del_princ does not exist." {
			.message.message configure \
				-text "Principal $del_princ no longer exists"
			set gone 1
		}
		-i $kadmin_spawn_id "type y and press return" { }
	}
	incr expect_in_progress -1

	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $gone } {
		got_principal 0
		return
	}

	exp_send -i $kadmin_spawn_id "y\r"

	set failed 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "Insufficient access" {
			kadmin_dialog \
				"You are not permitted to delete principals" \
				0 delete_principal_access_help
			set failed 1
		}
		-i $kadmin_spawn_id "removed from database" { }
	}
	incr expect_in_progress -1

	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $failed } {
		got_principal 0
		return
	}

	.message.message configure -text "$del_princ deleted"
	reset_main_window
}

# Quit.  This is called from a selection on the file menu.

proc quit { } {
	global quitting
	global expect_in_progress

	set quitting 1
	while { $expect_in_progress != 0 } {
		tkwait variable expect_in_progress
	}
	stop_kadmin
	destroy .
}

# Destroy tickets.  This is called from a menu selection.

proc destroy_tickets { } {
	global kadmin_spawn_id
	global kadmin_error
	global quitting
	global expect_in_progress

	if { $kadmin_spawn_id == -1 } {
		return
	}

	incr expect_in_progress
	expect -i $kadmin_spawn_id "admin:"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "dest\r"
	.message.message configure -text "Tickets destroyed"
}

# Get the admin password.

proc get_admin_password { } {
	global kadmin_spawn_id
	global kadmin_error
	global quitting
	global expect_in_progress
	global admin_password

	catch "destroy .apass"
	toplevel .apass
	wm title .apass "kadmin: Get Admin Password"
	wm transient .apass .

	set done 0
	set admin_password ""

	label .apass.label -text "Admin Password: "
	entry .apass.pass -width 20 -textvariable admin_password -relief sunken
	bind .apass.pass <Return> { set done 1 }

	.apass.pass configure -foreground \
		[lindex [.apass.pass configure -background] 4]
	.apass.pass configure -selectforeground \
		[lindex [.apass.pass configure -selectbackground] 4]

	pack .apass.label -side left
	pack .apass.pass -side left -padx 2m -pady 2m

	wm withdraw .apass
	update idletasks
	set x [expr [winfo screenwidth .apass] / 2 \
		    - [winfo reqwidth .apass] / 2 \
		    - [winfo vrootx [winfo parent .apass]]]
	set y [expr [winfo screenheight .apass] / 2 \
		    - [winfo reqheight .apass] / 2 \
		    - [winfo vrooty [winfo parent .apass]]]
	wm geometry .apass +$x+$y
	wm deiconify .apass

	set oldfocus [focus]
	grab set .apass
	focus .apass.pass

	tkwait variable done

	grab release .apass

	exp_send -i $kadmin_spawn_id "$admin_password\r"

	destroy .apass
	set admin_password "xxxxxxxxxx"

	focus $oldfocus

	incr expect_in_progress
	expect -i $kadmin_spawn_id "\r"
	incr expect_in_progress -1
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
}

# Select an admin instance.  This is called from a selection on the
# file menu.

proc select_admin_instance { } {
	global select_name
	global select_realm
	global kadmin_name
	global kadmin_realm
	global old_admin_focus

	set select_name $kadmin_name
	set select_realm $kadmin_realm

	catch "destroy .admin"
	toplevel .admin
	wm title .admin "kadmin: Select Admin Instance"
	wm transient .admin .
	
	frame .admin.name
	label .admin.name.label -text "Name:  "
	entry .admin.name.name -width 40 -textvariable select_name \
		-relief sunken
	bind .admin.name.name <Return> { 
		.admin.buttons.frame.ok flash
		admin_ok
	}
	bind .admin.name.name <Tab> { focus .admin.realm.realm }

	frame .admin.realm
	label .admin.realm.label -text "Realm: "
	entry .admin.realm.realm -width 40 -textvariable select_realm \
		-relief sunken
	bind .admin.realm.realm <Return> {
		.admin.buttons.frame.ok flash
		admin_ok
	}
	bind .admin.realm.realm <Tab> { focus .admin.name.name }

	frame .admin.buttons
	frame .admin.buttons.frame -relief sunken -border 1
	button .admin.buttons.frame.ok -text OK -command { admin_ok }
	button .admin.buttons.help -text Help \
		-command { admin_help .admin.help }
	button .admin.buttons.cancel -text Cancel -command { admin_cancel }

	pack .admin.name -side top -fill x
	pack .admin.name.label -side left
	pack .admin.name.name -side left -padx 2m -pady 2m

	pack .admin.realm -side top -fill x
	pack .admin.realm.label -side left
	pack .admin.realm.realm -side left -padx 2m -pady 2m

	pack .admin.buttons -side top -fill x -pady 2m
	pack .admin.buttons.frame -side left -expand 1 -padx 3m -pady 2m
	pack .admin.buttons.frame.ok -padx 2m -pady 2m -ipadx 2m -ipady 2m
	pack .admin.buttons.help .admin.buttons.cancel -side left -expand 1 \
		-ipadx 2m -ipady 1m -padx 3m -pady 3m

	set old_admin_focus [focus]

	wm withdraw .admin
	update idletasks
	set x [expr [winfo screenwidth .admin] / 2 \
		    - [winfo reqwidth .admin] / 2 \
		    - [winfo vrootx [winfo parent .admin]]]
	set y [expr [winfo screenheight .admin] / 2 \
		    - [winfo reqheight .admin] / 2 \
		    - [winfo vrooty [winfo parent .admin]]]
	wm geometry .admin +$x+$y
	wm deiconify .admin

	focus .admin.name.name
}

# Set the admin name.  This is called when the OK button of the
# select_admin_instance dialog is clicked.

proc admin_ok { } {
	global select_name
	global select_realm
	global kadmin_name
	global kadmin_realm
	global old_admin_focus

	stop_kadmin

	set kadmin_name $select_name
	set kadmin_realm $select_realm

	catch "destroy .admin"

	focus $old_admin_focus
}

# Cancel the select_admin_instance dialog.

proc admin_cancel { } {
	global old_admin_focus

	catch "destroy .admin"
	focus $old_admin_focus
}

# Change the administrator's password.  This is called by a selection
# on the file menu.

proc change_admin_password { } {
	global kadmin_spawn_id
	global kadmin_error
	global quitting
	global expect_in_progress
	global princ
	global gpass_cancelled

	if { $kadmin_spawn_id == -1 } {
		start_kadmin
	}

	set password [get_password "modification"]
	if { $gpass_cancelled } {
		return
	}

	.message.message configure -text ""

	incr expect_in_progress
	expect -i $kadmin_spawn_id "admin:"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "cap\r"

	set gone 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "New password for" { }
	}
	incr expect_in_progress -1

	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $gone } {
		got_principal 0
		return
	}

	exp_send -i $kadmin_spawn_id "$password\r"

	incr expect_in_progress
	expect -i $kadmin_spawn_id "please re-enter New password for"
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}

	exp_send -i $kadmin_spawn_id "$password\r"

	set password "xxxxxxxxxx"

	set failed 0
	incr expect_in_progress
	expect {
		-i $kadmin_spawn_id "Insufficient access" {
			kadmin_dialog \
				"You are not permitted to change passwords" \
				0 change_principal_access_help
			set failed 1
		}			
		-i $kadmin_spawn_id "Admin password changed"
	}
	incr expect_in_progress -1
	if { $quitting } {
		return
	}
	if { $kadmin_error != "" } {
		handle_kadmin_error
		return
	}
	if { $failed } {
		return
	}

	.message.message configure -text "Administrator password changed"
	reset_main_window
}

# Put up a help message.

proc kadmin_help { w text } {
	global help_window
	global old_help_focus

	if ![winfo exists $w] {
		toplevel $w
		wm title $w "kadmin help"
		wm group $w .

		frame $w.frame
		text $w.frame.text -relief raised -bd 2 -wrap word \
			-yscrollcommand "$w.frame.scroll set"
		scrollbar $w.frame.scroll \
			-command "$w.frame.text yview"
		button $w.close -text Close -command "destroy $w"

		pack $w.frame -side top -fill x
		pack $w.frame.text -side left
		pack $w.frame.scroll -side right -fill y
		pack $w.close -side bottom -expand 1
	}

	$w.frame.text configure -state normal
	$w.frame.text delete 1.0 end
	$w.frame.text insert end "$text"
	$w.frame.text configure -state disabled

	set help_window $w
	set old_help_focus [focus]

	bind $w <Enter> { focus $help_window }
	bind $w <Leave> { focus $old_help_focus }
}

# Top level help.

proc kadmin_top_help { w } {
	kadmin_help $w \
"Welcome to the kadmin help screen.
This may eventually be replaced with actual helpful information."
}

# Help from kadmin_error.  This can look at $kadmin_error to decide
# what text to print.

proc kadmin_error_help { w } {
	kadmin_help $w \
"An unexpected problem was encountered while communicating with the
kadmin process.  This may indicate a bug in the TK interface."
}

proc no_admin_instance_help { w } {
	kadmin_help $w \
"You do not have an admin instance.

That means that the principal USER.admin does not exist in the
Kerberos database, where USER is your user name.

You can use a different name by using the Select Admin Instance
selection on the File menu."
}

proc get_principal_access_help { w } {
	kadmin_help $w \
"You are not permitted to retrieve information about Kerberos
principals.  To fix this, your admin instance must be added to the
file /usr/kerberos/database/acl/admin_acl.get."
}

proc add_principal_access_help { w } {
	kadmin_help $w \
"You are not permitted to add Kerberos principals.  To fix this, your
admin instance must be added to the file
    /usr/kerberos/database/acl/admin_acl.add."
}

proc change_principal_access_help { w } {
	kadmin_help $w \
"You are not permitted to change Kerberos principals.  To fix this,
your admin instance must be added to the file
    /usr/kerberos/database/acl/admin_acl.mod."
}

proc delete_principal_access_help { w } {
	kadmin_help $w \
"You are not permitted to remove Kerberos principals.  To fix this,
your admin instance must be added to the file
    /usr/kerberos/database/acl/admin_acl.del."
}

proc gpass_help { w action } {
	kadmin_help $w \
"You must enter a password for this principal.
You must enter the same password twice, in order to avoid typing errors.
You may cancel the $action by clicking on Cancel."
}

proc delete_help { w } {
	kadmin_help $w \
"You must confirm whether you want to delete this principal.
Click on OK to proceed with the deletion, or Cancel to abort it."
}

proc admin_help { w } {
	kadmin_help $w \
"This dialog lets you select the name you want to use for the admin
instance.  If you choose NAME, the principal NAME.admin must exist in
the Kerberos database.

You may also select the realm you wish to modify.

Click on Cancel to close this window without making any selections."
}

# Comment this out for debugging.
log_user 0

setup_main_window
focus .principal.principal
tkwait window .
