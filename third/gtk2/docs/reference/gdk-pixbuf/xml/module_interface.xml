<refentry id="gdk-pixbuf-Module-Interface">
<refmeta>
<refentrytitle>Module Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GDK-PIXBUF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Module Interface</refname><refpurpose>Extending &gdk-pixbuf;</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;gdk-pixbuf/gdk-pixbuf.h&gt;


<link linkend="gboolean">gboolean</link>    <link linkend="gdk-pixbuf-set-option">gdk_pixbuf_set_option</link>           (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *value);
<link linkend="GSList">GSList</link>*     <link linkend="gdk-pixbuf-get-formats">gdk_pixbuf_get_formats</link>          (void);
<link linkend="gchar">gchar</link>*      <link linkend="gdk-pixbuf-format-get-name">gdk_pixbuf_format_get_name</link>      (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);
<link linkend="gchar">gchar</link>*      <link linkend="gdk-pixbuf-format-get-description">gdk_pixbuf_format_get_description</link>
                                            (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);
<link linkend="gchar">gchar</link>**     <link linkend="gdk-pixbuf-format-get-mime-types">gdk_pixbuf_format_get_mime_types</link>
                                            (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);
<link linkend="gchar">gchar</link>**     <link linkend="gdk-pixbuf-format-get-extensions">gdk_pixbuf_format_get_extensions</link>
                                            (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);
<link linkend="gboolean">gboolean</link>    <link linkend="gdk-pixbuf-format-is-writable">gdk_pixbuf_format_is_writable</link>   (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);
struct      <link linkend="GdkPixbufFormat">GdkPixbufFormat</link>;
enum        <link linkend="GdkPixbufFormatFlags">GdkPixbufFormatFlags</link>;
struct      <link linkend="GdkPixbufModulePattern">GdkPixbufModulePattern</link>;
void        (<link linkend="GdkPixbufModuleFillVtableFunc">*GdkPixbufModuleFillVtableFunc</link>)
                                            (<link linkend="GdkPixbufModule">GdkPixbufModule</link> *module);
void        (<link linkend="GdkPixbufModuleFillInfoFunc">*GdkPixbufModuleFillInfoFunc</link>)  (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *info);
void        (<link linkend="GdkPixbufModuleSizeFunc">*GdkPixbufModuleSizeFunc</link>)      (<link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        (<link linkend="GdkPixbufModulePreparedFunc">*GdkPixbufModulePreparedFunc</link>)  (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             <link linkend="GdkPixbufAnimation">GdkPixbufAnimation</link> *anim,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        (<link linkend="GdkPixbufModuleUpdatedFunc">*GdkPixbufModuleUpdatedFunc</link>)   (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             int x,
                                             int y,
                                             int width,
                                             int height,
                                             <link linkend="gpointer">gpointer</link> user_data);
struct      <link linkend="GdkPixbufModule">GdkPixbufModule</link>;

struct      <link linkend="GdkPixbufAnimationClass">GdkPixbufAnimationClass</link>;
struct      <link linkend="GdkPixbufAnimationIterClass">GdkPixbufAnimationIterClass</link>;

</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
If &gdk-pixbuf; has been compiled with GModule support, it can be extended by
modules which can load (and perhaps also save) new image and animation
formats. Each loadable module must export a
<link linkend="GdkPixbufModuleFillInfoFunc">GdkPixbufModuleFillInfoFunc</link> function named <function>fill_info</function> and
a <link linkend="GdkPixbufModuleFillVtableFunc">GdkPixbufModuleFillVtableFunc</link> function named
<function>fill_vtable</function>.
</para>

<para>
In order to make format-checking work before actually loading the modules
(which may require dlopening image libraries), modules export their 
signatures (and other information) via the <function>fill_info</function>
function. An external utility, <command>gdk-pixbuf-query-loaders</command>, uses
this to create a text file containing a list of all available loaders and 
their signatures. This file is then read at runtime by &gdk-pixbuf; to obtain
the list of available loaders and their signatures. 
</para>

<para>
Modules may only implement a subset of the functionality available via
<link linkend="GdkPixbufModule">GdkPixbufModule</link>. If a particular functionality is not implemented, the
<function>fill_vtable</function> function will simply not set the corresponding
function pointers of the <link linkend="GdkPixbufModule">GdkPixbufModule</link> structure. If a module supports
incremental loading (i.e. provides <link linkend="begin-load">begin_load</link>, <link linkend="stop-load">stop_load</link> and
<link linkend="load-increment">load_increment</link>), it doesn't have to implement <link linkend="load">load</link>, since &gdk-pixbuf; can 
supply a generic <link linkend="load">load</link> implementation wrapping the incremental loading. 
</para>

<para>
Installing a module is a two-step process:
<itemizedlist>
<listitem><para>copy the module file(s) to the loader directory (normally
<filename><replaceable>libdir</replaceable>/gtk-2.0/<replaceable>version</replaceable>/loaders</filename>,
unless overridden by the environment variable
<envar>GDK_PIXBUF_MODULEDIR</envar>) 
</para></listitem>
<listitem><para>call <command>gdk-pixbuf-query-loaders</command> to update the
module file (normally
<filename><replaceable>sysconfdir</replaceable>/gtk-2.0/gdk-pixbuf.loaders</filename>,
unless overridden by the environment variable
<envar>GDK_PIXBUF_MODULE_FILE</envar>)
</para></listitem>
</itemizedlist>
</para>

<para>
The &gdk-pixbuf; interfaces needed for implementing modules are contained in 
<filename>gdk-pixbuf-io.h</filename> (and
<filename>gdk-pixbuf-animation.h</filename> if the module supports animations).
They are not covered by the same stability guarantees as the regular 
&gdk-pixbuf; API. To underline this fact, they are protected by 
<literal><link linkend="ifdef">ifdef</link> GDK_PIXBUF_ENABLE_BACKEND</literal>.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gdk-pixbuf-set-option"/>gdk_pixbuf_set_option ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gdk_pixbuf_set_option           (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Attaches a key/value pair as an option to a <link linkend="GdkPixbuf">GdkPixbuf</link>. If <literal>key</literal> already
exists in the list of options attached to <parameter>pixbuf</parameter>, the new value is 
ignored and <literal>FALSE</literal> is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pixbuf</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixbuf">GdkPixbuf</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a nul-terminated string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> a nul-terminated string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> on success.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-pixbuf-get-formats"/>gdk_pixbuf_get_formats ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gdk_pixbuf_get_formats          (void);</programlisting>
<para>
Obtains the available information about the image formats supported
by GdkPixbuf.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A list of <link linkend="GdkPixbufFormat">GdkPixbufFormat</link><!-- -->s describing the supported 
image formats.  The list should be freed when it is no longer needed, 
but the structures themselves are owned by <link linkend="GdkPixbuf">GdkPixbuf</link> and should not be 
freed.  

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-pixbuf-format-get-name"/>gdk_pixbuf_format_get_name ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gdk_pixbuf_format_get_name      (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);</programlisting>
<para>
Returns the name of the format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixbufFormat">GdkPixbufFormat</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the name of the format. 

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-pixbuf-format-get-description"/>gdk_pixbuf_format_get_description ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gdk_pixbuf_format_get_description
                                            (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);</programlisting>
<para>
Returns a description of the format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixbufFormat">GdkPixbufFormat</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a description of the format. 

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-pixbuf-format-get-mime-types"/>gdk_pixbuf_format_get_mime_types ()</title>
<programlisting><link linkend="gchar">gchar</link>**     gdk_pixbuf_format_get_mime_types
                                            (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);</programlisting>
<para>
Returns the mime types supported by the format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixbufFormat">GdkPixbufFormat</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <literal>NULL</literal>-terminated array of mime types.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-pixbuf-format-get-extensions"/>gdk_pixbuf_format_get_extensions ()</title>
<programlisting><link linkend="gchar">gchar</link>**     gdk_pixbuf_format_get_extensions
                                            (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);</programlisting>
<para>
Returns the filename extensions typically used for files in the 
given format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixbufFormat">GdkPixbufFormat</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <literal>NULL</literal>-terminated array of filename extensions.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-pixbuf-format-is-writable"/>gdk_pixbuf_format_is_writable ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gdk_pixbuf_format_is_writable   (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *format);</programlisting>
<para>
Returns whether pixbufs can be saved in the given format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixbufFormat">GdkPixbufFormat</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> whether pixbufs can be saved in the given format.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufFormat"/>struct GdkPixbufFormat</title>
<programlisting>struct GdkPixbufFormat {

  gchar *name;
  GdkPixbufModulePattern *signature;
  gchar *domain;
  gchar *description;
  gchar **mime_types;
  gchar **extensions;
  guint32 flags;
};
</programlisting>
<para>
A <link linkend="GdkPixbufFormat">GdkPixbufFormat</link> contains information about the image format accepted by a
module. Only modules should access the fields directly, applications should
use the <function>gdk_pixbuf_format_*</function> functions.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gchar">gchar</link> *<structfield>name</structfield></term>
<listitem><simpara>the name of the image format.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbufModulePattern">GdkPixbufModulePattern</link> *<structfield>signature</structfield></term>
<listitem><simpara>the signature of the module.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link> *<structfield>domain</structfield></term>
<listitem><simpara>the message domain for the <parameter>description</parameter>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link> *<structfield>description</structfield></term>
<listitem><simpara>a description of the image format.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link> **<structfield>mime_types</structfield></term>
<listitem><simpara>a <literal>NULL</literal>-terminated array of MIME types for the image format.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link> **<structfield>extensions</structfield></term>
<listitem><simpara>a <literal>NULL</literal>-terminated array of typical filename extensions for the
image format.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link> <structfield>flags</structfield></term>
<listitem><simpara>a combination of <link linkend="GdkPixbufFormatFlags">GdkPixbufFormatFlags</link>.
</simpara></listitem>
</varlistentry>
</variablelist><para>Since 2.2

</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufFormatFlags"/>enum GdkPixbufFormatFlags</title>
<programlisting>typedef enum /*&lt; skip &gt;*/
{
  GDK_PIXBUF_FORMAT_WRITABLE = 1 &lt;&lt; 0
} GdkPixbufFormatFlags;
</programlisting>
<para>
Flags which allow a module to specify further details about the supported
operations.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_PIXBUF_FORMAT_WRITABLE</literal></term>
<listitem><simpara>the module can write out images in the format.
</simpara></listitem>
</varlistentry>
</variablelist><para>Since 2.2

</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufModulePattern"/>struct GdkPixbufModulePattern</title>
<programlisting>struct GdkPixbufModulePattern {

	unsigned char *prefix;
	unsigned char *mask;
	int relevance;
};
</programlisting>
<para>
The signature of a module is a set of prefixes. Prefixes are encoded as
pairs of ordinary strings, where the second string, if not <literal>NULL</literal>,
may contain ' ', '!', 'x', 'z', and 'n' to indicate bytes that must be 
matched, not matched, "don't-care"-bytes, zeros and non-zeros.
Each prefix has an associated integer that describes the relevance of 
the prefix, with 0 meaning a mismatch and 100 a "perfect match".
</para>

<para>
The signature of a module is stored as an array of 
<link linkend="GdkPixbufModulePattern">GdkPixbufModulePattern</link><!-- -->s. 
</para><variablelist role="struct">
<varlistentry>
<term>unsigned char *<structfield>prefix</structfield></term>
<listitem><simpara>the prefix for this pattern
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>unsigned char *<structfield>mask</structfield></term>
<listitem><simpara>mask containing bytes which modify how the prefix is matched against
  test data
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>relevance</structfield></term>
<listitem><simpara>relevance of this pattern
</simpara></listitem>
</varlistentry>
</variablelist><para>Since 2.2

</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufModuleFillVtableFunc"/>GdkPixbufModuleFillVtableFunc ()</title>
<programlisting>void        (*GdkPixbufModuleFillVtableFunc)
                                            (<link linkend="GdkPixbufModule">GdkPixbufModule</link> *module);</programlisting>
<para>
Defines the type of the function used to set the vtable of a 
<link linkend="GdkPixbufModule">GdkPixbufModule</link> when it is loaded. 
</para><variablelist role="params">
<varlistentry><term><parameter>module</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GdkPixbufModule">GdkPixbufModule</link>.
</simpara></listitem></varlistentry>
</variablelist><para>Since 2.2


</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufModuleFillInfoFunc"/>GdkPixbufModuleFillInfoFunc ()</title>
<programlisting>void        (*GdkPixbufModuleFillInfoFunc)  (<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *info);</programlisting>
<para>
Defines the type of the function used to fill a 
<link linkend="GdkPixbufFormat">GdkPixbufFormat</link> structure with information about a module.
</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GdkPixbufFormat">GdkPixbufFormat</link>.
</simpara></listitem></varlistentry>
</variablelist><para>Since 2.2


</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufModuleSizeFunc"/>GdkPixbufModuleSizeFunc ()</title>
<programlisting>void        (*GdkPixbufModuleSizeFunc)      (<link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Defines the type of the function that gets called once the size 
of the loaded image is known.
</para>
<para>
The function is expected to set <parameter>width</parameter> and <parameter>height</parameter> to the desired
size to which the image should be scaled. If a module has no efficient 
way to achieve the desired scaling during the loading of the image, it may
either ignore the size request, or only approximate it -- &gdk-pixbuf; will
then perform the required scaling on the completely loaded image. 
</para><variablelist role="params">
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara>pointer to a location containing the current image width
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara>pointer to a location containing the current image height
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>the loader.
</simpara></listitem></varlistentry>
</variablelist><para>Since 2.2


</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufModulePreparedFunc"/>GdkPixbufModulePreparedFunc ()</title>
<programlisting>void        (*GdkPixbufModulePreparedFunc)  (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             <link linkend="GdkPixbufAnimation">GdkPixbufAnimation</link> *anim,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Defines the type of the function that gets called once the initial 
setup of <parameter>pixbuf</parameter> is done.
</para>
<para>
<link linkend="GdkPixbufLoader">GdkPixbufLoader</link> uses a function of this type to emit the 
"<link linkend="GdkPixbufLoader-area-prepared">area_prepared</link>"
signal.
</para><variablelist role="params">
<varlistentry><term><parameter>pixbuf</parameter>&nbsp;:</term>
<listitem><simpara>the <link linkend="GdkPixbuf">GdkPixbuf</link> that is currently being loaded.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anim</parameter>&nbsp;:</term>
<listitem><simpara>if an animation is being loaded, the <link linkend="GdkPixbufAnimation">GdkPixbufAnimation</link>, else <literal>NULL</literal>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>the loader.
</simpara></listitem></varlistentry>
</variablelist><para>Since 2.2


</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufModuleUpdatedFunc"/>GdkPixbufModuleUpdatedFunc ()</title>
<programlisting>void        (*GdkPixbufModuleUpdatedFunc)   (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf,
                                             int x,
                                             int y,
                                             int width,
                                             int height,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Defines the type of the function that gets called every time a region
of <parameter>pixbuf</parameter> is updated.
</para>
<para>
<link linkend="GdkPixbufLoader">GdkPixbufLoader</link> uses a function of this type to emit the 
"<link linkend="GdkPixbufLoader-area-updated">area_updated</link>"
signal.
</para><variablelist role="params">
<varlistentry><term><parameter>pixbuf</parameter>&nbsp;:</term>
<listitem><simpara>the <link linkend="GdkPixbuf">GdkPixbuf</link> that is currently being loaded.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara>the X origin of the updated area.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara>the Y origin of the updated area.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara>the width of the updated area.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara>the height of the updated area.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>the loader.
</simpara></listitem></varlistentry>
</variablelist><para>Since 2.2


</para></refsect2>
<refsect2>
<title><anchor id="GdkPixbufModule"/>struct GdkPixbufModule</title>
<programlisting>struct GdkPixbufModule {

	char *module_name;
	char *module_path;
	GModule *module;
	GdkPixbufFormat *info;
	
        GdkPixbuf *(* load) (FILE    *f,
                             GError **error);
        GdkPixbuf *(* load_xpm_data) (const char **data);

        /* Incremental loading */

        gpointer (* begin_load)     (GdkPixbufModuleSizeFunc size_func,
                                     GdkPixbufModulePreparedFunc prepare_func,
                                     GdkPixbufModuleUpdatedFunc update_func,
                                     gpointer user_data,
                                     GError **error);
        gboolean (* stop_load)      (gpointer context,
                                     GError **error);
        gboolean (* load_increment) (gpointer      context,
                                     const guchar *buf,
                                     guint         size,
                                     GError      **error);

	/* Animation loading */
	GdkPixbufAnimation *(* load_animation) (FILE    *f,
                                                GError **error);

        gboolean (* save) (FILE      *f,
                           GdkPixbuf *pixbuf,
                           gchar    **param_keys,
                           gchar    **param_values,
                           GError   **error);
  
};
</programlisting>
<para>
A <link linkend="GdkPixbufModule">GdkPixbufModule</link> contains the necessary functions to load and save 
images in a certain file format. 
</para>
<para>
A <link linkend="GdkPixbufModule">GdkPixbufModule</link> can be loaded dynamically from a <link linkend="GModule">GModule</link>.
Each loadable module must contain a <link linkend="GdkPixbufModuleFillVtableFunc">GdkPixbufModuleFillVtableFunc</link> function 
named <function>fill_vtable</function>, which will get called when the module
is loaded and must set the function pointers of the <link linkend="GdkPixbufModule">GdkPixbufModule</link>. 
</para><variablelist role="struct">
<varlistentry>
<term>char *<structfield>module_name</structfield></term>
<listitem><simpara>the name of the module, usually the same as the
  usual file extension for images of this type, eg. "xpm", "jpeg" or "png".
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>char *<structfield>module_path</structfield></term>
<listitem><simpara>the path from which the module is loaded.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GModule">GModule</link> *<structfield>module</structfield></term>
<listitem><simpara>the loaded <link linkend="GModule">GModule</link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbufFormat">GdkPixbufFormat</link> *<structfield>info</structfield></term>
<listitem><simpara>a <link linkend="GdkPixbufFormat">GdkPixbufFormat</link> holding information about the module.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbuf">GdkPixbuf</link>* (*<structfield>load</structfield>) (FILE    *f,
                             GError **error)</term>
<listitem><simpara>loads an image from a file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbuf">GdkPixbuf</link>* (*<structfield>load_xpm_data</structfield>) (const char **data)</term>
<listitem><simpara>loads an image from data in memory.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link> (*<structfield>begin_load</structfield>) (GdkPixbufModuleSizeFunc size_func,
                                     GdkPixbufModulePreparedFunc prepare_func,
                                     GdkPixbufModuleUpdatedFunc update_func,
                                     gpointer user_data,
                                     GError **error)</term>
<listitem><simpara>begins an incremental load.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> (*<structfield>stop_load</structfield>) (gpointer context,
                                     GError **error)</term>
<listitem><simpara>stops an incremental load.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> (*<structfield>load_increment</structfield>) (gpointer      context,
                                     const guchar *buf,
                                     guint         size,
                                     GError      **error)</term>
<listitem><simpara>continues an incremental load.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbufAnimation">GdkPixbufAnimation</link>* (*<structfield>load_animation</structfield>) (FILE    *f,
                                                GError **error)</term>
<listitem><simpara>loads an animation from a file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> (*<structfield>save</structfield>) (FILE      *f,
                           GdkPixbuf *pixbuf,
                           gchar    **param_keys,
                           gchar    **param_values,
                           GError   **error)</term>
<listitem><simpara>saves a <link linkend="GdkPixbuf">GdkPixbuf</link> to a file.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkPixbufAnimationClass"/>struct GdkPixbufAnimationClass</title>
<programlisting>struct GdkPixbufAnimationClass {

        GObjectClass parent_class;


        gboolean                (*is_static_image)  (GdkPixbufAnimation *anim);

        GdkPixbuf*              (*get_static_image) (GdkPixbufAnimation *anim);
        
        void                    (*get_size) (GdkPixbufAnimation *anim,
                                             int                 *width,
                                             int                 *height);
        
        GdkPixbufAnimationIter* (*get_iter) (GdkPixbufAnimation *anim,
                                             const GTimeVal     *start_time);

};
</programlisting>
<para>
Modules supporting animations must derive a type from 
<link linkend="GdkPixbufAnimation">GdkPixbufAnimation</link>, providing suitable implementations of the 
virtual functions.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link> <structfield>parent_class</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> (*<structfield>is_static_image</structfield>) (GdkPixbufAnimation *anim)</term>
<listitem><simpara>returns whether the given animation is just a static image.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbuf">GdkPixbuf</link>* (*<structfield>get_static_image</structfield>) (GdkPixbufAnimation *anim)</term>
<listitem><simpara>returns a static image representing the given animation.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void (*<structfield>get_size</structfield>) (GdkPixbufAnimation *anim,
                                             int                 *width,
                                             int                 *height)</term>
<listitem><simpara>fills <parameter>width</parameter> and <parameter>height</parameter> with the frame size of the animation.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbufAnimationIter">GdkPixbufAnimationIter</link>* (*<structfield>get_iter</structfield>) (GdkPixbufAnimation *anim,
                                             const GTimeVal     *start_time)</term>
<listitem><simpara>returns an iterator for the given animation.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkPixbufAnimationIterClass"/>struct GdkPixbufAnimationIterClass</title>
<programlisting>struct GdkPixbufAnimationIterClass {

        GObjectClass parent_class;


        int        (*get_delay_time)   (GdkPixbufAnimationIter *iter);

        GdkPixbuf* (*get_pixbuf)       (GdkPixbufAnimationIter *iter);

        gboolean (*on_currently_loading_frame) (GdkPixbufAnimationIter *iter);

        gboolean (*advance)            (GdkPixbufAnimationIter *iter,
                                        const GTimeVal         *current_time);
};
</programlisting>
<para>
Modules supporting animations must derive a type from 
<link linkend="GdkPixbufAnimationIter">GdkPixbufAnimationIter</link>, providing suitable implementations of the 
virtual functions.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link> <structfield>parent_class</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int (*<structfield>get_delay_time</structfield>) (GdkPixbufAnimationIter *iter)</term>
<listitem><simpara>returns the time in milliseconds that the current frame 
  should be shown.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkPixbuf">GdkPixbuf</link>* (*<structfield>get_pixbuf</structfield>) (GdkPixbufAnimationIter *iter)</term>
<listitem><simpara>returns the current frame.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> (*<structfield>on_currently_loading_frame</structfield>) (GdkPixbufAnimationIter *iter)</term>
<listitem><simpara>returns whether the current frame of <parameter>iter</parameter> is 
being loaded.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> (*<structfield>advance</structfield>) (GdkPixbufAnimationIter *iter,
                                        const GTimeVal         *current_time)</term>
<listitem><simpara>advances the iterator to <parameter>current_time</parameter>, possibly changing the 
current frame.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
