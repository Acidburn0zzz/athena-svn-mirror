<refentry id="gdk-Windows">
<refmeta>
<refentrytitle>Windows</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GDK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Windows</refname><refpurpose>Onscreen display areas in the target window system</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<anchor id="GdkWindow"/>
<synopsis>

#include &lt;gdk/gdk.h&gt;


struct      <link linkend="GdkWindow-struct">GdkWindow</link>;
enum        <link linkend="GdkWindowType">GdkWindowType</link>;
enum        <link linkend="GdkWindowClass">GdkWindowClass</link>;
enum        <link linkend="GdkWindowHints">GdkWindowHints</link>;
struct      <link linkend="GdkGeometry">GdkGeometry</link>;
enum        <link linkend="GdkGravity">GdkGravity</link>;
enum        <link linkend="GdkWindowEdge">GdkWindowEdge</link>;
enum        <link linkend="GdkWindowTypeHint">GdkWindowTypeHint</link>;
struct      <link linkend="GdkWindowAttr">GdkWindowAttr</link>;
enum        <link linkend="GdkWindowAttributesType">GdkWindowAttributesType</link>;
<link linkend="GdkWindow">GdkWindow</link>*  <link linkend="gdk-window-new">gdk_window_new</link>                  (<link linkend="GdkWindow">GdkWindow</link> *parent,
                                             <link linkend="GdkWindowAttr">GdkWindowAttr</link> *attributes,
                                             <link linkend="gint">gint</link> attributes_mask);
void        <link linkend="gdk-window-destroy">gdk_window_destroy</link>              (<link linkend="GdkWindow">GdkWindow</link> *window);
#define     <link linkend="gdk-window-ref">gdk_window_ref</link>
#define     <link linkend="gdk-window-unref">gdk_window_unref</link>
<link linkend="GdkWindowType">GdkWindowType</link> <link linkend="gdk-window-get-window-type">gdk_window_get_window_type</link>    (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="GdkWindow">GdkWindow</link>*  <link linkend="gdk-window-at-pointer">gdk_window_at_pointer</link>           (<link linkend="gint">gint</link> *win_x,
                                             <link linkend="gint">gint</link> *win_y);
void        <link linkend="gdk-window-show">gdk_window_show</link>                 (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-show-unraised">gdk_window_show_unraised</link>        (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-hide">gdk_window_hide</link>                 (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="gdk-window-is-visible">gdk_window_is_visible</link>           (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="gdk-window-is-viewable">gdk_window_is_viewable</link>          (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="GdkWindowState">GdkWindowState</link> <link linkend="gdk-window-get-state">gdk_window_get_state</link>         (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-withdraw">gdk_window_withdraw</link>             (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-iconify">gdk_window_iconify</link>              (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-deiconify">gdk_window_deiconify</link>            (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-stick">gdk_window_stick</link>                (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-unstick">gdk_window_unstick</link>              (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-maximize">gdk_window_maximize</link>             (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-unmaximize">gdk_window_unmaximize</link>           (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-fullscreen">gdk_window_fullscreen</link>           (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-unfullscreen">gdk_window_unfullscreen</link>         (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-move">gdk_window_move</link>                 (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);
void        <link linkend="gdk-window-resize">gdk_window_resize</link>               (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);
void        <link linkend="gdk-window-move-resize">gdk_window_move_resize</link>          (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);
void        <link linkend="gdk-window-scroll">gdk_window_scroll</link>               (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> dx,
                                             <link linkend="gint">gint</link> dy);
void        <link linkend="gdk-window-reparent">gdk_window_reparent</link>             (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *new_parent,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);
void        <link linkend="gdk-window-clear">gdk_window_clear</link>                (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-clear-area">gdk_window_clear_area</link>           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);
void        <link linkend="gdk-window-clear-area-e">gdk_window_clear_area_e</link>         (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);
#define     <link linkend="gdk-window-copy-area">gdk_window_copy_area</link>            (drawable,gc,x,y,source_drawable,source_x,source_y,width,height)
void        <link linkend="gdk-window-raise">gdk_window_raise</link>                (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-lower">gdk_window_lower</link>                (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-focus">gdk_window_focus</link>                (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="guint32">guint32</link> timestamp);
void        <link linkend="gdk-window-register-dnd">gdk_window_register_dnd</link>         (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-begin-resize-drag">gdk_window_begin_resize_drag</link>    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindowEdge">GdkWindowEdge</link> edge,
                                             <link linkend="gint">gint</link> button,
                                             <link linkend="gint">gint</link> root_x,
                                             <link linkend="gint">gint</link> root_y,
                                             <link linkend="guint32">guint32</link> timestamp);
void        <link linkend="gdk-window-begin-move-drag">gdk_window_begin_move_drag</link>      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> button,
                                             <link linkend="gint">gint</link> root_x,
                                             <link linkend="gint">gint</link> root_y,
                                             <link linkend="guint32">guint32</link> timestamp);
void        <link linkend="gdk-window-constrain-size">gdk_window_constrain_size</link>       (<link linkend="GdkGeometry">GdkGeometry</link> *geometry,
                                             <link linkend="guint">guint</link> flags,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height,
                                             <link linkend="gint">gint</link> *new_width,
                                             <link linkend="gint">gint</link> *new_height);

void        <link linkend="gdk-window-begin-paint-rect">gdk_window_begin_paint_rect</link>     (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRectangle">GdkRectangle</link> *rectangle);
void        <link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>   (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *region);
void        <link linkend="gdk-window-end-paint">gdk_window_end_paint</link>            (<link linkend="GdkWindow">GdkWindow</link> *window);

void        <link linkend="gdk-window-invalidate-rect">gdk_window_invalidate_rect</link>      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRectangle">GdkRectangle</link> *rect,
                                             <link linkend="gboolean">gboolean</link> invalidate_children);
void        <link linkend="gdk-window-invalidate-region">gdk_window_invalidate_region</link>    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *region,
                                             <link linkend="gboolean">gboolean</link> invalidate_children);
void        <link linkend="gdk-window-invalidate-maybe-recurse">gdk_window_invalidate_maybe_recurse</link>
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *region,
                                             <link linkend="gboolean">gboolean</link> (*child_func) (GdkWindow *, gpointer),
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="GdkRegion">GdkRegion</link>*  <link linkend="gdk-window-get-update-area">gdk_window_get_update_area</link>      (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-freeze-updates">gdk_window_freeze_updates</link>       (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-thaw-updates">gdk_window_thaw_updates</link>         (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-process-all-updates">gdk_window_process_all_updates</link>  (void);
void        <link linkend="gdk-window-process-updates">gdk_window_process_updates</link>      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> update_children);
void        <link linkend="gdk-window-set-debug-updates">gdk_window_set_debug_updates</link>    (<link linkend="gboolean">gboolean</link> setting);
void        <link linkend="gdk-window-get-internal-paint-info">gdk_window_get_internal_paint_info</link>
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkDrawable">GdkDrawable</link> **real_drawable,
                                             <link linkend="gint">gint</link> *x_offset,
                                             <link linkend="gint">gint</link> *y_offset);

void        <link linkend="gdk-window-set-user-data">gdk_window_set_user_data</link>        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="gdk-window-set-override-redirect">gdk_window_set_override_redirect</link>
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> override_redirect);
void        <link linkend="gdk-window-add-filter">gdk_window_add_filter</link>           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkFilterFunc">GdkFilterFunc</link> function,
                                             <link linkend="gpointer">gpointer</link> data);
void        <link linkend="gdk-window-remove-filter">gdk_window_remove_filter</link>        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkFilterFunc">GdkFilterFunc</link> function,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="GdkFilterReturn">GdkFilterReturn</link> (<link linkend="GdkFilterFunc">*GdkFilterFunc</link>)            (<link linkend="GdkXEvent">GdkXEvent</link> *xevent,
                                             <link linkend="GdkEvent">GdkEvent</link> *event,
                                             <link linkend="gpointer">gpointer</link> data);
enum        <link linkend="GdkFilterReturn">GdkFilterReturn</link>;
typedef     <link linkend="GdkXEvent">GdkXEvent</link>;
void        <link linkend="gdk-window-shape-combine-mask">gdk_window_shape_combine_mask</link>   (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkBitmap">GdkBitmap</link> *mask,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);
void        <link linkend="gdk-window-shape-combine-region">gdk_window_shape_combine_region</link> (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *shape_region,
                                             <link linkend="gint">gint</link> offset_x,
                                             <link linkend="gint">gint</link> offset_y);
void        <link linkend="gdk-window-set-child-shapes">gdk_window_set_child_shapes</link>     (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-merge-child-shapes">gdk_window_merge_child_shapes</link>   (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="gdk-window-set-static-gravities">gdk_window_set_static_gravities</link> (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> use_static);
void        <link linkend="gdk-window-set-hints">gdk_window_set_hints</link>            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> min_width,
                                             <link linkend="gint">gint</link> min_height,
                                             <link linkend="gint">gint</link> max_width,
                                             <link linkend="gint">gint</link> max_height,
                                             <link linkend="gint">gint</link> flags);
void        <link linkend="gdk-window-set-title">gdk_window_set_title</link>            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             const <link linkend="gchar">gchar</link> *title);
void        <link linkend="gdk-window-set-background">gdk_window_set_background</link>       (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkColor">GdkColor</link> *color);
void        <link linkend="gdk-window-set-back-pixmap">gdk_window_set_back_pixmap</link>      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkPixmap">GdkPixmap</link> *pixmap,
                                             <link linkend="gboolean">gboolean</link> parent_relative);
#define     <link linkend="GDK-PARENT-RELATIVE-CAPS">GDK_PARENT_RELATIVE</link>
void        <link linkend="gdk-window-set-cursor">gdk_window_set_cursor</link>           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkCursor">GdkCursor</link> *cursor);
#define     <link linkend="gdk-window-set-colormap">gdk_window_set_colormap</link>
void        <link linkend="gdk-window-get-user-data">gdk_window_get_user_data</link>        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gpointer">gpointer</link> *data);
void        <link linkend="gdk-window-get-geometry">gdk_window_get_geometry</link>         (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="gint">gint</link> *depth);
void        <link linkend="gdk-window-set-geometry-hints">gdk_window_set_geometry_hints</link>   (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkGeometry">GdkGeometry</link> *geometry,
                                             <link linkend="GdkWindowHints">GdkWindowHints</link> geom_mask);
void        <link linkend="gdk-window-set-icon-list">gdk_window_set_icon_list</link>        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GList">GList</link> *pixbufs);
void        <link linkend="gdk-window-set-modal-hint">gdk_window_set_modal_hint</link>       (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> modal);
void        <link linkend="gdk-window-set-type-hint">gdk_window_set_type_hint</link>        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindowTypeHint">GdkWindowTypeHint</link> hint);
void        <link linkend="gdk-window-set-skip-taskbar-hint">gdk_window_set_skip_taskbar_hint</link>
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skips_taskbar);
void        <link linkend="gdk-window-set-skip-pager-hint">gdk_window_set_skip_pager_hint</link>  (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skips_pager);
void        <link linkend="gdk-window-get-position">gdk_window_get_position</link>         (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);
void        <link linkend="gdk-window-get-root-origin">gdk_window_get_root_origin</link>      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);
void        <link linkend="gdk-window-get-frame-extents">gdk_window_get_frame_extents</link>    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRectangle">GdkRectangle</link> *rect);
#define     <link linkend="gdk-window-get-size">gdk_window_get_size</link>
#define     <link linkend="gdk-window-get-visual">gdk_window_get_visual</link>
#define     <link linkend="gdk-window-get-colormap">gdk_window_get_colormap</link>
#define     <link linkend="gdk-window-get-type">gdk_window_get_type</link>
<link linkend="gint">gint</link>        <link linkend="gdk-window-get-origin">gdk_window_get_origin</link>           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);
<link linkend="gboolean">gboolean</link>    <link linkend="gdk-window-get-deskrelative-origin">gdk_window_get_deskrelative_origin</link>
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);
<link linkend="GdkWindow">GdkWindow</link>*  <link linkend="gdk-window-get-pointer">gdk_window_get_pointer</link>          (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="GdkModifierType">GdkModifierType</link> *mask);
enum        <link linkend="GdkModifierType">GdkModifierType</link>;
<link linkend="GdkWindow">GdkWindow</link>*  <link linkend="gdk-window-get-parent">gdk_window_get_parent</link>           (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="GdkWindow">GdkWindow</link>*  <link linkend="gdk-window-get-toplevel">gdk_window_get_toplevel</link>         (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="GList">GList</link>*      <link linkend="gdk-window-get-children">gdk_window_get_children</link>         (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="GList">GList</link>*      <link linkend="gdk-window-peek-children">gdk_window_peek_children</link>        (<link linkend="GdkWindow">GdkWindow</link> *window);
<link linkend="GdkEventMask">GdkEventMask</link> <link linkend="gdk-window-get-events">gdk_window_get_events</link>          (<link linkend="GdkWindow">GdkWindow</link> *window);
void        <link linkend="gdk-window-set-events">gdk_window_set_events</link>           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkEventMask">GdkEventMask</link> event_mask);
void        <link linkend="gdk-window-set-icon">gdk_window_set_icon</link>             (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *icon_window,
                                             <link linkend="GdkPixmap">GdkPixmap</link> *pixmap,
                                             <link linkend="GdkBitmap">GdkBitmap</link> *mask);
void        <link linkend="gdk-window-set-icon-name">gdk_window_set_icon_name</link>        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             const <link linkend="gchar">gchar</link> *name);
void        <link linkend="gdk-window-set-transient-for">gdk_window_set_transient_for</link>    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *parent);
void        <link linkend="gdk-window-set-role">gdk_window_set_role</link>             (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             const <link linkend="gchar">gchar</link> *role);
void        <link linkend="gdk-window-set-group">gdk_window_set_group</link>            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *leader);
void        <link linkend="gdk-window-set-decorations">gdk_window_set_decorations</link>      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWMDecoration">GdkWMDecoration</link> decorations);
<link linkend="gboolean">gboolean</link>    <link linkend="gdk-window-get-decorations">gdk_window_get_decorations</link>      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWMDecoration">GdkWMDecoration</link> *decorations);
enum        <link linkend="GdkWMDecoration">GdkWMDecoration</link>;
void        <link linkend="gdk-window-set-functions">gdk_window_set_functions</link>        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWMFunction">GdkWMFunction</link> functions);
enum        <link linkend="GdkWMFunction">GdkWMFunction</link>;
<link linkend="GList">GList</link>*      <link linkend="gdk-window-get-toplevels">gdk_window_get_toplevels</link>        (void);
<link linkend="GdkWindow">GdkWindow</link>*  <link linkend="gdk-get-default-root-window">gdk_get_default_root_window</link>     (void);

struct      <link linkend="GdkPointerHooks">GdkPointerHooks</link>;
<link linkend="GdkPointerHooks">GdkPointerHooks</link>* <link linkend="gdk-set-pointer-hooks">gdk_set_pointer_hooks</link>      (const <link linkend="GdkPointerHooks">GdkPointerHooks</link> *new_hooks);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GdkDrawable">GdkDrawable</link>
         +----GdkWindow
</synopsis>

</refsect1>






<refsect1>
<title>Description</title>
<para>
A <link linkend="GdkWindow">GdkWindow</link> is a rectangular region on the screen. It's a low-level object,
used to implement high-level objects such as <link linkend="GtkWidget">GtkWidget</link> and <link linkend="GtkWindow">GtkWindow</link> on the
GTK+ level. A <link linkend="GtkWindow">GtkWindow</link> is a toplevel window, the thing a user might think of 
as a "window" with a titlebar and so on; a <link linkend="GtkWindow">GtkWindow</link> may contain many <link linkend="GdkWindow">GdkWindow</link>. 
For example, each <link linkend="GtkButton">GtkButton</link> has a <link linkend="GdkWindow">GdkWindow</link> associated with it.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GdkWindow-struct"/>struct GdkWindow</title>
<programlisting>struct GdkWindow;</programlisting>
<para>
An opaque structure representing an onscreen drawable.
Pointers to structures of type <link linkend="GdkPixmap">GdkPixmap</link>, <link linkend="GdkBitmap">GdkBitmap</link>,
and <link linkend="GdkWindow">GdkWindow</link>, can often be used interchangeably.
The type <link linkend="GdkDrawable">GdkDrawable</link> refers generically to any of
these types.
</para></refsect2>
<refsect2>
<title><anchor id="GdkWindowType"/>enum GdkWindowType</title>
<programlisting>typedef enum
{
  GDK_WINDOW_ROOT,
  GDK_WINDOW_TOPLEVEL,
  GDK_WINDOW_CHILD,
  GDK_WINDOW_DIALOG,
  GDK_WINDOW_TEMP,
  GDK_WINDOW_FOREIGN
} GdkWindowType;
</programlisting>
<para>
Describes the kind of window.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_WINDOW_ROOT</literal></term>
<listitem><simpara>root window; this window has no parent, covers the entire screen, and is created by the window system
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TOPLEVEL</literal></term>
<listitem><simpara>toplevel window (used to implement <link linkend="GtkWindow">GtkWindow</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_CHILD</literal></term>
<listitem><simpara>child window (used to implement e.g. <link linkend="GtkButton">GtkButton</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_DIALOG</literal></term>
<listitem><simpara>useless/deprecated compatibility type
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TEMP</literal></term>
<listitem><simpara>override redirect temporary window (used to implement <link linkend="GtkMenu">GtkMenu</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_FOREIGN</literal></term>
<listitem><simpara>foreign window (see <link linkend="gdk-window-foreign-new">gdk_window_foreign_new</link>())

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWindowClass"/>enum GdkWindowClass</title>
<programlisting>typedef enum
{
  GDK_INPUT_OUTPUT,
  GDK_INPUT_ONLY
} GdkWindowClass;
</programlisting>
<para>
<parameter>GDK_INPUT_OUTPUT</parameter> windows are the standard kind of window you might expect. 
<parameter>GDK_INPUT_ONLY</parameter> windows are invisible; they are used to trap events, but 
you can't draw on them.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_INPUT_OUTPUT</literal></term>
<listitem><simpara>window for graphics and events
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_INPUT_ONLY</literal></term>
<listitem><simpara>window for events only

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWindowHints"/>enum GdkWindowHints</title>
<programlisting>typedef enum
{
  GDK_HINT_POS	       = 1 &lt;&lt; 0,
  GDK_HINT_MIN_SIZE    = 1 &lt;&lt; 1,
  GDK_HINT_MAX_SIZE    = 1 &lt;&lt; 2,
  GDK_HINT_BASE_SIZE   = 1 &lt;&lt; 3,
  GDK_HINT_ASPECT      = 1 &lt;&lt; 4,
  GDK_HINT_RESIZE_INC  = 1 &lt;&lt; 5,
  GDK_HINT_WIN_GRAVITY = 1 &lt;&lt; 6,
  GDK_HINT_USER_POS    = 1 &lt;&lt; 7,
  GDK_HINT_USER_SIZE   = 1 &lt;&lt; 8
} GdkWindowHints;
</programlisting>
<para>
Used to indicate which fields of a <link linkend="GdkGeometry">GdkGeometry</link> struct should be paid attention
to. Also, the presence/absence of <parameter>GDK_HINT_POS</parameter>, <parameter>GDK_HINT_USER_POS</parameter>, and
<parameter>GDK_HINT_USER_SIZE</parameter> is significant, though they don't directly refer to
<link linkend="GdkGeometry">GdkGeometry</link> fields.  <parameter>GDK_HINT_USER_POS</parameter> will be set automatically by <link linkend="GtkWindow">GtkWindow</link>
if you call <link linkend="gtk-window-move">gtk_window_move</link>(). <parameter>GDK_HINT_USER_POS</parameter> and <parameter>GDK_HINT_USER_SIZE</parameter> 
should be set if the user specified a size/position using a --geometry 
command-line argument; <link linkend="gtk-window-parse-geometry">gtk_window_parse_geometry</link>() automatically sets these
flags.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_HINT_POS</literal></term>
<listitem><simpara>indicates that the program has positioned the window
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_MIN_SIZE</literal></term>
<listitem><simpara>min size fields are set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_MAX_SIZE</literal></term>
<listitem><simpara>max size fields are set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_BASE_SIZE</literal></term>
<listitem><simpara>base size fields are set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_ASPECT</literal></term>
<listitem><simpara>aspect ratio fields are set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_RESIZE_INC</literal></term>
<listitem><simpara>resize increment fields are set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_WIN_GRAVITY</literal></term>
<listitem><simpara>window gravity field is set
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_USER_POS</literal></term>
<listitem><simpara>indicates that the window's position was explicitly set by the user
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_HINT_USER_SIZE</literal></term>
<listitem><simpara>indicates that the window's size was explicitly set by the user

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkGeometry"/>struct GdkGeometry</title>
<programlisting>struct GdkGeometry {

  gint min_width;
  gint min_height;
  gint max_width;
  gint max_height;
  gint base_width;
  gint base_height;
  gint width_inc;
  gint height_inc;
  gdouble min_aspect;
  gdouble max_aspect;
  GdkGravity win_gravity;
};
</programlisting>
<para>
The <link linkend="GdkGeometry">GdkGeometry</link> struct gives the window manager information about 
a window's geometry constraints. Normally you would set these on 
the GTK+ level using <link linkend="gtk-window-set-geometry-hints">gtk_window_set_geometry_hints</link>(). <link linkend="GtkWindow">GtkWindow</link> 
then sets the hints on the <link linkend="GdkWindow">GdkWindow</link> it creates.
</para>

<para>
<link linkend="gdk-window-set-geometry-hints">gdk_window_set_geometry_hints</link>() expects the hints to be fully valid already and
simply passes them to the window manager; in contrast,
<link linkend="gtk-window-set-geometry-hints">gtk_window_set_geometry_hints</link>() performs some interpretation. For example,
<link linkend="GtkWindow">GtkWindow</link> will apply the hints to the geometry widget instead of the toplevel
window, if you set a geometry widget. Also, the
<parameter>min_width</parameter>/<parameter>min_height</parameter>/<parameter>max_width</parameter>/<parameter>max_height</parameter> fields may be set to -1, and
<link linkend="GtkWindow">GtkWindow</link> will substitute the size request of the window or geometry widget. If
the minimum size hint is not provided, <link linkend="GtkWindow">GtkWindow</link> will use its requisition as
the minimum size.  If the minimum size is provided and a geometry widget is set,
<link linkend="GtkWindow">GtkWindow</link> will take the minimum size as the minimum size of the geometry widget
rather than the entire window. The base size is treated similarly.
</para>

<para>
The canonical use-case for <link linkend="gtk-window-set-geometry-hints">gtk_window_set_geometry_hints</link>() is to get a terminal
widget to resize properly. Here, the terminal text area should be the geometry
widget; <link linkend="GtkWindow">GtkWindow</link> will then automatically set the base size to the size of
other widgets in the terminal window, such as the menubar and scrollbar.  Then,
the <parameter>width_inc</parameter> and <parameter>height_inc</parameter> fields should be set to the size of one character
in the terminal. Finally, the base size should be set to the size of one
character. The net effect is that the minimum size of the terminal 
will have a 1x1 character terminal area, and only terminal sizes on 
the "character grid" will be allowed.
</para>

<para>
Here's an example of how the terminal example would be implemented, assuming 
a terminal area widget called "terminal" and a toplevel window "toplevel":
<informalexample><programlisting>
	GdkGeometry hints;

	hints.base_width = terminal->char_width;
        hints.base_height = terminal->char_height;
        hints.min_width = terminal->char_width;
        hints.min_height = terminal->char_height;
        hints.width_inc = terminal->char_width;
        hints.height_inc = terminal->char_height;

	gtk_window_set_geometry_hints (GTK_WINDOW (toplevel),
				       GTK_WIDGET (terminal),
 				       &amp;hints,
				       GDK_HINT_RESIZE_INC |
                                       GDK_HINT_MIN_SIZE |
                                       GDK_HINT_BASE_SIZE);
</programlisting></informalexample>
</para>

<para>
The other useful fields are the <parameter>min_aspect</parameter> and <parameter>max_aspect</parameter> fields; these
contain a width/height ratio as a floating point number. If a geometry widget is
set, the aspect applies to the geometry widget rather than the entire window.
The most common use of these hints is probably to set <parameter>min_aspect</parameter> and
<parameter>max_aspect</parameter> to the same value, thus forcing the window to keep a constant aspect
ratio.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>min_width</structfield></term>
<listitem><simpara>minimum width of window (or -1 to use requisition, with <link linkend="GtkWindow">GtkWindow</link> only)
<parameter>min_height</parameter> minimum height of window (or -1 to use requisition, with <link linkend="GtkWindow">GtkWindow</link> only)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>min_height</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>max_width</structfield></term>
<listitem><simpara>maximum width of window (or -1 to use requisition, with <link linkend="GtkWindow">GtkWindow</link> only)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>max_height</structfield></term>
<listitem><simpara>maximum height of window (or -1 to use requisition, with <link linkend="GtkWindow">GtkWindow</link> only)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>base_width</structfield></term>
<listitem><simpara>allowed window widths are <parameter>base_width</parameter> + <parameter>width_inc</parameter> * N where N is any integer (-1 allowed with <link linkend="GtkWindow">GtkWindow</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>base_height</structfield></term>
<listitem><simpara>allowed window widths are <parameter>base_height</parameter> + <parameter>height_inc</parameter> * N where N is any integer (-1 allowed with <link linkend="GtkWindow">GtkWindow</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>width_inc</structfield></term>
<listitem><simpara>width resize increment
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>height_inc</structfield></term>
<listitem><simpara>height resize increment
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link> <structfield>min_aspect</structfield></term>
<listitem><simpara>minimum width/height ratio
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link> <structfield>max_aspect</structfield></term>
<listitem><simpara>maximum width/height ratio
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkGravity">GdkGravity</link> <structfield>win_gravity</structfield></term>
<listitem><simpara>window gravity, see <link linkend="gtk-window-set-gravity">gtk_window_set_gravity</link>()

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkGravity"/>enum GdkGravity</title>
<programlisting>typedef enum
{
  GDK_GRAVITY_NORTH_WEST = 1,
  GDK_GRAVITY_NORTH,
  GDK_GRAVITY_NORTH_EAST,
  GDK_GRAVITY_WEST,
  GDK_GRAVITY_CENTER,
  GDK_GRAVITY_EAST,
  GDK_GRAVITY_SOUTH_WEST,
  GDK_GRAVITY_SOUTH,
  GDK_GRAVITY_SOUTH_EAST,
  GDK_GRAVITY_STATIC
} GdkGravity;
</programlisting>
<para>
Defines the reference point of a window and the meaning of coordinates
passed to <link linkend="gtk-window-move">gtk_window_move</link>(). See <link linkend="gtk-window-move">gtk_window_move</link>() and the "implementation 
notes" section of the 
<ulink url="http://www.freedesktop.org/standards/wm-spec.html">extended 
window manager hints</ulink> specification for more details.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_GRAVITY_NORTH_WEST</literal></term>
<listitem><simpara>the reference point is at the top left corner.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_NORTH</literal></term>
<listitem><simpara>the reference point is in the middle of the top edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_NORTH_EAST</literal></term>
<listitem><simpara>the reference point is at the top right corner.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_WEST</literal></term>
<listitem><simpara>the reference point is at the middle of the left edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_CENTER</literal></term>
<listitem><simpara>the reference point is at the center of the window.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_EAST</literal></term>
<listitem><simpara>the reference point is at the middle of the right edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_SOUTH_WEST</literal></term>
<listitem><simpara>the reference point is at the lower left corner.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_SOUTH</literal></term>
<listitem><simpara>the reference point is at the middle of the lower edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_SOUTH_EAST</literal></term>
<listitem><simpara>the reference point is at the lower right corner.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_GRAVITY_STATIC</literal></term>
<listitem><simpara>the reference point is at the top left corner of the 
   window itself, ignoring window manager decorations.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWindowEdge"/>enum GdkWindowEdge</title>
<programlisting>typedef enum
{
  GDK_WINDOW_EDGE_NORTH_WEST,
  GDK_WINDOW_EDGE_NORTH,
  GDK_WINDOW_EDGE_NORTH_EAST,
  GDK_WINDOW_EDGE_WEST,
  GDK_WINDOW_EDGE_EAST,
  GDK_WINDOW_EDGE_SOUTH_WEST,
  GDK_WINDOW_EDGE_SOUTH,
  GDK_WINDOW_EDGE_SOUTH_EAST  
} GdkWindowEdge;
</programlisting>
<para>
Determines a window edge or corner. 
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_NORTH_WEST</literal></term>
<listitem><simpara>the top left corner.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_NORTH</literal></term>
<listitem><simpara>the top edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_NORTH_EAST</literal></term>
<listitem><simpara>the top right corner.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_WEST</literal></term>
<listitem><simpara>the left edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_EAST</literal></term>
<listitem><simpara>the right edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_SOUTH_WEST</literal></term>
<listitem><simpara>the lower left corner.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_SOUTH</literal></term>
<listitem><simpara>the lower edge.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_EDGE_SOUTH_EAST</literal></term>
<listitem><simpara>the lower right corner.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWindowTypeHint"/>enum GdkWindowTypeHint</title>
<programlisting>typedef enum
{
  GDK_WINDOW_TYPE_HINT_NORMAL,
  GDK_WINDOW_TYPE_HINT_DIALOG,
  GDK_WINDOW_TYPE_HINT_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLBAR,
  GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
  GDK_WINDOW_TYPE_HINT_UTILITY,
  GDK_WINDOW_TYPE_HINT_DOCK,
  GDK_WINDOW_TYPE_HINT_DESKTOP
} GdkWindowTypeHint;
</programlisting>
<para>
These are hints for the window manager that indicate what type of function 
the window has. The window manager can use this when determining decoration 
and behaviour of the window. The hint must be set before mapping the window.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_NORMAL</literal></term>
<listitem><simpara>Normal toplevel window.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_DIALOG</literal></term>
<listitem><simpara>Dialog window.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_MENU</literal></term>
<listitem><simpara>Window used to implement a menu.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_TOOLBAR</literal></term>
<listitem><simpara>Window used to implement toolbars.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_SPLASHSCREEN</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_UTILITY</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_DOCK</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WINDOW_TYPE_HINT_DESKTOP</literal></term>
<listitem><simpara>

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWindowAttr"/>struct GdkWindowAttr</title>
<programlisting>struct GdkWindowAttr {

  gchar *title;
  gint event_mask;
  gint x, y;
  gint width;
  gint height;
  GdkWindowClass wclass;
  GdkVisual *visual;
  GdkColormap *colormap;
  GdkWindowType window_type;
  GdkCursor *cursor;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gboolean override_redirect;
};
</programlisting>
<para>
Attributes to use for a newly-created window.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gchar">gchar</link> *<structfield>title</structfield></term>
<listitem><simpara>title of the window (for toplevel windows)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>event_mask</structfield></term>
<listitem><simpara>event mask (see <link linkend="gdk-window-set-events">gdk_window_set_events</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>x</structfield></term>
<listitem><simpara>X coordinate relative to parent window (see <link linkend="gdk-window-move">gdk_window_move</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>y</structfield></term>
<listitem><simpara>Y coordinate relative to parent window (see <link linkend="gdk-window-move">gdk_window_move</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>width</structfield></term>
<listitem><simpara>width of window
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link> <structfield>height</structfield></term>
<listitem><simpara>height of window
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkWindowClass">GdkWindowClass</link> <structfield>wclass</structfield></term>
<listitem><simpara><link linkend="GDK-INPUT-OUTPUT-CAPS">GDK_INPUT_OUTPUT</link> (normal window) or <link linkend="GDK-INPUT-ONLY-CAPS">GDK_INPUT_ONLY</link> (invisible window that receives events)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkVisual">GdkVisual</link> *<structfield>visual</structfield></term>
<listitem><simpara><link linkend="GdkVisual">GdkVisual</link> for window
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkColormap">GdkColormap</link> *<structfield>colormap</structfield></term>
<listitem><simpara><link linkend="GdkColormap">GdkColormap</link> for window
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkWindowType">GdkWindowType</link> <structfield>window_type</structfield></term>
<listitem><simpara>type of window
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkCursor">GdkCursor</link> *<structfield>cursor</structfield></term>
<listitem><simpara>cursor for the window (see <link linkend="gdk-window-set-cursor">gdk_window_set_cursor</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link> *<structfield>wmclass_name</structfield></term>
<listitem><simpara>don't use (see <link linkend="gtk-window-set-wmclass">gtk_window_set_wmclass</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link> *<structfield>wmclass_class</structfield></term>
<listitem><simpara>don't use (see <link linkend="gtk-window-set-wmclass">gtk_window_set_wmclass</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> <structfield>override_redirect</structfield></term>
<listitem><simpara><literal>TRUE</literal> to bypass the window manager

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWindowAttributesType"/>enum GdkWindowAttributesType</title>
<programlisting>typedef enum
{
  GDK_WA_TITLE	  = 1 &lt;&lt; 1,
  GDK_WA_X	  = 1 &lt;&lt; 2,
  GDK_WA_Y	  = 1 &lt;&lt; 3,
  GDK_WA_CURSOR	  = 1 &lt;&lt; 4,
  GDK_WA_COLORMAP = 1 &lt;&lt; 5,
  GDK_WA_VISUAL	  = 1 &lt;&lt; 6,
  GDK_WA_WMCLASS  = 1 &lt;&lt; 7,
  GDK_WA_NOREDIR  = 1 &lt;&lt; 8
} GdkWindowAttributesType;
</programlisting>
<para>
Used to indicate which fields in the <link linkend="GdkWindowAttr">GdkWindowAttr</link> struct should be
honored. For example, if you filled in the "cursor" and "x" fields of
<link linkend="GdkWindowAttr">GdkWindowAttr</link>, pass "<parameter>GDK_WA_X</parameter> | <parameter>GDK_WA_CURSOR</parameter>" to <link linkend="gdk-window-new">gdk_window_new</link>().  Fields
in <link linkend="GdkWindowAttr">GdkWindowAttr</link> not covered by a bit in this enum are required; for example,
the <parameter>width</parameter>/<parameter>height</parameter>, <parameter>wclass</parameter>, and <parameter>window_type</parameter> fields are required, they have no
corresponding flag in <link linkend="GdkWindowAttributesType">GdkWindowAttributesType</link>.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_WA_TITLE</literal></term>
<listitem><simpara>Honor the title field
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WA_X</literal></term>
<listitem><simpara>Honor the X coordinate field
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WA_Y</literal></term>
<listitem><simpara>Honor the Y coordinate field
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WA_CURSOR</literal></term>
<listitem><simpara>Honor the cursor field
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WA_COLORMAP</literal></term>
<listitem><simpara>Honor the colormap field
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WA_VISUAL</literal></term>
<listitem><simpara>Honor the visual field
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WA_WMCLASS</literal></term>
<listitem><simpara>Honor the wmclass_class and wmclass_name fields
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_WA_NOREDIR</literal></term>
<listitem><simpara>Honor the override_redirect field

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-new"/>gdk_window_new ()</title>
<programlisting><link linkend="GdkWindow">GdkWindow</link>*  gdk_window_new                  (<link linkend="GdkWindow">GdkWindow</link> *parent,
                                             <link linkend="GdkWindowAttr">GdkWindowAttr</link> *attributes,
                                             <link linkend="gint">gint</link> attributes_mask);</programlisting>
<para>
Creates a new <link linkend="GdkWindow">GdkWindow</link> using the attributes from
<parameter>attributes</parameter>. See <link linkend="GdkWindowAttr">GdkWindowAttr</link> and <link linkend="GdkWindowAttributesType">GdkWindowAttributesType</link> for
more details.  Note: to use this on displays other than the default
display, <parameter>parent</parameter> must be specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>, or <literal>NULL</literal> to create the window as a child of
  the default root window for the default display.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attributes</parameter>&nbsp;:</term>
<listitem><simpara> attributes of the new window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attributes_mask</parameter>&nbsp;:</term>
<listitem><simpara> mask indicating which fields in <parameter>attributes</parameter> are valid
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-destroy"/>gdk_window_destroy ()</title>
<programlisting>void        gdk_window_destroy              (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Destroys the window system resources associated with <parameter>window</parameter> and decrements <parameter>window</parameter>'s
reference count. The window system resources for all children of <parameter>window</parameter> are also
destroyed, but the children's reference counts are not decremented.
</para>
<para>
Note that a window will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-ref"/>gdk_window_ref</title>
<programlisting>#define gdk_window_ref                 gdk_drawable_ref
</programlisting>
<warning><para><literal>gdk_window_ref</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent of <link linkend="g-object-ref">g_object_ref</link>()
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-unref"/>gdk_window_unref</title>
<programlisting>#define gdk_window_unref               gdk_drawable_unref
</programlisting>
<warning><para><literal>gdk_window_unref</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent of <link linkend="g-object-unref">g_object_unref</link>()
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-window-type"/>gdk_window_get_window_type ()</title>
<programlisting><link linkend="GdkWindowType">GdkWindowType</link> gdk_window_get_window_type    (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Gets the type of the window. See <link linkend="GdkWindowType">GdkWindowType</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> type of window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-at-pointer"/>gdk_window_at_pointer ()</title>
<programlisting><link linkend="GdkWindow">GdkWindow</link>*  gdk_window_at_pointer           (<link linkend="gint">gint</link> *win_x,
                                             <link linkend="gint">gint</link> *win_y);</programlisting>
<para>
Obtains the window underneath the mouse pointer, returning the
location of that window in <parameter>win_x</parameter>, <parameter>win_y</parameter>. Returns <literal>NULL</literal> if the
window under the mouse pointer is not known to GDK (if the window
belongs to another application and a <link linkend="GdkWindow">GdkWindow</link> hasn't been created
for it with <link linkend="gdk-window-foreign-new">gdk_window_foreign_new</link>())
</para>
<para>
NOTE: For multihead-aware widgets or applications use
<link linkend="gdk-display-get-window-at-pointer">gdk_display_get_window_at_pointer</link>() instead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>win_x</parameter>&nbsp;:</term>
<listitem><simpara> return location for origin of the window under the pointer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>win_y</parameter>&nbsp;:</term>
<listitem><simpara> return location for origin of the window under the pointer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> window under the mouse pointer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-show"/>gdk_window_show ()</title>
<programlisting>void        gdk_window_show                 (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Like <link linkend="gdk-window-show-unraised">gdk_window_show_unraised</link>(), but also raises the window to the
top of the window stack (moves the window to the front of the
Z-order).
</para>
<para>
This function maps a window so it's visible onscreen. Its opposite
is <link linkend="gdk-window-hide">gdk_window_hide</link>().
</para>
<para>
When implementing a <link linkend="GtkWidget">GtkWidget</link>, you should call this function on the widget's
<link linkend="GdkWindow">GdkWindow</link> as part of the "map" method.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-show-unraised"/>gdk_window_show_unraised ()</title>
<programlisting>void        gdk_window_show_unraised        (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Shows a <link linkend="GdkWindow">GdkWindow</link> onscreen, but does not modify its stacking
order. In contrast, <link linkend="gdk-window-show">gdk_window_show</link>() will raise the window
to the top of the window stack.
</para>
<para>
On the X11 platform, in Xlib terms, this function calls
<link linkend="XMapWindow">XMapWindow</link>() (it also updates some internal GDK state, which means
that you can't really use <link linkend="XMapWindow">XMapWindow</link>() directly on a GDK window).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-hide"/>gdk_window_hide ()</title>
<programlisting>void        gdk_window_hide                 (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
For toplevel windows, withdraws them, so they will no longer be
known to the window manager; for all windows, unmaps them, so
they won't be displayed. Normally done automatically as
part of <link linkend="gtk-widget-hide">gtk_widget_hide</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-is-visible"/>gdk_window_is_visible ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gdk_window_is_visible           (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Checks whether the window has been mapped (with <link linkend="gdk-window-show">gdk_window_show</link>() or
<link linkend="gdk-window-show-unraised">gdk_window_show_unraised</link>()).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the window is mapped
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-is-viewable"/>gdk_window_is_viewable ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gdk_window_is_viewable          (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Check if the window and all ancestors of the window are
mapped. (This is not necessarily "viewable" in the X sense, since
we only check as far as we have GDK window parents, not to the root
window.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the window is viewable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-state"/>gdk_window_get_state ()</title>
<programlisting><link linkend="GdkWindowState">GdkWindowState</link> gdk_window_get_state         (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Gets the bitwise OR of the currently active window state flags,
from the <link linkend="GdkWindowState">GdkWindowState</link> enumeration.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> window state bitfield
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-withdraw"/>gdk_window_withdraw ()</title>
<programlisting>void        gdk_window_withdraw             (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Withdraws a window (unmaps it and asks the window manager to forget about it).
This function is not really useful as <link linkend="gdk-window-hide">gdk_window_hide</link>() automatically
withdraws toplevel windows before hiding them.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-iconify"/>gdk_window_iconify ()</title>
<programlisting>void        gdk_window_iconify              (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Asks to iconify (minimize) <parameter>window</parameter>. The window manager may choose
to ignore the request, but normally will honor it. Using
<link linkend="gtk-window-iconify">gtk_window_iconify</link>() is preferred, if you have a <link linkend="GtkWindow">GtkWindow</link> widget.
</para>
<para>
This function only makes sense when <parameter>window</parameter> is a toplevel window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-deiconify"/>gdk_window_deiconify ()</title>
<programlisting>void        gdk_window_deiconify            (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Attempt to deiconify (unminimize) <parameter>window</parameter>. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use <link linkend="gtk-window-deiconify">gtk_window_deiconify</link>() instead of the <link linkend="GdkWindow">GdkWindow</link> variant. Or better yet,
you probably want to use <link linkend="gtk-window-present">gtk_window_present</link>(), which raises the window, focuses it,
unminimizes it, and puts it on the current desktop.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-stick"/>gdk_window_stick ()</title>
<programlisting>void        gdk_window_stick                (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
"Pins" a window such that it's on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using <link linkend="GtkWindow">GtkWindow</link>, <link linkend="gtk-window-stick">gtk_window_stick</link>() may be more useful.)
</para>
<para>
On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the window. For window managers that don't support this operation,
there's nothing you can do to force it to happen.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-unstick"/>gdk_window_unstick ()</title>
<programlisting>void        gdk_window_unstick              (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Reverse operation for <link linkend="gdk-window-stick">gdk_window_stick</link>(); see <link linkend="gdk-window-stick">gdk_window_stick</link>(),
and <link linkend="gtk-window-unstick">gtk_window_unstick</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-maximize"/>gdk_window_maximize ()</title>
<programlisting>void        gdk_window_maximize             (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Maximizes the window. If the window was already maximized, then
this function does nothing.
</para>
<para>
On X11, asks the window manager to maximize <parameter>window</parameter>, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
"maximized"; so you can't rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.
</para>
<para>
On Windows, reliably maximizes the window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-unmaximize"/>gdk_window_unmaximize ()</title>
<programlisting>void        gdk_window_unmaximize           (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Unmaximizes the window. If the window wasn't maximized, then this
function does nothing.
</para>
<para>
On X11, asks the window manager to unmaximize <parameter>window</parameter>, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don't have a
concept of "maximized"; so you can't rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.
</para>
<para>
On Windows, reliably unmaximizes the window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-fullscreen"/>gdk_window_fullscreen ()</title>
<programlisting>void        gdk_window_fullscreen           (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Moves the window into fullscreen mode. This means the
window covers the entire screen and is above any panels
or task bars.
</para>
<para>
If the window was already fullscreen, then this function does nothing.
</para>
<para>
On X11, asks the window manager to put <parameter>window</parameter> in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of "fullscreen"; so you can't rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-unfullscreen"/>gdk_window_unfullscreen ()</title>
<programlisting>void        gdk_window_unfullscreen         (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Moves the window out of fullscreen mode. If the window was not
fullscreen, does nothing.
</para>
<para>
On X11, asks the window manager to move <parameter>window</parameter> out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of "fullscreen"; so you can't rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-move"/>gdk_window_move ()</title>
<programlisting>void        gdk_window_move                 (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);</programlisting>
<para>
Repositions a window relative to its parent window.
For toplevel windows, window managers may ignore or modify the move;
you should probably use <link linkend="gtk-window-move">gtk_window_move</link>() on a <link linkend="GtkWindow">GtkWindow</link> widget
anyway, instead of using GDK functions. For child windows,
the move will reliably succeed.
</para>
<para>
If you're also planning to resize the window, use <link linkend="gdk-window-move-resize">gdk_window_move_resize</link>()
to both move and resize simultaneously, for a nicer visual effect.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate relative to window's parent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate relative to window's parent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-resize"/>gdk_window_resize ()</title>
<programlisting>void        gdk_window_resize               (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);</programlisting>
<para>
Resizes <parameter>window</parameter>; for toplevel windows, asks the window manager to resize
the window. The window manager may not allow the resize. When using GTK+,
use <link linkend="gtk-window-resize">gtk_window_resize</link>() instead of this low-level GDK function.
</para>
<para>
Windows may not be resized below 1x1.
</para>
<para>
If you're also planning to move the window, use <link linkend="gdk-window-move-resize">gdk_window_move_resize</link>()
to both move and resize simultaneously, for a nicer visual effect.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> new width of the window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> new height of the window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-move-resize"/>gdk_window_move_resize ()</title>
<programlisting>void        gdk_window_move_resize          (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);</programlisting>
<para>
Equivalent to calling <link linkend="gdk-window-move">gdk_window_move</link>() and <link linkend="gdk-window-resize">gdk_window_resize</link>(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the window first
move, then resize, if you don't use <link linkend="gdk-window-move-resize">gdk_window_move_resize</link>().)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> new X position relative to window's parent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> new Y position relative to window's parent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> new width
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> new height
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-scroll"/>gdk_window_scroll ()</title>
<programlisting>void        gdk_window_scroll               (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> dx,
                                             <link linkend="gint">gint</link> dy);</programlisting>
<para>
Scroll the contents of <parameter>window</parameter>, both pixels and children, by the given
amount. <parameter>window</parameter> itself does not move.  Portions of the window that the scroll
operation brings in from offscreen areas are invalidated. The invalidated
region may be bigger than what would strictly be necessary.  (For X11, a
minimum area will be invalidated if the window has no subwindows, or if the
edges of the window's parent do not extend beyond the edges of the window. In
other cases, a multi-step process is used to scroll the window which may
produce temporary visual artifacts and unnecessary invalidations.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dx</parameter>&nbsp;:</term>
<listitem><simpara> Amount to scroll in the X direction
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dy</parameter>&nbsp;:</term>
<listitem><simpara> Amount to scroll in the Y direction
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-reparent"/>gdk_window_reparent ()</title>
<programlisting>void        gdk_window_reparent             (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *new_parent,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);</programlisting>
<para>
Reparents <parameter>window</parameter> into the given <parameter>new_parent</parameter>. The window being
reparented will be unmapped as a side effect.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_parent</parameter>&nbsp;:</term>
<listitem><simpara> new parent to move <parameter>window</parameter> into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X location inside the new parent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y location inside the new parent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-clear"/>gdk_window_clear ()</title>
<programlisting>void        gdk_window_clear                (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Clears an entire <parameter>window</parameter> to the background color or background pixmap.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-clear-area"/>gdk_window_clear_area ()</title>
<programlisting>void        gdk_window_clear_area           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);</programlisting>
<para>
Clears an area of <parameter>window</parameter> to the background color or background pixmap.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> x coordinate of rectangle to clear
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> y coordinate of rectangle to clear
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> width of rectangle to clear
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> height of rectangle to clear
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-clear-area-e"/>gdk_window_clear_area_e ()</title>
<programlisting>void        gdk_window_clear_area_e         (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);</programlisting>
<para>
Like <link linkend="gdk-window-clear-area">gdk_window_clear_area</link>(), but also generates an expose event for
the cleared area.
</para>
<para>
This function has a stupid name because it dates back to the mists
time, pre-GDK-1.0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> x coordinate of rectangle to clear
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> y coordinate of rectangle to clear
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> width of rectangle to clear
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> height of rectangle to clear
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-copy-area"/>gdk_window_copy_area()</title>
<programlisting>#define     gdk_window_copy_area(drawable,gc,x,y,source_drawable,source_x,source_y,width,height)</programlisting>
<warning><para><literal>gdk_window_copy_area</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent to <link linkend="gdk-draw-drawable">gdk_draw_drawable</link>(), see that function for docs
</para><variablelist role="params">
<varlistentry><term><parameter>drawable</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>gc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>source_drawable</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>source_x</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>source_y</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-raise"/>gdk_window_raise ()</title>
<programlisting>void        gdk_window_raise                (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Raises <parameter>window</parameter> to the top of the Z-order (stacking order), so that
other windows with the same parent window appear below <parameter>window</parameter>.
This is true whether or not the windows are visible.
</para>
<para>
If <parameter>window</parameter> is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, <link linkend="gdk-window-raise">gdk_window_raise</link>() only
requests the restack, does not guarantee it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-lower"/>gdk_window_lower ()</title>
<programlisting>void        gdk_window_lower                (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Lowers <parameter>window</parameter> to the bottom of the Z-order (stacking order), so that
other windows with the same parent window appear above <parameter>window</parameter>.
This is true whether or not the other windows are visible.
</para>
<para>
If <parameter>window</parameter> is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, <link linkend="gdk-window-lower">gdk_window_lower</link>() only
requests the restack, does not guarantee it.
</para>
<para>
Note that <link linkend="gdk-window-show">gdk_window_show</link>() raises the window again, so don't call this
function before <link linkend="gdk-window-show">gdk_window_show</link>(). (Try <link linkend="gdk-window-show-unraised">gdk_window_show_unraised</link>().)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-focus"/>gdk_window_focus ()</title>
<programlisting>void        gdk_window_focus                (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="guint32">guint32</link> timestamp);</programlisting>
<para>
Sets keyboard focus to <parameter>window</parameter>. If <parameter>window</parameter> is not onscreen this
will not work. In most cases, <link linkend="gtk-window-present">gtk_window_present</link>() should be used on
a <link linkend="GtkWindow">GtkWindow</link>, rather than calling this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timestamp</parameter>&nbsp;:</term>
<listitem><simpara> timestamp of the event triggering the window focus
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-register-dnd"/>gdk_window_register_dnd ()</title>
<programlisting>void        gdk_window_register_dnd         (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Registers a window as a potential drop destination.
</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GdkWindow">GdkWindow</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-begin-resize-drag"/>gdk_window_begin_resize_drag ()</title>
<programlisting>void        gdk_window_begin_resize_drag    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindowEdge">GdkWindowEdge</link> edge,
                                             <link linkend="gint">gint</link> button,
                                             <link linkend="gint">gint</link> root_x,
                                             <link linkend="gint">gint</link> root_y,
                                             <link linkend="guint32">guint32</link> timestamp);</programlisting>
<para>
Begins a window resize operation (for a toplevel window).
You might use this function to implement a "window resize grip," for
example; in fact <link linkend="GtkStatusbar">GtkStatusbar</link> uses it. The function works best
with window managers that support the Extended Window Manager Hints spec
(see http://www.freedesktop.org), but has a fallback implementation
for other window managers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>edge</parameter>&nbsp;:</term>
<listitem><simpara> the edge or corner from which the drag is started
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>button</parameter>&nbsp;:</term>
<listitem><simpara> the button being used to drag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>root_x</parameter>&nbsp;:</term>
<listitem><simpara> root window X coordinate of mouse click that began the drag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>root_y</parameter>&nbsp;:</term>
<listitem><simpara> root window Y coordinate of mouse click that began the drag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timestamp</parameter>&nbsp;:</term>
<listitem><simpara> timestamp of mouse click that began the drag (use <link linkend="gdk-event-get-time">gdk_event_get_time</link>())
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-begin-move-drag"/>gdk_window_begin_move_drag ()</title>
<programlisting>void        gdk_window_begin_move_drag      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> button,
                                             <link linkend="gint">gint</link> root_x,
                                             <link linkend="gint">gint</link> root_y,
                                             <link linkend="guint32">guint32</link> timestamp);</programlisting>
<para>
Begins a window move operation (for a toplevel window).  You might
use this function to implement a "window move grip," for
example. The function works best with window managers that support
the Extended Window Manager Hints spec (see
http://www.freedesktop.org), but has a fallback implementation for
other window managers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>button</parameter>&nbsp;:</term>
<listitem><simpara> the button being used to drag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>root_x</parameter>&nbsp;:</term>
<listitem><simpara> root window X coordinate of mouse click that began the drag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>root_y</parameter>&nbsp;:</term>
<listitem><simpara> root window Y coordinate of mouse click that began the drag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timestamp</parameter>&nbsp;:</term>
<listitem><simpara> timestamp of mouse click that began the drag
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-constrain-size"/>gdk_window_constrain_size ()</title>
<programlisting>void        gdk_window_constrain_size       (<link linkend="GdkGeometry">GdkGeometry</link> *geometry,
                                             <link linkend="guint">guint</link> flags,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height,
                                             <link linkend="gint">gint</link> *new_width,
                                             <link linkend="gint">gint</link> *new_height);</programlisting>
<para>
Constrains a desired width and height according to a 
set of geometry hints (such as minimum and maximum size).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>geometry</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkGeometry">GdkGeometry</link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> a mask indicating what portions of <parameter>geometry</parameter> are set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> desired width of window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> desired height of the window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_width</parameter>&nbsp;:</term>
<listitem><simpara> location to store resulting width
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_height</parameter>&nbsp;:</term>
<listitem><simpara> location to store resulting height
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-begin-paint-rect"/>gdk_window_begin_paint_rect ()</title>
<programlisting>void        gdk_window_begin_paint_rect     (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRectangle">GdkRectangle</link> *rectangle);</programlisting>
<para>
A convenience wrapper around <link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() which
creates a rectangular region for you. See
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rectangle</parameter>&nbsp;:</term>
<listitem><simpara> rectangle you intend to draw to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-begin-paint-region"/>gdk_window_begin_paint_region ()</title>
<programlisting>void        gdk_window_begin_paint_region   (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *region);</programlisting>
<para>
Indicates that you are beginning the process of redrawing <parameter>region</parameter>.
A backing store (offscreen buffer) large enough to contain <parameter>region</parameter>
will be created. The backing store will be initialized with the
background color or background pixmap for <parameter>window</parameter>. Then, all
drawing operations performed on <parameter>window</parameter> will be diverted to the
backing store.  When you call <link linkend="gdk-window-end-paint">gdk_window_end_paint</link>(), the backing
store will be copied to <parameter>window</parameter>, making it visible onscreen. Only
the part of <parameter>window</parameter> contained in <parameter>region</parameter> will be modified; that is,
drawing operations are clipped to <parameter>region</parameter>.
</para>
<para>
The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
<link linkend="gdk-window-end-paint">gdk_window_end_paint</link>(). If you draw to <parameter>window</parameter> directly without
calling <link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>(), the user may see flicker
as individual drawing operations are performed in sequence.  The
clipping and background-initializing features of
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() are conveniences for the
programmer, so you can avoid doing that work yourself.
</para>
<para>
When using GTK+, the widget system automatically places calls to
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() and <link linkend="gdk-window-end-paint">gdk_window_end_paint</link>() around
emissions of the expose_event signal. That is, if you're writing an
expose event handler, you can assume that the exposed area in
<link linkend="GdkEventExpose">GdkEventExpose</link> has already been cleared to the window background,
is already set as the clip region, and already has a backing store.
Therefore in most cases, application code need not call
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>(). (You can disable the automatic
calls around expose events on a widget-by-widget basis by calling
<link linkend="gtk-widget-set-double-buffered">gtk_widget_set_double_buffered</link>().)
</para>
<para>
If you call this function multiple times before calling the
matching <link linkend="gdk-window-end-paint">gdk_window_end_paint</link>(), the backing stores are pushed onto
a stack. <link linkend="gdk-window-end-paint">gdk_window_end_paint</link>() copies the topmost backing store
onscreen, subtracts the topmost region from all other regions in
the stack, and pops the stack. All drawing operations affect only
the topmost backing store in the stack. One matching call to
<link linkend="gdk-window-end-paint">gdk_window_end_paint</link>() is required for each call to
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>region</parameter>&nbsp;:</term>
<listitem><simpara> region you intend to draw to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-end-paint"/>gdk_window_end_paint ()</title>
<programlisting>void        gdk_window_end_paint            (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Indicates that the backing store created by the most recent call to
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() should be copied onscreen and
deleted, leaving the next-most-recent backing store or no backing
store at all as the active paint region. See
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() for full details. It is an error to
call this function without a matching
<link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() first.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-invalidate-rect"/>gdk_window_invalidate_rect ()</title>
<programlisting>void        gdk_window_invalidate_rect      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRectangle">GdkRectangle</link> *rect,
                                             <link linkend="gboolean">gboolean</link> invalidate_children);</programlisting>
<para>
A convenience wrapper around <link linkend="gdk-window-invalidate-region">gdk_window_invalidate_region</link>() which
invalidates a rectangular region. See
<link linkend="gdk-window-invalidate-region">gdk_window_invalidate_region</link>() for details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rect</parameter>&nbsp;:</term>
<listitem><simpara> rectangle to invalidate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>invalidate_children</parameter>&nbsp;:</term>
<listitem><simpara> whether to also invalidate child windows
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-invalidate-region"/>gdk_window_invalidate_region ()</title>
<programlisting>void        gdk_window_invalidate_region    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *region,
                                             <link linkend="gboolean">gboolean</link> invalidate_children);</programlisting>
<para>
Adds <parameter>region</parameter> to the update area for <parameter>window</parameter>. The update area is the
region that needs to be redrawn, or "dirty region." The call
<link linkend="gdk-window-process-updates">gdk_window_process_updates</link>() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of <parameter>window</parameter> in
response to those expose events.
</para>
<para>
GDK will call <link linkend="gdk-window-process-all-updates">gdk_window_process_all_updates</link>() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.
</para>
<para>
The <parameter>invalidate_children</parameter> parameter controls whether the region of
each child window that intersects <parameter>region</parameter> will also be invalidated.
If <literal>FALSE</literal>, then the update area for child windows will remain
unaffected. See gdk_window_invalidate_maybe_recurse if you need
fine grained control over which children are invalidated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>region</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkRegion">GdkRegion</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>invalidate_children</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> to also invalidate child windows 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-invalidate-maybe-recurse"/>gdk_window_invalidate_maybe_recurse ()</title>
<programlisting>void        gdk_window_invalidate_maybe_recurse
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *region,
                                             <link linkend="gboolean">gboolean</link> (*child_func) (GdkWindow *, gpointer),
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Adds <parameter>region</parameter> to the update area for <parameter>window</parameter>. The update area is the
region that needs to be redrawn, or "dirty region." The call
<link linkend="gdk-window-process-updates">gdk_window_process_updates</link>() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of <parameter>window</parameter> in
response to those expose events.
</para>
<para>
GDK will call <link linkend="gdk-window-process-all-updates">gdk_window_process_all_updates</link>() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.
</para>
<para>
The <parameter>child_func</parameter> parameter controls whether the region of
each child window that intersects <parameter>region</parameter> will also be invalidated.
Only children for which <parameter>child_func</parameter> returns TRUE will have the area
invalidated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>region</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkRegion">GdkRegion</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child_func</parameter>&nbsp;:</term>
<listitem><simpara> function to use to decide if to recurse to a child,
             <literal>NULL</literal> means never recurse.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data passed to <parameter>child_func</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-update-area"/>gdk_window_get_update_area ()</title>
<programlisting><link linkend="GdkRegion">GdkRegion</link>*  gdk_window_get_update_area      (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Transfers ownership of the update area from <parameter>window</parameter> to the caller
of the function. That is, after calling this function, <parameter>window</parameter> will
no longer have an invalid/dirty region; the update area is removed
from <parameter>window</parameter> and handed to you. If a window has no update area,
<link linkend="gdk-window-get-update-area">gdk_window_get_update_area</link>() returns <literal>NULL</literal>. You are responsible for
calling <link linkend="gdk-region-destroy">gdk_region_destroy</link>() on the returned region if it's non-<literal>NULL</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the update area for <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-freeze-updates"/>gdk_window_freeze_updates ()</title>
<programlisting>void        gdk_window_freeze_updates       (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Temporarily freezes a window such that it won't receive expose
events.  The window will begin receiving expose events again when
<link linkend="gdk-window-thaw-updates">gdk_window_thaw_updates</link>() is called. If <link linkend="gdk-window-freeze-updates">gdk_window_freeze_updates</link>()
has been called more than once, <link linkend="gdk-window-thaw-updates">gdk_window_thaw_updates</link>() must be called
an equal number of times to begin processing exposes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-thaw-updates"/>gdk_window_thaw_updates ()</title>
<programlisting>void        gdk_window_thaw_updates         (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Thaws a window frozen with <link linkend="gdk-window-freeze-updates">gdk_window_freeze_updates</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-process-all-updates"/>gdk_window_process_all_updates ()</title>
<programlisting>void        gdk_window_process_all_updates  (void);</programlisting>
<para>
Calls <link linkend="gdk-window-process-updates">gdk_window_process_updates</link>() for all windows (see <link linkend="GdkWindow">GdkWindow</link>)
in the application.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-process-updates"/>gdk_window_process_updates ()</title>
<programlisting>void        gdk_window_process_updates      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> update_children);</programlisting>
<para>
Sends one or more expose events to <parameter>window</parameter>. The areas in each 
expose event will cover the entire update area for the window (see
<link linkend="gdk-window-invalidate-region">gdk_window_invalidate_region</link>() for details). Normally GDK calls
<link linkend="gdk-window-process-all-updates">gdk_window_process_all_updates</link>() on your behalf, so there's no
need to call this function unless you want to force expose events
to be delivered immediately and synchronously (vs. the usual
case, where GDK delivers them in an idle handler). Occasionally
this is useful to produce nicer scrolling behavior, for example.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>update_children</parameter>&nbsp;:</term>
<listitem><simpara> whether to also process updates for child windows
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-debug-updates"/>gdk_window_set_debug_updates ()</title>
<programlisting>void        gdk_window_set_debug_updates    (<link linkend="gboolean">gboolean</link> setting);</programlisting>
<para>
With update debugging enabled, calls to
<link linkend="gdk-window-invalidate-region">gdk_window_invalidate_region</link>() clear the invalidated region of the
screen to a noticeable color, and GDK pauses for a short time
before sending exposes to windows during
<link linkend="gdk-window-process-updates">gdk_window_process_updates</link>().  The net effect is that you can see
the invalid region for each window and watch redraws as they
occur. This allows you to diagnose inefficiencies in your application.
</para>
<para>
In essence, because the GDK rendering model prevents all flicker,
if you are redrawing the same region 400 times you may never
notice, aside from noticing a speed problem. Enabling update
debugging causes GTK to flicker slowly and noticeably, so you can
see exactly what's being redrawn when, in what order.
</para>
<para>
The --gtk-debug=updates command line option passed to GTK+ programs
enables this debug option at application startup time. That's
usually more useful than calling <link linkend="gdk-window-set-debug-updates">gdk_window_set_debug_updates</link>()
yourself, though you might want to use this function to enable
updates sometime after application startup time.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>setting</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> to turn on update debugging
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-internal-paint-info"/>gdk_window_get_internal_paint_info ()</title>
<programlisting>void        gdk_window_get_internal_paint_info
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkDrawable">GdkDrawable</link> **real_drawable,
                                             <link linkend="gint">gint</link> *x_offset,
                                             <link linkend="gint">gint</link> *y_offset);</programlisting>
<para>
If you bypass the GDK layer and use windowing system primitives to
draw directly onto a <link linkend="GdkWindow">GdkWindow</link>, then you need to deal with two
details: there may be an offset between GDK coordinates and windowing
system coordinates, and GDK may have redirected drawing to a offscreen
pixmap as the result of a <link linkend="gdk-window-begin-paint-region">gdk_window_begin_paint_region</link>() calls.
This function allows retrieving the information you need to compensate
for these effects.
</para>
<para>
This function exposes details of the GDK implementation, and is thus
likely to change in future releases of GDK.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>real_drawable</parameter>&nbsp;:</term>
<listitem><simpara> location to store the drawable to which drawing should be 
           done.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_offset</parameter>&nbsp;:</term>
<listitem><simpara> location to store the X offset between coordinates in <parameter>window</parameter>,
           and the underlying window system primitive coordinates for 
           *<parameter>real_drawable</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_offset</parameter>&nbsp;:</term>
<listitem><simpara> location to store the Y offset between coordinates in <parameter>window</parameter>,
           and the underlying window system primitive coordinates for
           *<parameter>real_drawable</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-user-data"/>gdk_window_set_user_data ()</title>
<programlisting>void        gdk_window_set_user_data        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
For most purposes this function is deprecated in favor of
<link linkend="g-object-set-data">g_object_set_data</link>(). However, for historical reasons GTK+ stores
the <link linkend="GtkWidget">GtkWidget</link> that owns a <link linkend="GdkWindow">GdkWindow</link> as user data on the
<link linkend="GdkWindow">GdkWindow</link>. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a <link linkend="GdkWindow">GdkWindow</link>,
and the user data for the window is non-<literal>NULL</literal>, GTK+ will assume the
user data is a <link linkend="GtkWidget">GtkWidget</link>, and forward the event to that widget.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-override-redirect"/>gdk_window_set_override_redirect ()</title>
<programlisting>void        gdk_window_set_override_redirect
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> override_redirect);</programlisting>
<para>
An override redirect window is not under the control of the window manager.
This means it won't have a titlebar, won't be minimizable, etc. - it will
be entirely under the control of the application. The window manager
can't see the override redirect window at all.
</para>
<para>
Override redirect should only be used for short-lived temporary
windows, such as popup menus. <link linkend="GtkMenu">GtkMenu</link> uses an override redirect
window in its implementation, for example.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>override_redirect</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> if window should be override redirect
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-add-filter"/>gdk_window_add_filter ()</title>
<programlisting>void        gdk_window_add_filter           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkFilterFunc">GdkFilterFunc</link> function,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Adds an event filter to <parameter>window</parameter>, allowing you to intercept events
before they reach GDK. This is a low-level operation and makes it
easy to break GDK and/or GTK+, so you have to know what you're
doing. Pass <literal>NULL</literal> for <parameter>window</parameter> to get all events for all windows,
instead of events for a specific window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara> filter callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to filter callback
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-remove-filter"/>gdk_window_remove_filter ()</title>
<programlisting>void        gdk_window_remove_filter        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkFilterFunc">GdkFilterFunc</link> function,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Remove a filter previously added with <link linkend="gdk-window-add-filter">gdk_window_add_filter</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara> previously-added filter function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> user data for previously-added filter function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkFilterFunc"/>GdkFilterFunc ()</title>
<programlisting><link linkend="GdkFilterReturn">GdkFilterReturn</link> (*GdkFilterFunc)            (<link linkend="GdkXEvent">GdkXEvent</link> *xevent,
                                             <link linkend="GdkEvent">GdkEvent</link> *event,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Specifies the type of function used to filter native events before they are
converted to GDK events. A filter may translate the native event to a GDK
event or handle it without translation.
</para><variablelist role="params">
<varlistentry><term><parameter>xevent</parameter>&nbsp;:</term>
<listitem><simpara>the native event to filter.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara>the GDK event to which the X event will be translated.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the filter was installed.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a <link linkend="GdkFilterReturn">GdkFilterReturn</link> value.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkFilterReturn"/>enum GdkFilterReturn</title>
<programlisting>typedef enum {
  GDK_FILTER_CONTINUE,	  /* Event not handled, continue processesing */
  GDK_FILTER_TRANSLATE,	  /* Translated event stored */
  GDK_FILTER_REMOVE	  /* Terminate processing, removing event */
} GdkFilterReturn;
</programlisting>
<para>
Specifies the result of applying a <link linkend="GdkFilterFunc">GdkFilterFunc</link> to a native event.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_FILTER_CONTINUE</literal></term>
<listitem><simpara>event not handled, continue processing.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_FILTER_TRANSLATE</literal></term>
<listitem><simpara>translated event stored.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_FILTER_REMOVE</literal></term>
<listitem><simpara>event handled, terminate processing.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkXEvent"/>GdkXEvent</title>
<programlisting>typedef void GdkXEvent;	  /* Can be cast to window system specific
</programlisting>
<para>
Used to represent native events (<type>XEvent</type>s for the X11 
backend, <type>MSG</type>s for Win32).
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-shape-combine-mask"/>gdk_window_shape_combine_mask ()</title>
<programlisting>void        gdk_window_shape_combine_mask   (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkBitmap">GdkBitmap</link> *mask,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);</programlisting>
<para>
Applies a shape mask to <parameter>window</parameter>. Pixels in <parameter>window</parameter> corresponding to
set bits in the <parameter>mask</parameter> will be visible; pixels in <parameter>window</parameter>
corresponding to unset bits in the <parameter>mask</parameter> will be transparent. This
gives a non-rectangular window.
</para>
<para>
If <parameter>mask</parameter> is <literal>NULL</literal>, the shape mask will be unset, and the <parameter>x</parameter>/<parameter>y</parameter>
parameters are not used.
</para>
<para>
On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.
</para>
<para>
This function works on both toplevel and child windows.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mask</parameter>&nbsp;:</term>
<listitem><simpara> shape mask
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X position of shape mask with respect to <parameter>window</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y position of shape mask with respect to <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-shape-combine-region"/>gdk_window_shape_combine_region ()</title>
<programlisting>void        gdk_window_shape_combine_region (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRegion">GdkRegion</link> *shape_region,
                                             <link linkend="gint">gint</link> offset_x,
                                             <link linkend="gint">gint</link> offset_y);</programlisting>
<para>
Makes pixels in <parameter>window</parameter> outside <parameter>shape_region</parameter> be transparent,
so that the window may be nonrectangular. See also
<link linkend="gdk-window-shape-combine-mask">gdk_window_shape_combine_mask</link>() to use a bitmap as the mask.
</para>
<para>
If <parameter>shape_region</parameter> is <literal>NULL</literal>, the shape will be unset, so the whole
window will be opaque again. <parameter>offset_x</parameter> and <parameter>offset_y</parameter> are ignored
if <parameter>shape_region</parameter> is <literal>NULL</literal>.
</para>
<para>
On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.
</para>
<para>
This function works on both toplevel and child windows.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shape_region</parameter>&nbsp;:</term>
<listitem><simpara> region of window to be non-transparent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset_x</parameter>&nbsp;:</term>
<listitem><simpara> X position of <parameter>shape_region</parameter> in <parameter>window</parameter> coordinates
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset_y</parameter>&nbsp;:</term>
<listitem><simpara> Y position of <parameter>shape_region</parameter> in <parameter>window</parameter> coordinates
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-child-shapes"/>gdk_window_set_child_shapes ()</title>
<programlisting>void        gdk_window_set_child_shapes     (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Sets the shape mask of <parameter>window</parameter> to the union of shape masks
for all children of <parameter>window</parameter>, ignoring the shape mask of <parameter>window</parameter>
itself. Contrast with <link linkend="gdk-window-merge-child-shapes">gdk_window_merge_child_shapes</link>() which includes
the shape mask of <parameter>window</parameter> in the masks to be merged.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-merge-child-shapes"/>gdk_window_merge_child_shapes ()</title>
<programlisting>void        gdk_window_merge_child_shapes   (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Merges the shape masks for any child windows into the
shape mask for <parameter>window</parameter>. i.e. the union of all masks
for <parameter>window</parameter> and its children will become the new mask
for <parameter>window</parameter>. See <link linkend="gdk-window-shape-combine-mask">gdk_window_shape_combine_mask</link>().
</para>
<para>
This function is distinct from <link linkend="gdk-window-set-child-shapes">gdk_window_set_child_shapes</link>()
because it includes <parameter>window</parameter>'s shape mask in the set of shapes to
be merged.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-static-gravities"/>gdk_window_set_static_gravities ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gdk_window_set_static_gravities (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> use_static);</programlisting>
<para>
Set the bit gravity of the given window to static, and flag it so
all children get static subwindow gravity. This is used if you are
implementing scary features that involve deep knowledge of the
windowing system. Don't worry about it unless you have to.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use_static</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> to turn on static gravity
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the server supports static gravity
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-hints"/>gdk_window_set_hints ()</title>
<programlisting>void        gdk_window_set_hints            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> min_width,
                                             <link linkend="gint">gint</link> min_height,
                                             <link linkend="gint">gint</link> max_width,
                                             <link linkend="gint">gint</link> max_height,
                                             <link linkend="gint">gint</link> flags);</programlisting>
<warning><para><literal>gdk_window_set_hints</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is broken and useless and you should ignore it.
If using GTK+, use functions such as <link linkend="gtk-window-resize">gtk_window_resize</link>(), <link linkend="gtk-window-set-size-request">gtk_window_set_size_request</link>(),
<link linkend="gtk-window-move">gtk_window_move</link>(), <link linkend="gtk-window-parse-geometry">gtk_window_parse_geometry</link>(), and <link linkend="gtk-window-set-geometry-hints">gtk_window_set_geometry_hints</link>(),
depending on what you're trying to do.
</para>
<para>
If using GDK directly, use <link linkend="gdk-window-set-geometry-hints">gdk_window_set_geometry_hints</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> ignored field, does not matter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> ignored field, does not matter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_width</parameter>&nbsp;:</term>
<listitem><simpara> minimum width hint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_height</parameter>&nbsp;:</term>
<listitem><simpara> minimum height hint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_width</parameter>&nbsp;:</term>
<listitem><simpara> max width hint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_height</parameter>&nbsp;:</term>
<listitem><simpara> max height hint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> logical OR of GDK_HINT_POS, GDK_HINT_MIN_SIZE, and/or GDK_HINT_MAX_SIZE
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-title"/>gdk_window_set_title ()</title>
<programlisting>void        gdk_window_set_title            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             const <link linkend="gchar">gchar</link> *title);</programlisting>
<para>
Sets the title of a toplevel window, to be displayed in the titlebar.
If you haven't explicitly set the icon name for the window
(using <link linkend="gdk-window-set-icon-name">gdk_window_set_icon_name</link>()), the icon name will be set to
<parameter>title</parameter> as well. <parameter>title</parameter> must be in UTF-8 encoding (as with all
user-readable strings in GDK/GTK+). <parameter>title</parameter> may not be <literal>NULL</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>title</parameter>&nbsp;:</term>
<listitem><simpara> title of <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-background"/>gdk_window_set_background ()</title>
<programlisting>void        gdk_window_set_background       (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkColor">GdkColor</link> *color);</programlisting>
<para>
Sets the background color of <parameter>window</parameter>. (However, when using GTK+,
set the background of a widget with <link linkend="gtk-widget-modify-bg">gtk_widget_modify_bg</link>() - if
you're an application - or <link linkend="gtk-style-set-background">gtk_style_set_background</link>() - if you're
implementing a custom widget.)
</para>
<para>
The <parameter>color</parameter> must be allocated; <link linkend="gdk-rgb-find-color">gdk_rgb_find_color</link>() is the best way
to allocate a color.
</para>
<para>
See also <link linkend="gdk-window-set-back-pixmap">gdk_window_set_back_pixmap</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an allocated <link linkend="GdkColor">GdkColor</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-back-pixmap"/>gdk_window_set_back_pixmap ()</title>
<programlisting>void        gdk_window_set_back_pixmap      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkPixmap">GdkPixmap</link> *pixmap,
                                             <link linkend="gboolean">gboolean</link> parent_relative);</programlisting>
<para>
Sets the background pixmap of <parameter>window</parameter>. May also be used to set a background of
"None" on <parameter>window</parameter>, by setting a background pixmap of <literal>NULL</literal>.
A background pixmap will be tiled, positioning the first tile at the origin of
<parameter>window</parameter>, or if <parameter>parent_relative</parameter> is <literal>TRUE</literal>, the tiling will be done based on the
origin of the parent window (useful to align tiles in a parent with tiles
in a child).
</para>
<para>
A background pixmap of <literal>NULL</literal> means that the window will have no
background.  A window with no background will never have its
background filled by the windowing system, instead the window will
contain whatever pixels were already in the corresponding area of
the display.
</para>
<para>
The windowing system will normally fill a window with its background
when the window is obscured then exposed, and when you call
<link linkend="gdk-window-clear">gdk_window_clear</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pixmap</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixmap">GdkPixmap</link>, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_relative</parameter>&nbsp;:</term>
<listitem><simpara> whether the tiling origin is at the origin of <parameter>window</parameter>'s parent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GDK-PARENT-RELATIVE-CAPS"/>GDK_PARENT_RELATIVE</title>
<programlisting>#define GDK_PARENT_RELATIVE  1L
</programlisting>
<para>
A special value for <literal>GdkPixmap*</literal> variables, indicating
that the background pixmap for a window should be inherited from the parent
window.
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-cursor"/>gdk_window_set_cursor ()</title>
<programlisting>void        gdk_window_set_cursor           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkCursor">GdkCursor</link> *cursor);</programlisting>
<para>
Sets the mouse pointer for a <link linkend="GdkWindow">GdkWindow</link>. Use <link linkend="gdk-cursor-new">gdk_cursor_new</link>() or
<link linkend="gdk-cursor-new-from-pixmap">gdk_cursor_new_from_pixmap</link>() to create the cursor.
To make the cursor invisible, use <link linkend="gdk-cursor-new-from-pixmap">gdk_cursor_new_from_pixmap</link>() to create
a cursor with no pixels in it. Passing <literal>NULL</literal> for the <parameter>cursor</parameter> argument
to <link linkend="gdk-window-set-cursor">gdk_window_set_cursor</link>() means that <parameter>window</parameter> will use the cursor of
its parent window. Most windows should use this default.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cursor</parameter>&nbsp;:</term>
<listitem><simpara> a cursor
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-colormap"/>gdk_window_set_colormap</title>
<programlisting>#define gdk_window_set_colormap        gdk_drawable_set_colormap
</programlisting>
<warning><para><literal>gdk_window_set_colormap</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent to <link linkend="gdk-drawable-set-colormap">gdk_drawable_set_colormap</link>()
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-user-data"/>gdk_window_get_user_data ()</title>
<programlisting>void        gdk_window_get_user_data        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gpointer">gpointer</link> *data);</programlisting>
<para>
Retrieves the user data for <parameter>window</parameter>, which is normally the widget
that <parameter>window</parameter> belongs to. See <link linkend="gdk-window-set-user-data">gdk_window_set_user_data</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> return location for user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-geometry"/>gdk_window_get_geometry ()</title>
<programlisting>void        gdk_window_get_geometry         (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="gint">gint</link> *depth);</programlisting>
<para>
Any of the return location arguments to this function may be <literal>NULL</literal>,
if you aren't interested in getting the value of that field.
</para>
<para>
The X and Y coordinates returned are relative to the parent window
of <parameter>window</parameter>, which for toplevels usually means relative to the
window decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).
</para>
<para>
On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of <parameter>window</parameter>; this may be out-of-sync
with the position of <parameter>window</parameter> delivered in the most-recently-processed
<link linkend="GdkEventConfigure">GdkEventConfigure</link>. <link linkend="gdk-window-get-position">gdk_window_get_position</link>() in contrast gets the
position from the most recent configure event.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for X coordinate of window (relative to its parent)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for Y coordinate of window (relative to its parent)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> return location for width of window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> return location for height of window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>depth</parameter>&nbsp;:</term>
<listitem><simpara> return location for bit depth of window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-geometry-hints"/>gdk_window_set_geometry_hints ()</title>
<programlisting>void        gdk_window_set_geometry_hints   (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkGeometry">GdkGeometry</link> *geometry,
                                             <link linkend="GdkWindowHints">GdkWindowHints</link> geom_mask);</programlisting>
<para>
Sets the geometry hints for <parameter>window</parameter>. Hints flagged in <parameter>geom_mask</parameter>
are set, hints not flagged in <parameter>geom_mask</parameter> are unset.
To unset all hints, use a <parameter>geom_mask</parameter> of 0 and a <parameter>geometry</parameter> of <literal>NULL</literal>.
</para>
<para>
This function provides hints to the windowing system about
acceptable sizes for a toplevel window. The purpose of 
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the window to the provided values and
constrain programatic resizing via <link linkend="gdk-window-resize">gdk_window_resize</link>() or
<link linkend="gdk-window-move-resize">gdk_window_move_resize</link>().
</para>
<para>
Note that on X11, this effect has no effect on windows
of type GDK_WINDOW_TEMP or windows where override_redirect
has been turned on via <link linkend="gdk-window-set-override-redirect">gdk_window_set_override_redirect</link>()
since these windows are not resizable by the user.
</para>
<para>
Since you can't count on the windowing system doing the
constraints for programmatic resizes, you should generally
call <link linkend="gdk-window-constrain-size">gdk_window_constrain_size</link>() yourself to determine
appropriate sizes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>geometry</parameter>&nbsp;:</term>
<listitem><simpara> geometry hints
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>geom_mask</parameter>&nbsp;:</term>
<listitem><simpara> bitmask indicating fields of <parameter>geometry</parameter> to pay attention to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-icon-list"/>gdk_window_set_icon_list ()</title>
<programlisting>void        gdk_window_set_icon_list        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GList">GList</link> *pixbufs);</programlisting>
<para>
Sets a list of icons for the window. One of these will be used
to represent the window when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GdkWindow">GdkWindow</link> toplevel window to set the icon of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pixbufs</parameter>&nbsp;:</term>
<listitem><simpara> A list of pixbufs, of different sizes.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-modal-hint"/>gdk_window_set_modal_hint ()</title>
<programlisting>void        gdk_window_set_modal_hint       (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> modal);</programlisting>
<para>
The application can use this hint to tell the window manager
that a certain window has modal behaviour. The window manager
can use this information to handle modal windows in a special
way.
</para>
<para>
You should only use this on windows for which you have
previously called #<link linkend="gdk-window-set-transient-for">gdk_window_set_transient_for</link>()</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> A toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>modal</parameter>&nbsp;:</term>
<listitem><simpara> TRUE if the window is modal, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-type-hint"/>gdk_window_set_type_hint ()</title>
<programlisting>void        gdk_window_set_type_hint        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindowTypeHint">GdkWindowTypeHint</link> hint);</programlisting>
<para>
The application can use this call to provide a hint to the window
manager about the functionality of a window. The window manager
can use this information when determining the decoration and behaviour
of the window.
</para>
<para>
The hint must be set before the window is mapped.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> A toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hint</parameter>&nbsp;:</term>
<listitem><simpara> A hint of the function this window will have
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-skip-taskbar-hint"/>gdk_window_set_skip_taskbar_hint ()</title>
<programlisting>void        gdk_window_set_skip_taskbar_hint
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skips_taskbar);</programlisting>
<para>
Toggles whether a window should appear in a task list or window
list. If a window's semantic type as specified with
<link linkend="gdk-window-set-type-hint">gdk_window_set_type_hint</link>() already fully describes the window, this
function should NOT be called in addition, instead you should allow
the window to be treated according to standard policy for its
semantic type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>skips_taskbar</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> to skip the taskbar
</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-skip-pager-hint"/>gdk_window_set_skip_pager_hint ()</title>
<programlisting>void        gdk_window_set_skip_pager_hint  (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skips_pager);</programlisting>
<para>
Toggles whether a window should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the windows on the desktop). If a
window's semantic type as specified with <link linkend="gdk-window-set-type-hint">gdk_window_set_type_hint</link>()
already fully describes the window, this function should NOT be
called in addition, instead you should allow the window to be
treated according to standard policy for its semantic type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>skips_pager</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> to skip the pager
</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-position"/>gdk_window_get_position ()</title>
<programlisting>void        gdk_window_get_position         (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);</programlisting>
<para>
Obtains the position of the window as reported in the
most-recently-processed <link linkend="GdkEventConfigure">GdkEventConfigure</link>. Contrast with
<link linkend="gdk-window-get-geometry">gdk_window_get_geometry</link>() which queries the X server for the
current window position, regardless of which events have been
received or processed.
</para>
<para>
The position coordinates are relative to the window's parent window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-root-origin"/>gdk_window_get_root_origin ()</title>
<programlisting>void        gdk_window_get_root_origin      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);</programlisting>
<para>
Obtains the top-left corner of the window manager frame in root
window coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for X position of window frame
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for Y position of window frame
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-frame-extents"/>gdk_window_get_frame_extents ()</title>
<programlisting>void        gdk_window_get_frame_extents    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkRectangle">GdkRectangle</link> *rect);</programlisting>
<para>
Obtains the bounding box of the window, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the window itself (rather than
the frame) in root window coordinates, use <link linkend="gdk-window-get-origin">gdk_window_get_origin</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rect</parameter>&nbsp;:</term>
<listitem><simpara> rectangle to fill with bounding box of the window frame
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-size"/>gdk_window_get_size</title>
<programlisting>#define gdk_window_get_size            gdk_drawable_get_size
</programlisting>
<warning><para><literal>gdk_window_get_size</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent of <link linkend="gdk-drawable-get-size">gdk_drawable_get_size</link>().
</para></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-visual"/>gdk_window_get_visual</title>
<programlisting>#define gdk_window_get_visual          gdk_drawable_get_visual
</programlisting>
<warning><para><literal>gdk_window_get_visual</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent of <link linkend="gdk-drawable-get-visual">gdk_drawable_get_visual</link>().
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-colormap"/>gdk_window_get_colormap</title>
<programlisting>#define gdk_window_get_colormap        gdk_drawable_get_colormap
</programlisting>
<warning><para><literal>gdk_window_get_colormap</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent of <link linkend="gdk-drawable-get-colormap">gdk_drawable_get_colormap</link>().
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>colormap for the window


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-type"/>gdk_window_get_type</title>
<programlisting>#define gdk_window_get_type            gdk_window_get_window_type
</programlisting>
<warning><para><literal>gdk_window_get_type</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Deprecated equivalent of <link linkend="gdk-drawable-get-type">gdk_drawable_get_type</link>().
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>type of drawable


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-origin"/>gdk_window_get_origin ()</title>
<programlisting><link linkend="gint">gint</link>        gdk_window_get_origin           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);</programlisting>
<para>
Obtains the position of a window in root window coordinates.
(Compare with <link linkend="gdk-window-get-position">gdk_window_get_position</link>() and
<link linkend="gdk-window-get-geometry">gdk_window_get_geometry</link>() which return the position of a window
relative to its parent window.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for X coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for Y coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> not meaningful, ignore
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-deskrelative-origin"/>gdk_window_get_deskrelative_origin ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gdk_window_get_deskrelative_origin
                                            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y);</programlisting>
<warning><para><literal>gdk_window_get_deskrelative_origin</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This gets the origin of a <link linkend="GdkWindow">GdkWindow</link> relative to
an Enlightenment-window-manager desktop. As long as you don't
assume that the user's desktop/workspace covers the entire
root window (i.e. you don't assume that the desktop begins
at root window coordinate 0,0) this function is not necessary.
It's deprecated for that reason.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for X coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for Y coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> not meaningful
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-pointer"/>gdk_window_get_pointer ()</title>
<programlisting><link linkend="GdkWindow">GdkWindow</link>*  gdk_window_get_pointer          (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="GdkModifierType">GdkModifierType</link> *mask);</programlisting>
<para>
Obtains the current pointer position and modifier state.
The position is given in coordinates relative to <parameter>window</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for X coordinate of pointer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for Y coordinate of pointer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mask</parameter>&nbsp;:</term>
<listitem><simpara> return location for modifier mask
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the window containing the pointer (as with
<link linkend="gdk-window-at-pointer">gdk_window_at_pointer</link>()), or <literal>NULL</literal> if the window containing the
pointer isn't known to GDK
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkModifierType"/>enum GdkModifierType</title>
<programlisting>typedef enum
{
  GDK_SHIFT_MASK    = 1 &lt;&lt; 0,
  GDK_LOCK_MASK	    = 1 &lt;&lt; 1,
  GDK_CONTROL_MASK  = 1 &lt;&lt; 2,
  GDK_MOD1_MASK	    = 1 &lt;&lt; 3,
  GDK_MOD2_MASK	    = 1 &lt;&lt; 4,
  GDK_MOD3_MASK	    = 1 &lt;&lt; 5,
  GDK_MOD4_MASK	    = 1 &lt;&lt; 6,
  GDK_MOD5_MASK	    = 1 &lt;&lt; 7,
  GDK_BUTTON1_MASK  = 1 &lt;&lt; 8,
  GDK_BUTTON2_MASK  = 1 &lt;&lt; 9,
  GDK_BUTTON3_MASK  = 1 &lt;&lt; 10,
  GDK_BUTTON4_MASK  = 1 &lt;&lt; 11,
  GDK_BUTTON5_MASK  = 1 &lt;&lt; 12,
  /* The next few modifiers are used by XKB, so we skip to the end
   */
  GDK_RELEASE_MASK  = 1 &lt;&lt; 30,
  GDK_MODIFIER_MASK = GDK_RELEASE_MASK | 0x1fff
} GdkModifierType;
</programlisting>
<para>
A set of bit-flags to indicate the state of modifier keys and mouse buttons 
in various event types. Typical modifier keys are Shift, Control, Meta, Super,
Hyper, Alt, Compose, Apple, CapsLock or ShiftLock. 
</para>
<para>
Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_SHIFT_MASK</literal></term>
<listitem><simpara>the Shift key.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_LOCK_MASK</literal></term>
<listitem><simpara>a Lock key (depending on the modifier mapping of the 
  X server this may either be CapsLock or ShiftLock).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_CONTROL_MASK</literal></term>
<listitem><simpara>the Control key.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_MOD1_MASK</literal></term>
<listitem><simpara>the fourth modifier key (it depends on the modifier 
  mapping of the X server which key is interpreted as this modifier, but 
  normally it is the Alt key).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_MOD2_MASK</literal></term>
<listitem><simpara>the fifth modifier key (it depends on the modifier 
  mapping of the X server which key is interpreted as this modifier).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_MOD3_MASK</literal></term>
<listitem><simpara>the sixth modifier key (it depends on the modifier 
  mapping of the X server which key is interpreted as this modifier).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_MOD4_MASK</literal></term>
<listitem><simpara>the seventh modifier key (it depends on the modifier 
  mapping of the X server which key is interpreted as this modifier).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_MOD5_MASK</literal></term>
<listitem><simpara>the eighth modifier key (it depends on the modifier 
  mapping of the X server which key is interpreted as this modifier).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_BUTTON1_MASK</literal></term>
<listitem><simpara>the first mouse button.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_BUTTON2_MASK</literal></term>
<listitem><simpara>the second mouse button.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_BUTTON3_MASK</literal></term>
<listitem><simpara>the third mouse button.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_BUTTON4_MASK</literal></term>
<listitem><simpara>the fourth mouse button.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_BUTTON5_MASK</literal></term>
<listitem><simpara>the fifth mouse button.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_RELEASE_MASK</literal></term>
<listitem><simpara>not used in GDK itself. GTK+ uses it to differentiate 
  between (keyval, modifiers) pairs from key press and release events.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_MODIFIER_MASK</literal></term>
<listitem><simpara>

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-parent"/>gdk_window_get_parent ()</title>
<programlisting><link linkend="GdkWindow">GdkWindow</link>*  gdk_window_get_parent           (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Obtains the parent of <parameter>window</parameter>, as known to GDK. Does not query the
X server; thus this returns the parent as passed to <link linkend="gdk-window-new">gdk_window_new</link>(),
not the actual parent. This should never matter unless you're using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> parent of <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-toplevel"/>gdk_window_get_toplevel ()</title>
<programlisting><link linkend="GdkWindow">GdkWindow</link>*  gdk_window_get_toplevel         (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Gets the toplevel window that's an ancestor of <parameter>window</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the toplevel window containing <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-children"/>gdk_window_get_children ()</title>
<programlisting><link linkend="GList">GList</link>*      gdk_window_get_children         (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Gets the list of children of <parameter>window</parameter> known to GDK.
This function only returns children created via GDK,
so for example it's useless when used with the root window;
it only returns windows an application created itself.
</para>
<para>
The returned list must be freed, but the elements in the
list need not be.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> list of child windows inside <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-peek-children"/>gdk_window_peek_children ()</title>
<programlisting><link linkend="GList">GList</link>*      gdk_window_peek_children        (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Like <link linkend="gdk-window-get-children">gdk_window_get_children</link>(), but does not copy the list of
children, so the list does not need to be freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a reference to the list of child windows in <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-events"/>gdk_window_get_events ()</title>
<programlisting><link linkend="GdkEventMask">GdkEventMask</link> gdk_window_get_events          (<link linkend="GdkWindow">GdkWindow</link> *window);</programlisting>
<para>
Gets the event mask for <parameter>window</parameter>. See <link linkend="gdk-window-set-events">gdk_window_set_events</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> event mask for <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-events"/>gdk_window_set_events ()</title>
<programlisting>void        gdk_window_set_events           (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkEventMask">GdkEventMask</link> event_mask);</programlisting>
<para>
The event mask for a window determines which events will be reported
for that window. For example, an event mask including <link linkend="GDK-BUTTON-PRESS-MASK-CAPS">GDK_BUTTON_PRESS_MASK</link>
means the window should report button press events. The event mask
is the bitwise OR of values from the <link linkend="GdkEventMask">GdkEventMask</link> enumeration.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event_mask</parameter>&nbsp;:</term>
<listitem><simpara> event mask for <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-icon"/>gdk_window_set_icon ()</title>
<programlisting>void        gdk_window_set_icon             (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *icon_window,
                                             <link linkend="GdkPixmap">GdkPixmap</link> *pixmap,
                                             <link linkend="GdkBitmap">GdkBitmap</link> *mask);</programlisting>
<para>
Sets the icon of <parameter>window</parameter> as a pixmap or window. If using GTK+, investigate
<link linkend="gtk-window-set-default-icon-list">gtk_window_set_default_icon_list</link>() first, and then <link linkend="gtk-window-set-icon-list">gtk_window_set_icon_list</link>()
and <link linkend="gtk-window-set-icon">gtk_window_set_icon</link>(). If those don't meet your needs, look at
<link linkend="gdk-window-set-icon-list">gdk_window_set_icon_list</link>(). Only if all those are too high-level do you
want to fall back to <link linkend="gdk-window-set-icon">gdk_window_set_icon</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkWindow">GdkWindow</link> to use for the icon, or <literal>NULL</literal> to unset
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pixmap</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GdkPixmap">GdkPixmap</link> to use as the icon, or <literal>NULL</literal> to unset
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mask</parameter>&nbsp;:</term>
<listitem><simpara> a 1-bit pixmap (<link linkend="GdkBitmap">GdkBitmap</link>) to use as mask for <parameter>pixmap</parameter>, or <literal>NULL</literal> to have none
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-icon-name"/>gdk_window_set_icon_name ()</title>
<programlisting>void        gdk_window_set_icon_name        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Windows may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> name of window while iconified (minimized)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-transient-for"/>gdk_window_set_transient_for ()</title>
<programlisting>void        gdk_window_set_transient_for    (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *parent);</programlisting>
<para>
Indicates to the window manager that <parameter>window</parameter> is a transient dialog
associated with the application window <parameter>parent</parameter>. This allows the
window manager to do things like center <parameter>window</parameter> on <parameter>parent</parameter> and
keep <parameter>window</parameter> above <parameter>parent</parameter>.
</para>
<para>
See <link linkend="gtk-window-set-transient-for">gtk_window_set_transient_for</link>() if you're using <link linkend="GtkWindow">GtkWindow</link> or
<link linkend="GtkDialog">GtkDialog</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> another toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-role"/>gdk_window_set_role ()</title>
<programlisting>void        gdk_window_set_role             (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             const <link linkend="gchar">gchar</link> *role);</programlisting>
<para>
When using GTK+, typically you should use <link linkend="gtk-window-set-role">gtk_window_set_role</link>() instead
of this low-level function.
</para>
<para>
The window manager and session manager use a window's role to
distinguish it from other kinds of window in the same application.
When an application is restarted after being saved in a previous
session, all windows with the same title and role are treated as
interchangeable.  So if you have two windows with the same title
that should be distinguished for session management purposes, you
should set the role on those windows. It doesn't matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>role</parameter>&nbsp;:</term>
<listitem><simpara> a string indicating its role
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-group"/>gdk_window_set_group ()</title>
<programlisting>void        gdk_window_set_group            (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWindow">GdkWindow</link> *leader);</programlisting>
<para>
Sets the group leader window for <parameter>window</parameter>. By default,
GDK sets the group leader for all toplevel windows
to a global window implicitly created by GDK. With this function
you can override this default.
</para>
<para>
The group leader window allows the window manager to distinguish
all windows that belong to a single application. It may for example
allow users to minimize/unminimize all windows belonging to an
application at once. You should only set a non-default group window
if your application pretends to be multiple applications.
The group leader window may not be changed after a window has been
mapped (with <link linkend="gdk-window-show">gdk_window_show</link>() for example).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>leader</parameter>&nbsp;:</term>
<listitem><simpara> group leader window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-decorations"/>gdk_window_set_decorations ()</title>
<programlisting>void        gdk_window_set_decorations      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWMDecoration">GdkWMDecoration</link> decorations);</programlisting>
<para>
"Decorations" are the features the window manager adds to a toplevel <link linkend="GdkWindow">GdkWindow</link>.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your window to have.
Usually you should use <link linkend="gtk-window-set-decorated">gtk_window_set_decorated</link>() on a <link linkend="GtkWindow">GtkWindow</link> instead of
using the GDK function directly.
</para>
<para>
The <parameter>decorations</parameter> argument is the logical OR of the fields in
the <link linkend="GdkWMDecoration">GdkWMDecoration</link> enumeration. If <link linkend="GDK-DECOR-ALL-CAPS">GDK_DECOR_ALL</link> is included in the
mask, the other bits indicate which decorations should be turned off.
If <link linkend="GDK-DECOR-ALL-CAPS">GDK_DECOR_ALL</link> is not included, then the other bits indicate
which decorations should be turned on.
</para>
<para>
Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>decorations</parameter>&nbsp;:</term>
<listitem><simpara> decoration hint mask
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-decorations"/>gdk_window_get_decorations ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gdk_window_get_decorations      (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWMDecoration">GdkWMDecoration</link> *decorations);</programlisting>
<para>
Returns the decorations set on the GdkWindow with <link linkend="gdk-window-set-decorations">gdk_window_set_decorations</link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> The toplevel <link linkend="GdkWindow">GdkWindow</link> to get the decorations from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>decorations</parameter>&nbsp;:</term>
<listitem><simpara> The window decorations will be written here
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if the window has decorations set, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWMDecoration"/>enum GdkWMDecoration</title>
<programlisting>typedef enum
{
  GDK_DECOR_ALL		= 1 &lt;&lt; 0,
  GDK_DECOR_BORDER	= 1 &lt;&lt; 1,
  GDK_DECOR_RESIZEH	= 1 &lt;&lt; 2,
  GDK_DECOR_TITLE	= 1 &lt;&lt; 3,
  GDK_DECOR_MENU	= 1 &lt;&lt; 4,
  GDK_DECOR_MINIMIZE	= 1 &lt;&lt; 5,
  GDK_DECOR_MAXIMIZE	= 1 &lt;&lt; 6
} GdkWMDecoration;
</programlisting>
<para>
These are hints originally defined by the Motif toolkit.
The window manager can use them when determining how to decorate
the window. The hint must be set before mapping the window.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_DECOR_ALL</literal></term>
<listitem><simpara>all decorations should be applied.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_DECOR_BORDER</literal></term>
<listitem><simpara>a frame should be drawn around the window.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_DECOR_RESIZEH</literal></term>
<listitem><simpara>the frame should have resize handles.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_DECOR_TITLE</literal></term>
<listitem><simpara>a titlebar should be placed above the window.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_DECOR_MENU</literal></term>
<listitem><simpara>a button for opening a menu should be included.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_DECOR_MINIMIZE</literal></term>
<listitem><simpara>a minimize button should be included.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_DECOR_MAXIMIZE</literal></term>
<listitem><simpara>a maximize button should be included.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-set-functions"/>gdk_window_set_functions ()</title>
<programlisting>void        gdk_window_set_functions        (<link linkend="GdkWindow">GdkWindow</link> *window,
                                             <link linkend="GdkWMFunction">GdkWMFunction</link> functions);</programlisting>
<para>
This function isn't really good for much. It sets the traditional
Motif window manager hint for which operations the window manager
should allow on a toplevel window. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.
</para>
<para>
The <parameter>functions</parameter> argument is the logical OR of values from the
<link linkend="GdkWMFunction">GdkWMFunction</link> enumeration. If the bitmask includes <link linkend="GDK-FUNC-ALL-CAPS">GDK_FUNC_ALL</link>,
then the other bits indicate which functions to disable; if
it doesn't include <link linkend="GDK-FUNC-ALL-CAPS">GDK_FUNC_ALL</link>, it indicates which functions to
enable.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a toplevel <link linkend="GdkWindow">GdkWindow</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>functions</parameter>&nbsp;:</term>
<listitem><simpara> bitmask of operations to allow on <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkWMFunction"/>enum GdkWMFunction</title>
<programlisting>typedef enum
{
  GDK_FUNC_ALL		= 1 &lt;&lt; 0,
  GDK_FUNC_RESIZE	= 1 &lt;&lt; 1,
  GDK_FUNC_MOVE		= 1 &lt;&lt; 2,
  GDK_FUNC_MINIMIZE	= 1 &lt;&lt; 3,
  GDK_FUNC_MAXIMIZE	= 1 &lt;&lt; 4,
  GDK_FUNC_CLOSE	= 1 &lt;&lt; 5
} GdkWMFunction;
</programlisting>
<para>
These are hints originally defined by the Motif toolkit.
The window manager can use them when determining the functions 
to offer for the window. 
The hint must be set before mapping the window.
</para><variablelist role="enum">
<varlistentry>
<term><literal>GDK_FUNC_ALL</literal></term>
<listitem><simpara>all functions should be offered.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_FUNC_RESIZE</literal></term>
<listitem><simpara>the window should be resizable.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_FUNC_MOVE</literal></term>
<listitem><simpara>the window should be movable.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_FUNC_MINIMIZE</literal></term>
<listitem><simpara>the window should be minimizable.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_FUNC_MAXIMIZE</literal></term>
<listitem><simpara>the window should be maximizable.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GDK_FUNC_CLOSE</literal></term>
<listitem><simpara>the window should be closable.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-window-get-toplevels"/>gdk_window_get_toplevels ()</title>
<programlisting><link linkend="GList">GList</link>*      gdk_window_get_toplevels        (void);</programlisting>
<para>
Obtains a list of all toplevel windows known to GDK on the default
screen (see <link linkend="gdk-window-get-toplevels-for-screen">gdk_window_get_toplevels_for_screen</link>()).
A toplevel window is a child of the root window (see
<link linkend="gdk-get-default-root-window">gdk_get_default_root_window</link>()).
</para>
<para>
The returned list should be freed with <link linkend="g-list-free">g_list_free</link>(), but
its elements need not be freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> list of toplevel windows, free with <link linkend="g-list-free">g_list_free</link>()
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-get-default-root-window"/>gdk_get_default_root_window ()</title>
<programlisting><link linkend="GdkWindow">GdkWindow</link>*  gdk_get_default_root_window     (void);</programlisting>
<para>
Obtains the root window (parent all other windows are inside)
for the default display and screen.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the default root window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GdkPointerHooks"/>struct GdkPointerHooks</title>
<programlisting>struct GdkPointerHooks {

  GdkWindow* (*get_pointer)       (GdkWindow	   *window,
			           gint	           *x,
			           gint   	   *y,
			           GdkModifierType *mask);
  GdkWindow* (*window_at_pointer) (GdkScreen       *screen, /* unused */
                                   gint            *win_x,
                                   gint            *win_y);
};
</programlisting>
<para>
A table of pointers to functions for getting quantities related to 
the current pointer position. GDK has one global table of this type,
which can be set using <link linkend="gdk-set-pointer-hooks">gdk_set_pointer_hooks</link>().
</para>
<para>
This is only useful for such low-level tools as an event recorder. 
Applications should never have any reason to use this facility
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GdkWindow">GdkWindow</link>* (*<structfield>get_pointer</structfield>) (GdkWindow	   *window,
			           gint	           *x,
			           gint   	   *y,
			           GdkModifierType *mask)</term>
<listitem><simpara>Obtains the current pointer position and modifier state.
  The position is given in coordinates relative to the window containing 
  the pointer, which is returned in <parameter>window</parameter>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GdkWindow">GdkWindow</link>* (*<structfield>window_at_pointer</structfield>) (GdkScreen       *screen,  
                                   gint            *win_x,
                                   gint            *win_y)</term>
<listitem><simpara>Obtains the window underneath the mouse pointer, 
  returning the location of that window in <parameter>win_x</parameter>, <parameter>win_y</parameter>. Returns <literal>NULL</literal> 
  if the window under the mouse pointer is not known to GDK (for example, 
  belongs to another application).

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gdk-set-pointer-hooks"/>gdk_set_pointer_hooks ()</title>
<programlisting><link linkend="GdkPointerHooks">GdkPointerHooks</link>* gdk_set_pointer_hooks      (const <link linkend="GdkPointerHooks">GdkPointerHooks</link> *new_hooks);</programlisting>
<para>
This function allows for hooking into the operation
of getting the current location of the pointer. This
is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.
</para>
<para>
This function is not multihead safe. For multihead operation,
see <link linkend="gdk-display-set-pointer-hooks">gdk_display_set_pointer_hooks</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>new_hooks</parameter>&nbsp;:</term>
<listitem><simpara> a table of pointers to functions for getting
  quantities related to the current pointer position,
  or <literal>NULL</literal> to restore the default table.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the previous pointer hook table
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
