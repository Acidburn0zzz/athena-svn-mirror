<refentry id="GtkContainer">
<refmeta>
<refentrytitle>GtkContainer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GTK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GtkContainer</refname><refpurpose>Base class for widgets which contain other widgets</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;gtk/gtk.h&gt;


struct      <link linkend="GtkContainer-struct">GtkContainer</link>;
#define     <link linkend="GTK-IS-RESIZE-CONTAINER-CAPS">GTK_IS_RESIZE_CONTAINER</link>         (widget)
#define     <link linkend="GTK-CONTAINER-WARN-INVALID-CHILD-PROPERTY-ID-CAPS">GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID</link>(object, property_id, pspec)
#define     <link linkend="gtk-container-border-width">gtk_container_border_width</link>
void        <link linkend="gtk-container-add">gtk_container_add</link>               (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);
void        <link linkend="gtk-container-remove">gtk_container_remove</link>            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);
void        <link linkend="gtk-container-add-with-properties">gtk_container_add_with_properties</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             const <link linkend="gchar">gchar</link> *first_prop_name,
                                             ...);
<link linkend="GtkResizeMode">GtkResizeMode</link> <link linkend="gtk-container-get-resize-mode">gtk_container_get_resize_mode</link> (<link linkend="GtkContainer">GtkContainer</link> *container);
void        <link linkend="gtk-container-set-resize-mode">gtk_container_set_resize_mode</link>   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkResizeMode">GtkResizeMode</link> resize_mode);
void        <link linkend="gtk-container-check-resize">gtk_container_check_resize</link>      (<link linkend="GtkContainer">GtkContainer</link> *container);
void        <link linkend="gtk-container-foreach">gtk_container_foreach</link>           (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkCallback">GtkCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> callback_data);
void        <link linkend="gtk-container-foreach-full">gtk_container_foreach_full</link>      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkCallback">GtkCallback</link> callback,
                                             <link linkend="GtkCallbackMarshal">GtkCallbackMarshal</link> marshal,
                                             <link linkend="gpointer">gpointer</link> callback_data,
                                             <link linkend="GtkDestroyNotify">GtkDestroyNotify</link> notify);
#define     <link linkend="gtk-container-children">gtk_container_children</link>
<link linkend="GList">GList</link>*      <link linkend="gtk-container-get-children">gtk_container_get_children</link>      (<link linkend="GtkContainer">GtkContainer</link> *container);
void        <link linkend="gtk-container-set-reallocate-redraws">gtk_container_set_reallocate_redraws</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="gboolean">gboolean</link> needs_redraws);
void        <link linkend="gtk-container-set-focus-child">gtk_container_set_focus_child</link>   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child);
<link linkend="GtkAdjustment">GtkAdjustment</link>* <link linkend="gtk-container-get-focus-vadjustment">gtk_container_get_focus_vadjustment</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container);
void        <link linkend="gtk-container-set-focus-vadjustment">gtk_container_set_focus_vadjustment</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);
<link linkend="GtkAdjustment">GtkAdjustment</link>* <link linkend="gtk-container-get-focus-hadjustment">gtk_container_get_focus_hadjustment</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container);
void        <link linkend="gtk-container-set-focus-hadjustment">gtk_container_set_focus_hadjustment</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);
void        <link linkend="gtk-container-resize-children">gtk_container_resize_children</link>   (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="GType">GType</link>       <link linkend="gtk-container-child-type">gtk_container_child_type</link>        (<link linkend="GtkContainer">GtkContainer</link> *container);
void        <link linkend="gtk-container-child-get">gtk_container_child_get</link>         (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_prop_name,
                                             ...);
void        <link linkend="gtk-container-child-set">gtk_container_child_set</link>         (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_prop_name,
                                             ...);
void        <link linkend="gtk-container-child-get-property">gtk_container_child_get_property</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             <link linkend="GValue">GValue</link> *value);
void        <link linkend="gtk-container-child-set-property">gtk_container_child_set_property</link>
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             const <link linkend="GValue">GValue</link> *value);
void        <link linkend="gtk-container-child-get-valist">gtk_container_child_get_valist</link>  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_property_name,
                                             va_list var_args);
void        <link linkend="gtk-container-child-set-valist">gtk_container_child_set_valist</link>  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_property_name,
                                             va_list var_args);
void        <link linkend="gtk-container-forall">gtk_container_forall</link>            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkCallback">GtkCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> callback_data);
<link linkend="guint">guint</link>       <link linkend="gtk-container-get-border-width">gtk_container_get_border_width</link>  (<link linkend="GtkContainer">GtkContainer</link> *container);
void        <link linkend="gtk-container-set-border-width">gtk_container_set_border_width</link>  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="guint">guint</link> border_width);
void        <link linkend="gtk-container-propagate-expose">gtk_container_propagate_expose</link>  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             <link linkend="GdkEventExpose">GdkEventExpose</link> *event);
<link linkend="gboolean">gboolean</link>    <link linkend="gtk-container-get-focus-chain">gtk_container_get_focus_chain</link>   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GList">GList</link> **focusable_widgets);
void        <link linkend="gtk-container-set-focus-chain">gtk_container_set_focus_chain</link>   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GList">GList</link> *focusable_widgets);
void        <link linkend="gtk-container-unset-focus-chain">gtk_container_unset_focus_chain</link> (<link linkend="GtkContainer">GtkContainer</link> *container);
<link linkend="GParamSpec">GParamSpec</link>* <link linkend="gtk-container-class-find-child-property">gtk_container_class_find_child_property</link>
                                            (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                             const <link linkend="gchar">gchar</link> *property_name);
void        <link linkend="gtk-container-class-install-child-property">gtk_container_class_install_child_property</link>
                                            (<link linkend="GtkContainerClass">GtkContainerClass</link> *cclass,
                                             <link linkend="guint">guint</link> property_id,
                                             <link linkend="GParamSpec">GParamSpec</link> *pspec);
<link linkend="GParamSpec">GParamSpec</link>** <link linkend="gtk-container-class-list-child-properties">gtk_container_class_list_child_properties</link>
                                            (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                             <link linkend="guint">guint</link> *n_properties);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GtkObject">GtkObject</link>
         +----<link linkend="GtkWidget">GtkWidget</link>
               +----GtkContainer
</synopsis>

</refsect1>

<refsect1>
<title>Implemented Interfaces</title>
<para>
GtkContainer implements <link linkend="AtkImplementorIface">AtkImplementorIface</link>.
</para>
</refsect1>


<refsect1>
<title>Properties</title>
<synopsis>

  &quot;<link linkend="GtkContainer--border-width">border-width</link>&quot;         <link linkend="guint">guint</link>                : Read / Write
  &quot;<link linkend="GtkContainer--child">child</link>&quot;                <link linkend="GtkWidget">GtkWidget</link>            : Write
  &quot;<link linkend="GtkContainer--resize-mode">resize-mode</link>&quot;          <link linkend="GtkResizeMode">GtkResizeMode</link>        : Read / Write
</synopsis>
</refsect1>

<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="GtkContainer-add">add</link>&quot;       void        user_function      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="GtkWidget">GtkWidget</link> *widget,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GtkContainer-check-resize">check-resize</link>&quot;
            void        user_function      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GtkContainer-remove">remove</link>&quot;    void        user_function      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="GtkWidget">GtkWidget</link> *widget,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GtkContainer-set-focus-child">set-focus-child</link>&quot;
            void        user_function      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="GtkWidget">GtkWidget</link> *widget,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para id="child-properties">
<structname>GtkContainer</structname> introduces <firstterm>child 
properties</firstterm> - these are object properties that are not specific
to either the container or the contained widget, but rather to their relation.
Typical examples of child properties are the position or pack-type of a widget
which is contained in a <link linkend="GtkBox">GtkBox</link>.</para>
<para>
Use <link linkend="gtk-container-class-install-child-property">gtk_container_class_install_child_property</link>() to install child properties 
for a container class and <link linkend="gtk-container-class-find-child-property">gtk_container_class_find_child_property</link>() or
<link linkend="gtk-container-class-list-child-properties">gtk_container_class_list_child_properties</link>() to get information about existing
child properties.
</para>
<para>
To set the value of a child property, use <link linkend="gtk-container-child-set-property">gtk_container_child_set_property</link>(), 
<link linkend="gtk-container-child-set">gtk_container_child_set</link>() or <link linkend="gtk-container-child-set-valist">gtk_container_child_set_valist</link>(). 
To obtain the value of a child property, use 
<link linkend="gtk-container-child-get-property">gtk_container_child_get_property</link>(), <link linkend="gtk-container-child-get">gtk_container_child_get</link>() or
<link linkend="gtk-container-child-get-valist">gtk_container_child_get_valist</link>(). To emit notification about child property 
changes, use <link linkend="gtk-widget-child-notify">gtk_widget_child_notify</link>().
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GtkContainer-struct"/>struct GtkContainer</title>
<programlisting>struct GtkContainer;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GTK-IS-RESIZE-CONTAINER-CAPS"/>GTK_IS_RESIZE_CONTAINER()</title>
<programlisting>#define GTK_IS_RESIZE_CONTAINER(widget) (GTK_IS_CONTAINER (widget) &amp;&amp; ((GtkContainer*) (widget))-&gt;resize_mode != GTK_RESIZE_PARENT)
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GTK-CONTAINER-WARN-INVALID-CHILD-PROPERTY-ID-CAPS"/>GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID()</title>
<programlisting>#define     GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID(object, property_id, pspec)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-border-width"/>gtk_container_border_width</title>
<programlisting>#define	gtk_container_border_width		gtk_container_set_border_width
</programlisting>
<warning><para><literal>gtk_container_border_width</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-container-get-border-width">gtk_container_get_border_width</link>() instead.</para></warning>
<para>
Does the same as <link linkend="gtk-container-get-border-width">gtk_container_get_border_width</link>().
</para></refsect2>
<refsect2>
<title><anchor id="gtk-container-add"/>gtk_container_add ()</title>
<programlisting>void        gtk_container_add               (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Adds <parameter>widget</parameter> to <parameter>container</parameter>. Typically used for simple containers
such as <link linkend="GtkWindow">GtkWindow</link>, <link linkend="GtkFrame">GtkFrame</link>, or <link linkend="GtkButton">GtkButton</link>; for more complicated
layout containers such as <link linkend="GtkBox">GtkBox</link> or <link linkend="GtkTable">GtkTable</link>, this function will
pick default packing parameters that may not be correct.  So
consider functions such as <link linkend="gtk-box-pack-start">gtk_box_pack_start</link>() and
<link linkend="gtk-table-attach">gtk_table_attach</link>() as an alternative to <link linkend="gtk-container-add">gtk_container_add</link>() in
those cases. A widget may be added to only one container at a time;
you can't place the same widget inside two different containers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a widget to be placed inside <parameter>container</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-remove"/>gtk_container_remove ()</title>
<programlisting>void        gtk_container_remove            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Removes <parameter>widget</parameter> from <parameter>container</parameter>. <parameter>widget</parameter> must be inside <parameter>container</parameter>.
Note that <parameter>container</parameter> will own a reference to <parameter>widget</parameter>, and that this
may be the last reference held; so removing a widget from its
container can destroy that widget. If you want to use <parameter>widget</parameter>
again, you need to add a reference to it while it's not inside
a container, using <link linkend="g-object-ref">g_object_ref</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a current child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-add-with-properties"/>gtk_container_add_with_properties ()</title>
<programlisting>void        gtk_container_add_with_properties
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             const <link linkend="gchar">gchar</link> *first_prop_name,
                                             ...);</programlisting>
<para>
Adds <parameter>widget</parameter> to <parameter>container</parameter>, setting child properties at the same time.
See <link linkend="gtk-container-add">gtk_container_add</link>() and <link linkend="gtk-container-child-set">gtk_container_child_set</link>() for more details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> a widget to be placed inside <parameter>container</parameter> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first child property to set 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> a <literal>NULL</literal>-terminated list of property names and values, starting
          with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-resize-mode"/>gtk_container_get_resize_mode ()</title>
<programlisting><link linkend="GtkResizeMode">GtkResizeMode</link> gtk_container_get_resize_mode (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Returns the resize mode for the container. See
<link linkend="gtk-container-set-resize-mode">gtk_container_set_resize_mode</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the current resize mode
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-resize-mode"/>gtk_container_set_resize_mode ()</title>
<programlisting>void        gtk_container_set_resize_mode   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkResizeMode">GtkResizeMode</link> resize_mode);</programlisting>
<para>
Sets the resize mode for the container.
</para>
<para>
The resize mode of a container determines whether a resize request 
will be passed to the container's parent, queued for later execution
or executed immediately.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resize_mode</parameter>&nbsp;:</term>
<listitem><simpara> the new resize mode.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-check-resize"/>gtk_container_check_resize ()</title>
<programlisting>void        gtk_container_check_resize      (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-foreach"/>gtk_container_foreach ()</title>
<programlisting>void        gtk_container_foreach           (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkCallback">GtkCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> callback_data);</programlisting>
<para>
Invokes <parameter>callback</parameter> on each non-internal child of <parameter>container</parameter>.  See
<link linkend="gtk-container-forall">gtk_container_forall</link>() for details on what constitutes an
"internal" child.  Most applications should use
<link linkend="gtk-container-foreach">gtk_container_foreach</link>(), rather than <link linkend="gtk-container-forall">gtk_container_forall</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> a callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback_data</parameter>&nbsp;:</term>
<listitem><simpara> callback user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-foreach-full"/>gtk_container_foreach_full ()</title>
<programlisting>void        gtk_container_foreach_full      (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkCallback">GtkCallback</link> callback,
                                             <link linkend="GtkCallbackMarshal">GtkCallbackMarshal</link> marshal,
                                             <link linkend="gpointer">gpointer</link> callback_data,
                                             <link linkend="GtkDestroyNotify">GtkDestroyNotify</link> notify);</programlisting>
<warning><para><literal>gtk_container_foreach_full</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-container-foreach">gtk_container_foreach</link>() instead.</para></warning>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>marshal</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>notify</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-children"/>gtk_container_children</title>
<programlisting>#define gtk_container_children gtk_container_get_children
</programlisting>
<warning><para><literal>gtk_container_children</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-container-get-children">gtk_container_get_children</link>() instead.</para></warning>
<para>
Does the same as <link linkend="gtk-container-get-children">gtk_container_get_children</link>().
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-children"/>gtk_container_get_children ()</title>
<programlisting><link linkend="GList">GList</link>*      gtk_container_get_children      (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Returns the the container's non-internal children. See
<link linkend="gtk-container-forall">gtk_container_forall</link>() for details on what constitutes an "internal" child.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly-allocated list of the container's non-internal children.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-reallocate-redraws"/>gtk_container_set_reallocate_redraws ()</title>
<programlisting>void        gtk_container_set_reallocate_redraws
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="gboolean">gboolean</link> needs_redraws);</programlisting>
<para>
Sets the <parameter>reallocate_redraws</parameter> flag of the container to the given value.
</para>
<para>
Containers requesting reallocation redraws get automatically
redrawn if any of their children changed allocation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>needs_redraws</parameter>&nbsp;:</term>
<listitem><simpara> the new value for the container's <parameter>reallocate_redraws</parameter> flag.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-child"/>gtk_container_set_focus_child ()</title>
<programlisting>void        gtk_container_set_focus_child   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-focus-vadjustment"/>gtk_container_get_focus_vadjustment ()</title>
<programlisting><link linkend="GtkAdjustment">GtkAdjustment</link>* gtk_container_get_focus_vadjustment
                                            (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Retrieves the vertical focus adjustment for the container. See
<link linkend="gtk-container-set-focus-vadjustment">gtk_container_set_focus_vadjustment</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the vertical focus adjustment, or <literal>NULL</literal> if
  none has been set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-vadjustment"/>gtk_container_set_focus_vadjustment ()</title>
<programlisting>void        gtk_container_set_focus_vadjustment
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>adjustment</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-focus-hadjustment"/>gtk_container_get_focus_hadjustment ()</title>
<programlisting><link linkend="GtkAdjustment">GtkAdjustment</link>* gtk_container_get_focus_hadjustment
                                            (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Retrieves the horizontal focus adjustment for the container. See
<link linkend="gtk-container-set-focus-hadjustment">gtk_container_set_focus_hadjustment</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the horizontal focus adjustment, or <literal>NULL</literal> if
  none has been set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-hadjustment"/>gtk_container_set_focus_hadjustment ()</title>
<programlisting>void        gtk_container_set_focus_hadjustment
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *adjustment);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>adjustment</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-resize-children"/>gtk_container_resize_children ()</title>
<programlisting>void        gtk_container_resize_children   (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-type"/>gtk_container_child_type ()</title>
<programlisting><link linkend="GType">GType</link>       gtk_container_child_type        (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Returns the type of the children supported by the container.
</para>
<para>
Note that this may return <literal>G_TYPE_NONE</literal> to indicate that no more
children can be added, e.g. for a <link linkend="GtkPaned">GtkPaned</link> which already has two 
children.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="GType">GType</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-get"/>gtk_container_child_get ()</title>
<programlisting>void        gtk_container_child_get         (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_prop_name,
                                             ...);</programlisting>
<para>
Gets the values of one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> a <literal>NULL</literal>-terminated list of property names and <link linkend="GValue">GValue</link>*, 
          starting with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-set"/>gtk_container_child_set ()</title>
<programlisting>void        gtk_container_child_set         (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_prop_name,
                                             ...);</programlisting>
<para>
Sets one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> a <literal>NULL</literal>-terminated list of property names and values, starting
          with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-get-property"/>gtk_container_child_get_property ()</title>
<programlisting>void        gtk_container_child_get_property
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets the value of a child property for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> a location to return the value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-set-property"/>gtk_container_child_set_property ()</title>
<programlisting>void        gtk_container_child_set_property
                                            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *property_name,
                                             const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Sets a child property for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> the value to set the property to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-get-valist"/>gtk_container_child_get_valist ()</title>
<programlisting>void        gtk_container_child_get_valist  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_property_name,
                                             va_list var_args);</programlisting>
<para>
Gets the values of one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>var_args</parameter>&nbsp;:</term>
<listitem><simpara> a <literal>NULL</literal>-terminated list of property names and <link linkend="GValue">GValue</link>*, 
          starting with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-child-set-valist"/>gtk_container_child_set_valist ()</title>
<programlisting>void        gtk_container_child_set_valist  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             const <link linkend="gchar">gchar</link> *first_property_name,
                                             va_list var_args);</programlisting>
<para>
Sets one or more child properties for <parameter>child</parameter> and <parameter>container</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a widget which is a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the first property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>var_args</parameter>&nbsp;:</term>
<listitem><simpara> a <literal>NULL</literal>-terminated list of property names and values, starting
          with <parameter>first_prop_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-forall"/>gtk_container_forall ()</title>
<programlisting>void        gtk_container_forall            (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkCallback">GtkCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> callback_data);</programlisting>
<para>
Invokes <parameter>callback</parameter> on each child of <parameter>container</parameter>, including children
that are considered "internal" (implementation details of the
container). "Internal" children generally weren't added by the user
of the container, but were added by the container implementation
itself.  Most applications should use <link linkend="gtk-container-foreach">gtk_container_foreach</link>(),
rather than <link linkend="gtk-container-forall">gtk_container_forall</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> a callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback_data</parameter>&nbsp;:</term>
<listitem><simpara> callback user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-border-width"/>gtk_container_get_border_width ()</title>
<programlisting><link linkend="guint">guint</link>       gtk_container_get_border_width  (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Retrieves the border width of the container. See
<link linkend="gtk-container-set-border-width">gtk_container_set_border_width</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the current border width
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-border-width"/>gtk_container_set_border_width ()</title>
<programlisting>void        gtk_container_set_border_width  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="guint">guint</link> border_width);</programlisting>
<para>
Sets the border width of the container.
</para>
<para>
The border width of a container is the amount of space to leave
around the outside of the container. The only exception to this is
<link linkend="GtkWindow">GtkWindow</link>; because toplevel windows can't leave space outside,
they leave the space inside. The border is added on all sides of
the container. To add space to only one side, one approach is to
create a <link linkend="GtkAlignment">GtkAlignment</link> widget, call <link linkend="gtk-widget-set-usize">gtk_widget_set_usize</link>() to give
it a size, and place it on the side of the container as a spacer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>border_width</parameter>&nbsp;:</term>
<listitem><simpara> amount of blank space to leave <emphasis>outside</emphasis> the container.
  Valid values are in the range 0-65535 pixels.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-propagate-expose"/>gtk_container_propagate_expose ()</title>
<programlisting>void        gtk_container_propagate_expose  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             <link linkend="GdkEventExpose">GdkEventExpose</link> *event);</programlisting>
<para>
When a container receives an expose event, it must send synthetic
expose events to all children that don't have their own <link linkend="GdkWindows">GdkWindows</link>.
This function provides a convenient way of doing this. A container,
when it receives an expose event, calls <link linkend="gtk-container-propagate-expose">gtk_container_propagate_expose</link>() 
once for each child, passing in the event the container received.
</para>
<para>
<link linkend="gtk-container-propagate-expose">gtk_container_propagate_expose</link>() takes care of deciding whether
an expose event needs to be sent to the child, intersecting
the event's area with the child area, and sending the event.
</para>
<para>
In most cases, a container can simply either simply inherit the
::expose implementation from <link linkend="GtkContainer">GtkContainer</link>, or, do some drawing 
and then chain to the ::expose implementation from <link linkend="GtkContainer">GtkContainer</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> a child of <parameter>container</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a expose event sent to container
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-get-focus-chain"/>gtk_container_get_focus_chain ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gtk_container_get_focus_chain   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GList">GList</link> **focusable_widgets);</programlisting>
<para>
Retrieves the focus chain of the container, if one has been
set explicitly. If no focus chain has been explicitly
set, GTK+ computes the focus chain based on the positions
of the children. In that case, GTK+ stores <literal>NULL</literal> in
<parameter>focusable_widgets</parameter> and returns <literal>FALSE</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>         a <link linkend="GtkContainer">GtkContainer</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>focusable_widgets</parameter>&nbsp;:</term>
<listitem><simpara> location to store the focus chain of the
                    container, or <literal>NULL</literal>. You should free this list
                    using <link linkend="g-list-free">g_list_free</link>() when you are done with it, however
                    no additional reference count is added to the
                    individual widgets in the focus chain.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the focus chain of the container 
has been set explicitly.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-set-focus-chain"/>gtk_container_set_focus_chain ()</title>
<programlisting>void        gtk_container_set_focus_chain   (<link linkend="GtkContainer">GtkContainer</link> *container,
                                             <link linkend="GList">GList</link> *focusable_widgets);</programlisting>
<para>
Sets a focus chain, overriding the one computed automatically by GTK+.
</para>
<para>
In principle each widget in the chain should be a descendant of the 
container, but this is not enforced by this method, since it's allowed 
to set the focus chain before you pack the widgets, or have a widget 
in the chain that isn't always packed. The necessary checks are done 
when the focus chain is actually traversed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>focusable_widgets</parameter>&nbsp;:</term>
<listitem><simpara> the new focus chain.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-unset-focus-chain"/>gtk_container_unset_focus_chain ()</title>
<programlisting>void        gtk_container_unset_focus_chain (<link linkend="GtkContainer">GtkContainer</link> *container);</programlisting>
<para>
Removes a focus chain explicitly set with <link linkend="gtk-container-set-focus-chain">gtk_container_set_focus_chain</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainer">GtkContainer</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-class-find-child-property"/>gtk_container_class_find_child_property ()</title>
<programlisting><link linkend="GParamSpec">GParamSpec</link>* gtk_container_class_find_child_property
                                            (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                             const <link linkend="gchar">gchar</link> *property_name);</programlisting>
<para>
Finds a child property of a container class by name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cclass</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainerClass">GtkContainerClass</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the child property to find
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the <link linkend="GParamSpec">GParamSpec</link> of the child property or <literal>NULL</literal> if <parameter>class</parameter> has no
  child property with that name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-class-install-child-property"/>gtk_container_class_install_child_property ()</title>
<programlisting>void        gtk_container_class_install_child_property
                                            (<link linkend="GtkContainerClass">GtkContainerClass</link> *cclass,
                                             <link linkend="guint">guint</link> property_id,
                                             <link linkend="GParamSpec">GParamSpec</link> *pspec);</programlisting>
<para>
Installs a child property on a container class.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cclass</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainerClass">GtkContainerClass</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_id</parameter>&nbsp;:</term>
<listitem><simpara> the id for the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GParamSpec">GParamSpec</link> for the property
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-container-class-list-child-properties"/>gtk_container_class_list_child_properties ()</title>
<programlisting><link linkend="GParamSpec">GParamSpec</link>** gtk_container_class_list_child_properties
                                            (<link linkend="GObjectClass">GObjectClass</link> *cclass,
                                             <link linkend="guint">guint</link> *n_properties);</programlisting>
<para>
Returns all child properties of a container class.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cclass</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkContainerClass">GtkContainerClass</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_properties</parameter>&nbsp;:</term>
<listitem><simpara> location to return the number of child properties found
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated array of <link linkend="GParamSpec">GParamSpec</link>*. The array must be 
          freed with <link linkend="g-free">g_free</link>().
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1>
<title>Properties</title>
<variablelist>
<varlistentry><term><anchor id="GtkContainer--border-width"/>&quot;<literal>border-width</literal>&quot; (<link linkend="guint">guint</link> : Read / Write)</term>
<listitem>
<para>

</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkContainer--child"/>&quot;<literal>child</literal>&quot; (<link linkend="GtkWidget">GtkWidget</link> : Write)</term>
<listitem>
<para>

</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkContainer--resize-mode"/>&quot;<literal>resize-mode</literal>&quot; (<link linkend="GtkResizeMode">GtkResizeMode</link> : Read / Write)</term>
<listitem>
<para>

</para>
</listitem></varlistentry>

</variablelist>
</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="GtkContainer-add"/>The &quot;add&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="GtkWidget">GtkWidget</link> *widget,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkContainer-check-resize"/>The &quot;check-resize&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkContainer-remove"/>The &quot;remove&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="GtkWidget">GtkWidget</link> *widget,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkContainer-set-focus-child"/>The &quot;set-focus-child&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GtkContainer">GtkContainer</link> *container,
                                            <link linkend="GtkWidget">GtkWidget</link> *widget,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
