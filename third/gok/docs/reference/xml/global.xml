<refentry id="gok-global">
<refmeta>
<refentrytitle>global</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GOK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>global</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="EMPTY-STRING:CAPS">EMPTY_STRING</link>
<link linkend="Boolean">Boolean</link>     <link linkend="string-equals">string_equals</link>                   (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);
<link linkend="Boolean">Boolean</link>     <link linkend="string-not-equals">string_not_equals</link>               (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);
<link linkend="Boolean">Boolean</link>     <link linkend="string-empty">string_empty</link>                    (const <link linkend="char">char</link> *string_1);
<link linkend="Boolean">Boolean</link>     <link linkend="string-starts-with">string_starts_with</link>              (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);
<link linkend="Boolean">Boolean</link>     <link linkend="string-ends-with">string_ends_with</link>                (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);
<link linkend="void">void</link>        <link linkend="string-trim">string_trim</link>                     (<link linkend="char">char</link> *string_1);
<link linkend="void">void</link>*       <link linkend="checked-malloc">checked_malloc</link>                  (const <link linkend="size-t">size_t</link> size);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="EMPTY-STRING:CAPS"/>EMPTY_STRING</title>
<indexterm><primary>EMPTY_STRING</primary></indexterm><programlisting>#define EMPTY_STRING ""
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="string-equals"/>string_equals ()</title>
<indexterm><primary>string_equals</primary></indexterm><programlisting><link linkend="Boolean">Boolean</link>     string_equals                   (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string_2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="string-not-equals"/>string_not_equals ()</title>
<indexterm><primary>string_not_equals</primary></indexterm><programlisting><link linkend="Boolean">Boolean</link>     string_not_equals               (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string_2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="string-empty"/>string_empty ()</title>
<indexterm><primary>string_empty</primary></indexterm><programlisting><link linkend="Boolean">Boolean</link>     string_empty                    (const <link linkend="char">char</link> *string_1);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="string-starts-with"/>string_starts_with ()</title>
<indexterm><primary>string_starts_with</primary></indexterm><programlisting><link linkend="Boolean">Boolean</link>     string_starts_with              (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string_2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="string-ends-with"/>string_ends_with ()</title>
<indexterm><primary>string_ends_with</primary></indexterm><programlisting><link linkend="Boolean">Boolean</link>     string_ends_with                (const <link linkend="char">char</link> *string_1,
                                             const <link linkend="char">char</link> *string_2);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string_1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string_2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="string-trim"/>string_trim ()</title>
<indexterm><primary>string_trim</primary></indexterm><programlisting><link linkend="void">void</link>        string_trim                     (<link linkend="char">char</link> *string_1);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string_1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="checked-malloc"/>checked_malloc ()</title>
<indexterm><primary>checked_malloc</primary></indexterm><programlisting><link linkend="void">void</link>*       checked_malloc                  (const <link linkend="size-t">size_t</link> size);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
