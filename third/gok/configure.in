AC_INIT(ChangeLog)

GOK_MAJOR_VERSION=0
GOK_MINOR_VERSION=11
GOK_MICRO_VERSION=17
GOK_INTERFACE_AGE=10
GOK_BINARY_AGE=11

GOK_VERSION="$GOK_MAJOR_VERSION.$GOK_MINOR_VERSION.$GOK_MICRO_VERSION"
AM_INIT_AUTOMAKE(gok, $GOK_VERSION)
AC_SUBST(GOK_MAJOR_VERSION)
AC_SUBST(GOK_MINOR_VERSION)
AC_SUBST(GOK_MICRO_VERSION)
AC_SUBST(GOK_INTERFACE_AGE)
AC_SUBST(GOK_BINARY_AGE)

# libtool versioning
LT_RELEASE=$GOK_MAJOR_VERSION.$GOK_MINOR_VERSION
LT_CURRENT=`expr $GOK_MICRO_VERSION - $GOK_INTERFACE_AGE`
LT_REVISION=20
LT_AGE=`expr $GOK_BINARY_AGE - $GOK_INTERFACE_AGE`
LT_VERSION_INFO='-version-info ${LT_CURRENT}:${LT_REVISION}:${LT_AGE}'
AC_SUBST(LT_VERSION_INFO)
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Specify a header configuration file
AM_CONFIG_HEADER(config.h)

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

AC_PROG_INTLTOOL([0.27.3])

dnl Checks for programs
AC_PROG_CC
AC_PROG_INSTALL
AC_ISC_POSIX

GNOME_COMMON_INIT
GNOME_COMPILE_WARNINGS(maximum)

dnl Initialize libtool
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

dnl internationalization support
GETTEXT_PACKAGE=gok
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [GETTEXT_PACKAGE])
ALL_LINGUAS="am ar az be bg bn ca cs cy da de el en_CA en_GB es fi fr ga gu hi hr hu id it ja ko lt mk ml mn ms nb nl no pa pl pt pt_BR sl sq sr sr@Latn sv ta uk vi zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT

dnl Check for X libs
AC_PATH_XTRA

have_xinput=
AC_CHECK_LIB(Xi, XOpenDevice, XINPUT_LIBS=-lXi)
if test "x$XINPUT_LIBS" = x; then
  save_LIBS="$LIBS"
  for xinputpath in $x_libraries /usr/X11R6/lib /usr/openwin/lib; do
    LIBS="-L$xinputpath -lXi"
    case "$host" in
    *solaris*) XINPUT_RPATH_FLAGS="-R$xinputpath" ;;
    esac
    AC_MSG_CHECKING(for -lXi in $xinputpath)
    AC_TRY_LINK([], [XOpenDisplay()], [
	AC_MSG_RESULT(yes)
	XINPUT_LIBS="$XINPUT_RPATH_FLAGS -L$xinputpath -lXi"
        LIBS="$save_LIBS"
	break],[AC_MSG_RESULT(no)])
  done
  if test "x$XINPUT_LIBS" = x; then
    AC_MSG_ERROR(Couldn't find the XInput library. Check config.log for details)
  fi			       
fi
AC_CHECK_HEADER(X11/extensions/XInput.h, have_xinput=yes)
if test "x$have_xinput" = xyes; then
   AC_DEFINE(HAVE_XINPUT)
fi

AC_SUBST(XINPUT_LIBS)

if test x$no_x = xyes ; then
  AC_MSG_ERROR([X development libraries not found])
else
  X_LIBS="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS $XINPUT_LIBS"
fi

AC_SUBST(X_LIBS)

dnl Check for ISO C99 variadic macros
AC_MSG_CHECKING(for ISO C99 variadic macros)
AC_TRY_COMPILE([],[
void foo (int i, ...);
#define bar(...) foo (__VA_ARGS__)
void baz () { bar (0, 1); }
],
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_ISO_C99_VARIADIC, 1, [have ISO C99 variadic macros]),
AC_MSG_RESULT(no))

dnl Check for GNU variadic macros
AC_MSG_CHECKING(for GNU variadic macros)
AC_TRY_COMPILE([],[
void foo (int i, ...);
#define bar(args...) foo (args)
void baz () { bar (0, 1); }
],
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_GNU_VARIADIC, 1, [have GNU variadic macros]),
AC_MSG_RESULT(no))

dnl Check for __func__
AC_MSG_CHECKING(for __func__)
AC_TRY_COMPILE([],[
void foo (const char* s) { }
void bar () { foo(__func__); }
],
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_FUNC, 1, [have __func__]),
AC_MSG_RESULT(no))

dnl ====================================
dnl = Begin tests for scrollkeeper
dnl ====================================
AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config,no)
if test x$SCROLLKEEPER_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find scrollkeeper-config, please install the scrollkeepe
r package)
fi
dnl ====================================
dnl = End tests for scrollkeeper
dnl ====================================

GTK_DOC_CHECK([1.0])

dnl Checks for libraries
PKG_CHECK_MODULES(GOK, \
	libgnomeui-2.0 >= 2.0.0 \
	cspi-1.0 >= 1.5.0    \
	libspi-1.0 >= 1.5.0  \
	libloginhelper-1.0 >= 1.5.2 \
	libbonobo-2.0 >= 2.5.1  \
	atk >= 1.3.0            \
	gtk+-2.0 >= 2.3.1       \
	gail                    \
	libwnck-1.0             \
	gnome-speech-1.0        \
	esound			\
	libglade-2.0)
AC_SUBST(GOK_LIBS)
AC_SUBST(GOK_CFLAGS)

AC_DEFINE(CSPI_1_5, 1, [define if cspi version >= 1.5.0])

dnl Enable logging of normal behaviour?
AC_ARG_ENABLE(logging-normal,
[  --enable-logging-normal  enable logging of normal behaviour default=no],
AC_DEFINE(ENABLE_LOGGING_NORMAL, 1, [enable logging of normal behaviour]))

dnl Enable logging of exceptional behaviour?
AC_ARG_ENABLE(logging-exceptional,
[  --enable-logging-exceptional  enable logging of]
[                                exceptional behaviour default=no],
AC_DEFINE(ENABLE_LOGGING_EXCEPTIONAL, 1,
[enable logging of exceptional behaviour]))

AM_GCONF_SOURCE_2

dnl orbit-idl.
ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

dnl Bonobo and Bonobo-Activation idl files
BONOBO_ACTIVATION_IDL_DIR="`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
LIBBONOBO_IDL_DIR="`$PKG_CONFIG --variable=idldir libbonobo-2.0`"
AC_SUBST(BONOBO_ACTIVATION_IDL_DIR)
AC_SUBST(LIBBONOBO_IDL_DIR)

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

AC_OUTPUT([
Makefile
gok-1.0.pc
gok/Makefile
docs/Makefile
docs/reference/Makefile
po/Makefile.in
help/Makefile
help/gok/Makefile
help/gok/C/Makefile
omf-install/Makefile
samples/Makefile
])
