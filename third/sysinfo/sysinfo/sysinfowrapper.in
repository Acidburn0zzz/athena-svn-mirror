#! /bin/sh

#
# Copyright (c) 1992-2000 MagniComp 
# This software may only be used in accordance with the license which is 
# available as http://www.magnicomp.com/sysinfo/4.0/sysinfo-eu-license.shtml
#

#
# $Revision: 1.1.1.1 $
#
# This is the frontend command to SysInfo.  SysInfo generally can only
# be run on the OS Version it was compiled on or a specific minimum and/or
# maximum version.  
#
# This wrapper script figures out what platform it's being run on, performs
# runtime checks and if everything looks ok, runs the real sysinfo 
# binary.  All the real sysinfo binaries should exist in LIBEXECDIR.
#

Args="$@"
Debug=0
MyLibcName=""
MyLibcVer=""

#
# @*@ are filled in by configure
# The tests are done to allow these variables to be set in 
# environment of the caller.
#
# NOTE: These variables match what's in "setup"
#
if [ -z "$prefix" ]; then
    prefix=@prefix@
fi
if [ -z "$cfdir" ]; then
    cfdir=@cfdir@
fi
if [ -z "$exec_prefix" ]; then
    exec_prefix=@exec_prefix@
fi
if [ -z "$DEFAULT_LIBEXECDIR" ]; then
    DEFAULT_LIBEXECDIR=@libexecdir@
fi

#
# Look for options we use ourself.
#
DisplayRTPlatform=0
while test $# -ge 1; do
    case "$1" in
	-cfdir|-configdir)
	    shift;
	    cfdir=$1;
	    ;;
	-debug)
	    Debug=1;
	    ;;
	-debugwrapper)
	    DebugWrapper=1;
	    ;;
	-RTPLATFORM)
	    # Used only for testing
	    DisplayRTPlatform=1;
	    ;;
    esac
    shift;
done

#
# LIBEXECDIR is where all the real executables live
#
if [ ! -z "${SYSINFOLIBEXECDIR}" ]; then
    LIBEXECDIR="${SYSINFOLIBEXECDIR}"
else
    LIBEXECDIR="${DEFAULT_LIBEXECDIR}"
fi

#
# Make sure we have a consistant execution path
#
PATH=/bin:/usr/bin:/usr/ucb:/sbin
export PATH

Program=`basename $0`
RealProgram=sysinfo

#
# Find uname program.
#
if [ -f /usr/bin/uname ]; then
	unameprog=/usr/bin/uname
elif [ -f /bin/uname ]; then
	unameprog=/bin/uname
fi

#
# Determine our OS name if we can.
#
if [ "${unameprog}" ]; then
	osname="`${unameprog} -s`"
fi

#
# Check for Convex SPP special handling
#
if [ "${osname}" = "HP-UX" ]; then
	if [ -x /bin/sysinfo ]; then
		altname="`/bin/sysinfo -sv | awk '{print $1}' | sed -e 's;_.*;;' 2>/dev/null`"
		if [ ! -z "${altname}" ]; then
			osname="${altname}"
		fi
	fi
fi

#
# Try stupid file checks
#
if [ -z "${osname}" ]; then
	if [ -d /NextApps ]; then
		if [ -f /usr/bin/hostinfo ]; then
			mver="`/usr/bin/hostinfo | grep -i 'next mach' | awk '{print $3}' | sed -e 's/\..*//'`"
			osname="nextstep${mver}"
		else
			osname="nextstep2"
		fi
	elif [ -d /usr/alliant ]; then
		osname="concentrix"
	else
		echo "Unable to determine your OS type.";
		exit 1;
	fi
fi

osname="`echo ${osname} | tr '[A-Z]' '[a-z]' | sed -e 's;[/-];;g'`"

#
# Get OS Version
#
case "${osname}" in
sunos)
	if [ -z "${unameprog}" ]; then
		echo "No uname program found."
		exit 1
	fi
	osver="`${unameprog} -r`"
	;;
aix)
	osver="`${unameprog} -v`"
	if [ "$osver" -eq "4" ]; then
	    aixosm="`${unameprog} -r`"
	    osver=${osver}.${aixosm}
	fi
	;;
hpux)
	osver="`${unameprog} -r| sed -e 's;^[A-Za-z]\.;;' -e 's;^[0];;'`"
	;;
linux)
	osver="`${unameprog} -r| awk -F. '{printf("%s.%s\n", $1, $2);}'`"
	;;
sppux)
	osver="`/bin/sysinfo -sv | awk '{print $2}'`"
	;;
concentrix)
	# We don't care what the os version is
	osver=""
	;;
*)
    	# Default is uname -r
	if [ -z "${unameprog}" ]; then
		echo "No uname program found."
		exit 1
	fi
	osver="`${unameprog} -r`"
	;;
esac

if [ ! -z "${osver}" ]; then
	osmver=`echo $osver | sed -e 's;\..*;;g'`
fi

#
# Get Application Architecture
#
case "${osname}" in
aix)
    # Hard code since we don't know how else to get this
    apparch="powerpc"
    ;;
hpux)
    # Hard code since we don't know how else to get this
    apparch="`${unameprog} -m | sed -e 's;/.*;;' -e 's;9000;parisc;'`"
    ;;
linux)
    apparch="`${unameprog} -m`"
    ;;
sunos)
    if [ "${osmver}" -eq "4" ]; then
	apparch="`/bin/mach`"
    else
	apparch="`${unameprog} -p`"
    fi
    ;;
irix*)
    apparch="`${unameprog} -p`"
    ;;
*)
    apparch="`${unameprog} -m`"
    ;;
esac

#
# Get CPU Architecture
#
case "${osname}" in
sunos)
    if [ "${osmver}" = "5" ]; then
	if [ -x /bin/isainfo ]; then
	    cpuarch="`/bin/isainfo -k`"
	else
	    cpuarch="`${unameprog} -p`"
	fi
    else
	cpuarch="`${unameprog} -m`"
    fi
    ;;
*)
    # Doesn't matter on other platforms
    cpuarch=${apparch}
    ;;
esac

RuntimeCF=$cfdir/${osname}.rcf
if [ ! -f $RuntimeCF ]; then
    echo "${Program}: ${RuntimeCF}: Runtime configuration file is missing." >&2
    exit 1
fi

#
# Source runtime config file
#
# The following variables are supported by the .rcf file:
#
#	MinOsVer="X.X"		Minumum OS Version
#	MaxOsVer="X.X"		Max OS Version
#	LibcName="NAME"		Name of required libc
#	MinLibcVer="X.X"	Minumum Libc version
#	RequireEachOsVer=1	Require seperate bin for each OS version
#	RequireEachKarch=1	Require seperate bin for each kernel arch
#
RequireEachOsVer=0
RequireEachKarch=0
. $RuntimeCF

# Default platform
Platform=${osname}-${osmver}-${apparch}

if [ $RequireEachOsVer -gt 0 ]; then
    if [ $RequireEachKarch -gt 0 ]; then
	Platform=${osname}-${osver}-${cpuarch}
    else
	Platform=${osname}-${osver}-${apparch}
    fi
fi

if [ $Debug -gt 0 ]; then
    echo Platform is $Platform
fi

CurOsVerNum=`echo $osver | tr . / | \
    awk -F/ '{printf("%2.2d%2.2d%2.2d", $1, $2, $3);}'`

if [ ! -z "$MinOsVer" ]; then
    MinOsVerNum=`echo $MinOsVer | tr . / | \
		awk -F/ '{printf("%2.2d%2.2d%2.2d", $1, $2, $3);}'`
    if [ $CurOsVerNum -lt $MinOsVerNum ]; then
	echo "${Program}: The minimum supported OS version is $MinOsVer and this system is running ${osver}." 2>&1
	exit 1
    fi
fi
if [ ! -z "$MaxOsVer" ]; then
    MaxOsVerNum=`echo $MaxOsVer | tr . / | \
		awk -F/ '{printf("%2.2d%2.2d%2.2d", $1, $2, $3);}'`
    if [ $CurOsVerNum -lt $MaxOsVerNum ]; then
	echo "${Program}: The latest supported OS version is $MaxOsVer and this system is running ${osver}." 2>&1
	exit 1
    fi
fi
#
# Check libc version.  Usually only done on Linux
#
if [ ! -z "$MinLibcVer" -o ! -z "$LibcName" ]; then
    case "$osname" in
	linux)
	    Libc=`ldd /bin/sh | grep libc.so | awk '{print $3}'`
	    LibcVerStr=`strings $Libc | grep -i 'c library'`
	    MyLibcVer=`echo $LibcVerStr | awk '{print $7}' | sed -e 's;,;;'`
	    if echo $LibcVerStr | grep GNU >/dev/null ; then
		MyLibcName="glibc"
	    else
		MyLibcName="libc"
	    fi
	    ;;
    esac
fi

if [ ! -z "$LibcName" ]; then
    if [ -z "$MyLibcName" ]; then
	echo "${Program}: Cannot determine the libc name for this system."
	exit 1
    fi

    if [ $Debug -gt 0 ]; then
	echo "Libc name is $MyLibcName"
    fi

    if [ "$LibcName" != "$MyLibcName" ]; then
	echo "${Program}: This software requires that the libc called \"$LibcName\" and this system has ${MyLibcName}" 2>&1
	exit 1
    fi
fi

if [ ! -z "$MinLibcVer" ]; then
    if [ -z "$MyLibcVer" ]; then
	echo "${Program}: Cannot determine the libc version for this system."
	exit 1
    fi

    if [ $Debug -gt 0 ]; then
	echo "Libc version is $MyLibcVer"
    fi

    MinLibcVerNum=`echo $MinLibcVer | tr . / | \
		awk -F/ '{printf("%d%d", $1, $2);}'`
    MyLibcVerNum=`echo $MyLibcVer | tr . / | \
		awk -F/ '{printf("%d%d", $1, $2);}'`
    if [ $MyLibcVerNum -lt $MinLibcVerNum ]; then
	echo "${Program}: The minimum supported libc is $MinLibcVer and this system has ${MyLibcVer}" 2>&1
	exit 1
    fi
fi

PlatDir=${LIBEXECDIR}/platform/${Platform}
Bin=${PlatDir}/${RealProgram}

if [ $DisplayRTPlatform -gt 0 ]; then
    echo $Platform
    exit 0
fi

#
# This variable disables sysinfo's runtime platform check.
#
SYSINFO_NO_RUNTIME_PLATFORM=1
export SYSINFO_NO_RUNTIME_PLATFORM

if [ ! -f $Bin ]; then
    echo "${Program}: There is no executable for your platform (${Platform}) in ${PlatDir}" >&2
else
    if [ $DebugWrapper ]; then
	echo $Bin $Args
    else
	exec $Bin $Args
    fi
fi
