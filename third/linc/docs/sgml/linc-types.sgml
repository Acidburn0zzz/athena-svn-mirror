<refentry id="linc-linc-types">
<refmeta>
<refentrytitle>linc-types</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LINC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>linc-types</refname><refpurpose>the base linc types and utilities</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="LINCConnectionOptions">LINCConnectionOptions</link>;
struct      <link linkend="LincWatch">LincWatch</link>;
struct      <link linkend="LINCProtocolInfo">LINCProtocolInfo</link>;
#define     <link linkend="LINC-MUTEX-LOCK-CAPS">LINC_MUTEX_LOCK</link>                 (x)
#define     <link linkend="LINC-MUTEX-UNLOCK-CAPS">LINC_MUTEX_UNLOCK</link>               (x)
<link linkend="GMutex">GMutex</link>*     <link linkend="linc-mutex-new">linc_mutex_new</link>                  (void);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="LINCConnectionOptions">enum LINCConnectionOptions</title>
<programlisting>typedef enum {
	LINC_CONNECTION_SSL          = 1 &lt;&lt; 0,
	LINC_CONNECTION_NONBLOCKING  = 1 &lt;&lt; 1,
	LINC_CONNECTION_BLOCK_SIGNAL = 1 &lt;&lt; 2,
	LINC_CONNECTION_LOCAL_ONLY   = 1 &lt;&lt; 3
} LINCConnectionOptions;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="LincWatch">struct LincWatch</title>
<programlisting>struct LincWatch;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="LINCProtocolInfo">struct LINCProtocolInfo</title>
<programlisting>struct LINCProtocolInfo {
	const char                 *name;
	int                         family;
	int                         addr_len;
	int                         stream_proto_num;
	LINCProtocolFlags           flags;

	LINCProtocolSetupFunc       setup;
	LINCProtocolDestroyFunc     destroy;
	LINCProtocolGetSockAddrFunc get_sockaddr;
	LINCProtocolGetSockInfoFunc get_sockinfo;
	LINCProtocolIsLocal         is_local;
	/* This structure is private and may be extended in future */
	gpointer                    dummy[8];
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="LINC-MUTEX-LOCK-CAPS">LINC_MUTEX_LOCK()</title>
<programlisting>#define     LINC_MUTEX_LOCK(x)</programlisting>
<para>
Locks the mutex pointed to by <parameter>x</parameter> if the mutex is non NULL.
A NULL condition signals that there is no need to do locking.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>a pointer to a GMutex.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="LINC-MUTEX-UNLOCK-CAPS">LINC_MUTEX_UNLOCK()</title>
<programlisting>#define     LINC_MUTEX_UNLOCK(x)</programlisting>
<para>
Unlocks the mutex pointed to by <parameter>x</parameter> if the mutex is non NULL.
A NULL condition signals that there is no need to do locking.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>a pointer to a GMutex.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="linc-mutex-new">linc_mutex_new ()</title>
<programlisting><link linkend="GMutex">GMutex</link>*     linc_mutex_new                  (void);</programlisting>
<para>
Creates a mutes, iff threads are supported, initialized and
linc_set_threaded has been called.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new GMutex, or NULL if one is not required.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
