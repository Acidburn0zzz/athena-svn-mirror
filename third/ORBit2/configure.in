dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure.in)

AC_PREREQ(2.12) # required version of autoconf

# Before making a release, the LT_VERSION string should be modified.
# The string is of the form C:R:A.
# - If interfaces have been changed or added, but binary compatibility has
#   been preserved, change to C+1:0:A+1
# - If binary compatibility has been broken (eg removed or changed interfaces)
#   change to C+1:0:0
# - If the interface is the same as the previous version, change to C:R+1:A

LT_VERSION=0:0:0
AC_SUBST(LT_VERSION)

ORBIT_MAJOR_VERSION=2
ORBIT_MINOR_VERSION=6
ORBIT_MICRO_VERSION=0
ORBIT_VERSION=$ORBIT_MAJOR_VERSION.$ORBIT_MINOR_VERSION.$ORBIT_MICRO_VERSION
AC_SUBST(ORBIT_MAJOR_VERSION)
AC_SUBST(ORBIT_MINOR_VERSION)
AC_SUBST(ORBIT_MICRO_VERSION)
AC_SUBST(ORBIT_VERSION)

# Increment this every time a feature is added in the .idl compiler
# that needs help from the main libraries.
ORBIT_SERIAL=19
AC_SUBST(ORBIT_SERIAL)

# For automake.

AM_CONFIG_HEADER(config.h)

dnl Initialize automake stuff
AM_INIT_AUTOMAKE(ORBit2, $ORBIT_VERSION, no-define)

AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
AM_MAINTAINER_MODE

dnl Useful for automating stuff
AC_CACHE_CHECK([for aclocal flags], ac_cv_orbit_aclocal_flags,[
   ac_cv_orbit_aclocal_flags="$ACLOCAL_FLAGS"
])
ACLOCAL="$ACLOCAL $ac_cv_orbit_aclocal_flags"

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

dnl --enable-comile-warnings
AC_ARG_ENABLE(compile-warnings, [  --enable-compile-warnings=[no/yes] Turn on compiler warnings.], [enable_compile_warnings="$enableval"],[enable_compile_warnings="yes"])

dnl --enable-debug=(yes|minimum|no)
AC_ARG_ENABLE(debug, [  --enable-debug=[no/yes] turn on debugging [default=no]],,enable_debug=minimum)
if test "$enable_debug" = "yes"; then
  ORBIT_DEBUG_CFLAGS="-DG_ENABLE_DEBUG"
else
  if test "x$enable_debug" = "xno"; then
    ORBIT_DEBUG_CFLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
  else
    ORBIT_DEBUG_CFLAGS=""
  fi
fi
AC_SUBST(ORBIT_DEBUG_CFLAGS)

dnl Handle indent variations 
dnl default is "sopwith indent", use "--enable-indent=kr" for "kr"appy indent.
AC_ARG_ENABLE(indent, [  --disable-indent        do not indent output code], use_indent=$enableval, use_indent=yes)

AC_MSG_CHECKING([for indentation command to pipe generated c-files through])
for test_indent in "$use_indent" "indent -" cat; do
  case "$test_indent" in
    yes)
      INDENT_COMMAND="indent -npro -bad -bap -bc -sob -br -ce -cli2 -npcs -di1 -psl -i3 -lp -st"
      ;;
    no)
      INDENT_COMMAND=cat
      ;;
    kr)
      INDENT_COMMAND="indent -npro -kr -i8 -bad -fca -sc -sob -psl"
      ;;
    *)
      INDENT_COMMAND="$test_indent"
  esac

  if echo 2>/dev/null | $INDENT_COMMAND 2>/dev/null 1>&2 ; then
    break
  fi
done
AC_MSG_RESULT($INDENT_COMMAND)
AC_DEFINE_UNQUOTED(INDENT_COMMAND,"$INDENT_COMMAND",
                   [command used for indentation])


AC_ARG_ENABLE(purify, [  --enable-purify        be clean for memory debuggers], enable_purify=yes, enable_purify=no)
if test z$enable_purify = zyes; then
	AC_DEFINE(ORBIT_PURIFY, 1, [defined if purify is enabled])
fi

AC_PROG_AWK

GLIB_REQUIRED=2.0.0
LINC_REQUIRED=1.0.0
LIBIDL_REQUIRED=0.7.4
AC_SUBST(GLIB_REQUIRED)
AC_SUBST(LINC_REQUIRED)
AC_SUBST(LIBIDL_REQUIRED)

dnl Check for pkg-config version; want >= 0.14.0 because of -pthread bug
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "$PKG_CONFIG" = "no" ; then
     echo "*** The pkg-config script could not be found. Make sure it is"
     echo "*** in your path, or set the PKG_CONFIG environment variable"
     echo "*** to the full path to pkg-config."
     echo "*** Or see http://www.freedesktop.org/software/pkgconfig to get pkg-config."
fi
PKG_CONFIG_MIN_VERSION=0.14.0
if ! $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
  AC_MSG_ERROR(You need at least version $PKG_CONFIG_MIN_VERSION of pkg-config)
fi

dnl Checks for libraries.
PKG_CHECK_MODULES(ORBIT, \
	linc >= $LINC_REQUIRED \
	glib-2.0 >= $GLIB_REQUIRED \
	gobject-2.0 >= $GLIB_REQUIRED \
	gmodule-2.0 >= $GLIB_REQUIRED)
AC_SUBST(ORBIT_LIBS)
AC_SUBST(ORBIT_CFLAGS)

PKG_CHECK_MODULES(ORBIT_IDL, \
	libIDL-2.0 >= $LIBIDL_REQUIRED \
	glib-2.0 >= $GLIB_REQUIRED \
	gobject-2.0 >= $GLIB_REQUIRED \
	gmodule-2.0 >= $GLIB_REQUIRED)
AC_SUBST(ORBIT_IDL_LIBS)
AC_SUBST(ORBIT_IDL_CFLAGS)

PKG_CHECK_MODULES(ORBIT_NAME, \
	libIDL-2.0 >= $LIBIDL_REQUIRED \
	linc >= $LINC_REQUIRED \
	glib-2.0 >= $GLIB_REQUIRED)
AC_SUBST(ORBIT_NAME_LIBS)
AC_SUBST(ORBIT_NAME_CFLAGS)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h unistd.h sys/endian.h endian.h machine/endian.h sys/machine.h sys/isa_defs.h sys/poll.h)
AC_CHECK_HEADERS(stddef.h wchar.h wcstr.h wctype.h machine/types.h)
AC_CHECK_HEADERS(netinet/in.h sys/un.h linux/irda.h openssl/ssl.h)

if test $ac_cv_header_openssl_ssl_h = yes; then
	HAVE_ORBIT_SSL_SUPPORT=1
fi
AC_SUBST(HAVE_ORBIT_SSL_SUPPORT)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_VPRINTF

AC_CHECK_FUNC(socket,,[AC_CHECK_LIB(socket,socket)])
AC_CHECK_FUNC(gethostbyname,,[AC_CHECK_LIB(nsl,gethostbyname)])

AC_CHECK_LIB(popt, poptStrippedArgv, POPT_LIBS=-lpopt, AC_MSG_ERROR([You must have popt version 1.5 or greater installed.]))
AC_SUBST(POPT_LIBS)
AC_CHECK_HEADER(popt.h,,AC_MSG_ERROR([Failed to find popt.h - you may have to adjust your environment]))

dnl This generates warnings from autoconf...
AC_C_BIGENDIAN


dnl
dnl   So many people with broken linking setups asked about this
dnl it turned out to be necessary to check for this.
dnl
dofus_save_libs="$LIBS"
LIBS="$ORBIT_LIBS $LIBS"
AC_TRY_RUN([ #include <stdio.h>
             main ()
             {
               return 0;
             } ],,
           AC_MSG_ERROR(Linking is badly borked on your system. Please ensure your library path is correct \
	                Check config.log for details - check near the end of the log above 'failed program was'))
LIBS="$dofus_save_libs"

orig_CPPFLAGS=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $ORBIT_CFLAGS"
AC_CHECK_ALIGNOF(CORBA_octet)
AC_CHECK_ALIGNOF(CORBA_boolean)
AC_CHECK_ALIGNOF(CORBA_char)
AC_CHECK_ALIGNOF(CORBA_wchar)
AC_CHECK_ALIGNOF(CORBA_short)
AC_CHECK_ALIGNOF(CORBA_long)
AC_CHECK_ALIGNOF(CORBA_long_long)
AC_CHECK_ALIGNOF(CORBA_float)
AC_CHECK_ALIGNOF(CORBA_double)
AC_CHECK_ALIGNOF(CORBA_long_double)
AC_CHECK_ALIGNOF(CORBA_struct)
AC_CHECK_ALIGNOF(CORBA_pointer)
CPPFLAGS=$orig_CPPFLAGS 

if test "x$GCC" = "xyes" -a "x$enable_compile_warnings" != "xno"; then
    WARN_CFLAGS="-Wall -Wunused -Wmissing-prototypes -Wmissing-declarations"
else
    WARN_CFLAGS=
fi

AC_MSG_CHECKING(what warning flags to pass to the C compiler)
AC_MSG_RESULT($WARN_CFLAGS)
AC_SUBST(WARN_CFLAGS)

AC_SUBST(pkglibdir)

DISABLE_DEPRECATED_CFLAGS=" \
	-DG_DISABLE_DEPRECATED"
AC_SUBST(DISABLE_DEPRECATED_CFLAGS)

AC_OUTPUT([
Makefile
orbit2-config
ORBit-2.0.pc
ORBit-CosNaming-2.0.pc
ORBit.spec
src/Makefile
src/idl-compiler/Makefile
src/idl-compiler/ORBit-idl-2.0.pc
src/idl/Makefile
src/idl/CORBA/Makefile
src/idl/CORBA_PIDL/Makefile
src/idl/interop/Makefile
src/idl/misc/Makefile
src/orb/Makefile
src/orb/include/Makefile
src/orb/util/Makefile
src/orb/GIOP/Makefile
src/orb/orb-core/Makefile
src/orb/dynamic/Makefile
src/orb/poa/Makefile
src/services/Makefile
src/services/name/Makefile
src/services/imodule/Makefile
include/Makefile
include/orbit/Makefile
include/orbit/orbit-config.h
include/orbit/GIOP/Makefile
include/orbit/util/Makefile
include/orbit/orb-core/Makefile
include/orbit/poa/Makefile
include/orbit/dynamic/Makefile
test/Makefile
test/everything/Makefile
test/inhibit/Makefile
test/poa/Makefile
docs/Makefile
docs/devel/Makefile
docs/internals/Makefile
])

echo "ORBit configuration:

	Source code location:	${srcdir}
	Compiler:		${CC} 

	Purify cleanliness:	${enable_purify}
"
