<refentry id="pango-Fonts">
<refmeta>
<refentrytitle>Fonts</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PANGO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Fonts</refname><refpurpose>Structures representing abstract fonts</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<anchor id="PangoFont"/><anchor id="PangoFontFamily"/><anchor id="PangoFontFace"/><anchor id="PangoFontMap"/><anchor id="PangoFontset"/><anchor id="PangoFontsetSimple"/>
<synopsis>



struct      <link linkend="PangoFontDescription">PangoFontDescription</link>;
#define     <link linkend="PANGO-TYPE-FONT-DESCRIPTION-CAPS">PANGO_TYPE_FONT_DESCRIPTION</link>
enum        <link linkend="PangoStyle">PangoStyle</link>;
#define     <link linkend="PANGO-TYPE-STYLE-CAPS">PANGO_TYPE_STYLE</link>
enum        <link linkend="PangoWeight">PangoWeight</link>;
#define     <link linkend="PANGO-TYPE-WEIGHT-CAPS">PANGO_TYPE_WEIGHT</link>
enum        <link linkend="PangoVariant">PangoVariant</link>;
#define     <link linkend="PANGO-TYPE-VARIANT-CAPS">PANGO_TYPE_VARIANT</link>
enum        <link linkend="PangoStretch">PangoStretch</link>;
#define     <link linkend="PANGO-TYPE-STRETCH-CAPS">PANGO_TYPE_STRETCH</link>
enum        <link linkend="PangoFontMask">PangoFontMask</link>;
#define     <link linkend="PANGO-TYPE-FONT-MASK-CAPS">PANGO_TYPE_FONT_MASK</link>
<link linkend="PangoFontDescription">PangoFontDescription</link>* <link linkend="pango-font-description-new">pango_font_description_new</link>
                                            (void);
<link linkend="PangoFontDescription">PangoFontDescription</link>* <link linkend="pango-font-description-copy">pango_font_description_copy</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="PangoFontDescription">PangoFontDescription</link>* <link linkend="pango-font-description-copy-static">pango_font_description_copy_static</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="guint">guint</link>       <link linkend="pango-font-description-hash">pango_font_description_hash</link>     (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="gboolean">gboolean</link>    <link linkend="pango-font-description-equal">pango_font_description_equal</link>    (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc1,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc2);
void        <link linkend="pango-font-description-free">pango_font_description_free</link>     (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
void        <link linkend="pango-font-descriptions-free">pango_font_descriptions_free</link>    (<link linkend="PangoFontDescription">PangoFontDescription</link> **descs,
                                             int n_descs);
void        <link linkend="pango-font-description-set-family">pango_font_description_set_family</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const char *family);
void        <link linkend="pango-font-description-set-family-static">pango_font_description_set_family_static</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const char *family);
G_CONST_RETURN char* <link linkend="pango-font-description-get-family">pango_font_description_get_family</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
void        <link linkend="pango-font-description-set-style">pango_font_description_set_style</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoStyle">PangoStyle</link> style);
<link linkend="PangoStyle">PangoStyle</link>  <link linkend="pango-font-description-get-style">pango_font_description_get_style</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
void        <link linkend="pango-font-description-set-variant">pango_font_description_set_variant</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoVariant">PangoVariant</link> variant);
<link linkend="PangoVariant">PangoVariant</link> <link linkend="pango-font-description-get-variant">pango_font_description_get_variant</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
void        <link linkend="pango-font-description-set-weight">pango_font_description_set_weight</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoWeight">PangoWeight</link> weight);
<link linkend="PangoWeight">PangoWeight</link> <link linkend="pango-font-description-get-weight">pango_font_description_get_weight</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
void        <link linkend="pango-font-description-set-stretch">pango_font_description_set_stretch</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoStretch">PangoStretch</link> stretch);
<link linkend="PangoStretch">PangoStretch</link> <link linkend="pango-font-description-get-stretch">pango_font_description_get_stretch</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
void        <link linkend="pango-font-description-set-size">pango_font_description_set_size</link> (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="gint">gint</link> size);
<link linkend="gint">gint</link>        <link linkend="pango-font-description-get-size">pango_font_description_get_size</link> (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="PangoFontMask">PangoFontMask</link> <link linkend="pango-font-description-get-set-fields">pango_font_description_get_set_fields</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
void        <link linkend="pango-font-description-unset-fields">pango_font_description_unset_fields</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoFontMask">PangoFontMask</link> to_unset);
void        <link linkend="pango-font-description-merge">pango_font_description_merge</link>    (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc_to_merge,
                                             <link linkend="gboolean">gboolean</link> replace_existing);
void        <link linkend="pango-font-description-merge-static">pango_font_description_merge_static</link>
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc_to_merge,
                                             <link linkend="gboolean">gboolean</link> replace_existing);
<link linkend="gboolean">gboolean</link>    <link linkend="pango-font-description-better-match">pango_font_description_better_match</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *old_match,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *new_match);
<link linkend="PangoFontDescription">PangoFontDescription</link>* <link linkend="pango-font-description-from-string">pango_font_description_from_string</link>
                                            (const char *str);
char*       <link linkend="pango-font-description-to-string">pango_font_description_to_string</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
char*       <link linkend="pango-font-description-to-filename">pango_font_description_to_filename</link>
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);

struct      <link linkend="PangoFontMetrics">PangoFontMetrics</link>;
#define     <link linkend="PANGO-TYPE-FONT-METRICS-CAPS">PANGO_TYPE_FONT_METRICS</link>
<link linkend="PangoFontMetrics">PangoFontMetrics</link>* <link linkend="pango-font-metrics-ref">pango_font_metrics_ref</link>    (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);
void        <link linkend="pango-font-metrics-unref">pango_font_metrics_unref</link>        (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);
int         <link linkend="pango-font-metrics-get-ascent">pango_font_metrics_get_ascent</link>   (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);
int         <link linkend="pango-font-metrics-get-descent">pango_font_metrics_get_descent</link>  (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);
int         <link linkend="pango-font-metrics-get-approximate-char-width">pango_font_metrics_get_approximate_char_width</link>
                                            (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);
int         <link linkend="pango-font-metrics-get-approximate-digit-width">pango_font_metrics_get_approximate_digit_width</link>
                                            (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);

struct      <link linkend="PangoFont-struct">PangoFont</link>;
#define     <link linkend="PANGO-TYPE-FONT-CAPS">PANGO_TYPE_FONT</link>
#define     <link linkend="PANGO-FONT-CAPS">PANGO_FONT</link>                      (object)
#define     <link linkend="PANGO-IS-FONT-CAPS">PANGO_IS_FONT</link>                   (object)
<link linkend="PangoEngineShape">PangoEngineShape</link>* <link linkend="pango-font-find-shaper">pango_font_find_shaper</link>    (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="guint32">guint32</link> ch);
<link linkend="PangoFontDescription">PangoFontDescription</link>* <link linkend="pango-font-describe">pango_font_describe</link>   (<link linkend="PangoFont">PangoFont</link> *font);
<link linkend="PangoCoverage">PangoCoverage</link>* <link linkend="pango-font-get-coverage">pango_font_get_coverage</link>      (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);
void        <link linkend="pango-font-get-glyph-extents">pango_font_get_glyph_extents</link>    (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoGlyph">PangoGlyph</link> glyph,
                                             <link linkend="PangoRectangle">PangoRectangle</link> *ink_rect,
                                             <link linkend="PangoRectangle">PangoRectangle</link> *logical_rect);
<link linkend="PangoFontMetrics">PangoFontMetrics</link>* <link linkend="pango-font-get-metrics">pango_font_get_metrics</link>    (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);

struct      <link linkend="PangoFontFamily-struct">PangoFontFamily</link>;
#define     <link linkend="PANGO-TYPE-FONT-FAMILY-CAPS">PANGO_TYPE_FONT_FAMILY</link>
#define     <link linkend="PANGO-FONT-FAMILY-CAPS">PANGO_FONT_FAMILY</link>               (object)
#define     <link linkend="PANGO-IS-FONT-FAMILY-CAPS">PANGO_IS_FONT_FAMILY</link>            (object)
G_CONST_RETURN char* <link linkend="pango-font-family-get-name">pango_font_family_get_name</link>
                                            (<link linkend="PangoFontFamily">PangoFontFamily</link> *family);
void        <link linkend="pango-font-family-list-faces">pango_font_family_list_faces</link>    (<link linkend="PangoFontFamily">PangoFontFamily</link> *family,
                                             <link linkend="PangoFontFace">PangoFontFace</link> ***faces,
                                             int *n_faces);

struct      <link linkend="PangoFontFace-struct">PangoFontFace</link>;
#define     <link linkend="PANGO-TYPE-FONT-FACE-CAPS">PANGO_TYPE_FONT_FACE</link>
#define     <link linkend="PANGO-FONT-FACE-CAPS">PANGO_FONT_FACE</link>                 (object)
#define     <link linkend="PANGO-IS-FONT-FACE-CAPS">PANGO_IS_FONT_FACE</link>              (object)
G_CONST_RETURN char* <link linkend="pango-font-face-get-face-name">pango_font_face_get_face_name</link>
                                            (<link linkend="PangoFontFace">PangoFontFace</link> *face);
<link linkend="PangoFontDescription">PangoFontDescription</link>* <link linkend="pango-font-face-describe">pango_font_face_describe</link>
                                            (<link linkend="PangoFontFace">PangoFontFace</link> *face);

struct      <link linkend="PangoFontMap-struct">PangoFontMap</link>;
#define     <link linkend="PANGO-TYPE-FONT-MAP-CAPS">PANGO_TYPE_FONT_MAP</link>
#define     <link linkend="PANGO-FONT-MAP-CAPS">PANGO_FONT_MAP</link>                  (object)
#define     <link linkend="PANGO-IS-FONT-MAP-CAPS">PANGO_IS_FONT_MAP</link>               (object)
struct      <link linkend="PangoFontMapClass">PangoFontMapClass</link>;
#define     <link linkend="PANGO-FONT-MAP-CLASS-CAPS">PANGO_FONT_MAP_CLASS</link>            (klass)
#define     <link linkend="PANGO-IS-FONT-MAP-CLASS-CAPS">PANGO_IS_FONT_MAP_CLASS</link>         (klass)
#define     <link linkend="PANGO-FONT-MAP-GET-CLASS-CAPS">PANGO_FONT_MAP_GET_CLASS</link>        (obj)
<link linkend="PangoFont">PangoFont</link>*  <link linkend="pango-font-map-load-font">pango_font_map_load_font</link>        (<link linkend="PangoFontMap">PangoFontMap</link> *fontmap,
                                             <link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="PangoFontset">PangoFontset</link>* <link linkend="pango-font-map-load-fontset">pango_font_map_load_fontset</link>   (<link linkend="PangoFontMap">PangoFontMap</link> *fontmap,
                                             <link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);
void        <link linkend="pango-font-map-list-families">pango_font_map_list_families</link>    (<link linkend="PangoFontMap">PangoFontMap</link> *fontmap,
                                             <link linkend="PangoFontFamily">PangoFontFamily</link> ***families,
                                             int *n_families);

struct      <link linkend="PangoFontset-struct">PangoFontset</link>;
#define     <link linkend="PANGO-TYPE-FONTSET-CAPS">PANGO_TYPE_FONTSET</link>
struct      <link linkend="PangoFontsetClass">PangoFontsetClass</link>;
<link linkend="PangoFont">PangoFont</link>*  <link linkend="pango-fontset-get-font">pango_fontset_get_font</link>          (<link linkend="PangoFontset">PangoFontset</link> *fontset,
                                             <link linkend="guint">guint</link> wc);
<link linkend="PangoFontMetrics">PangoFontMetrics</link>* <link linkend="pango-fontset-get-metrics">pango_fontset_get_metrics</link> (<link linkend="PangoFontset">PangoFontset</link> *fontset);
struct      <link linkend="PangoFontsetSimple-struct">PangoFontsetSimple</link>;
#define     <link linkend="PANGO-TYPE-FONTSET-SIMPLE-CAPS">PANGO_TYPE_FONTSET_SIMPLE</link>
<link linkend="PangoFontsetSimple">PangoFontsetSimple</link>* <link linkend="pango-fontset-simple-new">pango_fontset_simple_new</link>
                                            (<link linkend="PangoLanguage">PangoLanguage</link> *language);
void        <link linkend="pango-fontset-simple-append">pango_fontset_simple_append</link>     (<link linkend="PangoFontsetSimple">PangoFontsetSimple</link> *fontset,
                                             <link linkend="PangoFont">PangoFont</link> *font);
int         <link linkend="pango-fontset-simple-size">pango_fontset_simple_size</link>       (<link linkend="PangoFontsetSimple">PangoFontsetSimple</link> *fontset);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----PangoFont
</synopsis>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----PangoFontFamily
</synopsis>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----PangoFontFace
</synopsis>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----PangoFontMap
</synopsis>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----PangoFontset
</synopsis>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="PangoFontset">PangoFontset</link>
         +----PangoFontsetSimple
</synopsis>

</refsect1>






<refsect1>
<title>Description</title>
<para>
Pango supports a flexible architecture where a
particular rendering architecture can supply an
implementation of fonts. The <link linkend="PangoFont">PangoFont</link> structure
represents an abstract rendering-system-indepent font.
Pango provides routines to list available fonts, and
to load a font of a given description.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="PangoFontDescription"/>struct PangoFontDescription</title>
<programlisting>struct PangoFontDescription;</programlisting>
<para>
The <link linkend="PangoFontDescription">PangoFontDescription</link> structure represents the description
of an ideal font. These structures are used both to list
what fonts are available on the system and also for specifying
the characteristics of a font to load.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONT-DESCRIPTION-CAPS"/>PANGO_TYPE_FONT_DESCRIPTION</title>
<programlisting>#define PANGO_TYPE_FONT_DESCRIPTION (pango_font_description_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontDescription">PangoFontDescription</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PangoStyle"/>enum PangoStyle</title>
<programlisting>typedef enum {
  PANGO_STYLE_NORMAL,
  PANGO_STYLE_OBLIQUE,
  PANGO_STYLE_ITALIC
} PangoStyle;
</programlisting>
<para>
An enumeration specifying the various slant styles possible for a font.</para>
<para>
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_STYLE_NORMAL</literal></term>
<listitem><simpara> the font is upright.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STYLE_OBLIQUE</literal></term>
<listitem><simpara> the font is slanted, but in a roman style.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STYLE_ITALIC</literal></term>
<listitem><simpara> the font is slanted in an italic style.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-STYLE-CAPS"/>PANGO_TYPE_STYLE</title>
<programlisting>#define PANGO_TYPE_STYLE (pango_style_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoStyle">PangoStyle</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PangoWeight"/>enum PangoWeight</title>
<programlisting>typedef enum {
  PANGO_WEIGHT_ULTRALIGHT = 200,
  PANGO_WEIGHT_LIGHT = 300,
  PANGO_WEIGHT_NORMAL = 400,
  PANGO_WEIGHT_BOLD = 700,
  PANGO_WEIGHT_ULTRABOLD = 800,
  PANGO_WEIGHT_HEAVY = 900
} PangoWeight;
</programlisting>
<para>
An enumeration specifying the weight (boldness) of a font. This is a numerical
value ranging from 100 to 900, but there are some predefined values:
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_WEIGHT_ULTRALIGHT</literal></term>
<listitem><simpara>the ultralight weight (= 200)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_WEIGHT_LIGHT</literal></term>
<listitem><simpara> the light weight (=300)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_WEIGHT_NORMAL</literal></term>
<listitem><simpara>the default weight (= 400)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_WEIGHT_BOLD</literal></term>
<listitem><simpara>the bold weight (= 700)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_WEIGHT_ULTRABOLD</literal></term>
<listitem><simpara>the ultrabold weight (= 800)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_WEIGHT_HEAVY</literal></term>
<listitem><simpara>the heavy weight (= 900)

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-WEIGHT-CAPS"/>PANGO_TYPE_WEIGHT</title>
<programlisting>#define PANGO_TYPE_WEIGHT (pango_weight_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoWeight">PangoWeight</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PangoVariant"/>enum PangoVariant</title>
<programlisting>typedef enum {
  PANGO_VARIANT_NORMAL,
  PANGO_VARIANT_SMALL_CAPS
} PangoVariant;
</programlisting>
<para>
An enumeration specifying capitalization variant of the font.
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_VARIANT_NORMAL</literal></term>
<listitem><simpara>A normal font.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_VARIANT_SMALL_CAPS</literal></term>
<listitem><simpara>A font with the lower case characters
  replaced by smaller variants of the capital characters.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-VARIANT-CAPS"/>PANGO_TYPE_VARIANT</title>
<programlisting>#define PANGO_TYPE_VARIANT (pango_variant_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoVariant">PangoVariant</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PangoStretch"/>enum PangoStretch</title>
<programlisting>typedef enum {
  PANGO_STRETCH_ULTRA_CONDENSED,
  PANGO_STRETCH_EXTRA_CONDENSED,
  PANGO_STRETCH_CONDENSED,
  PANGO_STRETCH_SEMI_CONDENSED,
  PANGO_STRETCH_NORMAL,
  PANGO_STRETCH_SEMI_EXPANDED,
  PANGO_STRETCH_EXPANDED,
  PANGO_STRETCH_EXTRA_EXPANDED,
  PANGO_STRETCH_ULTRA_EXPANDED
} PangoStretch;
</programlisting>
<para>
An enumeration specifying the width of the font relative to other designs
within a family.
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_STRETCH_ULTRA_CONDENSED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_EXTRA_CONDENSED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_CONDENSED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_SEMI_CONDENSED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_NORMAL</literal></term>
<listitem><simpara>the normal width
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_SEMI_EXPANDED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_EXPANDED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_EXTRA_EXPANDED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_STRETCH_ULTRA_EXPANDED</literal></term>
<listitem><simpara>

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-STRETCH-CAPS"/>PANGO_TYPE_STRETCH</title>
<programlisting>#define PANGO_TYPE_STRETCH (pango_stretch_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoStretch">PangoStretch</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PangoFontMask"/>enum PangoFontMask</title>
<programlisting>typedef enum {
  PANGO_FONT_MASK_FAMILY  = 1 &lt;&lt; 0,
  PANGO_FONT_MASK_STYLE   = 1 &lt;&lt; 1,
  PANGO_FONT_MASK_VARIANT = 1 &lt;&lt; 2,
  PANGO_FONT_MASK_WEIGHT  = 1 &lt;&lt; 3,
  PANGO_FONT_MASK_STRETCH = 1 &lt;&lt; 4,
  PANGO_FONT_MASK_SIZE    = 1 &lt;&lt; 5
} PangoFontMask;
</programlisting>
<para>
The bits in a <link linkend="PangoFontMask">PangoFontMask</link> correspond to fields in a  
<link linkend="PangoFontDescription">PangoFontDescription</link> that have been set.
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_FONT_MASK_FAMILY</literal></term>
<listitem><simpara>the font family is specified.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_FONT_MASK_STYLE</literal></term>
<listitem><simpara>the font style is specified.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_FONT_MASK_VARIANT</literal></term>
<listitem><simpara>the font variant is specified.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_FONT_MASK_WEIGHT</literal></term>
<listitem><simpara>the font weight is specified.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_FONT_MASK_STRETCH</literal></term>
<listitem><simpara>the font stretch is specified.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_FONT_MASK_SIZE</literal></term>
<listitem><simpara>the font size is specified.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONT-MASK-CAPS"/>PANGO_TYPE_FONT_MASK</title>
<programlisting>#define PANGO_TYPE_FONT_MASK (pango_font_mask_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontMask">PangoFontMask</link>.
</para></refsect2>
<refsect2>
<title><anchor id="pango-font-description-new"/>pango_font_description_new ()</title>
<programlisting><link linkend="PangoFontDescription">PangoFontDescription</link>* pango_font_description_new
                                            (void);</programlisting>
<para>
Creates a new font description structure with all fields unset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the newly-created <link linkend="PangoFontDescription">PangoFontDescription</link>. Use
<link linkend="pango-font-description-free">pango_font_description_free</link>() to free the result.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-copy"/>pango_font_description_copy ()</title>
<programlisting><link linkend="PangoFontDescription">PangoFontDescription</link>* pango_font_description_copy
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Make a copy of a <link linkend="PangoFontDescription">PangoFontDescription</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly-allocated <link linkend="PangoFontDescription">PangoFontDescription</link>. This value
              must be freed using <link linkend="pango-font-description-free">pango_font_description_free</link>().
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-copy-static"/>pango_font_description_copy_static ()</title>
<programlisting><link linkend="PangoFontDescription">PangoFontDescription</link>* pango_font_description_copy_static
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Like <link linkend="pango-font-description-copy">pango_font_description_copy</link>(), but only a shallow copy is made
of the family name and other allocated fields. The result can only
be used until <parameter>desc</parameter> is modififed or freed. This is meant to be used
when the copy is only needed temporarily.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly-allocated <link linkend="PangoFontDescription">PangoFontDescription</link>. This value
              must be freed using <link linkend="pango-font-description-free">pango_font_description_free</link>().
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-hash"/>pango_font_description_hash ()</title>
<programlisting><link linkend="guint">guint</link>       pango_font_description_hash     (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Computes a hash of a <link linkend="PangoFontDescription">PangoFontDescription</link> structure suitable
to be used, for example, as an argument to <link linkend="g-hash-table-new">g_hash_table_new</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the hash value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-equal"/>pango_font_description_equal ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pango_font_description_equal    (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc1,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc2);</programlisting>
<para>
Compares two font descriptions for equality.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc1</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc2</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the two font descriptions are proveably
              identical. (Two font descriptions may result in
              identical fonts being loaded, but still compare
               <literal>FALSE</literal>.)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-free"/>pango_font_description_free ()</title>
<programlisting>void        pango_font_description_free     (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Frees a font description.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-descriptions-free"/>pango_font_descriptions_free ()</title>
<programlisting>void        pango_font_descriptions_free    (<link linkend="PangoFontDescription">PangoFontDescription</link> **descs,
                                             int n_descs);</programlisting>
<para>
Frees a list of font descriptions from <link linkend="pango-font-map-list-fonts">pango_font_map_list_fonts</link>()</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>descs</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to an array of <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_descs</parameter>&nbsp;:</term>
<listitem><simpara> number of font descriptions in <parameter>descs</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-set-family"/>pango_font_description_set_family ()</title>
<programlisting>void        pango_font_description_set_family
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const char *family);</programlisting>
<para>
Sets the family name field of a font description. The family
name represents a family of related font styles, and will
resolve to a particular <link linkend="PangoFontFamily">PangoFontFamily</link>. In some uses of
<link linkend="PangoFontDescription">PangoFontDescription</link>, it is also possible to use a comma
separated list of family names for this field.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> a string representing the family name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-set-family-static"/>pango_font_description_set_family_static ()</title>
<programlisting>void        pango_font_description_set_family_static
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const char *family);</programlisting>
<para>
Like <link linkend="pango-font-description-set-family">pango_font_description_set_family</link>(), except that no
copy of <parameter>family</parameter> is made. The caller must make sure that the
string passed in stays around until <parameter>desc</parameter> has been freed
or the name is set again. This function can be used if
<parameter>family</parameter> is a static string such as a C string literal, or
if <parameter>desc</parameter> is only needed temporarily.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> a string representing the family name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-get-family"/>pango_font_description_get_family ()</title>
<programlisting>G_CONST_RETURN char* pango_font_description_get_family
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Gets the family name field of a font description. See
<link linkend="pango-font-description-set-family">pango_font_description_set_family</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The family name field. (Will be <literal>NULL</literal> if not previously set.)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-set-style"/>pango_font_description_set_style ()</title>
<programlisting>void        pango_font_description_set_style
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoStyle">PangoStyle</link> style);</programlisting>
<para>
Sets the style field of a <link linkend="PangoFontDescription">PangoFontDescription</link>. The
<link linkend="PangoStyle">PangoStyle</link> enumeration describes whether the font is slanted and
the manner in which it is slanted; it can be either
<link linkend="PANGO-STYLE-NORMAL-CAPS">PANGO_STYLE_NORMAL</link>, <link linkend="PANGO-STYLE-ITALIC-CAPS">PANGO_STYLE_ITALIC</link>, or <link linkend="PANGO-STYLE-OBLIQUE-CAPS">PANGO_STYLE_OBLIQUE</link>.
Most fonts will either have a italic style or an oblique
style, but not both, and font matching in Pango will 
match italic specifications with oblique fonts and vice-versa
if an exact match is not found.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>style</parameter>&nbsp;:</term>
<listitem><simpara> the style for the font description
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-get-style"/>pango_font_description_get_style ()</title>
<programlisting><link linkend="PangoStyle">PangoStyle</link>  pango_font_description_get_style
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Gets the style field of a <link linkend="PangoFontDescription">PangoFontDescription</link>. See
<link linkend="pango-font-description-set-style">pango_font_description_set_style</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the style field for the font description. 
  Use <link linkend="pango-font-description-get-set-fields">pango_font_description_get_set_fields</link>() to find out if
  the field was explicitely set or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-set-variant"/>pango_font_description_set_variant ()</title>
<programlisting>void        pango_font_description_set_variant
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoVariant">PangoVariant</link> variant);</programlisting>
<para>
Sets the variant field of a font description. The <link linkend="PangoVariant">PangoVariant</link>
can either be <literal>PANGO_VARIANT_NORMAL</literal> or <literal>PANGO_VARIANT_SMALL_CAPS</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>variant</parameter>&nbsp;:</term>
<listitem><simpara> the variant type for the font description.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-get-variant"/>pango_font_description_get_variant ()</title>
<programlisting><link linkend="PangoVariant">PangoVariant</link> pango_font_description_get_variant
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Gets the variant field of a <link linkend="PangoFontDescription">PangoFontDescription</link>. See
<link linkend="pango-font-description-set-variant">pango_font_description_set_variant</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the variant field for the font description. Use
  <link linkend="pango-font-description-get-set-fields">pango_font_description_get_set_fields</link>() to find out if
  the field was explicitely set or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-set-weight"/>pango_font_description_set_weight ()</title>
<programlisting>void        pango_font_description_set_weight
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoWeight">PangoWeight</link> weight);</programlisting>
<para>
Sets the weight field of a font description. The weight field
specifies how bold or light the font should be. In addition
to the values of the <link linkend="PangoWeight">PangoWeight</link> enumeration, other intermediate
numeric values are possible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weight</parameter>&nbsp;:</term>
<listitem><simpara> the weight for the font description.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-get-weight"/>pango_font_description_get_weight ()</title>
<programlisting><link linkend="PangoWeight">PangoWeight</link> pango_font_description_get_weight
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Gets the weight field of a font description. See
<link linkend="pango-font-description-set-weight">pango_font_description_set_weight</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the weight field for the font description. Use
  <link linkend="pango-font-description-get-set-fields">pango_font_description_get_set_fields</link>() to find out if
  the field was explicitely set or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-set-stretch"/>pango_font_description_set_stretch ()</title>
<programlisting>void        pango_font_description_set_stretch
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoStretch">PangoStretch</link> stretch);</programlisting>
<para>
Sets the stretch field of a font description. The stretch field
specifies how narrow or wide the font should be.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stretch</parameter>&nbsp;:</term>
<listitem><simpara> the stretch for the font description
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-get-stretch"/>pango_font_description_get_stretch ()</title>
<programlisting><link linkend="PangoStretch">PangoStretch</link> pango_font_description_get_stretch
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Gets the stretch field of a font description.
See <link linkend="pango-font-description-set-stretch">pango_font_description_set_stretch</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the stretch field for the font description. Use
  <link linkend="pango-font-description-get-set-fields">pango_font_description_get_set_fields</link>() to find out if
  the field was explicitely set or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-set-size"/>pango_font_description_set_size ()</title>
<programlisting>void        pango_font_description_set_size (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="gint">gint</link> size);</programlisting>
<para>
Sets the size field of a font description.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> the size for the font description in pango units.
       There are <link linkend="PANGO-SCALE-CAPS">PANGO_SCALE</link> Pango units in one device unit (device unit is a point, for font sizes).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-get-size"/>pango_font_description_get_size ()</title>
<programlisting><link linkend="gint">gint</link>        pango_font_description_get_size (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Gets the size field of a font description.
See <link linkend="pango-font-description-get-size">pango_font_description_get_size</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the size field for the font description in pango
  units.  (There are <link linkend="PANGO-SCALE-CAPS">PANGO_SCALE</link> pango units in one device unit &mdash;
  for fonts, font points are the device unit.) Returns 0 if the stretch field has not
  previously been set.  <link linkend="pango-font-description-get-set-fields">pango_font_description_get_set_fields</link>() to
  find out if the field was explicitely set or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-get-set-fields"/>pango_font_description_get_set_fields ()</title>
<programlisting><link linkend="PangoFontMask">PangoFontMask</link> pango_font_description_get_set_fields
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Determines which fields in a font description have been set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a bitmask with bits set corresponding to the
  fields in <parameter>desc</parameter> that have been set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-unset-fields"/>pango_font_description_unset_fields ()</title>
<programlisting>void        pango_font_description_unset_fields
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoFontMask">PangoFontMask</link> to_unset);</programlisting>
<para>
Unsets some of the fields in a <link linkend="PangoFontDescription">PangoFontDescription</link>. Note that
this merely marks the fields cleared, it does not clear the
settings for those fields, to clear a family name set with
<link linkend="pango-font-description-set-family-static">pango_font_description_set_family_static</link>() so that it won't
be returned by subsequent calls to <link linkend="pango-font-description-get-family">pango_font_description_get_family</link>(),
you must actually call pango_font_description_set_family (desc, NULL);</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>to_unset</parameter>&nbsp;:</term>
<listitem><simpara> bitmask of fields in the <parameter>desc</parameter> to unset.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-merge"/>pango_font_description_merge ()</title>
<programlisting>void        pango_font_description_merge    (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc_to_merge,
                                             <link linkend="gboolean">gboolean</link> replace_existing);</programlisting>
<para>
Merges the fields that are set in <parameter>desc_to_merge</parameter> into the fields in
<parameter>desc</parameter>.  If <parameter>replace_existing</parameter> is <literal>FALSE</literal>, only fields in <parameter>desc</parameter> that
are not already set are affected. If <literal>TRUE</literal>, then fields that are
already set will be replaced as well.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc_to_merge</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="PangoFontDescription">PangoFontDescription</link> to merge from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>replace_existing</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, replace fields in <parameter>desc</parameter> with the
  corresponding values from <parameter>desc_to_merge</parameter>, even if they
  are already exist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-merge-static"/>pango_font_description_merge_static ()</title>
<programlisting>void        pango_font_description_merge_static
                                            (<link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc_to_merge,
                                             <link linkend="gboolean">gboolean</link> replace_existing);</programlisting>
<para>
Like <link linkend="pango-font-description-merge">pango_font_description_merge</link>(), but only a shallow copy is made
of the family name and other allocated fields. <parameter>desc</parameter> can only be
used until <parameter>desc_to_merge</parameter> is modified or freed. This is meant
to be used when the merged font description is only needed temporarily.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc_to_merge</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="PangoFontDescription">PangoFontDescription</link> to merge from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>replace_existing</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, replace fields in <parameter>desc</parameter> with the
  corresponding values from <parameter>desc_to_merge</parameter>, even if they
  are already exist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-better-match"/>pango_font_description_better_match ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pango_font_description_better_match
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *old_match,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *new_match);</programlisting>
<para>
Determines if the style attributes of <parameter>new_match</parameter> are a closer match
for <parameter>desc</parameter> than <parameter>old_match</parameter>, or if <parameter>old_match</parameter> is <literal>NULL</literal>, determines if
<parameter>new_match</parameter> is a match at all. Approximate matching is done for
weight and style; other attributes must match exactly.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_match</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_match</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if <parameter>new_match</parameter> is a better match
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-from-string"/>pango_font_description_from_string ()</title>
<programlisting><link linkend="PangoFontDescription">PangoFontDescription</link>* pango_font_description_from_string
                                            (const char *str);</programlisting>
<para>
Creates a new font description from a string representation in the
form "[FAMILY-LIST] [STYLE-OPTIONS] [SIZE]", where FAMILY-LIST is a
comma separated list of families optionally terminated by a comma,
STYLE_OPTIONS is a whitespace separated list of words where each
WORD describes one of style, variant, weight, or stretch, and SIZE
is an decimal number (size in points). Any one of the options may
be absent.  If FAMILY-LIST is absent, then the family_name field of
the resulting font description will be initialized to <literal>NULL</literal>.  If
STYLE-OPTIONS is missing, then all style options will be set to the
default values. If SIZE is missing, the size in the resulting font
description will be set to 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> string representation of a font description.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new <link linkend="PangoFontDescription">PangoFontDescription</link>. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-to-string"/>pango_font_description_to_string ()</title>
<programlisting>char*       pango_font_description_to_string
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Creates a string representation of a font description. See
<link linkend="pango-font-description-from-string">pango_font_description_from_string</link>() for a description of the
format of the string representation. The family list in the
string description will only have a terminating comma if the
last word of the list is a valid style option.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new string that must be freed with <link linkend="g-free">g_free</link>().
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-description-to-filename"/>pango_font_description_to_filename ()</title>
<programlisting>char*       pango_font_description_to_filename
                                            (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Creates a filename representation of a font description. The
filename is identical to the result from calling
<link linkend="pango-font-description-to-string">pango_font_description_to_string</link>(), but with underscores instead of
characters that are untypical in filenames, and in lower case only.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new string that must be freed with <link linkend="g-free">g_free</link>().
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFontMetrics"/>struct PangoFontMetrics</title>
<programlisting>struct PangoFontMetrics {

  guint ref_count;
  
  int ascent;
  int descent;
  int approximate_char_width;
  int approximate_digit_width;
};
</programlisting>
<para>
A <link linkend="PangoFontMetrics">PangoFontMetrics</link> structure holds the overall metric information
for a font (possibly restricted to a script). 
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONT-METRICS-CAPS"/>PANGO_TYPE_FONT_METRICS</title>
<programlisting>#define PANGO_TYPE_FONT_METRICS  (pango_font_metrics_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontMetrics">PangoFontMetrics</link>.
</para></refsect2>
<refsect2>
<title><anchor id="pango-font-metrics-ref"/>pango_font_metrics_ref ()</title>
<programlisting><link linkend="PangoFontMetrics">PangoFontMetrics</link>* pango_font_metrics_ref    (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);</programlisting>
<para>
Increases the reference count of a font metrics structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>metrics</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMetrics">PangoFontMetrics</link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <parameter>metrics</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-metrics-unref"/>pango_font_metrics_unref ()</title>
<programlisting>void        pango_font_metrics_unref        (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);</programlisting>
<para>
Decreases the reference count of a font metrics structure. If
the result is zero, frees the structure and any associated
memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>metrics</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMetrics">PangoFontMetrics</link> structure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-metrics-get-ascent"/>pango_font_metrics_get_ascent ()</title>
<programlisting>int         pango_font_metrics_get_ascent   (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);</programlisting>
<para>
Gets the ascent from a font metrics structure. The ascent is
the distance from the baseline to the logical top of a line
of text. (The logical top may be above or below the top of the
actual drawn ink. It is necessary to lay out the text to figure
where the ink will be.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>metrics</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMetrics">PangoFontMetrics</link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the ascent, in pango units. (1 point == <link linkend="PANGO-SCALE-CAPS">PANGO_SCALE</link> pango units.)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-metrics-get-descent"/>pango_font_metrics_get_descent ()</title>
<programlisting>int         pango_font_metrics_get_descent  (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);</programlisting>
<para>
Gets the descent from a font metrics structure. The descent is
the distance from the baseline to the logical bottom of a line
of text. (The logical bottom may be above or below the bottom of the
actual drawn ink. It is necessary to lay out the text to figure
where the ink will be.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>metrics</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMetrics">PangoFontMetrics</link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the descent, in pango units. (1 point == <link linkend="PANGO-SCALE-CAPS">PANGO_SCALE</link> pango units.)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-metrics-get-approximate-char-width"/>pango_font_metrics_get_approximate_char_width ()</title>
<programlisting>int         pango_font_metrics_get_approximate_char_width
                                            (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);</programlisting>
<para>
Gets the approximate character width for a font metrics structure.
This is merely a representative value useful, for example, for
determining the initial size for a window. Actual characters in
text will be wider and narrower than this.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>metrics</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMetrics">PangoFontMetrics</link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the character width, in pango units. (1 point == <link linkend="PANGO-SCALE-CAPS">PANGO_SCALE</link> pango units.)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-metrics-get-approximate-digit-width"/>pango_font_metrics_get_approximate_digit_width ()</title>
<programlisting>int         pango_font_metrics_get_approximate_digit_width
                                            (<link linkend="PangoFontMetrics">PangoFontMetrics</link> *metrics);</programlisting>
<para>
Gets the approximate digit width for a font metrics structure.
This is merely a representative value useful, for example, for
determining the initial size for a window. Actual digits in
text can be wider and narrower than this, though this value
is generally somewhat more accurate than the result of
<link linkend="pango-font-metrics-get-approximate-digit-width">pango_font_metrics_get_approximate_digit_width</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>metrics</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMetrics">PangoFontMetrics</link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the digit width, in pango units. (1 point == <link linkend="PANGO-SCALE-CAPS">PANGO_SCALE</link> pango units.)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFont-struct"/>struct PangoFont</title>
<programlisting>struct PangoFont;</programlisting>
<para>
The <link linkend="PangoFont">PangoFont</link> structure is used to represent
a font in a rendering-system-independent matter.
To create an implementation of a <link linkend="PangoFont">PangoFont</link>,
the rendering-system specific code should malloc
a larger structure that contains a nested
<link linkend="PangoFont">PangoFont</link>, fill in the klass member of
the nested <link linkend="PangoFont">PangoFont</link> with a pointer to
a appropriate <link linkend="PangoFontClass">PangoFontClass</link>, then call
<link linkend="pango-font-init">pango_font_init</link>() on the structure.
</para>
<para>
The <link linkend="PangoFont">PangoFont</link> structure contains one member
which the implementation fills in:
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONT-CAPS"/>PANGO_TYPE_FONT</title>
<programlisting>#define PANGO_TYPE_FONT              (pango_font_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFont">PangoFont</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-FONT-CAPS"/>PANGO_FONT()</title>
<programlisting>#define PANGO_FONT(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT, PangoFont))
</programlisting>
<para>
Casts a <link linkend="GObject">GObject</link> to a <link linkend="PangoFont">PangoFont</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-IS-FONT-CAPS"/>PANGO_IS_FONT()</title>
<programlisting>#define PANGO_IS_FONT(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT))
</programlisting>
<para>
Returns <literal>TRUE</literal> if <parameter>object</parameter> is a <link linkend="PangoFont">PangoFont</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-find-shaper"/>pango_font_find_shaper ()</title>
<programlisting><link linkend="PangoEngineShape">PangoEngineShape</link>* pango_font_find_shaper    (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="guint32">guint32</link> ch);</programlisting>
<para>
Finds the best matching shaper for a font for a particular
language tag and character point.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>font</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFont">PangoFont</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> the language tag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ch</parameter>&nbsp;:</term>
<listitem><simpara> the ISO-10646 character code.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the best matching shaper.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-describe"/>pango_font_describe ()</title>
<programlisting><link linkend="PangoFontDescription">PangoFontDescription</link>* pango_font_describe   (<link linkend="PangoFont">PangoFont</link> *font);</programlisting>
<para>
Returns a description of the font.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>font</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFont">PangoFont</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly-allocated <link linkend="PangoFontDescription">PangoFontDescription</link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-get-coverage"/>pango_font_get_coverage ()</title>
<programlisting><link linkend="PangoCoverage">PangoCoverage</link>* pango_font_get_coverage      (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Computes the coverage map for a given font and language tag.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>font</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFont">PangoFont</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> the language tag
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly-allocated <link linkend="PangoCoverage">PangoCoverage</link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-get-glyph-extents"/>pango_font_get_glyph_extents ()</title>
<programlisting>void        pango_font_get_glyph_extents    (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoGlyph">PangoGlyph</link> glyph,
                                             <link linkend="PangoRectangle">PangoRectangle</link> *ink_rect,
                                             <link linkend="PangoRectangle">PangoRectangle</link> *logical_rect);</programlisting>
<para>
Gets the logical and ink extents of a glyph within a font. The
coordinate system for each rectangle has its origin at the
base line and horizontal origin of the character with increasing
coordinates extending to the right and down. The macros <link linkend="PANGO-ASCENT-CAPS">PANGO_ASCENT</link>(),
<link linkend="PANGO-DESCENT-CAPS">PANGO_DESCENT</link>(), <link linkend="PANGO-LBEARING-CAPS">PANGO_LBEARING</link>(), and PANGO_RBEARING can be used to convert
from the extents rectangle to more traditional font metrics. The units
of the rectangles are in 1/PANGO_SCALE of a device unit.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>font</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFont">PangoFont</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>glyph</parameter>&nbsp;:</term>
<listitem><simpara> the glyph index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ink_rect</parameter>&nbsp;:</term>
<listitem><simpara> rectangle used to store the extents of the glyph as drawn
           or <literal>NULL</literal> to indicate that the result is not needed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>logical_rect</parameter>&nbsp;:</term>
<listitem><simpara> rectangle used to store the logical extents of the glyph
           or <literal>NULL</literal> to indicate that the result is not needed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-get-metrics"/>pango_font_get_metrics ()</title>
<programlisting><link linkend="PangoFontMetrics">PangoFontMetrics</link>* pango_font_get_metrics    (<link linkend="PangoFont">PangoFont</link> *font,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Gets overall metric information for a font. Since the metrics may be
substantially different for different scripts, a language tag can
be provided to indicate that the metrics should be retrieved that
correspond to the script(s) used by that language.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>font</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFont">PangoFont</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> language tag used to determine which script to get the metrics
           for, or <literal>NULL</literal> to indicate to get the metrics for the entire
           font.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="PangoMetrics">PangoMetrics</link> object. The caller must call <link linkend="pango-font-metrics-unref">pango_font_metrics_unref</link>()
  when finished using the object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFontFamily-struct"/>struct PangoFontFamily</title>
<programlisting>struct PangoFontFamily;</programlisting>
<para>
The <link linkend="PangoFontFamily">PangoFontFamily</link> structure is used to represent a family of related 
font faces. The faces in a family share a common design, but differ in 
slant, weight, width and other aspects.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONT-FAMILY-CAPS"/>PANGO_TYPE_FONT_FAMILY</title>
<programlisting>#define PANGO_TYPE_FONT_FAMILY              (pango_font_family_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontFamily">PangoFontFamily</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-FONT-FAMILY-CAPS"/>PANGO_FONT_FAMILY()</title>
<programlisting>#define PANGO_FONT_FAMILY(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT_FAMILY, PangoFontFamily))
</programlisting>
<para>
Casts a <link linkend="GObject">GObject</link> to a <link linkend="PangoFontFamily">PangoFontFamily</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-IS-FONT-FAMILY-CAPS"/>PANGO_IS_FONT_FAMILY()</title>
<programlisting>#define PANGO_IS_FONT_FAMILY(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT_FAMILY))
</programlisting>
<para>
Returns <literal>TRUE</literal> if <parameter>object</parameter> is a <link linkend="PangoFontFamily">PangoFontFamily</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-family-get-name"/>pango_font_family_get_name ()</title>
<programlisting>G_CONST_RETURN char* pango_font_family_get_name
                                            (<link linkend="PangoFontFamily">PangoFontFamily</link> *family);</programlisting>
<para>
Gets the name of the family. The name is unique among all
fonts for the font backend and can be used in a <link linkend="PangoFontDescription">PangoFontDescription</link>
to specify that a face from this family is desired.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontFamily">PangoFontFamily</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the name of the family. This string is owned
  by the family object and must not be modified or freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-family-list-faces"/>pango_font_family_list_faces ()</title>
<programlisting>void        pango_font_family_list_faces    (<link linkend="PangoFontFamily">PangoFontFamily</link> *family,
                                             <link linkend="PangoFontFace">PangoFontFace</link> ***faces,
                                             int *n_faces);</programlisting>
<para>
Lists the different font faces that make up <parameter>family</parameter>. The faces
in a family share a common design, but differ in slant, weight,
width and other aspects.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontFamily">PangoFontFamily</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>faces</parameter>&nbsp;:</term>
<listitem><simpara> location to store an array of pointers to <link linkend="PangoFontFace">PangoFontFace</link>
  objects, or <literal>NULL</literal>. This array should be freed with <link linkend="g-free">g_free</link>()
  when it is no longer needed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_faces</parameter>&nbsp;:</term>
<listitem><simpara> location to store number of elements in <parameter>faces</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFontFace-struct"/>struct PangoFontFace</title>
<programlisting>struct PangoFontFace;</programlisting>
<para>
The <link linkend="PangoFontFace">PangoFontFace</link> structure is used to represent a group of fonts with 
the same family, slant, weight, width, but varying sizes.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONT-FACE-CAPS"/>PANGO_TYPE_FONT_FACE</title>
<programlisting>#define PANGO_TYPE_FONT_FACE              (pango_font_face_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontFace">PangoFontFace</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-FONT-FACE-CAPS"/>PANGO_FONT_FACE()</title>
<programlisting>#define PANGO_FONT_FACE(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT_FACE, PangoFontFace))
</programlisting>
<para>
Casts a <link linkend="GObject">GObject</link> to a <link linkend="PangoFontFace">PangoFontFace</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-IS-FONT-FACE-CAPS"/>PANGO_IS_FONT_FACE()</title>
<programlisting>#define PANGO_IS_FONT_FACE(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT_FACE))
</programlisting>
<para>
Returns <literal>TRUE</literal> if <parameter>object</parameter> is a <link linkend="PangoFontFace">PangoFontFace</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-face-get-face-name"/>pango_font_face_get_face_name ()</title>
<programlisting>G_CONST_RETURN char* pango_font_face_get_face_name
                                            (<link linkend="PangoFontFace">PangoFontFace</link> *face);</programlisting>
<para>
Gets a name representing the style of this face among the
different faces in the <link linkend="PangoFontFamily">PangoFontFamily</link> for the face. This
name is unique among all faces in the family and is suitable
for displaying to users.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>face</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontFace">PangoFontFace</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the face name for the face. This string is
  owned by the face object and must not be modified or freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-face-describe"/>pango_font_face_describe ()</title>
<programlisting><link linkend="PangoFontDescription">PangoFontDescription</link>* pango_font_face_describe
                                            (<link linkend="PangoFontFace">PangoFontFace</link> *face);</programlisting>
<para>
Returns the family, style, variant, weight and stretch of
a <link linkend="PangoFontFace">PangoFontFace</link>. The size field of the resulting font description
will be unset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>face</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontFace">PangoFontFace</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly-created <link linkend="PangoFontDescription">PangoFontDescription</link> structure
 holding the description of the face. Use <link linkend="pango-font-description-free">pango_font_description_free</link>()
 to free the result.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFontMap-struct"/>struct PangoFontMap</title>
<programlisting>struct PangoFontMap;</programlisting>
<para>
The <link linkend="PangoFontMap">PangoFontMap</link> represents the set of fonts available for a
particular rendering system. This is a virtual object with
implementations being specific to particular rendering systems.  To
create an implementation of a <link linkend="PangoFontMap">PangoFontMap</link>, the rendering-system
specific code should malloc a larger structure that contains a nested
<link linkend="PangoFontMap">PangoFontMap</link>, fill in the klass member of the nested <link linkend="PangoFontMap">PangoFontMap</link> with a
pointer to a appropriate <link linkend="PangoFontMapClass">PangoFontMapClass</link>, then call
<link linkend="pango-font-map-init">pango_font_map_init</link>() on the structure.
</para>
<para>
The <link linkend="PangoFont">PangoFont</link> structure contains one member which the implementation fills in:
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONT-MAP-CAPS"/>PANGO_TYPE_FONT_MAP</title>
<programlisting>#define PANGO_TYPE_FONT_MAP              (pango_font_map_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontMap">PangoFontMap</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-FONT-MAP-CAPS"/>PANGO_FONT_MAP()</title>
<programlisting>#define PANGO_FONT_MAP(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT_MAP, PangoFontMap))
</programlisting>
<para>
Casts a <link linkend="GObject">GObject</link> to a <link linkend="PangoFontMap">PangoFontMap</link>. 
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-IS-FONT-MAP-CAPS"/>PANGO_IS_FONT_MAP()</title>
<programlisting>#define PANGO_IS_FONT_MAP(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT_MAP))
</programlisting>
<para>
Returns <literal>TRUE</literal> if <parameter>object</parameter> is a <link linkend="PangoFontMap">PangoFontMap</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFontMapClass"/>struct PangoFontMapClass</title>
<programlisting>struct PangoFontMapClass {

  GObjectClass parent_class;

  
  PangoFont *   (*load_font)     (PangoFontMap               *fontmap,
				  PangoContext               *context,
				  const PangoFontDescription *desc);
  void          (*list_families) (PangoFontMap               *fontmap,
				  PangoFontFamily          ***families,
				  int                        *n_families);
  PangoFontset *(*load_fontset)  (PangoFontMap               *fontmap,
				  PangoContext               *context,
				  const PangoFontDescription *desc,
				  PangoLanguage              *language);

};
</programlisting>
<para>
The <link linkend="PangoFontMapClass">PangoFontMapClass</link> structure holds the virtual functions for
a particular <link linkend="PangoFontMap">PangoFontMap</link> implementation.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link> <structfield>parent_class</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoFont">PangoFont</link>* (*<structfield>load_font</structfield>) (PangoFontMap               *fontmap,
				  PangoContext               *context,
				  const PangoFontDescription *desc)</term>
<listitem><simpara>a function to load a font with a given description. See
            <link linkend="pango-font-map-load-font">pango_font_map_load_font</link>()
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void (*<structfield>list_families</structfield>) (PangoFontMap               *fontmap,
				  PangoFontFamily          ***families,
				  int                        *n_families)</term>
<listitem><simpara>A function to list available font families. See
                <link linkend="pango-font-map-list-families">pango_font_map_list_families</link>().
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoFontset">PangoFontset</link>* (*<structfield>load_fontset</structfield>) (PangoFontMap               *fontmap,
				  PangoContext               *context,
				  const PangoFontDescription *desc,
				  PangoLanguage              *language)</term>
<listitem><simpara>

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-FONT-MAP-CLASS-CAPS"/>PANGO_FONT_MAP_CLASS()</title>
<programlisting>#define PANGO_FONT_MAP_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), PANGO_TYPE_FONT_MAP, PangoFontMapClass))
</programlisting>
<para>
Casts a <link linkend="GObject">GObject</link> to a <link linkend="PangoFontMapClass">PangoFontMapClass</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-IS-FONT-MAP-CLASS-CAPS"/>PANGO_IS_FONT_MAP_CLASS()</title>
<programlisting>#define PANGO_IS_FONT_MAP_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), PANGO_TYPE_FONT_MAP))
</programlisting>
<para>
Returns <literal>TRUE</literal> if <parameter>klass</parameter> is a subtype of <link linkend="PangoFontMapClass">PangoFontMapClass</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="GObject">GObject</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-FONT-MAP-GET-CLASS-CAPS"/>PANGO_FONT_MAP_GET_CLASS()</title>
<programlisting>#define PANGO_FONT_MAP_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), PANGO_TYPE_FONT_MAP, PangoFontMapClass))
</programlisting>
<para>
Returns the type of a <link linkend="PangoFontMap">PangoFontMap</link>.
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="PangoFontMap">PangoFontMap</link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-map-load-font"/>pango_font_map_load_font ()</title>
<programlisting><link linkend="PangoFont">PangoFont</link>*  pango_font_map_load_font        (<link linkend="PangoFontMap">PangoFontMap</link> *fontmap,
                                             <link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Load the font in the fontmap that is the closest match for <parameter>desc</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fontmap</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMap">PangoFontMap</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="PangoContext">PangoContext</link> the font will be used with
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link> describing the font to load
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the font loaded, or <literal>NULL</literal> if no font matched.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-map-load-fontset"/>pango_font_map_load_fontset ()</title>
<programlisting><link linkend="PangoFontset">PangoFontset</link>* pango_font_map_load_fontset   (<link linkend="PangoFontMap">PangoFontMap</link> *fontmap,
                                             <link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Load a set of fonts in the fontmap that can be used to render
a font matching <parameter>desc</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fontmap</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMap">PangoFontMap</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="PangoContext">PangoContext</link> the font will be used with
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link> describing the font to load
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoLanguage">PangoLanguage</link> the fonts will be used for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the fontset, or <literal>NULL</literal> if no font matched.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-font-map-list-families"/>pango_font_map_list_families ()</title>
<programlisting>void        pango_font_map_list_families    (<link linkend="PangoFontMap">PangoFontMap</link> *fontmap,
                                             <link linkend="PangoFontFamily">PangoFontFamily</link> ***families,
                                             int *n_families);</programlisting>
<para>
List all families for a fontmap.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fontmap</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontMap">PangoFontMap</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>families</parameter>&nbsp;:</term>
<listitem><simpara> location to store a pointer to an array of PangoFontFamily *.
           This array should be freed with <link linkend="g-free">g_free</link>().
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_families</parameter>&nbsp;:</term>
<listitem><simpara> location to store the number of elements in <parameter>descs</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFontset-struct"/>struct PangoFontset</title>
<programlisting>struct PangoFontset;</programlisting>
<para>
A <link linkend="PangoFontset">PangoFontset</link> represents a set of <link linkend="PangoFont">PangoFont</link> to use
when rendering text. It is the result of resolving a
<link linkend="PangoFontDescription">PangoFontDescription</link> against a particular <link linkend="PangoContext">PangoContext</link>.
It has operations for finding the component font for
a particular Unicode character, and for finding a composite
set of metrics for the entire fontset.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONTSET-CAPS"/>PANGO_TYPE_FONTSET</title>
<programlisting>#define PANGO_TYPE_FONTSET              (pango_fontset_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontset">PangoFontset</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PangoFontsetClass"/>struct PangoFontsetClass</title>
<programlisting>struct PangoFontsetClass {

  GObjectClass parent_class;

   
  PangoFont *       (*get_font)     (PangoFontset  *fontset,
				     guint          wc);

  PangoFontMetrics *(*get_metrics)  (PangoFontset  *fontset);
  PangoLanguage *   (*get_language) (PangoFontset  *fontset);

};
</programlisting>
<para>
The <link linkend="PangoFontsetClass">PangoFontsetClass</link> structure holds the virtual functions for
a particular <link linkend="PangoFontset">PangoFontset</link> implementation.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GObjectClass">GObjectClass</link> <structfield>parent_class</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoFont">PangoFont</link>* (*<structfield>get_font</structfield>) (PangoFontset  *fontset,
				     guint          wc)</term>
<listitem><simpara>a function to get the font in the fontset that contains the 
   best glyph for the given unicode character; see <link linkend="pango-fontset-get-font">pango_fontset_get_font</link>().
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoFontMetrics">PangoFontMetrics</link>* (*<structfield>get_metrics</structfield>) (PangoFontset  *fontset)</term>
<listitem><simpara>a function to get overall metric information for the fonts 
   in the fontset; see <link linkend="pango-fontset-get-metrics">pango_fontset_get_metrics</link>().
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoLanguage">PangoLanguage</link>* (*<structfield>get_language</structfield>) (PangoFontset  *fontset)</term>
<listitem><simpara>a function to get the language of the fontset.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-fontset-get-font"/>pango_fontset_get_font ()</title>
<programlisting><link linkend="PangoFont">PangoFont</link>*  pango_fontset_get_font          (<link linkend="PangoFontset">PangoFontset</link> *fontset,
                                             <link linkend="guint">guint</link> wc);</programlisting>
<para>
Returns the font in the fontset that contains the best glyph for the
unicode character wc.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fontset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontset">PangoFontset</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wc</parameter>&nbsp;:</term>
<listitem><simpara> a unicode character
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="PangoFont">PangoFont</link>. The caller must call g_object_unref when finished
         with the font.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-fontset-get-metrics"/>pango_fontset_get_metrics ()</title>
<programlisting><link linkend="PangoFontMetrics">PangoFontMetrics</link>* pango_fontset_get_metrics (<link linkend="PangoFontset">PangoFontset</link> *fontset);</programlisting>
<para>
Get overall metric information for the fonts in the fontset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fontset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontset">PangoFontset</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="PangoMetrics">PangoMetrics</link> object. The caller must call <link linkend="pango-font-metrics-unref">pango_font_metrics_unref</link>()
  when finished using the object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoFontsetSimple-struct"/>struct PangoFontsetSimple</title>
<programlisting>struct PangoFontsetSimple;</programlisting>
<para>
<link linkend="PangoFontSetSimple">PangoFontSetSimple</link> is a implementation of the abstract
<link linkend="PangoFontSet">PangoFontSet</link> base class in terms of an array of fonts,
which the creator provides when constructing the
<link linkend="PangoFontSetSimple">PangoFontSetSimple</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-FONTSET-SIMPLE-CAPS"/>PANGO_TYPE_FONTSET_SIMPLE</title>
<programlisting>#define PANGO_TYPE_FONTSET_SIMPLE       (pango_fontset_simple_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoFontsetSimple">PangoFontsetSimple</link>.
</para></refsect2>
<refsect2>
<title><anchor id="pango-fontset-simple-new"/>pango_fontset_simple_new ()</title>
<programlisting><link linkend="PangoFontsetSimple">PangoFontsetSimple</link>* pango_fontset_simple_new
                                            (<link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Creates a new <link linkend="PangoFontsetSimple">PangoFontsetSimple</link> for the given language.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoLanguage">PangoLanguage</link> tag
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly-allocated <link linkend="PangoFontsetSimple">PangoFontsetSimple</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-fontset-simple-append"/>pango_fontset_simple_append ()</title>
<programlisting>void        pango_fontset_simple_append     (<link linkend="PangoFontsetSimple">PangoFontsetSimple</link> *fontset,
                                             <link linkend="PangoFont">PangoFont</link> *font);</programlisting>
<para>
Adds a font to the fontset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fontset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontsetSimple">PangoFontsetSimple</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>font</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFont">PangoFont</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-fontset-simple-size"/>pango_fontset_simple_size ()</title>
<programlisting>int         pango_fontset_simple_size       (<link linkend="PangoFontsetSimple">PangoFontsetSimple</link> *fontset);</programlisting>
<para>
Returns the number of fonts in the fontset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fontset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontsetSimple">PangoFontsetSimple</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the size of <parameter>fontset</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
