<refentry id="pango-Text-Processing">
<refmeta>
<refentrytitle>Rendering</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PANGO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Rendering</refname><refpurpose>Functions to run the rendering pipeline</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<anchor id="PangoContext"/>
<synopsis>




struct      <link linkend="PangoContext-struct">PangoContext</link>;
struct      <link linkend="PangoItem">PangoItem</link>;
struct      <link linkend="PangoAnalysis">PangoAnalysis</link>;
enum        <link linkend="PangoDirection">PangoDirection</link>;
#define     <link linkend="PANGO-TYPE-DIRECTION-CAPS">PANGO_TYPE_DIRECTION</link>

<link linkend="GList">GList</link>*      <link linkend="pango-itemize">pango_itemize</link>                   (<link linkend="PangoContext">PangoContext</link> *context,
                                             const char *text,
                                             int start_index,
                                             int length,
                                             <link linkend="PangoAttrList">PangoAttrList</link> *attrs,
                                             <link linkend="PangoAttrIterator">PangoAttrIterator</link> *cached_iter);
void        <link linkend="pango-item-free">pango_item_free</link>                 (<link linkend="PangoItem">PangoItem</link> *item);
<link linkend="PangoItem">PangoItem</link>*  <link linkend="pango-item-copy">pango_item_copy</link>                 (<link linkend="PangoItem">PangoItem</link> *item);
<link linkend="PangoItem">PangoItem</link>*  <link linkend="pango-item-new">pango_item_new</link>                  (void);
<link linkend="PangoItem">PangoItem</link>*  <link linkend="pango-item-split">pango_item_split</link>                (<link linkend="PangoItem">PangoItem</link> *orig,
                                             int split_index,
                                             int split_offset);
<link linkend="GList">GList</link>*      <link linkend="pango-reorder-items">pango_reorder_items</link>             (<link linkend="GList">GList</link> *logical_items);

<link linkend="PangoContext">PangoContext</link>* <link linkend="pango-context-new">pango_context_new</link>             (void);
void        <link linkend="pango-context-set-font-map">pango_context_set_font_map</link>      (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoFontMap">PangoFontMap</link> *font_map);
<link linkend="PangoFontDescription">PangoFontDescription</link>* <link linkend="pango-context-get-font-description">pango_context_get_font_description</link>
                                            (<link linkend="PangoContext">PangoContext</link> *context);
void        <link linkend="pango-context-set-font-description">pango_context_set_font_description</link>
                                            (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="PangoLanguage">PangoLanguage</link>* <link linkend="pango-context-get-language">pango_context_get_language</link>   (<link linkend="PangoContext">PangoContext</link> *context);
void        <link linkend="pango-context-set-language">pango_context_set_language</link>      (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);
<link linkend="PangoDirection">PangoDirection</link> <link linkend="pango-context-get-base-dir">pango_context_get_base_dir</link>   (<link linkend="PangoContext">PangoContext</link> *context);
void        <link linkend="pango-context-set-base-dir">pango_context_set_base_dir</link>      (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoDirection">PangoDirection</link> direction);
<link linkend="PangoFont">PangoFont</link>*  <link linkend="pango-context-load-font">pango_context_load_font</link>         (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="PangoFontset">PangoFontset</link>* <link linkend="pango-context-load-fontset">pango_context_load_fontset</link>    (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);
<link linkend="PangoFontMetrics">PangoFontMetrics</link>* <link linkend="pango-context-get-metrics">pango_context_get_metrics</link> (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);
void        <link linkend="pango-context-list-families">pango_context_list_families</link>     (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoFontFamily">PangoFontFamily</link> ***families,
                                             int *n_families);


void        <link linkend="pango-break">pango_break</link>                     (const <link linkend="gchar">gchar</link> *text,
                                             int length,
                                             <link linkend="PangoAnalysis">PangoAnalysis</link> *analysis,
                                             <link linkend="PangoLogAttr">PangoLogAttr</link> *attrs,
                                             int attrs_len);
void        <link linkend="pango-get-log-attrs">pango_get_log_attrs</link>             (const char *text,
                                             int length,
                                             int level,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="PangoLogAttr">PangoLogAttr</link> *log_attrs,
                                             int attrs_len);
void        <link linkend="pango-find-paragraph-boundary">pango_find_paragraph_boundary</link>   (const <link linkend="gchar">gchar</link> *text,
                                             <link linkend="gint">gint</link> length,
                                             <link linkend="gint">gint</link> *paragraph_delimiter_index,
                                             <link linkend="gint">gint</link> *next_paragraph_start);
void        <link linkend="pango-default-break">pango_default_break</link>             (const <link linkend="gchar">gchar</link> *text,
                                             int length,
                                             <link linkend="PangoAnalysis">PangoAnalysis</link> *analysis,
                                             <link linkend="PangoLogAttr">PangoLogAttr</link> *attrs,
                                             int attrs_len);
struct      <link linkend="PangoLogAttr">PangoLogAttr</link>;

void        <link linkend="pango-shape">pango_shape</link>                     (const <link linkend="gchar">gchar</link> *text,
                                             <link linkend="gint">gint</link> length,
                                             <link linkend="PangoAnalysis">PangoAnalysis</link> *analysis,
                                             <link linkend="PangoGlyphString">PangoGlyphString</link> *glyphs);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----PangoContext
</synopsis>

</refsect1>






<refsect1>
<title>Description</title>
<para>
The Pango rendering pipeline takes a string of
Unicode characters and converts it into glyphs.
The functions described in this section accomplish
various steps of this process.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="PangoContext-struct"/>struct PangoContext</title>
<programlisting>struct PangoContext;</programlisting>
<para>
The <link linkend="PangoContext">PangoContext</link> structure stores global information
used to control the itemization process. It contains
the following fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry>gchar *lang;</entry>
<entry>the global default language in the standard form
       "fr" or "fr_FR". (This may be overriden
       with the <parameter>lang_info</parameter> parameter to <link linkend="pango-itemize">pango_itemize</link>().)</entry>
</row>

<row>
<entry>gchar *render_type;</entry>
<entry>a string identifier for the rendering system to use,
       for instance <literal>PANGO_RENDER_TYPE_X</literal></entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PangoItem"/>struct PangoItem</title>
<programlisting>struct PangoItem {

  gint offset;
  gint length;
  gint num_chars;
  PangoAnalysis analysis;
};
</programlisting>
<para>
The <link linkend="PangoItem">PangoItem</link> structure stores information about
a segment of text. It contains the following fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry>gint offset;</entry>
<entry>the offset of the segment from the beginning of the
       string in bytes.</entry>
</row>

<row>
<entry>gint length;</entry>
<entry>the length of the segment in bytes.</entry>
</row>

<row>
<entry>gint num_chars;</entry>
<entry>the length of the segment in characters.</entry>
</row>

<row>
<entry>gint analysis;</entry>
<entry>the properties of the segment.</entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PangoAnalysis"/>struct PangoAnalysis</title>
<programlisting>struct PangoAnalysis {

  PangoEngineShape *shape_engine;
  PangoEngineLang  *lang_engine;
  PangoFont *font;
  guint8 level;
  PangoLanguage *language;
  GSList *extra_attrs;
};
</programlisting>
<para>
The <link linkend="PangoAnalysis">PangoAnalysis</link> structure stores information about
the properties of a segment of text. It has the following
fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry><link linkend="PangoEngineShape">PangoEngineShape</link> *shape_engine;</entry>
<entry>the engine for doing rendering-system-dependent processing</entry>
</row>

<row>
<entry><link linkend="PangoEngineLang">PangoEngineLang</link> *lang_engine;</entry>
<entry>the engine for doing rendering-system-independent processing</entry>
</row>

<row>
<entry>guint8 level;</entry>
<entry>the bidrectional level for this segment.</entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PangoDirection"/>enum PangoDirection</title>
<programlisting>typedef enum {
  PANGO_DIRECTION_LTR,
  PANGO_DIRECTION_RTL,
  PANGO_DIRECTION_TTB_LTR,
  PANGO_DIRECTION_TTB_RTL
} PangoDirection;
</programlisting>
<para>
The <link linkend="PangoDirection">PangoDirection</link> type represents the direction of writing
for text.
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_DIRECTION_LTR</literal></term>
<listitem><simpara>The text is written left-to-right
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_DIRECTION_RTL</literal></term>
<listitem><simpara>The text is written right-to-left
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_DIRECTION_TTB_LTR</literal></term>
<listitem><simpara>The text is written vertically
                          top-to-bottom, with the rows ordered from
                          left to right.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_DIRECTION_TTB_RTL</literal></term>
<listitem><simpara>The text is written vertically
                          top-to-bottom, with the rows ordered from
                          right to left.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-DIRECTION-CAPS"/>PANGO_TYPE_DIRECTION</title>
<programlisting>#define PANGO_TYPE_DIRECTION (pango_direction_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoDirection">PangoDirection</link>.
</para></refsect2>
<refsect2>
<title><anchor id="pango-itemize"/>pango_itemize ()</title>
<programlisting><link linkend="GList">GList</link>*      pango_itemize                   (<link linkend="PangoContext">PangoContext</link> *context,
                                             const char *text,
                                             int start_index,
                                             int length,
                                             <link linkend="PangoAttrList">PangoAttrList</link> *attrs,
                                             <link linkend="PangoAttrIterator">PangoAttrIterator</link> *cached_iter);</programlisting>
<para>
Breaks a piece of text into segments with consistent
directional level and shaping engine. Each byte of <parameter>text</parameter> will
be contained in exactly one of the items in the returned list;
the generated list of items will be in logical order (the start
offsets of the items are ascending).
</para>
<para>
<parameter>cached_iter</parameter> should be an iterator over <parameter>attrs</parameter> currently positioned at a
range before or containing <parameter>start_index</parameter>; <parameter>cached_iter</parameter> will be advanced to
the range covering the position just after <parameter>start_index</parameter> + <parameter>length</parameter>.
(i.e. if itemizing in a loop, just keep passing in the same <parameter>cached_iter</parameter>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara>   a structure holding information that affects
               the itemization process.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara>      the text to itemize.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_index</parameter>&nbsp;:</term>
<listitem><simpara> first byte in <parameter>text</parameter> to process
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara>    the number of bytes (not characters) to process
            after <parameter>start_index</parameter>.
            This must be &gt;= 0.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attrs</parameter>&nbsp;:</term>
<listitem><simpara>     the set of attributes that apply to <parameter>text</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cached_iter</parameter>&nbsp;:</term>
<listitem><simpara>      Cached attribute iterator, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a GList of PangoItem structures.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-item-free"/>pango_item_free ()</title>
<programlisting>void        pango_item_free                 (<link linkend="PangoItem">PangoItem</link> *item);</programlisting>
<para>
Free a <link linkend="PangoItem">PangoItem</link> and all associated memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>item</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoItem">PangoItem</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-item-copy"/>pango_item_copy ()</title>
<programlisting><link linkend="PangoItem">PangoItem</link>*  pango_item_copy                 (<link linkend="PangoItem">PangoItem</link> *item);</programlisting>
<para>
Copy an existing <link linkend="PangoItem">PangoItem</link> structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>item</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoItem">PangoItem</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoItem">PangoItem</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-item-new"/>pango_item_new ()</title>
<programlisting><link linkend="PangoItem">PangoItem</link>*  pango_item_new                  (void);</programlisting>
<para>
Creates a new <link linkend="PangoItem">PangoItem</link> structure initialized to default values.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoItem">PangoItem</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-item-split"/>pango_item_split ()</title>
<programlisting><link linkend="PangoItem">PangoItem</link>*  pango_item_split                (<link linkend="PangoItem">PangoItem</link> *orig,
                                             int split_index,
                                             int split_offset);</programlisting>
<para>
Modifies <parameter>orig</parameter> to cover only the text after <parameter>split_index</parameter>, and
returns a new item that covers the text before <parameter>split_index</parameter> that
used to be in <parameter>orig</parameter>. You can think of <parameter>split_index</parameter> as the length of
the returned item. <parameter>split_index</parameter> may not be 0, and it may not be
greater than or equal to the length of <parameter>orig</parameter> (that is, there must
be at least one byte assigned to each item, you can't create a
zero-length item). <parameter>split_offset</parameter> is the length of the first item in
chars, and must be provided because the text used to generate the
item isn't available, so <link linkend="pango-item-split">pango_item_split</link>() can't count the char
length of the split items itself.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>orig</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoItem">PangoItem</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>split_index</parameter>&nbsp;:</term>
<listitem><simpara> byte index of position to split item, relative to the start of the item
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>split_offset</parameter>&nbsp;:</term>
<listitem><simpara> number of chars between start of <parameter>orig</parameter> and <parameter>split_index</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> new item representing text before <parameter>split_index</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-reorder-items"/>pango_reorder_items ()</title>
<programlisting><link linkend="GList">GList</link>*      pango_reorder_items             (<link linkend="GList">GList</link> *logical_items);</programlisting>
<para>
From a list of items in logical order and the associated
directional levels, produce a list in visual order.
The original list is unmodified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logical_items</parameter>&nbsp;:</term>
<listitem><simpara>  a GList of <link linkend="PangoItem">PangoItem</link> in logical order.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a GList of PangoItem structures in visual order.

(Please mail otaylor<parameter>redhat</parameter>.com if you use this function.
 It is not a particularly convenient interface, and the code
 is duplicated elsewhere in Pango for that reason.)
  
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-new"/>pango_context_new ()</title>
<programlisting><link linkend="PangoContext">PangoContext</link>* pango_context_new             (void);</programlisting>
<para>
Creates a new <link linkend="PangoContext">PangoContext</link> initialized to default value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-set-font-map"/>pango_context_set_font_map ()</title>
<programlisting>void        pango_context_set_font_map      (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoFontMap">PangoFontMap</link> *font_map);</programlisting>
<para>
Sets the font map to be searched when fonts are looked-up in this context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>font_map</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="PangoFontMap">PangoFontMap</link> to set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-get-font-description"/>pango_context_get_font_description ()</title>
<programlisting><link linkend="PangoFontDescription">PangoFontDescription</link>* pango_context_get_font_description
                                            (<link linkend="PangoContext">PangoContext</link> *context);</programlisting>
<para>
Retrieve the default font description for the context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a pointer to the context's default font description.
              This value must not be modified or freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-set-font-description"/>pango_context_set_font_description ()</title>
<programlisting>void        pango_context_set_font_description
                                            (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Set the default font description for the context</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> the new pango font description
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-get-language"/>pango_context_get_language ()</title>
<programlisting><link linkend="PangoLanguage">PangoLanguage</link>* pango_context_get_language   (<link linkend="PangoContext">PangoContext</link> *context);</programlisting>
<para>
Retrieves the global language tag for the context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the global language tag.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-set-language"/>pango_context_set_language ()</title>
<programlisting>void        pango_context_set_language      (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Sets the global language tag for the context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> the new language tag.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-get-base-dir"/>pango_context_get_base_dir ()</title>
<programlisting><link linkend="PangoDirection">PangoDirection</link> pango_context_get_base_dir   (<link linkend="PangoContext">PangoContext</link> *context);</programlisting>
<para>
Retrieves the base direction for the context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the base direction for the context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-set-base-dir"/>pango_context_set_base_dir ()</title>
<programlisting>void        pango_context_set_base_dir      (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoDirection">PangoDirection</link> direction);</programlisting>
<para>
Sets the base direction for the context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>direction</parameter>&nbsp;:</term>
<listitem><simpara> the new base direction
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-load-font"/>pango_context_load_font ()</title>
<programlisting><link linkend="PangoFont">PangoFont</link>*  pango_context_load_font         (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Loads the font in one of the fontmaps in the context
that is the closest match for <parameter>desc</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link> describing the font to load
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the font loaded, or <literal>NULL</literal> if no font matched.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-load-fontset"/>pango_context_load_fontset ()</title>
<programlisting><link linkend="PangoFontset">PangoFontset</link>* pango_context_load_fontset    (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Load a set of fonts in the context that can be used to render
a font matching <parameter>desc</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link> describing the fonts to load
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoLanguage">PangoLanguage</link> the fonts will be used for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the fontset, or <literal>NULL</literal> if no font matched.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-get-metrics"/>pango_context_get_metrics ()</title>
<programlisting><link linkend="PangoFontMetrics">PangoFontMetrics</link>* pango_context_get_metrics (<link linkend="PangoContext">PangoContext</link> *context,
                                             const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Get overall metric information for a font particular font
description.  Since the metrics may be substantially different for
different scripts, a language tag can be provided to indicate that
the metrics should be retrieved that correspond to the script(s)
used by that language.
</para>
<para>
The <link linkend="PangoFontDescription">PangoFontDescription</link> is interpreted in the same way as
by <link linkend="pango-itemize">pango_itemize</link>(), and the family name may be a comma separated
list of figures. If characters from multiple of these families
would be used to render the string, then the returned fonts would
be a composite of the metrics for the fonts loaded for the
individual families.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> language tag used to determine which script to get the metrics
           for, or <literal>NULL</literal> to indicate to get the metrics for the entire
           font.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="PangoMetrics">PangoMetrics</link> object. The caller must call <link linkend="pango-font-metrics-unref">pango_font_metrics_unref</link>()
  when finished using the object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-context-list-families"/>pango_context_list_families ()</title>
<programlisting>void        pango_context_list_families     (<link linkend="PangoContext">PangoContext</link> *context,
                                             <link linkend="PangoFontFamily">PangoFontFamily</link> ***families,
                                             int *n_families);</programlisting>
<para>
List all families for a context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoContext">PangoContext</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>families</parameter>&nbsp;:</term>
<listitem><simpara> location to store a pointer to an array of PangoFontFamily *.
           This array should be freed with <link linkend="g-free">g_free</link>().
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_families</parameter>&nbsp;:</term>
<listitem><simpara> location to store the number of elements in <parameter>descs</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-break"/>pango_break ()</title>
<programlisting>void        pango_break                     (const <link linkend="gchar">gchar</link> *text,
                                             int length,
                                             <link linkend="PangoAnalysis">PangoAnalysis</link> *analysis,
                                             <link linkend="PangoLogAttr">PangoLogAttr</link> *attrs,
                                             int attrs_len);</programlisting>
<para>
Determines possible line, word, and character breaks
for a string of Unicode text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara>      the text to process
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara>    length of <parameter>text</parameter> in bytes (may be -1 if <parameter>text</parameter> is nul-terminated)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analysis</parameter>&nbsp;:</term>
<listitem><simpara>  <link linkend="PangoAnalysis">PangoAnalysis</link> structure from <link linkend="pango-itemize">pango_itemize</link>()
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attrs</parameter>&nbsp;:</term>
<listitem><simpara>     an array to store character information in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attrs_len</parameter>&nbsp;:</term>
<listitem><simpara> size of the array passed as <parameter>attrs</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-get-log-attrs"/>pango_get_log_attrs ()</title>
<programlisting>void        pango_get_log_attrs             (const char *text,
                                             int length,
                                             int level,
                                             <link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="PangoLogAttr">PangoLogAttr</link> *log_attrs,
                                             int attrs_len);</programlisting>
<para>
Computes a <link linkend="PangoLogAttr">PangoLogAttr</link> for each character in <parameter>text</parameter>. The <parameter>log_attrs</parameter>
array must have one <link linkend="PangoLogAttr">PangoLogAttr</link> for each position in <parameter>text</parameter>; if
<parameter>text</parameter> contains N characters, it has N+1 positions, including the
last position at the end of the text. <parameter>text</parameter> should be an entire
paragraph; logical attributes can't be computed without context
(for example you need to see spaces on either side of a word to know the
word is a word).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> text to process
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length in bytes of <parameter>text</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara> embedding level, or -1 if unknown
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> language tag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>log_attrs</parameter>&nbsp;:</term>
<listitem><simpara> array with one <link linkend="PangoLogAttr">PangoLogAttr</link> per character in <parameter>text</parameter>, plus one extra, to be filled in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attrs_len</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>log_attrs</parameter> array
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-find-paragraph-boundary"/>pango_find_paragraph_boundary ()</title>
<programlisting>void        pango_find_paragraph_boundary   (const <link linkend="gchar">gchar</link> *text,
                                             <link linkend="gint">gint</link> length,
                                             <link linkend="gint">gint</link> *paragraph_delimiter_index,
                                             <link linkend="gint">gint</link> *next_paragraph_start);</programlisting>
<para>
Locates a paragraph boundary in <parameter>text</parameter>. A boundary is caused by
delimiter characters, such as a newline, carriage return, carriage
return-newline pair, or Unicode paragraph separator character.  The
index of the run of delimiters is returned in
<parameter>paragraph_delimiter_index</parameter>. The index of the start of the paragraph
(index after all delimiters) is stored in <parameter>next_paragraph_start</parameter>.
</para>
<para>
If no delimiters are found, both <parameter>paragraph_delimiter_index</parameter> and
<parameter>next_paragraph_start</parameter> are filled with the length of <parameter>text</parameter> (an index one
off the end).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> UTF-8 text
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>text</parameter> in bytes, or -1 if nul-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>paragraph_delimiter_index</parameter>&nbsp;:</term>
<listitem><simpara> return location for index of delimiter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>next_paragraph_start</parameter>&nbsp;:</term>
<listitem><simpara> return location for start of next paragraph
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-default-break"/>pango_default_break ()</title>
<programlisting>void        pango_default_break             (const <link linkend="gchar">gchar</link> *text,
                                             int length,
                                             <link linkend="PangoAnalysis">PangoAnalysis</link> *analysis,
                                             <link linkend="PangoLogAttr">PangoLogAttr</link> *attrs,
                                             int attrs_len);</programlisting>
<para>
This is the default break algorithm, used if no language
engine overrides it. Normally you should use <link linkend="pango-break">pango_break</link>()
instead; this function is mostly useful for chaining up
from a language engine override. Unlike <link linkend="pango-break">pango_break</link>(),
<parameter>analysis</parameter> can be NULL, but only do that if you know what
you're doing. (If you need an analysis to pass to <link linkend="pango-break">pango_break</link>(),
you need to <link linkend="pango-itemize">pango_itemize</link>() or use <link linkend="pango-get-log-attrs">pango_get_log_attrs</link>().)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> text to break
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of text in bytes (may be -1 if <parameter>text</parameter> is nul-terminated)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analysis</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAnalysis">PangoAnalysis</link> for the <parameter>text</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attrs</parameter>&nbsp;:</term>
<listitem><simpara> logical attributes to fill in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attrs_len</parameter>&nbsp;:</term>
<listitem><simpara> size of the array passed as <parameter>attrs</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoLogAttr"/>struct PangoLogAttr</title>
<programlisting>struct PangoLogAttr {

  guint is_line_break : 1;      /* Can break line in front of character */

  guint is_mandatory_break : 1; /* Must break line in front of character */

  guint is_char_break : 1;      /* Can break here when doing char wrap */
  
  guint is_white : 1;           /* Whitespace character */

  /* cursor can appear in front of character (i.e. this is a grapheme
   * boundary, or the first character in the text)
   */
  guint is_cursor_position : 1;
  
  /* Note that in degenerate cases, you could have both start/end set on
   * some text, most likely for sentences (e.g. no space after a period, so
   * the next sentence starts right away)
   */
  
  guint is_word_start : 1;      /* first character in a word */
  guint is_word_end   : 1;      /* is first non-word char after a word */

  /* There are two ways to divide sentences. The first assigns all
   * intersentence whitespace/control/format chars to some sentence,
   * so all chars are in some sentence; is_sentence_boundary denotes
   * the boundaries there. The second way doesn't assign
   * between-sentence spaces, etc. to any sentence, so
   * is_sentence_start/is_sentence_end mark the boundaries of those
   * sentences.
   */
  guint is_sentence_boundary : 1;
  guint is_sentence_start : 1;  /* first character in a sentence */
  guint is_sentence_end : 1;    /* first non-sentence char after a sentence */
};
</programlisting>
<para>
The <link linkend="PangoLogAttr">PangoLogAttr</link> structure stores information
about the attributes of a single character.
</para></refsect2>
<refsect2>
<title><anchor id="pango-shape"/>pango_shape ()</title>
<programlisting>void        pango_shape                     (const <link linkend="gchar">gchar</link> *text,
                                             <link linkend="gint">gint</link> length,
                                             <link linkend="PangoAnalysis">PangoAnalysis</link> *analysis,
                                             <link linkend="PangoGlyphString">PangoGlyphString</link> *glyphs);</programlisting>
<para>
Given a segment of text and the corresponding 
<link linkend="PangoAnalysis">PangoAnalysis</link> structure returned from <link linkend="pango-itemize">pango_itemize</link>(),
convert the characters into glyphs. You may also pass
in only a substring of the item from <link linkend="pango-itemize">pango_itemize</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara>      the text to process
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara>    the length (in bytes) of <parameter>text</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>analysis</parameter>&nbsp;:</term>
<listitem><simpara>  <link linkend="PangoAnalysis">PangoAnalysis</link> structure from PangoItemize
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>glyphs</parameter>&nbsp;:</term>
<listitem><simpara>    glyph string in which to store results
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
