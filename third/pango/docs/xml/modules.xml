<refentry id="pango-Modules">
<refmeta>
<refentrytitle>Modules</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PANGO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Modules</refname><refpurpose>Support for loadable modules</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="PangoIncludedModule">PangoIncludedModule</link>;
struct      <link linkend="PangoMap">PangoMap</link>;
struct      <link linkend="PangoMapEntry">PangoMapEntry</link>;
<link linkend="PangoMap">PangoMap</link>*   <link linkend="pango-find-map">pango_find_map</link>                  (<link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="guint">guint</link> engine_type_id,
                                             <link linkend="guint">guint</link> render_type_id);
<link linkend="PangoMapEntry">PangoMapEntry</link>* <link linkend="pango-map-get-entry">pango_map_get_entry</link>          (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="guint32">guint32</link> wc);
<link linkend="PangoEngine">PangoEngine</link>* <link linkend="pango-map-get-engine">pango_map_get_engine</link>           (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="guint32">guint32</link> wc);
void        <link linkend="pango-module-register">pango_module_register</link>           (<link linkend="PangoIncludedModule">PangoIncludedModule</link> *module);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="PangoIncludedModule"/>struct PangoIncludedModule</title>
<programlisting>struct PangoIncludedModule {

  void (*list) (PangoEngineInfo **engines, int *n_engines);
  PangoEngine *(*load) (const char *id);
  void (*unload) (PangoEngine *engine);
};
</programlisting>
<para>
The <link linkend="PangoIncludedModule">PangoIncludedModule</link> structure for a statically linked module 
contains the functions that would otherwise be loaded from a dynamically 
loaded module.
</para></refsect2>
<refsect2>
<title><anchor id="PangoMap"/>struct PangoMap</title>
<programlisting>struct PangoMap;</programlisting>
<para>
A <link linkend="PangoMap">PangoMap</link> structure can be used to determine the engine to
use for each character.
</para></refsect2>
<refsect2>
<title><anchor id="PangoMapEntry"/>struct PangoMapEntry</title>
<programlisting>struct PangoMapEntry {

  PangoEngineInfo *info;
  gboolean is_exact;
};
</programlisting>
<para>
A <link linkend="PangoMapEntry">PangoMapEntry</link> contains information about the engine that should be used 
for the codepoint to which this entry belongs and also whether the engine 
matches the language tag for this entry's map exactly or just approximately.
</para></refsect2>
<refsect2>
<title><anchor id="pango-find-map"/>pango_find_map ()</title>
<programlisting><link linkend="PangoMap">PangoMap</link>*   pango_find_map                  (<link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             <link linkend="guint">guint</link> engine_type_id,
                                             <link linkend="guint">guint</link> render_type_id);</programlisting>
<para>
Locate a <link linkend="PangoMap">PangoMap</link> for a particular engine type and render
type. The resulting map can be used to determine the engine
for each character.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> the language tag for which to find the map
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>engine_type_id</parameter>&nbsp;:</term>
<listitem><simpara> the engine type for the map to find
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>render_type_id</parameter>&nbsp;:</term>
<listitem><simpara> the render type for the map to find
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-map-get-entry"/>pango_map_get_entry ()</title>
<programlisting><link linkend="PangoMapEntry">PangoMapEntry</link>* pango_map_get_entry          (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="guint32">guint32</link> wc);</programlisting>
<para>
Returns the entry in the map for a given codepoint. The entry
contains information about the engine that should be used for
the codepoint and also whether the engine matches the language
tag for which the map was created exactly or just approximately.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>map</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoMap">PangoMap</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wc</parameter>&nbsp;:</term>
<listitem><simpara>  an ISO-10646 codepoint
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the <link linkend="PangoMapEntry">PangoMapEntry</link> for the codepoint. This value
  is owned by the <link linkend="PangoMap">PangoMap</link> and should not be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-map-get-engine"/>pango_map_get_engine ()</title>
<programlisting><link linkend="PangoEngine">PangoEngine</link>* pango_map_get_engine           (<link linkend="PangoMap">PangoMap</link> *map,
                                             <link linkend="guint32">guint32</link> wc);</programlisting>
<para>
Returns the engine listed in the map for a given codepoint.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>map</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoMap">PangoMap</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wc</parameter>&nbsp;:</term>
<listitem><simpara>  an ISO-10646 codepoint
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the engine, if one is listed for the codepoint,
   or <literal>NULL</literal>. The lookup may cause the engine to be loaded;
   once an engine is loaded
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-module-register"/>pango_module_register ()</title>
<programlisting>void        pango_module_register           (<link linkend="PangoIncludedModule">PangoIncludedModule</link> *module);</programlisting>
<para>
Registers a statically linked module with Pango. The
<link linkend="PangoIncludedModule">PangoIncludedModule</link> structure that is passed in contains the
functions that would otherwise be loaded from a dynamically loaded
module.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>module</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoIncludedModule">PangoIncludedModule</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
