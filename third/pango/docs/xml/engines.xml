<refentry id="pango-Engines">
<refmeta>
<refentrytitle>Engines</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PANGO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Engines</refname><refpurpose>Language-specific and rendering-system-specific processing</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="PangoEngineInfo">PangoEngineInfo</link>;
struct      <link linkend="PangoEngineRange">PangoEngineRange</link>;
struct      <link linkend="PangoEngine">PangoEngine</link>;
struct      <link linkend="PangoEngineLang">PangoEngineLang</link>;
struct      <link linkend="PangoEngineShape">PangoEngineShape</link>;
#define     <link linkend="PANGO-ENGINE-TYPE-LANG-CAPS">PANGO_ENGINE_TYPE_LANG</link>
#define     <link linkend="PANGO-ENGINE-TYPE-SHAPE-CAPS">PANGO_ENGINE_TYPE_SHAPE</link>
#define     <link linkend="PANGO-RENDER-TYPE-NONE-CAPS">PANGO_RENDER_TYPE_NONE</link>
void        <link linkend="script-engine-list">script_engine_list</link>              (<link linkend="PangoEngineInfo">PangoEngineInfo</link> **engines,
                                             int *n_engines);
<link linkend="PangoEngine">PangoEngine</link>* <link linkend="script-engine-load">script_engine_load</link>             (const char *id);
void        <link linkend="script-engine-unload">script_engine_unload</link>            (<link linkend="PangoEngine">PangoEngine</link> *engine);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
Pango utilizes a module architecture in which the language-specific
and render-system-specific components are provided by loadable
modules. Each loadable module supplies one or more
<firstterm>engines</firstterm>.  Each <firstterm>engine</firstterm>
has an associated <firstterm>engine type</firstterm> and
<firstterm>render type</firstterm>. These two types are represented by
strings.
</para>
<para>
Each dynamically-loaded module exports several functions which provide
the public API. These functions are <link linkend="script-engine-list">script_engine_list</link>(),
<link linkend="script-engine-load">script_engine_load</link>() and <link linkend="script-engine-unload">script_engine_unload</link>().  The latter two
functions are used for loading and unloading modules, while the first
function is used when building a catalog of all available modules.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="PangoEngineInfo"/>struct PangoEngineInfo</title>
<programlisting>struct PangoEngineInfo {

  gchar *id;
  gchar *engine_type;
  gchar *render_type;
  PangoEngineRange *ranges;
  gint n_ranges;
};
</programlisting>
<para>
The <link linkend="PangoEngineInfo">PangoEngineInfo</link> structure contains information about a particular
engine. It contains the following fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry>gchar *id;</entry>
<entry>a unique string ID for the engine.</entry>
</row>
<row>
<entry>gchar *engine_type;</entry>
<entry>a string identifying the engine type.</entry>
</row>

<row>
<entry>gchar *render type;</entry>
<entry>a string identifying the render type.</entry>
</row>

<row>
<entry><link linkend="PangoEngineRange">PangoEngineRange</link> *ranges;</entry>
<entry>a pointer to an array of <link linkend="PangoEngineRange">PangoEngineRange</link>
       structures. Each structure contains information
       about a range of Unicode code points that
       this engine handles.</entry>
</row>

<row>
<entry>gint n_ranges;</entry>
<entry>the number of elements in <structfield>ranges</structfield>.</entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PangoEngineRange"/>struct PangoEngineRange</title>
<programlisting>struct PangoEngineRange {

  guint32 start;
  guint32 end;
  gchar *langs;
};
</programlisting>
<para>
The PangoEngineRange structure contains
information about a range of Unicode code
points. It contains the following fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry>guint32 start;</entry>
<entry>the first code point in the range.</entry>
</row>

<row>
<entry>guint32 end;</entry>
<entry>the last code point for the range.</entry>
</row>

<row>
<entry>gchar *langs;</entry>
<entry>A semicolon separated list of languages that this
       engine handles for this range. This may be empty, 
       in which case the engine is saying that it is a
       fallback choice for all languages for this range,
       but should not be used if another engine 
       indicates that it is specific for the language for
       a given code point. An entry in this list of "*"
       indicates that this engine is specific to all
       languages for this range.</entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PangoEngine"/>struct PangoEngine</title>
<programlisting>struct PangoEngine {

  gchar *id;
  gchar *type;
  gint length;
};
</programlisting>
<para>
The <link linkend="PangoEngine">PangoEngine</link> structure contains basic
information common to all script engines. It
contains the following fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry>gchar *id;</entry>
<entry>a unique string ID for this language engine.</entry>
</row>

<row>
<entry>gchar *type;</entry>
<entry>The "type" of the engine. (Is this engine type or render type??).</entry>
</row>

<row>
<entry>gint length;</entry>
<entry>the length of the entire structure in bytes. This is 
       provided so that new functions can be added at the
       end of subtypes of <link linkend="PangoEngine">PangoEngine</link> without breaking
       older modules.</entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PangoEngineLang"/>struct PangoEngineLang</title>
<programlisting>struct PangoEngineLang {

  PangoEngine engine;
  void (*script_break) (const char    *text,
			int            len,
			PangoAnalysis *analysis,
			PangoLogAttr  *attrs,
                        int            attrs_len);
};
</programlisting>
<para>
The <link linkend="PangoEngineLang">PangoEngineLang</link> structure extends the
basic <link linkend="PangoEngine">PangoEngine</link> structure to engines that
deal with the rendering-system independent part
of of the rendering pipeline. It contains the following fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry><link linkend="PangoEngine">PangoEngine</link> engine;</entry>
<entry>A nested structure containing basic engine data.</entry>
</row>

<row>
<entry>void (*script_break) (...);</entry>
<entry>A function that provides an implementation
       for <link linkend="pango-break">pango_break</link>().</entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PangoEngineShape"/>struct PangoEngineShape</title>
<programlisting>struct PangoEngineShape {

  PangoEngine engine;
  void (*script_shape) (PangoFont        *font,
			const char       *text,
			int               length,
			PangoAnalysis    *analysis,
			PangoGlyphString *glyphs);
  PangoCoverage *(*get_coverage) (PangoFont        *font,
				  PangoLanguage    *language);
};
</programlisting>
<para>
The <link linkend="PangoEngineShape">PangoEngineShape</link> structure extends the
basic <link linkend="PangoEngine">PangoEngine</link> structure to engines that
deal with the rendering-system dependent part
of of the rendering pipeline. It contains the following fields:

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry><link linkend="PangoEngine">PangoEngine</link> engine;</entry>
<entry>A nested structure containing basic engine data.</entry>
</row>

<row>
<entry> void (*script_shape) (...);</entry>
<entry>A function that provides an implementation
       for pango_shape.</entry>
</row>

</tbody></tgroup></informaltable>
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-ENGINE-TYPE-LANG-CAPS"/>PANGO_ENGINE_TYPE_LANG</title>
<programlisting>#define PANGO_ENGINE_TYPE_LANG "PangoEngineLang"
</programlisting>
<para>
A string constant defining the engine type
for <firstterm>language engines</firstterm>.
These engines have a engine structure of 
type <link linkend="PangoEngineLang">PangoEngineLang</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-ENGINE-TYPE-SHAPE-CAPS"/>PANGO_ENGINE_TYPE_SHAPE</title>
<programlisting>#define PANGO_ENGINE_TYPE_SHAPE "PangoEngineShape"
</programlisting>
<para>
A string constant defining the engine type
for <firstterm>shaping engines</firstterm>.
These engines have a engine structure of 
type <link linkend="PangoEngineShape">PangoEngineShape</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-RENDER-TYPE-NONE-CAPS"/>PANGO_RENDER_TYPE_NONE</title>
<programlisting>#define PANGO_RENDER_TYPE_NONE "PangoRenderNone"
</programlisting>
<para>
A string constant defining the render type
for engines that are not rendering-system 
specific.
</para></refsect2>
<refsect2>
<title><anchor id="script-engine-list"/>script_engine_list ()</title>
<programlisting>void        script_engine_list              (<link linkend="PangoEngineInfo">PangoEngineInfo</link> **engines,
                                             int *n_engines);</programlisting>
<para>
Function to be provided by a module to list the engines that the
module supplies. The function stores a pointer to an array
of <link linkend="PangoEngineInfo">PangoEngineInfo</link> structures and the length of that array in
the given location.
</para><variablelist role="params">
<varlistentry><term><parameter>engines</parameter>&nbsp;:</term>
<listitem><simpara>location to store a pointer to an array of engines.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_engines</parameter>&nbsp;:</term>
<listitem><simpara>location to store the number of elements in <parameter>engines</parameter>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="script-engine-load"/>script_engine_load ()</title>
<programlisting><link linkend="PangoEngine">PangoEngine</link>* script_engine_load             (const char *id);</programlisting>
<para>
Function to be provided by a module to load a particular engine.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>the ID from the <link linkend="PangoEngineInfo">PangoEngineInfo</link> structure of the
     module to load.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the newly created script engine.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="script-engine-unload"/>script_engine_unload ()</title>
<programlisting>void        script_engine_unload            (<link linkend="PangoEngine">PangoEngine</link> *engine);</programlisting>
<para>
Function to be provided by a module to unload an engine loaded
with <link linkend="script-engine-load">script_engine_load</link>().
</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>the engine to unload.


<!-- Local Variables: -->
<!-- sgml-parent-document: ("../pango-docs.sgml" "book" "refsect2") -->
<!-- End: -->


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
