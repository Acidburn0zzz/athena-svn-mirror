<refentry id="pango-Text-Attributes">
<refmeta>
<refentrytitle>Text Attributes</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>PANGO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Text Attributes</refname><refpurpose>Font and other attributes for annotating text</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="PangoAttrType">PangoAttrType</link>;
#define     <link linkend="PANGO-TYPE-ATTR-TYPE-CAPS">PANGO_TYPE_ATTR_TYPE</link>
struct      <link linkend="PangoAttrClass">PangoAttrClass</link>;
struct      <link linkend="PangoAttribute">PangoAttribute</link>;
struct      <link linkend="PangoAttrString">PangoAttrString</link>;
struct      <link linkend="PangoAttrLanguage">PangoAttrLanguage</link>;
struct      <link linkend="PangoAttrColor">PangoAttrColor</link>;
struct      <link linkend="PangoAttrInt">PangoAttrInt</link>;
struct      <link linkend="PangoAttrFloat">PangoAttrFloat</link>;
struct      <link linkend="PangoAttrFontDesc">PangoAttrFontDesc</link>;
struct      <link linkend="PangoAttrShape">PangoAttrShape</link>;
<link linkend="gboolean">gboolean</link>    <link linkend="pango-parse-markup">pango_parse_markup</link>              (const char *markup_text,
                                             int length,
                                             <link linkend="gunichar">gunichar</link> accel_marker,
                                             <link linkend="PangoAttrList">PangoAttrList</link> **attr_list,
                                             char **text,
                                             <link linkend="gunichar">gunichar</link> *accel_char,
                                             <link linkend="GError">GError</link> **error);
<link linkend="PangoAttrType">PangoAttrType</link> <link linkend="pango-attr-type-register">pango_attr_type_register</link>      (const <link linkend="gchar">gchar</link> *name);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attribute-copy">pango_attribute_copy</link>        (const <link linkend="PangoAttribute">PangoAttribute</link> *attr);
<link linkend="gboolean">gboolean</link>    <link linkend="pango-attribute-equal">pango_attribute_equal</link>           (const <link linkend="PangoAttribute">PangoAttribute</link> *attr1,
                                             const <link linkend="PangoAttribute">PangoAttribute</link> *attr2);
void        <link linkend="pango-attribute-destroy">pango_attribute_destroy</link>         (<link linkend="PangoAttribute">PangoAttribute</link> *attr);

<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-language-new">pango_attr_language_new</link>     (<link linkend="PangoLanguage">PangoLanguage</link> *language);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-family-new">pango_attr_family_new</link>       (const char *family);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-style-new">pango_attr_style_new</link>        (<link linkend="PangoStyle">PangoStyle</link> style);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-variant-new">pango_attr_variant_new</link>      (<link linkend="PangoVariant">PangoVariant</link> variant);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-stretch-new">pango_attr_stretch_new</link>      (<link linkend="PangoStretch">PangoStretch</link> stretch);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-weight-new">pango_attr_weight_new</link>       (<link linkend="PangoWeight">PangoWeight</link> weight);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-size-new">pango_attr_size_new</link>         (int size);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-font-desc-new">pango_attr_font_desc_new</link>    (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-foreground-new">pango_attr_foreground_new</link>   (<link linkend="guint16">guint16</link> red,
                                             <link linkend="guint16">guint16</link> green,
                                             <link linkend="guint16">guint16</link> blue);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-background-new">pango_attr_background_new</link>   (<link linkend="guint16">guint16</link> red,
                                             <link linkend="guint16">guint16</link> green,
                                             <link linkend="guint16">guint16</link> blue);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-strikethrough-new">pango_attr_strikethrough_new</link>
                                            (<link linkend="gboolean">gboolean</link> strikethrough);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-underline-new">pango_attr_underline_new</link>    (<link linkend="PangoUnderline">PangoUnderline</link> underline);
enum        <link linkend="PangoUnderline">PangoUnderline</link>;
#define     <link linkend="PANGO-TYPE-UNDERLINE-CAPS">PANGO_TYPE_UNDERLINE</link>
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-shape-new">pango_attr_shape_new</link>        (const <link linkend="PangoRectangle">PangoRectangle</link> *ink_rect,
                                             const <link linkend="PangoRectangle">PangoRectangle</link> *logical_rect);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-scale-new">pango_attr_scale_new</link>        (<link linkend="double">double</link> scale_factor);
#define     <link linkend="PANGO-SCALE-XX-SMALL-CAPS">PANGO_SCALE_XX_SMALL</link>
#define     <link linkend="PANGO-SCALE-X-SMALL-CAPS">PANGO_SCALE_X_SMALL</link>
#define     <link linkend="PANGO-SCALE-SMALL-CAPS">PANGO_SCALE_SMALL</link>
#define     <link linkend="PANGO-SCALE-MEDIUM-CAPS">PANGO_SCALE_MEDIUM</link>
#define     <link linkend="PANGO-SCALE-LARGE-CAPS">PANGO_SCALE_LARGE</link>
#define     <link linkend="PANGO-SCALE-X-LARGE-CAPS">PANGO_SCALE_X_LARGE</link>
#define     <link linkend="PANGO-SCALE-XX-LARGE-CAPS">PANGO_SCALE_XX_LARGE</link>
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-rise-new">pango_attr_rise_new</link>         (int rise);
struct      <link linkend="PangoColor">PangoColor</link>;
#define     <link linkend="PANGO-TYPE-COLOR-CAPS">PANGO_TYPE_COLOR</link>
void        <link linkend="pango-color-free">pango_color_free</link>                (<link linkend="PangoColor">PangoColor</link> *color);
<link linkend="gboolean">gboolean</link>    <link linkend="pango-color-parse">pango_color_parse</link>               (<link linkend="PangoColor">PangoColor</link> *color,
                                             const char *spec);
<link linkend="PangoColor">PangoColor</link>* <link linkend="pango-color-copy">pango_color_copy</link>                (const <link linkend="PangoColor">PangoColor</link> *src);
struct      <link linkend="PangoLanguage">PangoLanguage</link>;
#define     <link linkend="PANGO-TYPE-LANGUAGE-CAPS">PANGO_TYPE_LANGUAGE</link>
<link linkend="PangoLanguage">PangoLanguage</link>* <link linkend="pango-language-from-string">pango_language_from_string</link>   (const char *language);
#define     <link linkend="pango-language-to-string">pango_language_to_string</link>        (language)
<link linkend="gboolean">gboolean</link>    <link linkend="pango-language-matches">pango_language_matches</link>          (<link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             const char *range_list);

struct      <link linkend="PangoAttrList">PangoAttrList</link>;
#define     <link linkend="PANGO-TYPE-ATTR-LIST-CAPS">PANGO_TYPE_ATTR_LIST</link>
<link linkend="PangoAttrList">PangoAttrList</link>* <link linkend="pango-attr-list-new">pango_attr_list_new</link>          (void);
void        <link linkend="pango-attr-list-ref">pango_attr_list_ref</link>             (<link linkend="PangoAttrList">PangoAttrList</link> *list);
void        <link linkend="pango-attr-list-unref">pango_attr_list_unref</link>           (<link linkend="PangoAttrList">PangoAttrList</link> *list);
<link linkend="PangoAttrList">PangoAttrList</link>* <link linkend="pango-attr-list-copy">pango_attr_list_copy</link>         (<link linkend="PangoAttrList">PangoAttrList</link> *list);
void        <link linkend="pango-attr-list-insert">pango_attr_list_insert</link>          (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttribute">PangoAttribute</link> *attr);
void        <link linkend="pango-attr-list-insert-before">pango_attr_list_insert_before</link>   (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttribute">PangoAttribute</link> *attr);
void        <link linkend="pango-attr-list-change">pango_attr_list_change</link>          (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttribute">PangoAttribute</link> *attr);
void        <link linkend="pango-attr-list-splice">pango_attr_list_splice</link>          (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttrList">PangoAttrList</link> *other,
                                             <link linkend="gint">gint</link> pos,
                                             <link linkend="gint">gint</link> len);
<link linkend="PangoAttrList">PangoAttrList</link>* <link linkend="pango-attr-list-filter">pango_attr_list_filter</link>       (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttrFilterFunc">PangoAttrFilterFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="gboolean">gboolean</link>    (<link linkend="PangoAttrFilterFunc">*PangoAttrFilterFunc</link>)          (<link linkend="PangoAttribute">PangoAttribute</link> *attribute,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="PangoAttrIterator">PangoAttrIterator</link>* <link linkend="pango-attr-list-get-iterator">pango_attr_list_get_iterator</link>
                                            (<link linkend="PangoAttrList">PangoAttrList</link> *list);
struct      <link linkend="PangoAttrIterator">PangoAttrIterator</link>;
<link linkend="PangoAttrIterator">PangoAttrIterator</link>* <link linkend="pango-attr-iterator-copy">pango_attr_iterator_copy</link> (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);
<link linkend="gboolean">gboolean</link>    <link linkend="pango-attr-iterator-next">pango_attr_iterator_next</link>        (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);
void        <link linkend="pango-attr-iterator-range">pango_attr_iterator_range</link>       (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator,
                                             <link linkend="gint">gint</link> *start,
                                             <link linkend="gint">gint</link> *end);
<link linkend="PangoAttribute">PangoAttribute</link>* <link linkend="pango-attr-iterator-get">pango_attr_iterator_get</link>     (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator,
                                             <link linkend="PangoAttrType">PangoAttrType</link> type);
void        <link linkend="pango-attr-iterator-get-font">pango_attr_iterator_get_font</link>    (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator,
                                             <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> **language,
                                             <link linkend="GSList">GSList</link> **extra_attrs);
<link linkend="GSList">GSList</link>*     <link linkend="pango-attr-iterator-get-attrs">pango_attr_iterator_get_attrs</link>   (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);
void        <link linkend="pango-attr-iterator-destroy">pango_attr_iterator_destroy</link>     (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);

</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
Attributed text is used in a number of places in Pango. It
is used as the input to the itemization process and also when
creating a <link linkend="PangoLayout">PangoLayout</link>. The data types and functions in
this section are used to represent and manipulate sets
of attributes applied to a portion of text.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="PangoAttrType"/>enum PangoAttrType</title>
<programlisting>typedef enum
{
  PANGO_ATTR_INVALID,           /* 0 is an invalid attribute type */
  PANGO_ATTR_LANGUAGE,		/* PangoAttrLanguage */
  PANGO_ATTR_FAMILY,		/* PangoAttrString */
  PANGO_ATTR_STYLE,		/* PangoAttrInt */
  PANGO_ATTR_WEIGHT,		/* PangoAttrInt */
  PANGO_ATTR_VARIANT,		/* PangoAttrInt */
  PANGO_ATTR_STRETCH,		/* PangoAttrInt */
  PANGO_ATTR_SIZE,		/* PangoAttrSize */
  PANGO_ATTR_FONT_DESC,		/* PangoAttrFontDesc */
  PANGO_ATTR_FOREGROUND,	/* PangoAttrColor */
  PANGO_ATTR_BACKGROUND,	/* PangoAttrColor */
  PANGO_ATTR_UNDERLINE,		/* PangoAttrInt */
  PANGO_ATTR_STRIKETHROUGH,	/* PangoAttrInt */
  PANGO_ATTR_RISE,		/* PangoAttrInt */
  PANGO_ATTR_SHAPE,		/* PangoAttrShape */
  PANGO_ATTR_SCALE              /* PangoAttrFloat */
} PangoAttrType;
</programlisting>
<para>
distinguishes between different types of attributes. Along with the
predefined values, it is possible to allocate additional values
for custom attributes using <link linkend="pango-attr-register-type">pango_attr_register_type</link>(). The predefined
values are given below. The type of structure used to store the
attribute is listed in parentheses after the description.
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_ATTR_INVALID</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_LANGUAGE</literal></term>
<listitem><simpara>language (<link linkend="PangoAttrLanguage">PangoAttrLanguage</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_FAMILY</literal></term>
<listitem><simpara>font family name list (<link linkend="PangoAttrString">PangoAttrString</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_STYLE</literal></term>
<listitem><simpara>font slant style (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_WEIGHT</literal></term>
<listitem><simpara>font weight (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_VARIANT</literal></term>
<listitem><simpara>font variant (normal or small caps) (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_STRETCH</literal></term>
<listitem><simpara>font stretch (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_SIZE</literal></term>
<listitem><simpara>font size in points divided by PANGO_SCALE (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_FONT_DESC</literal></term>
<listitem><simpara>font description (<link linkend="PangoAttrFontDesc">PangoAttrFontDesc</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_FOREGROUND</literal></term>
<listitem><simpara>foreground color (<link linkend="PangoAttrColor">PangoAttrColor</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_BACKGROUND</literal></term>
<listitem><simpara>background color (<link linkend="PangoAttrColor">PangoAttrColor</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_UNDERLINE</literal></term>
<listitem><simpara>whether the text has an underline (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_STRIKETHROUGH</literal></term>
<listitem><simpara>whether the text is struck-through (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_RISE</literal></term>
<listitem><simpara>baseline displacement (<link linkend="PangoAttrInt">PangoAttrInt</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_SHAPE</literal></term>
<listitem><simpara>shape (<link linkend="PangoAttrShape">PangoAttrShape</link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_ATTR_SCALE</literal></term>
<listitem><simpara>font size scale factor (<link linkend="PangoAttrScale">PangoAttrScale</link>)

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-ATTR-TYPE-CAPS"/>PANGO_TYPE_ATTR_TYPE</title>
<programlisting>#define PANGO_TYPE_ATTR_TYPE (pango_attr_type_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoAttrType">PangoAttrType</link>.
</para></refsect2>
<refsect2>
<title><anchor id="PangoAttrClass"/>struct PangoAttrClass</title>
<programlisting>struct PangoAttrClass {

  PangoAttrType type;
  PangoAttribute * (*copy) (const PangoAttribute *attr);
  void             (*destroy) (PangoAttribute *attr);
  gboolean         (*equal) (const PangoAttribute *attr1, const PangoAttribute *attr2);
};
</programlisting>
<para>
The <link linkend="PangoAttrClass">PangoAttrClass</link> structure stores the type and operations for
a particular type of attribute. The functions in this structure should
not be called directly. Instead, one should use the wrapper functions
provided for <link linkend="PangoAttribute">PangoAttribute</link>.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttrType">PangoAttrType</link> <structfield>type</structfield></term>
<listitem><simpara>the type ID for this attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link>* (*<structfield>copy</structfield>) (const PangoAttribute *attr)</term>
<listitem><simpara>function to duplicate an attribute of this type (see <link linkend="pango-attribute-copy">pango_attribute_copy</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void (*<structfield>destroy</structfield>) (PangoAttribute *attr)</term>
<listitem><simpara>function to free an attribute of this type (see <link linkend="pango-attribute-destroy">pango_attribute_destroy</link>())
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link> (*<structfield>equal</structfield>) (const PangoAttribute *attr1, const PangoAttribute *attr2)</term>
<listitem><simpara>

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttribute"/>struct PangoAttribute</title>
<programlisting>struct PangoAttribute {

  const PangoAttrClass *klass;
  guint start_index;
  guint end_index;
};
</programlisting>
<para>
The <link linkend="PangoAttribute">PangoAttribute</link> structure represents the common portions of all
attributes. Particular types of attributes include this structure
as their initial portion. The common portion of the attribute holds
the range to which the value in the type-specific part of the attribute
applies. 
</para><variablelist role="struct">
<varlistentry>
<term>const <link linkend="PangoAttrClass">PangoAttrClass</link> *<structfield>klass</structfield></term>
<listitem><simpara>the class structure holding information about the type of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link> <structfield>start_index</structfield></term>
<listitem><simpara>the start index of the range.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link> <structfield>end_index</structfield></term>
<listitem><simpara>end index of the range. The character at this index is not
            included in the range.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrString"/>struct PangoAttrString</title>
<programlisting>struct PangoAttrString {

  PangoAttribute attr;
  char *value;
};
</programlisting>
<para>
The <link linkend="PangoAttrString">PangoAttrString</link> structure is used to represent attributes with
a string value.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link> <structfield>attr</structfield></term>
<listitem><simpara>the common portion of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>char *<structfield>value</structfield></term>
<listitem><simpara>the string which is the value of the attribute

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrLanguage"/>struct PangoAttrLanguage</title>
<programlisting>struct PangoAttrLanguage {

  PangoAttribute attr;
  PangoLanguage *value;
};
</programlisting>
<para>
The <link linkend="PangoAttrColor">PangoAttrColor</link> structure is used to represent attributes that
are languages.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link> <structfield>attr</structfield></term>
<listitem><simpara>the common portion of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoLanguage">PangoLanguage</link> *<structfield>value</structfield></term>
<listitem><simpara>the <link linkend="PangoLanguage">PangoLanguage</link> which is the value of the attribute

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrColor"/>struct PangoAttrColor</title>
<programlisting>struct PangoAttrColor {

  PangoAttribute attr;
  PangoColor color;
};
</programlisting>
<para>
The <link linkend="PangoAttrColor">PangoAttrColor</link> structure is used to represent attributes that
are colors.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link> <structfield>attr</structfield></term>
<listitem><simpara>the common portion of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoColor">PangoColor</link> <structfield>color</structfield></term>
<listitem><simpara>the <link linkend="PangoColor">PangoColor</link> which is the value of the attribute

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrInt"/>struct PangoAttrInt</title>
<programlisting>struct PangoAttrInt {

  PangoAttribute attr;
  int value;
};
</programlisting>
<para>
The <link linkend="PangoAttrInt">PangoAttrInt</link> structure is used to represent attributes with
a integer or enumeration value.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link> <structfield>attr</structfield></term>
<listitem><simpara>the common portion of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>value</structfield></term>
<listitem><simpara>the value of the attribute

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrFloat"/>struct PangoAttrFloat</title>
<programlisting>struct PangoAttrFloat {

  PangoAttribute attr;
  double value;
};
</programlisting>
<para>
The <link linkend="PangoAttrFloat">PangoAttrFloat</link> structure is used to represent attributes with
a float or double value.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link> <structfield>attr</structfield></term>
<listitem><simpara>the common portion of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="double">double</link> <structfield>value</structfield></term>
<listitem><simpara>the value of the attribute

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrFontDesc"/>struct PangoAttrFontDesc</title>
<programlisting>struct PangoAttrFontDesc {

  PangoAttribute attr;
  PangoFontDescription *desc;
};
</programlisting>
<para>
The <link linkend="PangoAttrFontDesc">PangoAttrFontDesc</link> structure is used to store an attribute that
sets all aspects of the font description at once.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link> <structfield>attr</structfield></term>
<listitem><simpara>the common portion of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoFontDescription">PangoFontDescription</link> *<structfield>desc</structfield></term>
<listitem><simpara>the font description which is the value of this attribute

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrShape"/>struct PangoAttrShape</title>
<programlisting>struct PangoAttrShape {

  PangoAttribute attr;
  PangoRectangle ink_rect;
  PangoRectangle logical_rect;
};
</programlisting>
<para>
The <link linkend="PangoAttrShape">PangoAttrShape</link> structure is used to represent attributes which 
impose shape restrictions.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="PangoAttribute">PangoAttribute</link> <structfield>attr</structfield></term>
<listitem><simpara>the common portion of the attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoRectangle">PangoRectangle</link> <structfield>ink_rect</structfield></term>
<listitem><simpara>the ink rectangle to restrict to
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="PangoRectangle">PangoRectangle</link> <structfield>logical_rect</structfield></term>
<listitem><simpara>the logical rectangle to restrict to

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-parse-markup"/>pango_parse_markup ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pango_parse_markup              (const char *markup_text,
                                             int length,
                                             <link linkend="gunichar">gunichar</link> accel_marker,
                                             <link linkend="PangoAttrList">PangoAttrList</link> **attr_list,
                                             char **text,
                                             <link linkend="gunichar">gunichar</link> *accel_char,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Parses marked-up text (see
<link linkend="PangoMarkupFormat">markup format</link>) to create
a plaintext string and an attribute list.
</para>
<para>
If <parameter>accel_marker</parameter> is nonzero, the given character will mark the
character following it as an accelerator. For example, the accel
marker might be an ampersand or underscore. All characters marked
as an accelerator will receive a <literal>PANGO_UNDERLINE_LOW</literal> attribute,
and the first character so marked will be returned in <parameter>accel_char</parameter>.
Two <parameter>accel_marker</parameter> characters following each other produce a single
literal <parameter>accel_marker</parameter> character.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>markup_text</parameter>&nbsp;:</term>
<listitem><simpara> markup to parse (see <link linkend="PangoMarkupFormat">markup format</link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>markup_text</parameter>, or -1 if nul-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_marker</parameter>&nbsp;:</term>
<listitem><simpara> character that precedes an accelerator, or 0 for none
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attr_list</parameter>&nbsp;:</term>
<listitem><simpara> address of return location for a <link linkend="PangoAttrList">PangoAttrList</link>, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> address of return location for text with tags stripped, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_char</parameter>&nbsp;:</term>
<listitem><simpara> address of return location for accelerator char, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> address of return location for errors, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> FALSE if <parameter>error</parameter> is set, otherwise TRUE
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-type-register"/>pango_attr_type_register ()</title>
<programlisting><link linkend="PangoAttrType">PangoAttrType</link> pango_attr_type_register      (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Allocate a new attribute type ID.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> an identifier for the type. (Currently unused.)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new type ID.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attribute-copy"/>pango_attribute_copy ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attribute_copy        (const <link linkend="PangoAttribute">PangoAttribute</link> *attr);</programlisting>
<para>
Make a copy of an attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attribute-equal"/>pango_attribute_equal ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pango_attribute_equal           (const <link linkend="PangoAttribute">PangoAttribute</link> *attr1,
                                             const <link linkend="PangoAttribute">PangoAttribute</link> *attr2);</programlisting>
<para>
Compare two attributes for equality. This compares only the
actual value of the two attributes and not the ranges that the
attributes apply to.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>attr1</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttribute">PangoAttribute</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attr2</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="PangoAttribute">PangoAttribute</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the two attributes have the same value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attribute-destroy"/>pango_attribute_destroy ()</title>
<programlisting>void        pango_attribute_destroy         (<link linkend="PangoAttribute">PangoAttribute</link> *attr);</programlisting>
<para>
Destroy a <link linkend="PangoAttribute">PangoAttribute</link> and free all associated memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-language-new"/>pango_attr_language_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_language_new     (<link linkend="PangoLanguage">PangoLanguage</link> *language);</programlisting>
<para>
Create a new language tag attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> language tag
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-family-new"/>pango_attr_family_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_family_new       (const char *family);</programlisting>
<para>
Create a new font family attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> the family or comma separated list of families
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-style-new"/>pango_attr_style_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_style_new        (<link linkend="PangoStyle">PangoStyle</link> style);</programlisting>
<para>
Create a new font slant style attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>style</parameter>&nbsp;:</term>
<listitem><simpara> the slant style
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-variant-new"/>pango_attr_variant_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_variant_new      (<link linkend="PangoVariant">PangoVariant</link> variant);</programlisting>
<para>
Create a new font variant attribute (normal or small caps)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>variant</parameter>&nbsp;:</term>
<listitem><simpara> the variant
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-stretch-new"/>pango_attr_stretch_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_stretch_new      (<link linkend="PangoStretch">PangoStretch</link> stretch);</programlisting>
<para>
Create a new font stretch attribute</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stretch</parameter>&nbsp;:</term>
<listitem><simpara> the stretch
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-weight-new"/>pango_attr_weight_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_weight_new       (<link linkend="PangoWeight">PangoWeight</link> weight);</programlisting>
<para>
Create a new font weight attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>weight</parameter>&nbsp;:</term>
<listitem><simpara> the weight
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-size-new"/>pango_attr_size_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_size_new         (int size);</programlisting>
<para>
Create a new font-size attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> the font size, in 1000ths of a point.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-font-desc-new"/>pango_attr_font_desc_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_font_desc_new    (const <link linkend="PangoFontDescription">PangoFontDescription</link> *desc);</programlisting>
<para>
Create a new font description attribute. (This attribute
allows setting family, style, weight, variant, stretch,
and size simultaneously.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-foreground-new"/>pango_attr_foreground_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_foreground_new   (<link linkend="guint16">guint16</link> red,
                                             <link linkend="guint16">guint16</link> green,
                                             <link linkend="guint16">guint16</link> blue);</programlisting>
<para>
Create a new foreground color attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>red</parameter>&nbsp;:</term>
<listitem><simpara> the red value (ranging from 0 to 65535)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&nbsp;:</term>
<listitem><simpara> the green value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&nbsp;:</term>
<listitem><simpara> the blue value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-background-new"/>pango_attr_background_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_background_new   (<link linkend="guint16">guint16</link> red,
                                             <link linkend="guint16">guint16</link> green,
                                             <link linkend="guint16">guint16</link> blue);</programlisting>
<para>
Create a new background color attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>red</parameter>&nbsp;:</term>
<listitem><simpara> the red value (ranging from 0 to 65535)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&nbsp;:</term>
<listitem><simpara> the green value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&nbsp;:</term>
<listitem><simpara> the blue value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-strikethrough-new"/>pango_attr_strikethrough_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_strikethrough_new
                                            (<link linkend="gboolean">gboolean</link> strikethrough);</programlisting>
<para>
Create a new font strike-through attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>strikethrough</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> if the text should be struck-through.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-underline-new"/>pango_attr_underline_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_underline_new    (<link linkend="PangoUnderline">PangoUnderline</link> underline);</programlisting>
<para>
Create a new underline-style object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>underline</parameter>&nbsp;:</term>
<listitem><simpara> the underline style.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoUnderline"/>enum PangoUnderline</title>
<programlisting>typedef enum {
  PANGO_UNDERLINE_NONE,
  PANGO_UNDERLINE_SINGLE,
  PANGO_UNDERLINE_DOUBLE,
  PANGO_UNDERLINE_LOW
} PangoUnderline;
</programlisting>
<para>
the <link linkend="PangoUnderline">PangoUnderline</link> enumeration is used to specify
whether text should be underlined, and if so, the type
of underlining.
</para><variablelist role="enum">
<varlistentry>
<term><literal>PANGO_UNDERLINE_NONE</literal></term>
<listitem><simpara>no underline should be drawn.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_UNDERLINE_SINGLE</literal></term>
<listitem><simpara>a single underline should be drawn.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_UNDERLINE_DOUBLE</literal></term>
<listitem><simpara>a double underline should be drawn.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>PANGO_UNDERLINE_LOW</literal></term>
<listitem><simpara>a single underline should be drawn at a position
                      beneath the ink extents of the text being
                      underlined. This should be used only for underlining
                      single characters, such as for keyboard
                      accelerators. <literal>PANGO_UNDERLINE_SINGLE</literal> should
                      be used for extended portions of text.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-UNDERLINE-CAPS"/>PANGO_TYPE_UNDERLINE</title>
<programlisting>#define PANGO_TYPE_UNDERLINE (pango_underline_get_type())
</programlisting>
<para>
The GObject type for <link linkend="PangoUnderline">PangoUnderline</link>.
</para></refsect2>
<refsect2>
<title><anchor id="pango-attr-shape-new"/>pango_attr_shape_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_shape_new        (const <link linkend="PangoRectangle">PangoRectangle</link> *ink_rect,
                                             const <link linkend="PangoRectangle">PangoRectangle</link> *logical_rect);</programlisting>
<para>
Create a new shape attribute. A shape is used to impose a
particular ink and logical rect on the result of shaping a
particular glyph. This might be used, for instance, for
embedding a picture or a widget inside a PangoLayout.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ink_rect</parameter>&nbsp;:</term>
<listitem><simpara>     ink rectangle to assign to each character
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>logical_rect</parameter>&nbsp;:</term>
<listitem><simpara> logical rectangle assign to each character
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the newly created attribute
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-scale-new"/>pango_attr_scale_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_scale_new        (<link linkend="double">double</link> scale_factor);</programlisting>
<para>
Create a new font size scale attribute. The base font for the
affected text will have its size multiplied by <parameter>scale_factor</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>scale_factor</parameter>&nbsp;:</term>
<listitem><simpara> factor to scale the font
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-SCALE-XX-SMALL-CAPS"/>PANGO_SCALE_XX_SMALL</title>
<programlisting>#define PANGO_SCALE_XX_SMALL ((double)0.5787037037037)
</programlisting>
<para>
The scale factor for three shrinking steps (1 / (1.2 * 1.2 * 1.2)).
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-SCALE-X-SMALL-CAPS"/>PANGO_SCALE_X_SMALL</title>
<programlisting>#define PANGO_SCALE_X_SMALL  ((double)0.6444444444444)
</programlisting>
<para>
The scale factor for two shrinking steps (1 / (1.2 * 1.2)).
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-SCALE-SMALL-CAPS"/>PANGO_SCALE_SMALL</title>
<programlisting>#define PANGO_SCALE_SMALL    ((double)0.8333333333333)
</programlisting>
<para>
The scale factor for one shrinking step (1 / 1.2).
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-SCALE-MEDIUM-CAPS"/>PANGO_SCALE_MEDIUM</title>
<programlisting>#define PANGO_SCALE_MEDIUM   ((double)1.0)
</programlisting>
<para>
The scale factor for normal size (1.0).
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-SCALE-LARGE-CAPS"/>PANGO_SCALE_LARGE</title>
<programlisting>#define PANGO_SCALE_LARGE    ((double)1.2)
</programlisting>
<para>
The scale factor for one magnification step (1.2).
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-SCALE-X-LARGE-CAPS"/>PANGO_SCALE_X_LARGE</title>
<programlisting>#define PANGO_SCALE_X_LARGE  ((double)1.4399999999999)
</programlisting>
<para>
The scale factor for two magnification steps (1.2 * 1.2).
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-SCALE-XX-LARGE-CAPS"/>PANGO_SCALE_XX_LARGE</title>
<programlisting>#define PANGO_SCALE_XX_LARGE ((double)1.728)
</programlisting>
<para>
The scale factor for three magnification steps (1.2 * 1.2 * 1.2).
</para></refsect2>
<refsect2>
<title><anchor id="pango-attr-rise-new"/>pango_attr_rise_new ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_rise_new         (int rise);</programlisting>
<para>
Create a new baseline displacement attribute.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>rise</parameter>&nbsp;:</term>
<listitem><simpara> the amount that the text should be displaced vertically,
       in 10'000ths of an em. Positive values displace the
       text upwards.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="PangoAttribute">PangoAttribute</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoColor"/>struct PangoColor</title>
<programlisting>struct PangoColor {

  guint16 red;
  guint16 green;
  guint16 blue;
};
</programlisting>
<para>
The <structname>PangoColor</structname> structure is used to
represent a color in an uncalibrated RGB colorspace.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="guint16">guint16</link> <structfield>red</structfield></term>
<listitem><simpara>The red component of the color. This is a value between 0 and 65535, 
      with 65535 indicating full intensity.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint16">guint16</link> <structfield>green</structfield></term>
<listitem><simpara>The green component of the color. This is a value between 0 and 65535, 
      with 65535 indicating full intensity.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint16">guint16</link> <structfield>blue</structfield></term>
<listitem><simpara>The blue component of the color. This is a value between 0 and 65535, 
      with 65535 indicating full intensity.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-COLOR-CAPS"/>PANGO_TYPE_COLOR</title>
<programlisting>#define PANGO_TYPE_COLOR pango_color_get_type ()
</programlisting>
<para>
The GObject type for <link linkend="PangoColor">PangoColor</link>.
</para></refsect2>
<refsect2>
<title><anchor id="pango-color-free"/>pango_color_free ()</title>
<programlisting>void        pango_color_free                (<link linkend="PangoColor">PangoColor</link> *color);</programlisting>
<para>
Frees a color allocated by <link linkend="pango-color-copy">pango_color_copy</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an allocated <link linkend="PangoColor">PangoColor</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-color-parse"/>pango_color_parse ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pango_color_parse               (<link linkend="PangoColor">PangoColor</link> *color,
                                             const char *spec);</programlisting>
<para>
Fill in the fields of a color from a string specification. The
string can either one of a large set of standard names. (Taken
from the X11 <filename>rgb.txt</filename> file), or it can be a hex value in the
form '&num;rgb' '&num;rrggbb' '&num;rrrgggbbb' or '&num;rrrrggggbbbb' where
'r', 'g' and 'b' are hex digits of the red, green, and blue
components of the color, respectively. (White in the four
forms is '&num;fff' '&num;ffffff' '&num;fffffffff' and '&num;ffffffffffff')</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoColor">PangoColor</link> structure in which to store the result
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>spec</parameter>&nbsp;:</term>
<listitem><simpara> a string specifying the new color
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if parsing of the specifier succeeded,
  otherwise false.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-color-copy"/>pango_color_copy ()</title>
<programlisting><link linkend="PangoColor">PangoColor</link>* pango_color_copy                (const <link linkend="PangoColor">PangoColor</link> *src);</programlisting>
<para>
Creates a copy of <parameter>src</parameter>, which should be freed with
<link linkend="pango-color-free">pango_color_free</link>(). Primarily used by language bindings,
not that useful otherwise (since colors can just be copied
by assignment in C).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> color to copy
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> an allocated <link linkend="PangoColor">PangoColor</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoLanguage"/>struct PangoLanguage</title>
<programlisting>struct PangoLanguage;</programlisting>
<para>
The <structname>PangoLanguage</structname> structure is used to
represent a language.
</para>
<para>
<structname>PangoLanguage</structname> pointers can be efficiently 
copied and compared with each other.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-LANGUAGE-CAPS"/>PANGO_TYPE_LANGUAGE</title>
<programlisting>#define PANGO_TYPE_LANGUAGE (pango_language_get_type ())
</programlisting>
<para>
The GObject type for <link linkend="PangoLanguage">PangoLanguage</link>. 
</para></refsect2>
<refsect2>
<title><anchor id="pango-language-from-string"/>pango_language_from_string ()</title>
<programlisting><link linkend="PangoLanguage">PangoLanguage</link>* pango_language_from_string   (const char *language);</programlisting>
<para>
Take a RFC-3066 format language tag as a string and convert it to a
<link linkend="PangoLanguage">PangoLanguage</link> pointer that can be efficiently copied (copy the
pointer) and compared with other language tags (compare the
pointer.)
</para>
<para>
This function first canonicalizes the string by converting it to
lowercase, mapping '_' to '-', and stripping all characters other
than letters and '-'.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> a string representing a language tag
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> an opaque pointer to a <link linkend="PangoLanguage">PangoLanguage</link> structure.
              this will be valid forever after.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-language-to-string"/>pango_language_to_string()</title>
<programlisting>#define pango_language_to_string(language) ((const char *)language)
</programlisting>
<para>
Returns a RFC-3066 format string representing the given language tag. 
</para><variablelist role="params">
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara>a language tag.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a string representing the language tag.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-language-matches"/>pango_language_matches ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pango_language_matches          (<link linkend="PangoLanguage">PangoLanguage</link> *language,
                                             const char *range_list);</programlisting>
<para>
Checks if a language tag matches one of the elements in a list of
language ranges. A language tag is considered to match a range
in the list if the range is '*', the range is exactly the tag,
or the range is a prefix of the tag, and the character after the
tag is '-'.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> a language tag (see <link linkend="pango-language-from-string">pango_language_from_string</link>()),
           <literal>NULL</literal> is allowed and matches nothing but '*'
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>range_list</parameter>&nbsp;:</term>
<listitem><simpara> a list of language ranges, separated by ';' characters.
  each element must either be '*', or a RFC 3066 language range
  canonicalized as by <link linkend="pango-language-from-string">pango_language_from_string</link>().
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if a match was found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrList"/>struct PangoAttrList</title>
<programlisting>struct PangoAttrList;</programlisting>
<para>
The <link linkend="PangoAttrList">PangoAttrList</link> structure represents a list of attributes
that apply to a section of text. The attributes are, in general,
allowed to overlap in an arbitrary fashion, however, if the
attributes are manipulated only through <link linkend="pango-attr-list-change">pango_attr_list_change</link>(),
the overlap between properties will meet stricter criteria.
</para>
<para>
Since the <link linkend="PangoAttrList">PangoAttrList</link> structure is stored as a linear list,
it is not suitable for storing attributes for large amounts
of text. In general, you should not use a single <link linkend="PangoAttrList">PangoAttrList</link>
for more than one paragraph of text.
</para></refsect2>
<refsect2>
<title><anchor id="PANGO-TYPE-ATTR-LIST-CAPS"/>PANGO_TYPE_ATTR_LIST</title>
<programlisting>#define PANGO_TYPE_ATTR_LIST pango_attr_list_get_type ()
</programlisting>
<para>
The GObject type for <link linkend="PangoAttrList">PangoAttrList</link>.
</para></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-new"/>pango_attr_list_new ()</title>
<programlisting><link linkend="PangoAttrList">PangoAttrList</link>* pango_attr_list_new          (void);</programlisting>
<para>
Create a new empty attribute list with a reference count of 1.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the newly allocated <link linkend="PangoAttrList">PangoAttrList</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-ref"/>pango_attr_list_ref ()</title>
<programlisting>void        pango_attr_list_ref             (<link linkend="PangoAttrList">PangoAttrList</link> *list);</programlisting>
<para>
Increase the reference count of the given attribute list by one.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-unref"/>pango_attr_list_unref ()</title>
<programlisting>void        pango_attr_list_unref           (<link linkend="PangoAttrList">PangoAttrList</link> *list);</programlisting>
<para>
Decrease the reference count of the given attribute list by one.
If the result is zero, free the attribute list and the attributes
it contains.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-copy"/>pango_attr_list_copy ()</title>
<programlisting><link linkend="PangoAttrList">PangoAttrList</link>* pango_attr_list_copy         (<link linkend="PangoAttrList">PangoAttrList</link> *list);</programlisting>
<para>
Copy <parameter>list</parameter> and return an identical, new list.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> new attribute list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-insert"/>pango_attr_list_insert ()</title>
<programlisting>void        pango_attr_list_insert          (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttribute">PangoAttribute</link> *attr);</programlisting>
<para>
Insert the given attribute into the <link linkend="PangoAttrList">PangoAttrList</link>. It will
be inserted after all other attributes with a matching
<parameter>start_index</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> the attribute to insert. Ownership of this value is
       assumed by the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-insert-before"/>pango_attr_list_insert_before ()</title>
<programlisting>void        pango_attr_list_insert_before   (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttribute">PangoAttribute</link> *attr);</programlisting>
<para>
Insert the given attribute into the <link linkend="PangoAttrList">PangoAttrList</link>. It will
be inserted before all other attributes with a matching
<parameter>start_index</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> the attribute to insert. Ownership of this value is
       assumed by the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-change"/>pango_attr_list_change ()</title>
<programlisting>void        pango_attr_list_change          (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttribute">PangoAttribute</link> *attr);</programlisting>
<para>
Insert the given attribute into the <link linkend="PangoAttrList">PangoAttrList</link>. It will
replace any attributes of the same type on that segment
and be merged with any adjoining attributes that are identical.
</para>
<para>
This function is slower than <link linkend="pango-attr-list-insert">pango_attr_list_insert</link>() for
creating a attribute list in order (potentially much slower
for large lists). However, <link linkend="pango-attr-list-insert">pango_attr_list_insert</link>() is not
suitable for continually changing a set of attributes 
since it never removes or combines existing attributes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> the attribute to insert. Ownership of this value is
       assumed by the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-splice"/>pango_attr_list_splice ()</title>
<programlisting>void        pango_attr_list_splice          (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttrList">PangoAttrList</link> *other,
                                             <link linkend="gint">gint</link> pos,
                                             <link linkend="gint">gint</link> len);</programlisting>
<para>
This function splices attribute list <parameter>other</parameter> into <parameter>list</parameter>.
This operation is equivalent to stretching every attribute
applies at position <parameter>pos</parameter> in <parameter>list</parameter> by an amount <parameter>len</parameter>,
and then calling <link linkend="pango-attr-list-change">pango_attr_list_change</link>() with a copy
of each attributes in <parameter>other</parameter> in sequence (offset in position by <parameter>pos</parameter>).
</para>
<para>
This operation proves useful for, for instance, inserting
a preedit string in the middle of an edit buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>other</parameter>&nbsp;:</term>
<listitem><simpara> another <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara> the position in <parameter>list</parameter> at which to insert <parameter>other</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> the length of the spliced segment. (Note that this
      must be specified since the attributes in <parameter>other</parameter>
      may only be present at some subsection of this range)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-filter"/>pango_attr_list_filter ()</title>
<programlisting><link linkend="PangoAttrList">PangoAttrList</link>* pango_attr_list_filter       (<link linkend="PangoAttrList">PangoAttrList</link> *list,
                                             <link linkend="PangoAttrFilterFunc">PangoAttrFilterFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Given a PangoAttrList and callback function, removes any elements
of <parameter>list</parameter> for which <parameter>func</parameter> returns <literal>TRUE</literal> and inserts them into
a new list.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara> callback function; returns <literal>TRUE</literal> if an atttribute
       should be filtered out.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> Data to be passed to <parameter>func</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated <literal>PangoAttrList</literal> or <literal>NULL</literal> if
 no attributes of the given types were found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrFilterFunc"/>PangoAttrFilterFunc ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    (*PangoAttrFilterFunc)          (<link linkend="PangoAttribute">PangoAttribute</link> *attribute,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
A predicate function used by <link linkend="pango-attr-list-filter">pango_attr_list_filter</link>()
to filter out a subset of attributes for a list.
</para><variablelist role="params">
<varlistentry><term><parameter>attribute</parameter>&nbsp;:</term>
<listitem><simpara>a <link linkend="PangoAttribute">PangoAttribute</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>callback data passed to <link linkend="pango-attr-list-filter">pango_attr_list_filter</link>()
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara><literal>TRUE</literal> if the attribute should be filtered out


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-list-get-iterator"/>pango_attr_list_get_iterator ()</title>
<programlisting><link linkend="PangoAttrIterator">PangoAttrIterator</link>* pango_attr_list_get_iterator
                                            (<link linkend="PangoAttrList">PangoAttrList</link> *list);</programlisting>
<para>
Create a iterator initialized to the beginning of the list.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrList">PangoAttrList</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new <link linkend="PangoIterator">PangoIterator</link>. <parameter>list</parameter> must not be modified
              until this iterator is freed with <link linkend="pango-attr-iterator-destroy">pango_attr_iterator_destroy</link>().
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="PangoAttrIterator"/>struct PangoAttrIterator</title>
<programlisting>struct PangoAttrIterator;</programlisting>
<para>
The <link linkend="PangoAttrIterator">PangoAttrIterator</link> structure is used to represent an
iterator through a <link linkend="PangoList">PangoList</link>. A new iterator is created
with <link linkend="pango-attr-list-get-iterator">pango_attr_list_get_iterator</link>(). Once the iterator
is created, it can be advanced through the style changes
in the text using <link linkend="pango-attr-iterator-next">pango_attr_iterator_next</link>(). At each
style change, the range of the current style segment and the
attributes currently in effect can be queried.
</para></refsect2>
<refsect2>
<title><anchor id="pango-attr-iterator-copy"/>pango_attr_iterator_copy ()</title>
<programlisting><link linkend="PangoAttrIterator">PangoAttrIterator</link>* pango_attr_iterator_copy (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);</programlisting>
<para>
Copy a <link linkend="PangoAttrIterator">PangoAttrIterator</link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iterator</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrIterator">PangoAttrIterator</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> Copy of <parameter>iterator</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-iterator-next"/>pango_attr_iterator_next ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pango_attr_iterator_next        (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);</programlisting>
<para>
Advance the iterator until the next change of style.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iterator</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrIterator">PangoAttrIterator</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>FALSE</literal> if the iterator is at the end of the list, otherwise <literal>TRUE</literal>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-iterator-range"/>pango_attr_iterator_range ()</title>
<programlisting>void        pango_attr_iterator_range       (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator,
                                             <link linkend="gint">gint</link> *start,
                                             <link linkend="gint">gint</link> *end);</programlisting>
<para>
Get the range of the current segment.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iterator</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrIterator">PangoAttrIterator</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara> location to store the start of the range
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara> location to store the end of the range
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-iterator-get"/>pango_attr_iterator_get ()</title>
<programlisting><link linkend="PangoAttribute">PangoAttribute</link>* pango_attr_iterator_get     (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator,
                                             <link linkend="PangoAttrType">PangoAttrType</link> type);</programlisting>
<para>
Find the current attribute of a particular type at the iterator
location. When multiple attributes of the same type overlap,
the attribute whose range starts closest to the current location
is used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iterator</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrIterator">PangoAttrIterator</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> the type of attribute to find.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the current attribute of the given type, or <literal>NULL</literal>
              if no attribute of that type applies to the current
              location.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-iterator-get-font"/>pango_attr_iterator_get_font ()</title>
<programlisting>void        pango_attr_iterator_get_font    (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator,
                                             <link linkend="PangoFontDescription">PangoFontDescription</link> *desc,
                                             <link linkend="PangoLanguage">PangoLanguage</link> **language,
                                             <link linkend="GSList">GSList</link> **extra_attrs);</programlisting>
<para>
Get the font and other attributes at the current iterator position.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iterator</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrIterator">PangoAttrIterator</link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoFontDescription">PangoFontDescription</link> to fill in with the current values.
       The family name in this structure will be set using
       pango_font_description_set_family_static using values from
       an attribute in the <link linkend="PangoAttrList">PangoAttrList</link> associated with the iterator,
       so if you plan to keep it around, you must call:
       pango_font_description_set_family (desc, pango_font_description_get_family (desc)).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>language</parameter>&nbsp;:</term>
<listitem><simpara> if non-<literal>NULL</literal>, location to store language tag for item, or <literal>NULL</literal>
           if non is found.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extra_attrs</parameter>&nbsp;:</term>
<listitem><simpara> if non-<literal>NULL</literal>, location in which to store a list of non-font
          attributes at the the current position; only the highest priority
          value of each attribute will be added to this list. In order
          to free this value, you must call <link linkend="pango-attribute-destroy">pango_attribute_destroy</link>() on
          each member.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-iterator-get-attrs"/>pango_attr_iterator_get_attrs ()</title>
<programlisting><link linkend="GSList">GSList</link>*     pango_attr_iterator_get_attrs   (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);</programlisting>
<para>
Gets a list all attributes a the current position of the
iterator.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iterator</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangAttrIterator">PangAttrIterator</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a list of all attributes for the current range.
  To free this value, call <link linkend="pango-attributes-destroy">pango_attributes_destroy</link>() on
  each value and <link linkend="g-slist-free">g_slist_free</link>() on the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="pango-attr-iterator-destroy"/>pango_attr_iterator_destroy ()</title>
<programlisting>void        pango_attr_iterator_destroy     (<link linkend="PangoAttrIterator">PangoAttrIterator</link> *iterator);</programlisting>
<para>
Destroy a <link linkend="PangoAttrIterator">PangoAttrIterator</link> and free all associated memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iterator</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="PangoAttrIterator">PangoAttrIterator</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
