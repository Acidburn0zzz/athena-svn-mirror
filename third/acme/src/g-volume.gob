%{
#ifdef HAVE_OSS
#include "volume-oss.h"
#endif

#ifdef HAVE_ALSA
#include "volume-alsa.h"
#endif
%}

class G:Volume from G:Object {
	/* the current volume */
	public int volume = 0;
	argument INT volume (export)
	get {
#ifdef HAVE_ALSA
		if (VOLUME_IS_ALSA (self->_priv->volume_object))
		{
			ARG = volume_alsa_get_volume
				(VOLUME_ALSA (self->_priv->volume_object));
			goto get_volume_end;
		}
#endif
#ifdef HAVE_OSS
		if (VOLUME_IS_OSS (self->_priv->volume_object))
		{
			ARG = volume_oss_get_volume
				(VOLUME_OSS (self->_priv->volume_object));
			goto get_volume_end;
		}
#endif
		ARG = 0;
		get_volume_end:
	}

	set {
#ifdef HAVE_ALSA
		if (VOLUME_IS_ALSA (self->_priv->volume_object))
		{
			volume_alsa_set_volume
				(VOLUME_ALSA (self->_priv->volume_object), ARG);
			goto set_volume_end;
		}
#endif
#ifdef HAVE_OSS
		if (VOLUME_IS_OSS (self->_priv->volume_object))
		{
			volume_oss_set_volume
				(VOLUME_OSS (self->_priv->volume_object), ARG);
			goto set_volume_end;
		}
#endif
		set_volume_end:
	};

	/* the current muting status */
	public gboolean mute = FALSE;
	argument INT (type gboolean) mute (export)
	get {
#ifdef HAVE_ALSA
		if (VOLUME_IS_ALSA (self->_priv->volume_object))
		{
			ARG = volume_alsa_get_mute
				(VOLUME_ALSA (self->_priv->volume_object));
			goto get_mute_end;
		}
#endif
#ifdef HAVE_OSS
		if (VOLUME_IS_OSS (self->_priv->volume_object))
		{
			ARG = volume_oss_get_mute
				(VOLUME_OSS (self->_priv->volume_object));
			goto get_mute_end;
		}
#endif
		ARG = FALSE;
		get_mute_end:
	}

	set {
#ifdef HAVE_ALSA
		if (VOLUME_IS_ALSA (self->_priv->volume_object))
		{
			volume_alsa_set_mute
				(VOLUME_ALSA (self->_priv->volume_object), ARG);
			goto set_mute_end;
		}
#endif
#ifdef HAVE_OSS
		if (VOLUME_IS_OSS (self->_priv->volume_object))
		{
				
			volume_oss_set_mute
				(VOLUME_OSS (self->_priv->volume_object), ARG);
			goto set_mute_end;
		}
#endif
		set_mute_end:
	};

	public gboolean use_pcm = FALSE;
	argument INT (type gboolean) use_pcm (export)
	get {
#ifdef HAVE_OSS
		if (VOLUME_IS_OSS (self->_priv->volume_object))
		{
			ARG = volume_oss_get_use_pcm
				(VOLUME_OSS (self->_priv->volume_object));
			goto set_use_pcm_end;
		}
#endif
		set_use_pcm_end:
	}

	set {
#ifdef HAVE_OSS
		if (VOLUME_IS_OSS (self->_priv->volume_object))
		{
			volume_oss_set_use_pcm
				(VOLUME_OSS (self->_priv->volume_object), ARG);
			goto set_use_pcm_end;
		}
#endif
		set_use_pcm_end:
	};

	

	public
	GVolume *
	new (void)
	{
		GVolume *self;
		GObject *object = NULL;

#ifdef HAVE_OSS
		if (object == NULL)
			object = (GObject *)volume_oss_new ();
#endif
#ifdef HAVE_ALSA
		if (object == NULL && g_file_test
				("/proc/asound/version", G_FILE_TEST_EXISTS))
			object = (GObject *)volume_alsa_new ();
#endif

		if (object == NULL)
			return NULL;

		self = (GVolume *)GET_NEW;
		self->_priv->volume_object = G_OBJECT (object);

		return self;
	}

	public
	void
	mute_toggle(GVolume *self)
	{
		gboolean muted;

		muted = g_volume_get_mute(self);
		g_volume_set_mute(self, !muted);
	}

	signal last NONE (NONE)
	void fd_problem(self);

	/* Private stuff */
	private GObject *volume_object = NULL;
}

