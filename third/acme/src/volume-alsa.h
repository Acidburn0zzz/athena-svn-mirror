/* Generated by GOB (v2.0.3)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>
#ifndef __VOLUME_ALSA_H__
#define __VOLUME_ALSA_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*
 * Type checking and casting macros
 */
#define VOLUME_TYPE_ALSA	(volume_alsa_get_type())
#define VOLUME_ALSA(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), volume_alsa_get_type(), VolumeAlsa)
#define VOLUME_ALSA_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), volume_alsa_get_type(), VolumeAlsa const)
#define VOLUME_ALSA_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), volume_alsa_get_type(), VolumeAlsaClass)
#define VOLUME_IS_ALSA(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), volume_alsa_get_type ())

#define VOLUME_ALSA_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), volume_alsa_get_type(), VolumeAlsaClass)

/* Private structure type */
typedef struct _VolumeAlsaPrivate VolumeAlsaPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_VOLUME_ALSA__
#define __TYPEDEF_VOLUME_ALSA__
typedef struct _VolumeAlsa VolumeAlsa;
#endif
struct _VolumeAlsa {
	GObject __parent__;
	/*< public >*/
	int volume;
	gboolean mute;
	gboolean use_pcm;
	/*< private >*/
	VolumeAlsaPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _VolumeAlsaClass VolumeAlsaClass;
struct _VolumeAlsaClass {
	GObjectClass __parent__;
	/*signal*/void (* fd_problem) (VolumeAlsa * self);
};


/*
 * Public methods
 */
GType	volume_alsa_get_type	(void);gint 	volume_alsa_get_volume	(VolumeAlsa * self);
void 	volume_alsa_set_volume	(VolumeAlsa * self,
					gint val);
gboolean 	volume_alsa_get_mute	(VolumeAlsa * self);
void 	volume_alsa_set_mute	(VolumeAlsa * self,
					gboolean val);
gboolean 	volume_alsa_get_use_pcm	(VolumeAlsa * self);
void 	volume_alsa_set_use_pcm	(VolumeAlsa * self,
					gboolean val);
VolumeAlsa * 	volume_alsa_new	(void);
void 	volume_alsa_fd_problem	(VolumeAlsa * self);

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define volume_alsa_connect__fd_problem(object,func,data)	g_signal_connect(VOLUME_ALSA(({VolumeAlsa *___object = (object); ___object; })),"fd_problem",(GCallback)({void (* ___fd_problem) (VolumeAlsa * self, gpointer ___data ) = (func); ___fd_problem; }), (data))
#define volume_alsa_connect_after__fd_problem(object,func,data)	g_signal_connect_after(VOLUME_ALSA(({VolumeAlsa *___object = (object); ___object; })),"fd_problem",(GCallback)({void (* ___fd_problem) (VolumeAlsa * self, gpointer ___data ) = (func); ___fd_problem; }), (data))
#define volume_alsa_connect_data__fd_problem(object,func,data,destroy_data,flags)	g_signal_connect_data(VOLUME_ALSA(({VolumeAlsa *___object = (object); ___object; })),"fd_problem",(GCallback)({void (* ___fd_problem) (VolumeAlsa * self, gpointer ___data ) = (func); ___fd_problem; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define volume_alsa_connect__fd_problem(object,func,data)	g_signal_connect(VOLUME_ALSA(object),"fd_problem",(GCallback)(func),(data))
#define volume_alsa_connect_after__fd_problem(object,func,data)	g_signal_connect_after(VOLUME_ALSA(object),"fd_problem",(GCallback)(func),(data))
#define volume_alsa_connect_data__fd_problem(object,func,data,destroy_data,flags)	g_signal_connect_data(VOLUME_ALSA(object),"fd_problem",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


/*
 * Argument wrapping macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define VOLUME_ALSA_PROP_VOLUME(arg)    	"volume",({gint z = (arg); z;})
#define VOLUME_ALSA_GET_PROP_VOLUME(arg)	"volume",({gint *z = (arg); z;})
#define VOLUME_ALSA_PROP_MUTE(arg)    	"mute",({gboolean z = (arg); z;})
#define VOLUME_ALSA_GET_PROP_MUTE(arg)	"mute",({gboolean *z = (arg); z;})
#define VOLUME_ALSA_PROP_USE_PCM(arg)    	"use_pcm",({gboolean z = (arg); z;})
#define VOLUME_ALSA_GET_PROP_USE_PCM(arg)	"use_pcm",({gboolean *z = (arg); z;})
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define VOLUME_ALSA_PROP_VOLUME(arg)    	"volume",(gint )(arg)
#define VOLUME_ALSA_GET_PROP_VOLUME(arg)	"volume",(gint *)(arg)
#define VOLUME_ALSA_PROP_MUTE(arg)    	"mute",(gboolean )(arg)
#define VOLUME_ALSA_GET_PROP_MUTE(arg)	"mute",(gboolean *)(arg)
#define VOLUME_ALSA_PROP_USE_PCM(arg)    	"use_pcm",(gboolean )(arg)
#define VOLUME_ALSA_GET_PROP_USE_PCM(arg)	"use_pcm",(gboolean *)(arg)
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
