/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef Bonobo_H
#define Bonobo_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_Bonobo_Unknown) && !defined(_Bonobo_Unknown_defined)
#define ORBIT_DECL_Bonobo_Unknown 1
#define _Bonobo_Unknown_defined 1
#define Bonobo_Unknown__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Unknown;
   extern CORBA_unsigned_long Bonobo_Unknown__classid;
#if !defined(TC_IMPL_TC_Bonobo_Unknown_0)
#define TC_IMPL_TC_Bonobo_Unknown_0 'B'
#define TC_IMPL_TC_Bonobo_Unknown_1 'o'
#define TC_IMPL_TC_Bonobo_Unknown_2 'n'
#define TC_IMPL_TC_Bonobo_Unknown_3 'o'
#define TC_IMPL_TC_Bonobo_Unknown_4 'b'
#define TC_IMPL_TC_Bonobo_Unknown_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Unknown_struct;
#define TC_Bonobo_Unknown ((CORBA_TypeCode)&TC_Bonobo_Unknown_struct)
#endif
#endif
#if !defined(_Bonobo_ResolveFlag_defined)
#define _Bonobo_ResolveFlag_defined 1
   typedef CORBA_long Bonobo_ResolveFlag;
#if !defined(TC_IMPL_TC_Bonobo_ResolveFlag_0)
#define TC_IMPL_TC_Bonobo_ResolveFlag_0 'B'
#define TC_IMPL_TC_Bonobo_ResolveFlag_1 'o'
#define TC_IMPL_TC_Bonobo_ResolveFlag_2 'n'
#define TC_IMPL_TC_Bonobo_ResolveFlag_3 'o'
#define TC_IMPL_TC_Bonobo_ResolveFlag_4 'b'
#define TC_IMPL_TC_Bonobo_ResolveFlag_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ResolveFlag_struct;
#define TC_Bonobo_ResolveFlag ((CORBA_TypeCode)&TC_Bonobo_ResolveFlag_struct)
#endif
#endif
#ifndef Bonobo_MONIKER_ALLOW_USER_INTERACTION
#define Bonobo_MONIKER_ALLOW_USER_INTERACTION 1
#endif				/* !Bonobo_MONIKER_ALLOW_USER_INTERACTION */

#if !defined(_Bonobo_ResolveOptions_defined)
#define _Bonobo_ResolveOptions_defined 1
   typedef struct
   {
      Bonobo_ResolveFlag flags;
      CORBA_long timeout;
   }
   Bonobo_ResolveOptions;

#if !defined(TC_IMPL_TC_Bonobo_ResolveOptions_0)
#define TC_IMPL_TC_Bonobo_ResolveOptions_0 'B'
#define TC_IMPL_TC_Bonobo_ResolveOptions_1 'o'
#define TC_IMPL_TC_Bonobo_ResolveOptions_2 'n'
#define TC_IMPL_TC_Bonobo_ResolveOptions_3 'o'
#define TC_IMPL_TC_Bonobo_ResolveOptions_4 'b'
#define TC_IMPL_TC_Bonobo_ResolveOptions_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ResolveOptions_struct;
#define TC_Bonobo_ResolveOptions ((CORBA_TypeCode)&TC_Bonobo_ResolveOptions_struct)
#endif
   extern Bonobo_ResolveOptions *Bonobo_ResolveOptions__alloc(void);
   extern gpointer Bonobo_ResolveOptions__free(gpointer mem, gpointer dat,
					       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_Moniker) && !defined(_Bonobo_Moniker_defined)
#define ORBIT_DECL_Bonobo_Moniker 1
#define _Bonobo_Moniker_defined 1
#define Bonobo_Moniker__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Moniker;
   extern CORBA_unsigned_long Bonobo_Moniker__classid;
#if !defined(TC_IMPL_TC_Bonobo_Moniker_0)
#define TC_IMPL_TC_Bonobo_Moniker_0 'B'
#define TC_IMPL_TC_Bonobo_Moniker_1 'o'
#define TC_IMPL_TC_Bonobo_Moniker_2 'n'
#define TC_IMPL_TC_Bonobo_Moniker_3 'o'
#define TC_IMPL_TC_Bonobo_Moniker_4 'b'
#define TC_IMPL_TC_Bonobo_Moniker_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Moniker_struct;
#define TC_Bonobo_Moniker ((CORBA_TypeCode)&TC_Bonobo_Moniker_struct)
#endif
#endif
#define ex_Bonobo_Moniker_InterfaceNotFound "IDL:Bonobo/Moniker/InterfaceNotFound:1.0"
   void _ORBIT_Bonobo_Moniker_InterfaceNotFound_demarshal(GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev);
   void _ORBIT_Bonobo_Moniker_InterfaceNotFound_marshal(GIOPSendBuffer *
							_ORBIT_send_buffer,
							CORBA_Environment *
							ev);
#if !defined(_Bonobo_Moniker_InterfaceNotFound_defined)
#define _Bonobo_Moniker_InterfaceNotFound_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Moniker_InterfaceNotFound;

#if !defined(TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_0)
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_0 'B'
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_1 'o'
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_2 'n'
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_3 'o'
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_4 'b'
#define TC_IMPL_TC_Bonobo_Moniker_InterfaceNotFound_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Moniker_InterfaceNotFound_struct;
#define TC_Bonobo_Moniker_InterfaceNotFound ((CORBA_TypeCode)&TC_Bonobo_Moniker_InterfaceNotFound_struct)
#endif
#define Bonobo_Moniker_InterfaceNotFound__alloc() NULL
   extern gpointer Bonobo_Moniker_InterfaceNotFound__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Moniker_TimeOut "IDL:Bonobo/Moniker/TimeOut:1.0"
   void _ORBIT_Bonobo_Moniker_TimeOut_demarshal(GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev);
   void _ORBIT_Bonobo_Moniker_TimeOut_marshal(GIOPSendBuffer *
					      _ORBIT_send_buffer,
					      CORBA_Environment * ev);
#if !defined(_Bonobo_Moniker_TimeOut_defined)
#define _Bonobo_Moniker_TimeOut_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Moniker_TimeOut;

#if !defined(TC_IMPL_TC_Bonobo_Moniker_TimeOut_0)
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_0 'B'
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_1 'o'
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_2 'n'
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_3 'o'
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_4 'b'
#define TC_IMPL_TC_Bonobo_Moniker_TimeOut_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Moniker_TimeOut_struct;
#define TC_Bonobo_Moniker_TimeOut ((CORBA_TypeCode)&TC_Bonobo_Moniker_TimeOut_struct)
#endif
#define Bonobo_Moniker_TimeOut__alloc() NULL
   extern gpointer Bonobo_Moniker_TimeOut__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Moniker_InvalidSyntax "IDL:Bonobo/Moniker/InvalidSyntax:1.0"
   void _ORBIT_Bonobo_Moniker_InvalidSyntax_demarshal(GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev);
   void _ORBIT_Bonobo_Moniker_InvalidSyntax_marshal(GIOPSendBuffer *
						    _ORBIT_send_buffer,
						    CORBA_Environment * ev);
#if !defined(_Bonobo_Moniker_InvalidSyntax_defined)
#define _Bonobo_Moniker_InvalidSyntax_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Moniker_InvalidSyntax;

#if !defined(TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_0)
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_0 'B'
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_1 'o'
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_2 'n'
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_3 'o'
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_4 'b'
#define TC_IMPL_TC_Bonobo_Moniker_InvalidSyntax_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Moniker_InvalidSyntax_struct;
#define TC_Bonobo_Moniker_InvalidSyntax ((CORBA_TypeCode)&TC_Bonobo_Moniker_InvalidSyntax_struct)
#endif
#define Bonobo_Moniker_InvalidSyntax__alloc() NULL
   extern gpointer Bonobo_Moniker_InvalidSyntax__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Moniker_UnknownPrefix "IDL:Bonobo/Moniker/UnknownPrefix:1.0"
   void _ORBIT_Bonobo_Moniker_UnknownPrefix_demarshal(GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev);
   void _ORBIT_Bonobo_Moniker_UnknownPrefix_marshal(GIOPSendBuffer *
						    _ORBIT_send_buffer,
						    CORBA_Environment * ev);
#if !defined(_Bonobo_Moniker_UnknownPrefix_defined)
#define _Bonobo_Moniker_UnknownPrefix_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Moniker_UnknownPrefix;

#if !defined(TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_0)
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_0 'B'
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_1 'o'
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_2 'n'
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_3 'o'
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_4 'b'
#define TC_IMPL_TC_Bonobo_Moniker_UnknownPrefix_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Moniker_UnknownPrefix_struct;
#define TC_Bonobo_Moniker_UnknownPrefix ((CORBA_TypeCode)&TC_Bonobo_Moniker_UnknownPrefix_struct)
#endif
#define Bonobo_Moniker_UnknownPrefix__alloc() NULL
   extern gpointer Bonobo_Moniker_UnknownPrefix__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_MonikerExtender) && !defined(_Bonobo_MonikerExtender_defined)
#define ORBIT_DECL_Bonobo_MonikerExtender 1
#define _Bonobo_MonikerExtender_defined 1
#define Bonobo_MonikerExtender__free CORBA_Object__free
   typedef CORBA_Object Bonobo_MonikerExtender;
   extern CORBA_unsigned_long Bonobo_MonikerExtender__classid;
#if !defined(TC_IMPL_TC_Bonobo_MonikerExtender_0)
#define TC_IMPL_TC_Bonobo_MonikerExtender_0 'B'
#define TC_IMPL_TC_Bonobo_MonikerExtender_1 'o'
#define TC_IMPL_TC_Bonobo_MonikerExtender_2 'n'
#define TC_IMPL_TC_Bonobo_MonikerExtender_3 'o'
#define TC_IMPL_TC_Bonobo_MonikerExtender_4 'b'
#define TC_IMPL_TC_Bonobo_MonikerExtender_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_MonikerExtender_struct;
#define TC_Bonobo_MonikerExtender ((CORBA_TypeCode)&TC_Bonobo_MonikerExtender_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_ActivationContext) && !defined(_Bonobo_ActivationContext_defined)
#define ORBIT_DECL_Bonobo_ActivationContext 1
#define _Bonobo_ActivationContext_defined 1
#define Bonobo_ActivationContext__free CORBA_Object__free
   typedef CORBA_Object Bonobo_ActivationContext;
   extern CORBA_unsigned_long Bonobo_ActivationContext__classid;
#if !defined(TC_IMPL_TC_Bonobo_ActivationContext_0)
#define TC_IMPL_TC_Bonobo_ActivationContext_0 'B'
#define TC_IMPL_TC_Bonobo_ActivationContext_1 'o'
#define TC_IMPL_TC_Bonobo_ActivationContext_2 'n'
#define TC_IMPL_TC_Bonobo_ActivationContext_3 'o'
#define TC_IMPL_TC_Bonobo_ActivationContext_4 'b'
#define TC_IMPL_TC_Bonobo_ActivationContext_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_ActivationContext_struct;
#define TC_Bonobo_ActivationContext ((CORBA_TypeCode)&TC_Bonobo_ActivationContext_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_RunningContext) && !defined(_Bonobo_RunningContext_defined)
#define ORBIT_DECL_Bonobo_RunningContext 1
#define _Bonobo_RunningContext_defined 1
#define Bonobo_RunningContext__free CORBA_Object__free
   typedef CORBA_Object Bonobo_RunningContext;
   extern CORBA_unsigned_long Bonobo_RunningContext__classid;
#if !defined(TC_IMPL_TC_Bonobo_RunningContext_0)
#define TC_IMPL_TC_Bonobo_RunningContext_0 'B'
#define TC_IMPL_TC_Bonobo_RunningContext_1 'o'
#define TC_IMPL_TC_Bonobo_RunningContext_2 'n'
#define TC_IMPL_TC_Bonobo_RunningContext_3 'o'
#define TC_IMPL_TC_Bonobo_RunningContext_4 'b'
#define TC_IMPL_TC_Bonobo_RunningContext_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_RunningContext_struct;
#define TC_Bonobo_RunningContext ((CORBA_TypeCode)&TC_Bonobo_RunningContext_struct)
#endif
#endif
#if !defined(_Bonobo_StorageInfoFields_defined)
#define _Bonobo_StorageInfoFields_defined 1
   typedef CORBA_long Bonobo_StorageInfoFields;
#if !defined(TC_IMPL_TC_Bonobo_StorageInfoFields_0)
#define TC_IMPL_TC_Bonobo_StorageInfoFields_0 'B'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_1 'o'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_2 'n'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_3 'o'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_4 'b'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_StorageInfoFields_struct;
#define TC_Bonobo_StorageInfoFields ((CORBA_TypeCode)&TC_Bonobo_StorageInfoFields_struct)
#endif
#endif
#ifndef Bonobo_FIELD_CONTENT_TYPE
#define Bonobo_FIELD_CONTENT_TYPE 1
#endif				/* !Bonobo_FIELD_CONTENT_TYPE */

#ifndef Bonobo_FIELD_SIZE
#define Bonobo_FIELD_SIZE 2
#endif				/* !Bonobo_FIELD_SIZE */

#ifndef Bonobo_FIELD_TYPE
#define Bonobo_FIELD_TYPE 4
#endif				/* !Bonobo_FIELD_TYPE */

#if !defined(_Bonobo_ContentType_defined)
#define _Bonobo_ContentType_defined 1
   typedef CORBA_char *Bonobo_ContentType;
#if !defined(TC_IMPL_TC_Bonobo_ContentType_0)
#define TC_IMPL_TC_Bonobo_ContentType_0 'B'
#define TC_IMPL_TC_Bonobo_ContentType_1 'o'
#define TC_IMPL_TC_Bonobo_ContentType_2 'n'
#define TC_IMPL_TC_Bonobo_ContentType_3 'o'
#define TC_IMPL_TC_Bonobo_ContentType_4 'b'
#define TC_IMPL_TC_Bonobo_ContentType_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ContentType_struct;
#define TC_Bonobo_ContentType ((CORBA_TypeCode)&TC_Bonobo_ContentType_struct)
#endif
#define Bonobo_ContentType__free CORBA_string__free
#endif
#if !defined(_Bonobo_StorageType_defined)
#define _Bonobo_StorageType_defined 1
   typedef enum
   {
      Bonobo_STORAGE_TYPE_REGULAR,
      Bonobo_STORAGE_TYPE_DIRECTORY
   }
   Bonobo_StorageType;
#if !defined(TC_IMPL_TC_Bonobo_StorageType_0)
#define TC_IMPL_TC_Bonobo_StorageType_0 'B'
#define TC_IMPL_TC_Bonobo_StorageType_1 'o'
#define TC_IMPL_TC_Bonobo_StorageType_2 'n'
#define TC_IMPL_TC_Bonobo_StorageType_3 'o'
#define TC_IMPL_TC_Bonobo_StorageType_4 'b'
#define TC_IMPL_TC_Bonobo_StorageType_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_StorageType_struct;
#define TC_Bonobo_StorageType ((CORBA_TypeCode)&TC_Bonobo_StorageType_struct)
#endif
#endif
#if !defined(_Bonobo_StorageInfo_defined)
#define _Bonobo_StorageInfo_defined 1
   typedef struct
   {
      CORBA_char *name;
      Bonobo_StorageType type;
      Bonobo_ContentType content_type;
      CORBA_long size;
   }
   Bonobo_StorageInfo;

#if !defined(TC_IMPL_TC_Bonobo_StorageInfo_0)
#define TC_IMPL_TC_Bonobo_StorageInfo_0 'B'
#define TC_IMPL_TC_Bonobo_StorageInfo_1 'o'
#define TC_IMPL_TC_Bonobo_StorageInfo_2 'n'
#define TC_IMPL_TC_Bonobo_StorageInfo_3 'o'
#define TC_IMPL_TC_Bonobo_StorageInfo_4 'b'
#define TC_IMPL_TC_Bonobo_StorageInfo_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_StorageInfo_struct;
#define TC_Bonobo_StorageInfo ((CORBA_TypeCode)&TC_Bonobo_StorageInfo_struct)
#endif
   extern Bonobo_StorageInfo *Bonobo_StorageInfo__alloc(void);
   extern gpointer Bonobo_StorageInfo__free(gpointer mem, gpointer dat,
					    CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_Stream) && !defined(_Bonobo_Stream_defined)
#define ORBIT_DECL_Bonobo_Stream 1
#define _Bonobo_Stream_defined 1
#define Bonobo_Stream__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Stream;
   extern CORBA_unsigned_long Bonobo_Stream__classid;
#if !defined(TC_IMPL_TC_Bonobo_Stream_0)
#define TC_IMPL_TC_Bonobo_Stream_0 'B'
#define TC_IMPL_TC_Bonobo_Stream_1 'o'
#define TC_IMPL_TC_Bonobo_Stream_2 'n'
#define TC_IMPL_TC_Bonobo_Stream_3 'o'
#define TC_IMPL_TC_Bonobo_Stream_4 'b'
#define TC_IMPL_TC_Bonobo_Stream_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Stream_struct;
#define TC_Bonobo_Stream ((CORBA_TypeCode)&TC_Bonobo_Stream_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet) && !defined(_CORBA_sequence_CORBA_octet_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define _CORBA_sequence_CORBA_octet_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'B'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_octet;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'B'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
   extern CORBA_sequence_CORBA_octet *CORBA_sequence_CORBA_octet__alloc(void);
   extern gpointer CORBA_sequence_CORBA_octet__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_octet *CORBA_sequence_CORBA_octet_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_Stream_iobuf_defined)
#define _Bonobo_Stream_iobuf_defined 1
   typedef CORBA_sequence_CORBA_octet Bonobo_Stream_iobuf;
#if !defined(TC_IMPL_TC_Bonobo_Stream_iobuf_0)
#define TC_IMPL_TC_Bonobo_Stream_iobuf_0 'B'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_1 'o'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_2 'n'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_3 'o'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_4 'b'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Stream_iobuf_struct;
#define TC_Bonobo_Stream_iobuf ((CORBA_TypeCode)&TC_Bonobo_Stream_iobuf_struct)
#endif
   extern Bonobo_Stream_iobuf *Bonobo_Stream_iobuf__alloc(void);
   extern gpointer Bonobo_Stream_iobuf__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Stream_NoPermission "IDL:Bonobo/Stream/NoPermission:1.0"
   void _ORBIT_Bonobo_Stream_NoPermission_demarshal(GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev);
   void _ORBIT_Bonobo_Stream_NoPermission_marshal(GIOPSendBuffer *
						  _ORBIT_send_buffer,
						  CORBA_Environment * ev);
#if !defined(_Bonobo_Stream_NoPermission_defined)
#define _Bonobo_Stream_NoPermission_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Stream_NoPermission;

#if !defined(TC_IMPL_TC_Bonobo_Stream_NoPermission_0)
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_0 'B'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_1 'o'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_2 'n'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_3 'o'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_4 'b'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Stream_NoPermission_struct;
#define TC_Bonobo_Stream_NoPermission ((CORBA_TypeCode)&TC_Bonobo_Stream_NoPermission_struct)
#endif
#define Bonobo_Stream_NoPermission__alloc() NULL
   extern gpointer Bonobo_Stream_NoPermission__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Stream_NotSupported "IDL:Bonobo/Stream/NotSupported:1.0"
   void _ORBIT_Bonobo_Stream_NotSupported_demarshal(GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev);
   void _ORBIT_Bonobo_Stream_NotSupported_marshal(GIOPSendBuffer *
						  _ORBIT_send_buffer,
						  CORBA_Environment * ev);
#if !defined(_Bonobo_Stream_NotSupported_defined)
#define _Bonobo_Stream_NotSupported_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Stream_NotSupported;

#if !defined(TC_IMPL_TC_Bonobo_Stream_NotSupported_0)
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_0 'B'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_1 'o'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_2 'n'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_3 'o'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_4 'b'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Stream_NotSupported_struct;
#define TC_Bonobo_Stream_NotSupported ((CORBA_TypeCode)&TC_Bonobo_Stream_NotSupported_struct)
#endif
#define Bonobo_Stream_NotSupported__alloc() NULL
   extern gpointer Bonobo_Stream_NotSupported__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Stream_IOError "IDL:Bonobo/Stream/IOError:1.0"
   void _ORBIT_Bonobo_Stream_IOError_demarshal(GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev);
   void _ORBIT_Bonobo_Stream_IOError_marshal(GIOPSendBuffer *
					     _ORBIT_send_buffer,
					     CORBA_Environment * ev);
#if !defined(_Bonobo_Stream_IOError_defined)
#define _Bonobo_Stream_IOError_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Stream_IOError;

#if !defined(TC_IMPL_TC_Bonobo_Stream_IOError_0)
#define TC_IMPL_TC_Bonobo_Stream_IOError_0 'B'
#define TC_IMPL_TC_Bonobo_Stream_IOError_1 'o'
#define TC_IMPL_TC_Bonobo_Stream_IOError_2 'n'
#define TC_IMPL_TC_Bonobo_Stream_IOError_3 'o'
#define TC_IMPL_TC_Bonobo_Stream_IOError_4 'b'
#define TC_IMPL_TC_Bonobo_Stream_IOError_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Stream_IOError_struct;
#define TC_Bonobo_Stream_IOError ((CORBA_TypeCode)&TC_Bonobo_Stream_IOError_struct)
#endif
#define Bonobo_Stream_IOError__alloc() NULL
   extern gpointer Bonobo_Stream_IOError__free(gpointer mem, gpointer dat,
					       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Stream_SeekType_defined)
#define _Bonobo_Stream_SeekType_defined 1
   typedef enum
   {
      Bonobo_Stream_SEEK_SET,
      Bonobo_Stream_SEEK_CUR,
      Bonobo_Stream_SEEK_END
   }
   Bonobo_Stream_SeekType;
#if !defined(TC_IMPL_TC_Bonobo_Stream_SeekType_0)
#define TC_IMPL_TC_Bonobo_Stream_SeekType_0 'B'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_1 'o'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_2 'n'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_3 'o'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_4 'b'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Stream_SeekType_struct;
#define TC_Bonobo_Stream_SeekType ((CORBA_TypeCode)&TC_Bonobo_Stream_SeekType_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Storage) && !defined(_Bonobo_Storage_defined)
#define ORBIT_DECL_Bonobo_Storage 1
#define _Bonobo_Storage_defined 1
#define Bonobo_Storage__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Storage;
   extern CORBA_unsigned_long Bonobo_Storage__classid;
#if !defined(TC_IMPL_TC_Bonobo_Storage_0)
#define TC_IMPL_TC_Bonobo_Storage_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Storage_struct;
#define TC_Bonobo_Storage ((CORBA_TypeCode)&TC_Bonobo_Storage_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_StorageInfo) && !defined(_CORBA_sequence_Bonobo_StorageInfo_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_StorageInfo 1
#define _CORBA_sequence_Bonobo_StorageInfo_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_StorageInfo *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_StorageInfo;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_StorageInfo_struct;
#define TC_CORBA_sequence_Bonobo_StorageInfo ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_StorageInfo_struct)
#endif
   extern CORBA_sequence_Bonobo_StorageInfo
      *CORBA_sequence_Bonobo_StorageInfo__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_StorageInfo__free(gpointer mem,
							   gpointer dat,
							   CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_StorageInfo
      *CORBA_sequence_Bonobo_StorageInfo_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_Storage_DirectoryList_defined)
#define _Bonobo_Storage_DirectoryList_defined 1
   typedef CORBA_sequence_Bonobo_StorageInfo Bonobo_Storage_DirectoryList;
#if !defined(TC_IMPL_TC_Bonobo_Storage_DirectoryList_0)
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_DirectoryList_struct;
#define TC_Bonobo_Storage_DirectoryList ((CORBA_TypeCode)&TC_Bonobo_Storage_DirectoryList_struct)
#endif
   extern Bonobo_Storage_DirectoryList
      *Bonobo_Storage_DirectoryList__alloc(void);
   extern gpointer Bonobo_Storage_DirectoryList__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Storage_OpenMode_defined)
#define _Bonobo_Storage_OpenMode_defined 1
   typedef CORBA_long Bonobo_Storage_OpenMode;
#if !defined(TC_IMPL_TC_Bonobo_Storage_OpenMode_0)
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_OpenMode_struct;
#define TC_Bonobo_Storage_OpenMode ((CORBA_TypeCode)&TC_Bonobo_Storage_OpenMode_struct)
#endif
#endif
#ifndef Bonobo_Storage_READ
#define Bonobo_Storage_READ 1
#endif				/* !Bonobo_Storage_READ */

#ifndef Bonobo_Storage_WRITE
#define Bonobo_Storage_WRITE 2
#endif				/* !Bonobo_Storage_WRITE */

#ifndef Bonobo_Storage_CREATE
#define Bonobo_Storage_CREATE 4
#endif				/* !Bonobo_Storage_CREATE */

#ifndef Bonobo_Storage_FAILIFEXIST
#define Bonobo_Storage_FAILIFEXIST 8
#endif				/* !Bonobo_Storage_FAILIFEXIST */

#ifndef Bonobo_Storage_COMPRESSED
#define Bonobo_Storage_COMPRESSED 16
#endif				/* !Bonobo_Storage_COMPRESSED */

#ifndef Bonobo_Storage_TRANSACTED
#define Bonobo_Storage_TRANSACTED 32
#endif				/* !Bonobo_Storage_TRANSACTED */

#define ex_Bonobo_Storage_IOError "IDL:Bonobo/Storage/IOError:1.0"
   void _ORBIT_Bonobo_Storage_IOError_demarshal(GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_IOError_marshal(GIOPSendBuffer *
					      _ORBIT_send_buffer,
					      CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_IOError_defined)
#define _Bonobo_Storage_IOError_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_IOError;

#if !defined(TC_IMPL_TC_Bonobo_Storage_IOError_0)
#define TC_IMPL_TC_Bonobo_Storage_IOError_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_IOError_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_IOError_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_IOError_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_IOError_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_IOError_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Storage_IOError_struct;
#define TC_Bonobo_Storage_IOError ((CORBA_TypeCode)&TC_Bonobo_Storage_IOError_struct)
#endif
#define Bonobo_Storage_IOError__alloc() NULL
   extern gpointer Bonobo_Storage_IOError__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Storage_NameExists "IDL:Bonobo/Storage/NameExists:1.0"
   void _ORBIT_Bonobo_Storage_NameExists_demarshal(GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_NameExists_marshal(GIOPSendBuffer *
						 _ORBIT_send_buffer,
						 CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_NameExists_defined)
#define _Bonobo_Storage_NameExists_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_NameExists;

#if !defined(TC_IMPL_TC_Bonobo_Storage_NameExists_0)
#define TC_IMPL_TC_Bonobo_Storage_NameExists_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_NameExists_struct;
#define TC_Bonobo_Storage_NameExists ((CORBA_TypeCode)&TC_Bonobo_Storage_NameExists_struct)
#endif
#define Bonobo_Storage_NameExists__alloc() NULL
   extern gpointer Bonobo_Storage_NameExists__free(gpointer mem, gpointer dat,
						   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Storage_NotFound "IDL:Bonobo/Storage/NotFound:1.0"
   void _ORBIT_Bonobo_Storage_NotFound_demarshal(GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_NotFound_marshal(GIOPSendBuffer *
					       _ORBIT_send_buffer,
					       CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_NotFound_defined)
#define _Bonobo_Storage_NotFound_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_NotFound;

#if !defined(TC_IMPL_TC_Bonobo_Storage_NotFound_0)
#define TC_IMPL_TC_Bonobo_Storage_NotFound_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_NotFound_struct;
#define TC_Bonobo_Storage_NotFound ((CORBA_TypeCode)&TC_Bonobo_Storage_NotFound_struct)
#endif
#define Bonobo_Storage_NotFound__alloc() NULL
   extern gpointer Bonobo_Storage_NotFound__free(gpointer mem, gpointer dat,
						 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Storage_NoPermission "IDL:Bonobo/Storage/NoPermission:1.0"
   void _ORBIT_Bonobo_Storage_NoPermission_demarshal(GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_NoPermission_marshal(GIOPSendBuffer *
						   _ORBIT_send_buffer,
						   CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_NoPermission_defined)
#define _Bonobo_Storage_NoPermission_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_NoPermission;

#if !defined(TC_IMPL_TC_Bonobo_Storage_NoPermission_0)
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_NoPermission_struct;
#define TC_Bonobo_Storage_NoPermission ((CORBA_TypeCode)&TC_Bonobo_Storage_NoPermission_struct)
#endif
#define Bonobo_Storage_NoPermission__alloc() NULL
   extern gpointer Bonobo_Storage_NoPermission__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Storage_NotSupported "IDL:Bonobo/Storage/NotSupported:1.0"
   void _ORBIT_Bonobo_Storage_NotSupported_demarshal(GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_NotSupported_marshal(GIOPSendBuffer *
						   _ORBIT_send_buffer,
						   CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_NotSupported_defined)
#define _Bonobo_Storage_NotSupported_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_NotSupported;

#if !defined(TC_IMPL_TC_Bonobo_Storage_NotSupported_0)
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_NotSupported_struct;
#define TC_Bonobo_Storage_NotSupported ((CORBA_TypeCode)&TC_Bonobo_Storage_NotSupported_struct)
#endif
#define Bonobo_Storage_NotSupported__alloc() NULL
   extern gpointer Bonobo_Storage_NotSupported__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Storage_NotStream "IDL:Bonobo/Storage/NotStream:1.0"
   void _ORBIT_Bonobo_Storage_NotStream_demarshal(GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_NotStream_marshal(GIOPSendBuffer *
						_ORBIT_send_buffer,
						CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_NotStream_defined)
#define _Bonobo_Storage_NotStream_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_NotStream;

#if !defined(TC_IMPL_TC_Bonobo_Storage_NotStream_0)
#define TC_IMPL_TC_Bonobo_Storage_NotStream_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_NotStream_struct;
#define TC_Bonobo_Storage_NotStream ((CORBA_TypeCode)&TC_Bonobo_Storage_NotStream_struct)
#endif
#define Bonobo_Storage_NotStream__alloc() NULL
   extern gpointer Bonobo_Storage_NotStream__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Storage_NotStorage "IDL:Bonobo/Storage/NotStorage:1.0"
   void _ORBIT_Bonobo_Storage_NotStorage_demarshal(GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_NotStorage_marshal(GIOPSendBuffer *
						 _ORBIT_send_buffer,
						 CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_NotStorage_defined)
#define _Bonobo_Storage_NotStorage_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_NotStorage;

#if !defined(TC_IMPL_TC_Bonobo_Storage_NotStorage_0)
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_NotStorage_struct;
#define TC_Bonobo_Storage_NotStorage ((CORBA_TypeCode)&TC_Bonobo_Storage_NotStorage_struct)
#endif
#define Bonobo_Storage_NotStorage__alloc() NULL
   extern gpointer Bonobo_Storage_NotStorage__free(gpointer mem, gpointer dat,
						   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Storage_NotEmpty "IDL:Bonobo/Storage/NotEmpty:1.0"
   void _ORBIT_Bonobo_Storage_NotEmpty_demarshal(GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev);
   void _ORBIT_Bonobo_Storage_NotEmpty_marshal(GIOPSendBuffer *
					       _ORBIT_send_buffer,
					       CORBA_Environment * ev);
#if !defined(_Bonobo_Storage_NotEmpty_defined)
#define _Bonobo_Storage_NotEmpty_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Storage_NotEmpty;

#if !defined(TC_IMPL_TC_Bonobo_Storage_NotEmpty_0)
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_0 'B'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_1 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_2 'n'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_3 'o'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_4 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Storage_NotEmpty_struct;
#define TC_Bonobo_Storage_NotEmpty ((CORBA_TypeCode)&TC_Bonobo_Storage_NotEmpty_struct)
#endif
#define Bonobo_Storage_NotEmpty__alloc() NULL
   extern gpointer Bonobo_Storage_NotEmpty__free(gpointer mem, gpointer dat,
						 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_NotSupported "IDL:Bonobo/NotSupported:1.0"
   void _ORBIT_Bonobo_NotSupported_demarshal(GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev);
   void _ORBIT_Bonobo_NotSupported_marshal(GIOPSendBuffer *
					   _ORBIT_send_buffer,
					   CORBA_Environment * ev);
#if !defined(_Bonobo_NotSupported_defined)
#define _Bonobo_NotSupported_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_NotSupported;

#if !defined(TC_IMPL_TC_Bonobo_NotSupported_0)
#define TC_IMPL_TC_Bonobo_NotSupported_0 'B'
#define TC_IMPL_TC_Bonobo_NotSupported_1 'o'
#define TC_IMPL_TC_Bonobo_NotSupported_2 'n'
#define TC_IMPL_TC_Bonobo_NotSupported_3 'o'
#define TC_IMPL_TC_Bonobo_NotSupported_4 'b'
#define TC_IMPL_TC_Bonobo_NotSupported_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_NotSupported_struct;
#define TC_Bonobo_NotSupported ((CORBA_TypeCode)&TC_Bonobo_NotSupported_struct)
#endif
#define Bonobo_NotSupported__alloc() NULL
   extern gpointer Bonobo_NotSupported__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_IOError "IDL:Bonobo/IOError:1.0"
   void _ORBIT_Bonobo_IOError_demarshal(GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev);
   void _ORBIT_Bonobo_IOError_marshal(GIOPSendBuffer * _ORBIT_send_buffer,
				      CORBA_Environment * ev);
#if !defined(_Bonobo_IOError_defined)
#define _Bonobo_IOError_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_IOError;

#if !defined(TC_IMPL_TC_Bonobo_IOError_0)
#define TC_IMPL_TC_Bonobo_IOError_0 'B'
#define TC_IMPL_TC_Bonobo_IOError_1 'o'
#define TC_IMPL_TC_Bonobo_IOError_2 'n'
#define TC_IMPL_TC_Bonobo_IOError_3 'o'
#define TC_IMPL_TC_Bonobo_IOError_4 'b'
#define TC_IMPL_TC_Bonobo_IOError_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_IOError_struct;
#define TC_Bonobo_IOError ((CORBA_TypeCode)&TC_Bonobo_IOError_struct)
#endif
#define Bonobo_IOError__alloc() NULL
   extern gpointer Bonobo_IOError__free(gpointer mem, gpointer dat,
					CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_Persist) && !defined(_Bonobo_Persist_defined)
#define ORBIT_DECL_Bonobo_Persist 1
#define _Bonobo_Persist_defined 1
#define Bonobo_Persist__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Persist;
   extern CORBA_unsigned_long Bonobo_Persist__classid;
#if !defined(TC_IMPL_TC_Bonobo_Persist_0)
#define TC_IMPL_TC_Bonobo_Persist_0 'B'
#define TC_IMPL_TC_Bonobo_Persist_1 'o'
#define TC_IMPL_TC_Bonobo_Persist_2 'n'
#define TC_IMPL_TC_Bonobo_Persist_3 'o'
#define TC_IMPL_TC_Bonobo_Persist_4 'b'
#define TC_IMPL_TC_Bonobo_Persist_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Persist_struct;
#define TC_Bonobo_Persist ((CORBA_TypeCode)&TC_Bonobo_Persist_struct)
#endif
#endif
#if !defined(_Bonobo_Persist_Status_defined)
#define _Bonobo_Persist_Status_defined 1
   typedef enum
   {
      Bonobo_Persist_SAVE_OK,
      Bonobo_Persist_SAVE_CANCEL,
      Bonobo_Persist_SAVE_FAILED
   }
   Bonobo_Persist_Status;
#if !defined(TC_IMPL_TC_Bonobo_Persist_Status_0)
#define TC_IMPL_TC_Bonobo_Persist_Status_0 'B'
#define TC_IMPL_TC_Bonobo_Persist_Status_1 'o'
#define TC_IMPL_TC_Bonobo_Persist_Status_2 'n'
#define TC_IMPL_TC_Bonobo_Persist_Status_3 'o'
#define TC_IMPL_TC_Bonobo_Persist_Status_4 'b'
#define TC_IMPL_TC_Bonobo_Persist_Status_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Persist_Status_struct;
#define TC_Bonobo_Persist_Status ((CORBA_TypeCode)&TC_Bonobo_Persist_Status_struct)
#endif
#endif
#define ex_Bonobo_Persist_WrongDataType "IDL:Bonobo/Persist/WrongDataType:1.0"
   void _ORBIT_Bonobo_Persist_WrongDataType_demarshal(GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev);
   void _ORBIT_Bonobo_Persist_WrongDataType_marshal(GIOPSendBuffer *
						    _ORBIT_send_buffer,
						    CORBA_Environment * ev);
#if !defined(_Bonobo_Persist_WrongDataType_defined)
#define _Bonobo_Persist_WrongDataType_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Persist_WrongDataType;

#if !defined(TC_IMPL_TC_Bonobo_Persist_WrongDataType_0)
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_0 'B'
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_1 'o'
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_2 'n'
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_3 'o'
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_4 'b'
#define TC_IMPL_TC_Bonobo_Persist_WrongDataType_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Persist_WrongDataType_struct;
#define TC_Bonobo_Persist_WrongDataType ((CORBA_TypeCode)&TC_Bonobo_Persist_WrongDataType_struct)
#endif
#define Bonobo_Persist_WrongDataType__alloc() NULL
   extern gpointer Bonobo_Persist_WrongDataType__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Persist_FileNotFound "IDL:Bonobo/Persist/FileNotFound:1.0"
   void _ORBIT_Bonobo_Persist_FileNotFound_demarshal(GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev);
   void _ORBIT_Bonobo_Persist_FileNotFound_marshal(GIOPSendBuffer *
						   _ORBIT_send_buffer,
						   CORBA_Environment * ev);
#if !defined(_Bonobo_Persist_FileNotFound_defined)
#define _Bonobo_Persist_FileNotFound_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Persist_FileNotFound;

#if !defined(TC_IMPL_TC_Bonobo_Persist_FileNotFound_0)
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_0 'B'
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_1 'o'
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_2 'n'
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_3 'o'
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_4 'b'
#define TC_IMPL_TC_Bonobo_Persist_FileNotFound_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Persist_FileNotFound_struct;
#define TC_Bonobo_Persist_FileNotFound ((CORBA_TypeCode)&TC_Bonobo_Persist_FileNotFound_struct)
#endif
#define Bonobo_Persist_FileNotFound__alloc() NULL
   extern gpointer Bonobo_Persist_FileNotFound__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Persist_ContentType_defined)
#define _Bonobo_Persist_ContentType_defined 1
   typedef CORBA_char *Bonobo_Persist_ContentType;
#if !defined(TC_IMPL_TC_Bonobo_Persist_ContentType_0)
#define TC_IMPL_TC_Bonobo_Persist_ContentType_0 'B'
#define TC_IMPL_TC_Bonobo_Persist_ContentType_1 'o'
#define TC_IMPL_TC_Bonobo_Persist_ContentType_2 'n'
#define TC_IMPL_TC_Bonobo_Persist_ContentType_3 'o'
#define TC_IMPL_TC_Bonobo_Persist_ContentType_4 'b'
#define TC_IMPL_TC_Bonobo_Persist_ContentType_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Persist_ContentType_struct;
#define TC_Bonobo_Persist_ContentType ((CORBA_TypeCode)&TC_Bonobo_Persist_ContentType_struct)
#endif
#define Bonobo_Persist_ContentType__free CORBA_string__free
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Persist_ContentType) && !defined(_CORBA_sequence_Bonobo_Persist_ContentType_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Persist_ContentType 1
#define _CORBA_sequence_Bonobo_Persist_ContentType_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Persist_ContentType_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Persist_ContentType *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_Persist_ContentType;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Persist_ContentType_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_Persist_ContentType_struct;
#define TC_CORBA_sequence_Bonobo_Persist_ContentType ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Persist_ContentType_struct)
#endif
   extern CORBA_sequence_Bonobo_Persist_ContentType
      *CORBA_sequence_Bonobo_Persist_ContentType__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_Persist_ContentType__free(gpointer
								   mem,
								   gpointer
								   dat,
								   CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_Persist_ContentType
      *CORBA_sequence_Bonobo_Persist_ContentType_allocbuf(CORBA_unsigned_long
							  len);
#endif
#if !defined(_Bonobo_Persist_ContentTypeList_defined)
#define _Bonobo_Persist_ContentTypeList_defined 1
   typedef CORBA_sequence_Bonobo_Persist_ContentType
      Bonobo_Persist_ContentTypeList;
#if !defined(TC_IMPL_TC_Bonobo_Persist_ContentTypeList_0)
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_0 'B'
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_1 'o'
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_2 'n'
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_3 'o'
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_4 'b'
#define TC_IMPL_TC_Bonobo_Persist_ContentTypeList_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Persist_ContentTypeList_struct;
#define TC_Bonobo_Persist_ContentTypeList ((CORBA_TypeCode)&TC_Bonobo_Persist_ContentTypeList_struct)
#endif
   extern Bonobo_Persist_ContentTypeList
      *Bonobo_Persist_ContentTypeList__alloc(void);
   extern gpointer Bonobo_Persist_ContentTypeList__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_PersistFile) && !defined(_Bonobo_PersistFile_defined)
#define ORBIT_DECL_Bonobo_PersistFile 1
#define _Bonobo_PersistFile_defined 1
#define Bonobo_PersistFile__free CORBA_Object__free
   typedef CORBA_Object Bonobo_PersistFile;
   extern CORBA_unsigned_long Bonobo_PersistFile__classid;
#if !defined(TC_IMPL_TC_Bonobo_PersistFile_0)
#define TC_IMPL_TC_Bonobo_PersistFile_0 'B'
#define TC_IMPL_TC_Bonobo_PersistFile_1 'o'
#define TC_IMPL_TC_Bonobo_PersistFile_2 'n'
#define TC_IMPL_TC_Bonobo_PersistFile_3 'o'
#define TC_IMPL_TC_Bonobo_PersistFile_4 'b'
#define TC_IMPL_TC_Bonobo_PersistFile_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PersistFile_struct;
#define TC_Bonobo_PersistFile ((CORBA_TypeCode)&TC_Bonobo_PersistFile_struct)
#endif
#endif
#define ex_Bonobo_PersistFile_NoCurrentName "IDL:Bonobo/PersistFile/NoCurrentName:1.0"
   void _ORBIT_Bonobo_PersistFile_NoCurrentName_demarshal(GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev);
   void _ORBIT_Bonobo_PersistFile_NoCurrentName_marshal(GIOPSendBuffer *
							_ORBIT_send_buffer,
							CORBA_Environment *
							ev);
#if !defined(_Bonobo_PersistFile_NoCurrentName_defined)
#define _Bonobo_PersistFile_NoCurrentName_defined 1
   typedef struct
   {
      CORBA_char *extension;
   }
   Bonobo_PersistFile_NoCurrentName;

#if !defined(TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_0)
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_0 'B'
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_1 'o'
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_2 'n'
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_3 'o'
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_4 'b'
#define TC_IMPL_TC_Bonobo_PersistFile_NoCurrentName_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_PersistFile_NoCurrentName_struct;
#define TC_Bonobo_PersistFile_NoCurrentName ((CORBA_TypeCode)&TC_Bonobo_PersistFile_NoCurrentName_struct)
#endif
   extern Bonobo_PersistFile_NoCurrentName
      *Bonobo_PersistFile_NoCurrentName__alloc(void);
   extern gpointer Bonobo_PersistFile_NoCurrentName__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_PersistStorage) && !defined(_Bonobo_PersistStorage_defined)
#define ORBIT_DECL_Bonobo_PersistStorage 1
#define _Bonobo_PersistStorage_defined 1
#define Bonobo_PersistStorage__free CORBA_Object__free
   typedef CORBA_Object Bonobo_PersistStorage;
   extern CORBA_unsigned_long Bonobo_PersistStorage__classid;
#if !defined(TC_IMPL_TC_Bonobo_PersistStorage_0)
#define TC_IMPL_TC_Bonobo_PersistStorage_0 'B'
#define TC_IMPL_TC_Bonobo_PersistStorage_1 'o'
#define TC_IMPL_TC_Bonobo_PersistStorage_2 'n'
#define TC_IMPL_TC_Bonobo_PersistStorage_3 'o'
#define TC_IMPL_TC_Bonobo_PersistStorage_4 'b'
#define TC_IMPL_TC_Bonobo_PersistStorage_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PersistStorage_struct;
#define TC_Bonobo_PersistStorage ((CORBA_TypeCode)&TC_Bonobo_PersistStorage_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_PersistStream) && !defined(_Bonobo_PersistStream_defined)
#define ORBIT_DECL_Bonobo_PersistStream 1
#define _Bonobo_PersistStream_defined 1
#define Bonobo_PersistStream__free CORBA_Object__free
   typedef CORBA_Object Bonobo_PersistStream;
   extern CORBA_unsigned_long Bonobo_PersistStream__classid;
#if !defined(TC_IMPL_TC_Bonobo_PersistStream_0)
#define TC_IMPL_TC_Bonobo_PersistStream_0 'B'
#define TC_IMPL_TC_Bonobo_PersistStream_1 'o'
#define TC_IMPL_TC_Bonobo_PersistStream_2 'n'
#define TC_IMPL_TC_Bonobo_PersistStream_3 'o'
#define TC_IMPL_TC_Bonobo_PersistStream_4 'b'
#define TC_IMPL_TC_Bonobo_PersistStream_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PersistStream_struct;
#define TC_Bonobo_PersistStream ((CORBA_TypeCode)&TC_Bonobo_PersistStream_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_ProgressiveDataSink) && !defined(_Bonobo_ProgressiveDataSink_defined)
#define ORBIT_DECL_Bonobo_ProgressiveDataSink 1
#define _Bonobo_ProgressiveDataSink_defined 1
#define Bonobo_ProgressiveDataSink__free CORBA_Object__free
   typedef CORBA_Object Bonobo_ProgressiveDataSink;
   extern CORBA_unsigned_long Bonobo_ProgressiveDataSink__classid;
#if !defined(TC_IMPL_TC_Bonobo_ProgressiveDataSink_0)
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_0 'B'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_1 'o'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_2 'n'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_3 'o'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_4 'b'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_ProgressiveDataSink_struct;
#define TC_Bonobo_ProgressiveDataSink ((CORBA_TypeCode)&TC_Bonobo_ProgressiveDataSink_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet) && !defined(_CORBA_sequence_CORBA_octet_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define _CORBA_sequence_CORBA_octet_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'B'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_octet;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'B'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
   extern CORBA_sequence_CORBA_octet *CORBA_sequence_CORBA_octet__alloc(void);
   extern gpointer CORBA_sequence_CORBA_octet__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_octet *CORBA_sequence_CORBA_octet_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_ProgressiveDataSink_iobuf_defined)
#define _Bonobo_ProgressiveDataSink_iobuf_defined 1
   typedef CORBA_sequence_CORBA_octet Bonobo_ProgressiveDataSink_iobuf;
#if !defined(TC_IMPL_TC_Bonobo_ProgressiveDataSink_iobuf_0)
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_iobuf_0 'B'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_iobuf_1 'o'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_iobuf_2 'n'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_iobuf_3 'o'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_iobuf_4 'b'
#define TC_IMPL_TC_Bonobo_ProgressiveDataSink_iobuf_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_ProgressiveDataSink_iobuf_struct;
#define TC_Bonobo_ProgressiveDataSink_iobuf ((CORBA_TypeCode)&TC_Bonobo_ProgressiveDataSink_iobuf_struct)
#endif
   extern Bonobo_ProgressiveDataSink_iobuf
      *Bonobo_ProgressiveDataSink_iobuf__alloc(void);
   extern gpointer Bonobo_ProgressiveDataSink_iobuf__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_AdviseSink) && !defined(_Bonobo_AdviseSink_defined)
#define ORBIT_DECL_Bonobo_AdviseSink 1
#define _Bonobo_AdviseSink_defined 1
#define Bonobo_AdviseSink__free CORBA_Object__free
   typedef CORBA_Object Bonobo_AdviseSink;
   extern CORBA_unsigned_long Bonobo_AdviseSink__classid;
#if !defined(TC_IMPL_TC_Bonobo_AdviseSink_0)
#define TC_IMPL_TC_Bonobo_AdviseSink_0 'B'
#define TC_IMPL_TC_Bonobo_AdviseSink_1 'o'
#define TC_IMPL_TC_Bonobo_AdviseSink_2 'n'
#define TC_IMPL_TC_Bonobo_AdviseSink_3 'o'
#define TC_IMPL_TC_Bonobo_AdviseSink_4 'b'
#define TC_IMPL_TC_Bonobo_AdviseSink_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_AdviseSink_struct;
#define TC_Bonobo_AdviseSink ((CORBA_TypeCode)&TC_Bonobo_AdviseSink_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Listener) && !defined(_Bonobo_Listener_defined)
#define ORBIT_DECL_Bonobo_Listener 1
#define _Bonobo_Listener_defined 1
#define Bonobo_Listener__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Listener;
   extern CORBA_unsigned_long Bonobo_Listener__classid;
#if !defined(TC_IMPL_TC_Bonobo_Listener_0)
#define TC_IMPL_TC_Bonobo_Listener_0 'B'
#define TC_IMPL_TC_Bonobo_Listener_1 'o'
#define TC_IMPL_TC_Bonobo_Listener_2 'n'
#define TC_IMPL_TC_Bonobo_Listener_3 'o'
#define TC_IMPL_TC_Bonobo_Listener_4 'b'
#define TC_IMPL_TC_Bonobo_Listener_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Listener_struct;
#define TC_Bonobo_Listener ((CORBA_TypeCode)&TC_Bonobo_Listener_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_EventSource) && !defined(_Bonobo_EventSource_defined)
#define ORBIT_DECL_Bonobo_EventSource 1
#define _Bonobo_EventSource_defined 1
#define Bonobo_EventSource__free CORBA_Object__free
   typedef CORBA_Object Bonobo_EventSource;
   extern CORBA_unsigned_long Bonobo_EventSource__classid;
#if !defined(TC_IMPL_TC_Bonobo_EventSource_0)
#define TC_IMPL_TC_Bonobo_EventSource_0 'B'
#define TC_IMPL_TC_Bonobo_EventSource_1 'o'
#define TC_IMPL_TC_Bonobo_EventSource_2 'n'
#define TC_IMPL_TC_Bonobo_EventSource_3 'o'
#define TC_IMPL_TC_Bonobo_EventSource_4 'b'
#define TC_IMPL_TC_Bonobo_EventSource_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_EventSource_struct;
#define TC_Bonobo_EventSource ((CORBA_TypeCode)&TC_Bonobo_EventSource_struct)
#endif
#endif
#if !defined(_Bonobo_EventSource_ListenerId_defined)
#define _Bonobo_EventSource_ListenerId_defined 1
   typedef CORBA_unsigned_long Bonobo_EventSource_ListenerId;
#if !defined(TC_IMPL_TC_Bonobo_EventSource_ListenerId_0)
#define TC_IMPL_TC_Bonobo_EventSource_ListenerId_0 'B'
#define TC_IMPL_TC_Bonobo_EventSource_ListenerId_1 'o'
#define TC_IMPL_TC_Bonobo_EventSource_ListenerId_2 'n'
#define TC_IMPL_TC_Bonobo_EventSource_ListenerId_3 'o'
#define TC_IMPL_TC_Bonobo_EventSource_ListenerId_4 'b'
#define TC_IMPL_TC_Bonobo_EventSource_ListenerId_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_EventSource_ListenerId_struct;
#define TC_Bonobo_EventSource_ListenerId ((CORBA_TypeCode)&TC_Bonobo_EventSource_ListenerId_struct)
#endif
#endif
#define ex_Bonobo_EventSource_UnknownListener "IDL:Bonobo/EventSource/UnknownListener:1.0"
   void _ORBIT_Bonobo_EventSource_UnknownListener_demarshal(GIOPRecvBuffer *
							    _ORBIT_recv_buffer,
							    CORBA_Environment
							    * ev);
   void _ORBIT_Bonobo_EventSource_UnknownListener_marshal(GIOPSendBuffer *
							  _ORBIT_send_buffer,
							  CORBA_Environment *
							  ev);
#if !defined(_Bonobo_EventSource_UnknownListener_defined)
#define _Bonobo_EventSource_UnknownListener_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_EventSource_UnknownListener;

#if !defined(TC_IMPL_TC_Bonobo_EventSource_UnknownListener_0)
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_0 'B'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_1 'o'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_2 'n'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_3 'o'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_4 'b'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_EventSource_UnknownListener_struct;
#define TC_Bonobo_EventSource_UnknownListener ((CORBA_TypeCode)&TC_Bonobo_EventSource_UnknownListener_struct)
#endif
#define Bonobo_EventSource_UnknownListener__alloc() NULL
   extern gpointer Bonobo_EventSource_UnknownListener__free(gpointer mem,
							    gpointer dat,
							    CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_UIContainer) && !defined(_Bonobo_UIContainer_defined)
#define ORBIT_DECL_Bonobo_UIContainer 1
#define _Bonobo_UIContainer_defined 1
#define Bonobo_UIContainer__free CORBA_Object__free
   typedef CORBA_Object Bonobo_UIContainer;
   extern CORBA_unsigned_long Bonobo_UIContainer__classid;
#if !defined(TC_IMPL_TC_Bonobo_UIContainer_0)
#define TC_IMPL_TC_Bonobo_UIContainer_0 'B'
#define TC_IMPL_TC_Bonobo_UIContainer_1 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_2 'n'
#define TC_IMPL_TC_Bonobo_UIContainer_3 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_4 'b'
#define TC_IMPL_TC_Bonobo_UIContainer_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_UIContainer_struct;
#define TC_Bonobo_UIContainer ((CORBA_TypeCode)&TC_Bonobo_UIContainer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_UIComponent) && !defined(_Bonobo_UIComponent_defined)
#define ORBIT_DECL_Bonobo_UIComponent 1
#define _Bonobo_UIComponent_defined 1
#define Bonobo_UIComponent__free CORBA_Object__free
   typedef CORBA_Object Bonobo_UIComponent;
   extern CORBA_unsigned_long Bonobo_UIComponent__classid;
#if !defined(TC_IMPL_TC_Bonobo_UIComponent_0)
#define TC_IMPL_TC_Bonobo_UIComponent_0 'B'
#define TC_IMPL_TC_Bonobo_UIComponent_1 'o'
#define TC_IMPL_TC_Bonobo_UIComponent_2 'n'
#define TC_IMPL_TC_Bonobo_UIComponent_3 'o'
#define TC_IMPL_TC_Bonobo_UIComponent_4 'b'
#define TC_IMPL_TC_Bonobo_UIComponent_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_UIComponent_struct;
#define TC_Bonobo_UIComponent ((CORBA_TypeCode)&TC_Bonobo_UIComponent_struct)
#endif
#endif
#if !defined(_Bonobo_UIComponent_EventType_defined)
#define _Bonobo_UIComponent_EventType_defined 1
   typedef enum
   {
      Bonobo_UIComponent_STATE_CHANGED,
      Bonobo_UIComponent_OTHER
   }
   Bonobo_UIComponent_EventType;
#if !defined(TC_IMPL_TC_Bonobo_UIComponent_EventType_0)
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_0 'B'
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_1 'o'
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_2 'n'
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_3 'o'
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_4 'b'
#define TC_IMPL_TC_Bonobo_UIComponent_EventType_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_UIComponent_EventType_struct;
#define TC_Bonobo_UIComponent_EventType ((CORBA_TypeCode)&TC_Bonobo_UIComponent_EventType_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_UIContainer) && !defined(_Bonobo_UIContainer_defined)
#define ORBIT_DECL_Bonobo_UIContainer 1
#define _Bonobo_UIContainer_defined 1
#define Bonobo_UIContainer__free CORBA_Object__free
   typedef CORBA_Object Bonobo_UIContainer;
   extern CORBA_unsigned_long Bonobo_UIContainer__classid;
#if !defined(TC_IMPL_TC_Bonobo_UIContainer_0)
#define TC_IMPL_TC_Bonobo_UIContainer_0 'B'
#define TC_IMPL_TC_Bonobo_UIContainer_1 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_2 'n'
#define TC_IMPL_TC_Bonobo_UIContainer_3 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_4 'b'
#define TC_IMPL_TC_Bonobo_UIContainer_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_UIContainer_struct;
#define TC_Bonobo_UIContainer ((CORBA_TypeCode)&TC_Bonobo_UIContainer_struct)
#endif
#endif
#define ex_Bonobo_UIContainer_MalFormedXML "IDL:Bonobo/UIContainer/MalFormedXML:1.0"
   void _ORBIT_Bonobo_UIContainer_MalFormedXML_demarshal(GIOPRecvBuffer *
							 _ORBIT_recv_buffer,
							 CORBA_Environment *
							 ev);
   void _ORBIT_Bonobo_UIContainer_MalFormedXML_marshal(GIOPSendBuffer *
						       _ORBIT_send_buffer,
						       CORBA_Environment *
						       ev);
#if !defined(_Bonobo_UIContainer_MalFormedXML_defined)
#define _Bonobo_UIContainer_MalFormedXML_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_UIContainer_MalFormedXML;

#if !defined(TC_IMPL_TC_Bonobo_UIContainer_MalFormedXML_0)
#define TC_IMPL_TC_Bonobo_UIContainer_MalFormedXML_0 'B'
#define TC_IMPL_TC_Bonobo_UIContainer_MalFormedXML_1 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_MalFormedXML_2 'n'
#define TC_IMPL_TC_Bonobo_UIContainer_MalFormedXML_3 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_MalFormedXML_4 'b'
#define TC_IMPL_TC_Bonobo_UIContainer_MalFormedXML_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_UIContainer_MalFormedXML_struct;
#define TC_Bonobo_UIContainer_MalFormedXML ((CORBA_TypeCode)&TC_Bonobo_UIContainer_MalFormedXML_struct)
#endif
#define Bonobo_UIContainer_MalFormedXML__alloc() NULL
   extern gpointer Bonobo_UIContainer_MalFormedXML__free(gpointer mem,
							 gpointer dat,
							 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_UIContainer_InvalidPath "IDL:Bonobo/UIContainer/InvalidPath:1.0"
   void _ORBIT_Bonobo_UIContainer_InvalidPath_demarshal(GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev);
   void _ORBIT_Bonobo_UIContainer_InvalidPath_marshal(GIOPSendBuffer *
						      _ORBIT_send_buffer,
						      CORBA_Environment * ev);
#if !defined(_Bonobo_UIContainer_InvalidPath_defined)
#define _Bonobo_UIContainer_InvalidPath_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_UIContainer_InvalidPath;

#if !defined(TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_0)
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_0 'B'
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_1 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_2 'n'
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_3 'o'
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_4 'b'
#define TC_IMPL_TC_Bonobo_UIContainer_InvalidPath_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_UIContainer_InvalidPath_struct;
#define TC_Bonobo_UIContainer_InvalidPath ((CORBA_TypeCode)&TC_Bonobo_UIContainer_InvalidPath_struct)
#endif
#define Bonobo_UIContainer_InvalidPath__alloc() NULL
   extern gpointer Bonobo_UIContainer_InvalidPath__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_Property) && !defined(_Bonobo_Property_defined)
#define ORBIT_DECL_Bonobo_Property 1
#define _Bonobo_Property_defined 1
#define Bonobo_Property__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Property;
   extern CORBA_unsigned_long Bonobo_Property__classid;
#if !defined(TC_IMPL_TC_Bonobo_Property_0)
#define TC_IMPL_TC_Bonobo_Property_0 'B'
#define TC_IMPL_TC_Bonobo_Property_1 'o'
#define TC_IMPL_TC_Bonobo_Property_2 'n'
#define TC_IMPL_TC_Bonobo_Property_3 'o'
#define TC_IMPL_TC_Bonobo_Property_4 'b'
#define TC_IMPL_TC_Bonobo_Property_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Property_struct;
#define TC_Bonobo_Property ((CORBA_TypeCode)&TC_Bonobo_Property_struct)
#endif
#endif
#define ex_Bonobo_Property_InvalidValue "IDL:Bonobo/Property/InvalidValue:1.0"
   void _ORBIT_Bonobo_Property_InvalidValue_demarshal(GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev);
   void _ORBIT_Bonobo_Property_InvalidValue_marshal(GIOPSendBuffer *
						    _ORBIT_send_buffer,
						    CORBA_Environment * ev);
#if !defined(_Bonobo_Property_InvalidValue_defined)
#define _Bonobo_Property_InvalidValue_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Property_InvalidValue;

#if !defined(TC_IMPL_TC_Bonobo_Property_InvalidValue_0)
#define TC_IMPL_TC_Bonobo_Property_InvalidValue_0 'B'
#define TC_IMPL_TC_Bonobo_Property_InvalidValue_1 'o'
#define TC_IMPL_TC_Bonobo_Property_InvalidValue_2 'n'
#define TC_IMPL_TC_Bonobo_Property_InvalidValue_3 'o'
#define TC_IMPL_TC_Bonobo_Property_InvalidValue_4 'b'
#define TC_IMPL_TC_Bonobo_Property_InvalidValue_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Property_InvalidValue_struct;
#define TC_Bonobo_Property_InvalidValue ((CORBA_TypeCode)&TC_Bonobo_Property_InvalidValue_struct)
#endif
#define Bonobo_Property_InvalidValue__alloc() NULL
   extern gpointer Bonobo_Property_InvalidValue__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_Property_ReadOnlyProperty "IDL:Bonobo/Property/ReadOnlyProperty:1.0"
   void _ORBIT_Bonobo_Property_ReadOnlyProperty_demarshal(GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev);
   void _ORBIT_Bonobo_Property_ReadOnlyProperty_marshal(GIOPSendBuffer *
							_ORBIT_send_buffer,
							CORBA_Environment *
							ev);
#if !defined(_Bonobo_Property_ReadOnlyProperty_defined)
#define _Bonobo_Property_ReadOnlyProperty_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Property_ReadOnlyProperty;

#if !defined(TC_IMPL_TC_Bonobo_Property_ReadOnlyProperty_0)
#define TC_IMPL_TC_Bonobo_Property_ReadOnlyProperty_0 'B'
#define TC_IMPL_TC_Bonobo_Property_ReadOnlyProperty_1 'o'
#define TC_IMPL_TC_Bonobo_Property_ReadOnlyProperty_2 'n'
#define TC_IMPL_TC_Bonobo_Property_ReadOnlyProperty_3 'o'
#define TC_IMPL_TC_Bonobo_Property_ReadOnlyProperty_4 'b'
#define TC_IMPL_TC_Bonobo_Property_ReadOnlyProperty_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Property_ReadOnlyProperty_struct;
#define TC_Bonobo_Property_ReadOnlyProperty ((CORBA_TypeCode)&TC_Bonobo_Property_ReadOnlyProperty_struct)
#endif
#define Bonobo_Property_ReadOnlyProperty__alloc() NULL
   extern gpointer Bonobo_Property_ReadOnlyProperty__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'B'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'B'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_PropertyNames_defined)
#define _Bonobo_PropertyNames_defined 1
   typedef CORBA_sequence_CORBA_string Bonobo_PropertyNames;
#if !defined(TC_IMPL_TC_Bonobo_PropertyNames_0)
#define TC_IMPL_TC_Bonobo_PropertyNames_0 'B'
#define TC_IMPL_TC_Bonobo_PropertyNames_1 'o'
#define TC_IMPL_TC_Bonobo_PropertyNames_2 'n'
#define TC_IMPL_TC_Bonobo_PropertyNames_3 'o'
#define TC_IMPL_TC_Bonobo_PropertyNames_4 'b'
#define TC_IMPL_TC_Bonobo_PropertyNames_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PropertyNames_struct;
#define TC_Bonobo_PropertyNames ((CORBA_TypeCode)&TC_Bonobo_PropertyNames_struct)
#endif
   extern Bonobo_PropertyNames *Bonobo_PropertyNames__alloc(void);
   extern gpointer Bonobo_PropertyNames__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Property) && !defined(_CORBA_sequence_Bonobo_Property_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Property 1
#define _CORBA_sequence_Bonobo_Property_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Property_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Property_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Property_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Property_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Property_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Property_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Property *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_Property;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Property_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Property_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Property_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Property_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Property_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Property_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Property_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_Property_struct;
#define TC_CORBA_sequence_Bonobo_Property ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Property_struct)
#endif
   extern CORBA_sequence_Bonobo_Property
      *CORBA_sequence_Bonobo_Property__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_Property__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_Property
      *CORBA_sequence_Bonobo_Property_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_PropertyList_defined)
#define _Bonobo_PropertyList_defined 1
   typedef CORBA_sequence_Bonobo_Property Bonobo_PropertyList;
#if !defined(TC_IMPL_TC_Bonobo_PropertyList_0)
#define TC_IMPL_TC_Bonobo_PropertyList_0 'B'
#define TC_IMPL_TC_Bonobo_PropertyList_1 'o'
#define TC_IMPL_TC_Bonobo_PropertyList_2 'n'
#define TC_IMPL_TC_Bonobo_PropertyList_3 'o'
#define TC_IMPL_TC_Bonobo_PropertyList_4 'b'
#define TC_IMPL_TC_Bonobo_PropertyList_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PropertyList_struct;
#define TC_Bonobo_PropertyList ((CORBA_TypeCode)&TC_Bonobo_PropertyList_struct)
#endif
   extern Bonobo_PropertyList *Bonobo_PropertyList__alloc(void);
   extern gpointer Bonobo_PropertyList__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Pair_defined)
#define _Bonobo_Pair_defined 1
   typedef struct
   {
      CORBA_char *name;
      CORBA_any value;
   }
   Bonobo_Pair;

#if !defined(TC_IMPL_TC_Bonobo_Pair_0)
#define TC_IMPL_TC_Bonobo_Pair_0 'B'
#define TC_IMPL_TC_Bonobo_Pair_1 'o'
#define TC_IMPL_TC_Bonobo_Pair_2 'n'
#define TC_IMPL_TC_Bonobo_Pair_3 'o'
#define TC_IMPL_TC_Bonobo_Pair_4 'b'
#define TC_IMPL_TC_Bonobo_Pair_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Pair_struct;
#define TC_Bonobo_Pair ((CORBA_TypeCode)&TC_Bonobo_Pair_struct)
#endif
   extern Bonobo_Pair *Bonobo_Pair__alloc(void);
   extern gpointer Bonobo_Pair__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Pair) && !defined(_CORBA_sequence_Bonobo_Pair_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Pair 1
#define _CORBA_sequence_Bonobo_Pair_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Pair *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_Pair;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_Pair_struct;
#define TC_CORBA_sequence_Bonobo_Pair ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Pair_struct)
#endif
   extern CORBA_sequence_Bonobo_Pair *CORBA_sequence_Bonobo_Pair__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_Pair__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_Pair *CORBA_sequence_Bonobo_Pair_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_PropertySet_defined)
#define _Bonobo_PropertySet_defined 1
   typedef CORBA_sequence_Bonobo_Pair Bonobo_PropertySet;
#if !defined(TC_IMPL_TC_Bonobo_PropertySet_0)
#define TC_IMPL_TC_Bonobo_PropertySet_0 'B'
#define TC_IMPL_TC_Bonobo_PropertySet_1 'o'
#define TC_IMPL_TC_Bonobo_PropertySet_2 'n'
#define TC_IMPL_TC_Bonobo_PropertySet_3 'o'
#define TC_IMPL_TC_Bonobo_PropertySet_4 'b'
#define TC_IMPL_TC_Bonobo_PropertySet_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PropertySet_struct;
#define TC_Bonobo_PropertySet ((CORBA_TypeCode)&TC_Bonobo_PropertySet_struct)
#endif
   extern Bonobo_PropertySet *Bonobo_PropertySet__alloc(void);
   extern gpointer Bonobo_PropertySet__free(gpointer mem, gpointer dat,
					    CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_PropertyBag) && !defined(_Bonobo_PropertyBag_defined)
#define ORBIT_DECL_Bonobo_PropertyBag 1
#define _Bonobo_PropertyBag_defined 1
#define Bonobo_PropertyBag__free CORBA_Object__free
   typedef CORBA_Object Bonobo_PropertyBag;
   extern CORBA_unsigned_long Bonobo_PropertyBag__classid;
#if !defined(TC_IMPL_TC_Bonobo_PropertyBag_0)
#define TC_IMPL_TC_Bonobo_PropertyBag_0 'B'
#define TC_IMPL_TC_Bonobo_PropertyBag_1 'o'
#define TC_IMPL_TC_Bonobo_PropertyBag_2 'n'
#define TC_IMPL_TC_Bonobo_PropertyBag_3 'o'
#define TC_IMPL_TC_Bonobo_PropertyBag_4 'b'
#define TC_IMPL_TC_Bonobo_PropertyBag_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PropertyBag_struct;
#define TC_Bonobo_PropertyBag ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_struct)
#endif
#endif
#define ex_Bonobo_PropertyBag_NotFound "IDL:Bonobo/PropertyBag/NotFound:1.0"
   void _ORBIT_Bonobo_PropertyBag_NotFound_demarshal(GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev);
   void _ORBIT_Bonobo_PropertyBag_NotFound_marshal(GIOPSendBuffer *
						   _ORBIT_send_buffer,
						   CORBA_Environment * ev);
#if !defined(_Bonobo_PropertyBag_NotFound_defined)
#define _Bonobo_PropertyBag_NotFound_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_PropertyBag_NotFound;

#if !defined(TC_IMPL_TC_Bonobo_PropertyBag_NotFound_0)
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_0 'B'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_1 'o'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_2 'n'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_3 'o'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_4 'b'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_PropertyBag_NotFound_struct;
#define TC_Bonobo_PropertyBag_NotFound ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_NotFound_struct)
#endif
#define Bonobo_PropertyBag_NotFound__alloc() NULL
   extern gpointer Bonobo_PropertyBag_NotFound__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_ControlFrame) && !defined(_Bonobo_ControlFrame_defined)
#define ORBIT_DECL_Bonobo_ControlFrame 1
#define _Bonobo_ControlFrame_defined 1
#define Bonobo_ControlFrame__free CORBA_Object__free
   typedef CORBA_Object Bonobo_ControlFrame;
   extern CORBA_unsigned_long Bonobo_ControlFrame__classid;
#if !defined(TC_IMPL_TC_Bonobo_ControlFrame_0)
#define TC_IMPL_TC_Bonobo_ControlFrame_0 'B'
#define TC_IMPL_TC_Bonobo_ControlFrame_1 'o'
#define TC_IMPL_TC_Bonobo_ControlFrame_2 'n'
#define TC_IMPL_TC_Bonobo_ControlFrame_3 'o'
#define TC_IMPL_TC_Bonobo_ControlFrame_4 'b'
#define TC_IMPL_TC_Bonobo_ControlFrame_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ControlFrame_struct;
#define TC_Bonobo_ControlFrame ((CORBA_TypeCode)&TC_Bonobo_ControlFrame_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Control) && !defined(_Bonobo_Control_defined)
#define ORBIT_DECL_Bonobo_Control 1
#define _Bonobo_Control_defined 1
#define Bonobo_Control__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Control;
   extern CORBA_unsigned_long Bonobo_Control__classid;
#if !defined(TC_IMPL_TC_Bonobo_Control_0)
#define TC_IMPL_TC_Bonobo_Control_0 'B'
#define TC_IMPL_TC_Bonobo_Control_1 'o'
#define TC_IMPL_TC_Bonobo_Control_2 'n'
#define TC_IMPL_TC_Bonobo_Control_3 'o'
#define TC_IMPL_TC_Bonobo_Control_4 'b'
#define TC_IMPL_TC_Bonobo_Control_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Control_struct;
#define TC_Bonobo_Control ((CORBA_TypeCode)&TC_Bonobo_Control_struct)
#endif
#endif
#if !defined(_Bonobo_Control_windowId_defined)
#define _Bonobo_Control_windowId_defined 1
   typedef CORBA_char *Bonobo_Control_windowId;
#if !defined(TC_IMPL_TC_Bonobo_Control_windowId_0)
#define TC_IMPL_TC_Bonobo_Control_windowId_0 'B'
#define TC_IMPL_TC_Bonobo_Control_windowId_1 'o'
#define TC_IMPL_TC_Bonobo_Control_windowId_2 'n'
#define TC_IMPL_TC_Bonobo_Control_windowId_3 'o'
#define TC_IMPL_TC_Bonobo_Control_windowId_4 'b'
#define TC_IMPL_TC_Bonobo_Control_windowId_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Control_windowId_struct;
#define TC_Bonobo_Control_windowId ((CORBA_TypeCode)&TC_Bonobo_Control_windowId_struct)
#endif
#define Bonobo_Control_windowId__free CORBA_string__free
#endif
#if !defined(_Bonobo_Control_State_defined)
#define _Bonobo_Control_State_defined 1
   typedef enum
   {
      Bonobo_Control_StateNormal,
      Bonobo_Control_StateActive,
      Bonobo_Control_StatePrelight,
      Bonobo_Control_StateSelected,
      Bonobo_Control_StateInsensitive
   }
   Bonobo_Control_State;
#if !defined(TC_IMPL_TC_Bonobo_Control_State_0)
#define TC_IMPL_TC_Bonobo_Control_State_0 'B'
#define TC_IMPL_TC_Bonobo_Control_State_1 'o'
#define TC_IMPL_TC_Bonobo_Control_State_2 'n'
#define TC_IMPL_TC_Bonobo_Control_State_3 'o'
#define TC_IMPL_TC_Bonobo_Control_State_4 'b'
#define TC_IMPL_TC_Bonobo_Control_State_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Control_State_struct;
#define TC_Bonobo_Control_State ((CORBA_TypeCode)&TC_Bonobo_Control_State_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_PropertyControl) && !defined(_Bonobo_PropertyControl_defined)
#define ORBIT_DECL_Bonobo_PropertyControl 1
#define _Bonobo_PropertyControl_defined 1
#define Bonobo_PropertyControl__free CORBA_Object__free
   typedef CORBA_Object Bonobo_PropertyControl;
   extern CORBA_unsigned_long Bonobo_PropertyControl__classid;
#if !defined(TC_IMPL_TC_Bonobo_PropertyControl_0)
#define TC_IMPL_TC_Bonobo_PropertyControl_0 'B'
#define TC_IMPL_TC_Bonobo_PropertyControl_1 'o'
#define TC_IMPL_TC_Bonobo_PropertyControl_2 'n'
#define TC_IMPL_TC_Bonobo_PropertyControl_3 'o'
#define TC_IMPL_TC_Bonobo_PropertyControl_4 'b'
#define TC_IMPL_TC_Bonobo_PropertyControl_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PropertyControl_struct;
#define TC_Bonobo_PropertyControl ((CORBA_TypeCode)&TC_Bonobo_PropertyControl_struct)
#endif
#endif
#if !defined(_Bonobo_PropertyControl_Action_defined)
#define _Bonobo_PropertyControl_Action_defined 1
   typedef enum
   {
      Bonobo_PropertyControl_APPLY,
      Bonobo_PropertyControl_HELP
   }
   Bonobo_PropertyControl_Action;
#if !defined(TC_IMPL_TC_Bonobo_PropertyControl_Action_0)
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_0 'B'
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_1 'o'
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_2 'n'
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_3 'o'
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_4 'b'
#define TC_IMPL_TC_Bonobo_PropertyControl_Action_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_PropertyControl_Action_struct;
#define TC_Bonobo_PropertyControl_Action ((CORBA_TypeCode)&TC_Bonobo_PropertyControl_Action_struct)
#endif
#endif
#define ex_Bonobo_PropertyControl_NoPage "IDL:Bonobo/PropertyControl/NoPage:1.0"
   void _ORBIT_Bonobo_PropertyControl_NoPage_demarshal(GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment *
						       ev);
   void _ORBIT_Bonobo_PropertyControl_NoPage_marshal(GIOPSendBuffer *
						     _ORBIT_send_buffer,
						     CORBA_Environment * ev);
#if !defined(_Bonobo_PropertyControl_NoPage_defined)
#define _Bonobo_PropertyControl_NoPage_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_PropertyControl_NoPage;

#if !defined(TC_IMPL_TC_Bonobo_PropertyControl_NoPage_0)
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_0 'B'
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_1 'o'
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_2 'n'
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_3 'o'
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_4 'b'
#define TC_IMPL_TC_Bonobo_PropertyControl_NoPage_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_PropertyControl_NoPage_struct;
#define TC_Bonobo_PropertyControl_NoPage ((CORBA_TypeCode)&TC_Bonobo_PropertyControl_NoPage_struct)
#endif
#define Bonobo_PropertyControl_NoPage__alloc() NULL
   extern gpointer Bonobo_PropertyControl_NoPage__free(gpointer mem,
						       gpointer dat,
						       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_ZoomLevel_defined)
#define _Bonobo_ZoomLevel_defined 1
   typedef CORBA_float Bonobo_ZoomLevel;
#if !defined(TC_IMPL_TC_Bonobo_ZoomLevel_0)
#define TC_IMPL_TC_Bonobo_ZoomLevel_0 'B'
#define TC_IMPL_TC_Bonobo_ZoomLevel_1 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevel_2 'n'
#define TC_IMPL_TC_Bonobo_ZoomLevel_3 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevel_4 'b'
#define TC_IMPL_TC_Bonobo_ZoomLevel_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ZoomLevel_struct;
#define TC_Bonobo_ZoomLevel ((CORBA_TypeCode)&TC_Bonobo_ZoomLevel_struct)
#endif
#endif
#if !defined(_Bonobo_ZoomLevelName_defined)
#define _Bonobo_ZoomLevelName_defined 1
   typedef CORBA_char *Bonobo_ZoomLevelName;
#if !defined(TC_IMPL_TC_Bonobo_ZoomLevelName_0)
#define TC_IMPL_TC_Bonobo_ZoomLevelName_0 'B'
#define TC_IMPL_TC_Bonobo_ZoomLevelName_1 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevelName_2 'n'
#define TC_IMPL_TC_Bonobo_ZoomLevelName_3 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevelName_4 'b'
#define TC_IMPL_TC_Bonobo_ZoomLevelName_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ZoomLevelName_struct;
#define TC_Bonobo_ZoomLevelName ((CORBA_TypeCode)&TC_Bonobo_ZoomLevelName_struct)
#endif
#define Bonobo_ZoomLevelName__free CORBA_string__free
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevel) && !defined(_CORBA_sequence_Bonobo_ZoomLevel_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevel 1
#define _CORBA_sequence_Bonobo_ZoomLevel_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevel_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_ZoomLevel *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_ZoomLevel;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevel_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_ZoomLevel_struct;
#define TC_CORBA_sequence_Bonobo_ZoomLevel ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_ZoomLevel_struct)
#endif
   extern CORBA_sequence_Bonobo_ZoomLevel
      *CORBA_sequence_Bonobo_ZoomLevel__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_ZoomLevel__free(gpointer mem,
							 gpointer dat,
							 CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_ZoomLevel
      *CORBA_sequence_Bonobo_ZoomLevel_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_ZoomLevelList_defined)
#define _Bonobo_ZoomLevelList_defined 1
   typedef CORBA_sequence_Bonobo_ZoomLevel Bonobo_ZoomLevelList;
#if !defined(TC_IMPL_TC_Bonobo_ZoomLevelList_0)
#define TC_IMPL_TC_Bonobo_ZoomLevelList_0 'B'
#define TC_IMPL_TC_Bonobo_ZoomLevelList_1 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevelList_2 'n'
#define TC_IMPL_TC_Bonobo_ZoomLevelList_3 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevelList_4 'b'
#define TC_IMPL_TC_Bonobo_ZoomLevelList_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ZoomLevelList_struct;
#define TC_Bonobo_ZoomLevelList ((CORBA_TypeCode)&TC_Bonobo_ZoomLevelList_struct)
#endif
   extern Bonobo_ZoomLevelList *Bonobo_ZoomLevelList__alloc(void);
   extern gpointer Bonobo_ZoomLevelList__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevelName) && !defined(_CORBA_sequence_Bonobo_ZoomLevelName_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_ZoomLevelName 1
#define _CORBA_sequence_Bonobo_ZoomLevelName_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_ZoomLevelName_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_ZoomLevelName *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_ZoomLevelName;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_ZoomLevelName_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_ZoomLevelName_struct;
#define TC_CORBA_sequence_Bonobo_ZoomLevelName ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_ZoomLevelName_struct)
#endif
   extern CORBA_sequence_Bonobo_ZoomLevelName
      *CORBA_sequence_Bonobo_ZoomLevelName__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_ZoomLevelName__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_ZoomLevelName
      *CORBA_sequence_Bonobo_ZoomLevelName_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_ZoomLevelNameList_defined)
#define _Bonobo_ZoomLevelNameList_defined 1
   typedef CORBA_sequence_Bonobo_ZoomLevelName Bonobo_ZoomLevelNameList;
#if !defined(TC_IMPL_TC_Bonobo_ZoomLevelNameList_0)
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_0 'B'
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_1 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_2 'n'
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_3 'o'
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_4 'b'
#define TC_IMPL_TC_Bonobo_ZoomLevelNameList_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_ZoomLevelNameList_struct;
#define TC_Bonobo_ZoomLevelNameList ((CORBA_TypeCode)&TC_Bonobo_ZoomLevelNameList_struct)
#endif
   extern Bonobo_ZoomLevelNameList *Bonobo_ZoomLevelNameList__alloc(void);
   extern gpointer Bonobo_ZoomLevelNameList__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_ZoomableFrame) && !defined(_Bonobo_ZoomableFrame_defined)
#define ORBIT_DECL_Bonobo_ZoomableFrame 1
#define _Bonobo_ZoomableFrame_defined 1
#define Bonobo_ZoomableFrame__free CORBA_Object__free
   typedef CORBA_Object Bonobo_ZoomableFrame;
   extern CORBA_unsigned_long Bonobo_ZoomableFrame__classid;
#if !defined(TC_IMPL_TC_Bonobo_ZoomableFrame_0)
#define TC_IMPL_TC_Bonobo_ZoomableFrame_0 'B'
#define TC_IMPL_TC_Bonobo_ZoomableFrame_1 'o'
#define TC_IMPL_TC_Bonobo_ZoomableFrame_2 'n'
#define TC_IMPL_TC_Bonobo_ZoomableFrame_3 'o'
#define TC_IMPL_TC_Bonobo_ZoomableFrame_4 'b'
#define TC_IMPL_TC_Bonobo_ZoomableFrame_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ZoomableFrame_struct;
#define TC_Bonobo_ZoomableFrame ((CORBA_TypeCode)&TC_Bonobo_ZoomableFrame_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Zoomable) && !defined(_Bonobo_Zoomable_defined)
#define ORBIT_DECL_Bonobo_Zoomable 1
#define _Bonobo_Zoomable_defined 1
#define Bonobo_Zoomable__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Zoomable;
   extern CORBA_unsigned_long Bonobo_Zoomable__classid;
#if !defined(TC_IMPL_TC_Bonobo_Zoomable_0)
#define TC_IMPL_TC_Bonobo_Zoomable_0 'B'
#define TC_IMPL_TC_Bonobo_Zoomable_1 'o'
#define TC_IMPL_TC_Bonobo_Zoomable_2 'n'
#define TC_IMPL_TC_Bonobo_Zoomable_3 'o'
#define TC_IMPL_TC_Bonobo_Zoomable_4 'b'
#define TC_IMPL_TC_Bonobo_Zoomable_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Zoomable_struct;
#define TC_Bonobo_Zoomable ((CORBA_TypeCode)&TC_Bonobo_Zoomable_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_ItemContainer) && !defined(_Bonobo_ItemContainer_defined)
#define ORBIT_DECL_Bonobo_ItemContainer 1
#define _Bonobo_ItemContainer_defined 1
#define Bonobo_ItemContainer__free CORBA_Object__free
   typedef CORBA_Object Bonobo_ItemContainer;
   extern CORBA_unsigned_long Bonobo_ItemContainer__classid;
#if !defined(TC_IMPL_TC_Bonobo_ItemContainer_0)
#define TC_IMPL_TC_Bonobo_ItemContainer_0 'B'
#define TC_IMPL_TC_Bonobo_ItemContainer_1 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_2 'n'
#define TC_IMPL_TC_Bonobo_ItemContainer_3 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_4 'b'
#define TC_IMPL_TC_Bonobo_ItemContainer_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ItemContainer_struct;
#define TC_Bonobo_ItemContainer ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Unknown) && !defined(_CORBA_sequence_Bonobo_Unknown_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Unknown 1
#define _CORBA_sequence_Bonobo_Unknown_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Unknown_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Unknown_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Unknown_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Unknown_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Unknown_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Unknown_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Unknown *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_Unknown;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Unknown_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Unknown_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Unknown_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Unknown_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Unknown_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Unknown_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Unknown_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_Unknown_struct;
#define TC_CORBA_sequence_Bonobo_Unknown ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Unknown_struct)
#endif
   extern CORBA_sequence_Bonobo_Unknown
      *CORBA_sequence_Bonobo_Unknown__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_Unknown__free(gpointer mem,
						       gpointer dat,
						       CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_Unknown *CORBA_sequence_Bonobo_Unknown_allocbuf(CORBA_unsigned_long
							  len);
#endif
#if !defined(_Bonobo_ItemContainer_ObjectList_defined)
#define _Bonobo_ItemContainer_ObjectList_defined 1
   typedef CORBA_sequence_Bonobo_Unknown Bonobo_ItemContainer_ObjectList;
#if !defined(TC_IMPL_TC_Bonobo_ItemContainer_ObjectList_0)
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectList_0 'B'
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectList_1 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectList_2 'n'
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectList_3 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectList_4 'b'
#define TC_IMPL_TC_Bonobo_ItemContainer_ObjectList_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_ItemContainer_ObjectList_struct;
#define TC_Bonobo_ItemContainer_ObjectList ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_ObjectList_struct)
#endif
   extern Bonobo_ItemContainer_ObjectList
      *Bonobo_ItemContainer_ObjectList__alloc(void);
   extern gpointer Bonobo_ItemContainer_ObjectList__free(gpointer mem,
							 gpointer dat,
							 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_ItemContainer_NotFound "IDL:Bonobo/ItemContainer/NotFound:1.0"
   void _ORBIT_Bonobo_ItemContainer_NotFound_demarshal(GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment *
						       ev);
   void _ORBIT_Bonobo_ItemContainer_NotFound_marshal(GIOPSendBuffer *
						     _ORBIT_send_buffer,
						     CORBA_Environment * ev);
#if !defined(_Bonobo_ItemContainer_NotFound_defined)
#define _Bonobo_ItemContainer_NotFound_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_ItemContainer_NotFound;

#if !defined(TC_IMPL_TC_Bonobo_ItemContainer_NotFound_0)
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_0 'B'
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_1 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_2 'n'
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_3 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_4 'b'
#define TC_IMPL_TC_Bonobo_ItemContainer_NotFound_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_ItemContainer_NotFound_struct;
#define TC_Bonobo_ItemContainer_NotFound ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_NotFound_struct)
#endif
#define Bonobo_ItemContainer_NotFound__alloc() NULL
   extern gpointer Bonobo_ItemContainer_NotFound__free(gpointer mem,
						       gpointer dat,
						       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_Bonobo_ItemContainer_SyntaxError "IDL:Bonobo/ItemContainer/SyntaxError:1.0"
   void _ORBIT_Bonobo_ItemContainer_SyntaxError_demarshal(GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev);
   void _ORBIT_Bonobo_ItemContainer_SyntaxError_marshal(GIOPSendBuffer *
							_ORBIT_send_buffer,
							CORBA_Environment *
							ev);
#if !defined(_Bonobo_ItemContainer_SyntaxError_defined)
#define _Bonobo_ItemContainer_SyntaxError_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_ItemContainer_SyntaxError;

#if !defined(TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_0)
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_0 'B'
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_1 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_2 'n'
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_3 'o'
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_4 'b'
#define TC_IMPL_TC_Bonobo_ItemContainer_SyntaxError_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_ItemContainer_SyntaxError_struct;
#define TC_Bonobo_ItemContainer_SyntaxError ((CORBA_TypeCode)&TC_Bonobo_ItemContainer_SyntaxError_struct)
#endif
#define Bonobo_ItemContainer_SyntaxError__alloc() NULL
   extern gpointer Bonobo_ItemContainer_SyntaxError__free(gpointer mem,
							  gpointer dat,
							  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_ClientSite) && !defined(_Bonobo_ClientSite_defined)
#define ORBIT_DECL_Bonobo_ClientSite 1
#define _Bonobo_ClientSite_defined 1
#define Bonobo_ClientSite__free CORBA_Object__free
   typedef CORBA_Object Bonobo_ClientSite;
   extern CORBA_unsigned_long Bonobo_ClientSite__classid;
#if !defined(TC_IMPL_TC_Bonobo_ClientSite_0)
#define TC_IMPL_TC_Bonobo_ClientSite_0 'B'
#define TC_IMPL_TC_Bonobo_ClientSite_1 'o'
#define TC_IMPL_TC_Bonobo_ClientSite_2 'n'
#define TC_IMPL_TC_Bonobo_ClientSite_3 'o'
#define TC_IMPL_TC_Bonobo_ClientSite_4 'b'
#define TC_IMPL_TC_Bonobo_ClientSite_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ClientSite_struct;
#define TC_Bonobo_ClientSite ((CORBA_TypeCode)&TC_Bonobo_ClientSite_struct)
#endif
#endif
#if !defined(_Bonobo_Gdk_EventType_defined)
#define _Bonobo_Gdk_EventType_defined 1
   typedef enum
   {
      Bonobo_Gdk_FOCUS,
      Bonobo_Gdk_KEY,
      Bonobo_Gdk_MOTION,
      Bonobo_Gdk_BUTTON,
      Bonobo_Gdk_CROSSING
   }
   Bonobo_Gdk_EventType;
#if !defined(TC_IMPL_TC_Bonobo_Gdk_EventType_0)
#define TC_IMPL_TC_Bonobo_Gdk_EventType_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_EventType_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_EventType_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_EventType_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_EventType_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_EventType_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_EventType_struct;
#define TC_Bonobo_Gdk_EventType ((CORBA_TypeCode)&TC_Bonobo_Gdk_EventType_struct)
#endif
#endif
#if !defined(_Bonobo_Gdk_ButtonType_defined)
#define _Bonobo_Gdk_ButtonType_defined 1
   typedef enum
   {
      Bonobo_Gdk_BUTTON_PRESS,
      Bonobo_Gdk_BUTTON_2_PRESS,
      Bonobo_Gdk_BUTTON_3_PRESS,
      Bonobo_Gdk_BUTTON_RELEASE
   }
   Bonobo_Gdk_ButtonType;
#if !defined(TC_IMPL_TC_Bonobo_Gdk_ButtonType_0)
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonType_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_ButtonType_struct;
#define TC_Bonobo_Gdk_ButtonType ((CORBA_TypeCode)&TC_Bonobo_Gdk_ButtonType_struct)
#endif
#endif
#if !defined(_Bonobo_Gdk_KeyType_defined)
#define _Bonobo_Gdk_KeyType_defined 1
   typedef enum
   {
      Bonobo_Gdk_KEY_PRESS,
      Bonobo_Gdk_KEY_RELEASE
   }
   Bonobo_Gdk_KeyType;
#if !defined(TC_IMPL_TC_Bonobo_Gdk_KeyType_0)
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_KeyType_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_KeyType_struct;
#define TC_Bonobo_Gdk_KeyType ((CORBA_TypeCode)&TC_Bonobo_Gdk_KeyType_struct)
#endif
#endif
#if !defined(_Bonobo_Gdk_CrossType_defined)
#define _Bonobo_Gdk_CrossType_defined 1
   typedef enum
   {
      Bonobo_Gdk_ENTER,
      Bonobo_Gdk_LEAVE
   }
   Bonobo_Gdk_CrossType;
#if !defined(TC_IMPL_TC_Bonobo_Gdk_CrossType_0)
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_CrossType_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_CrossType_struct;
#define TC_Bonobo_Gdk_CrossType ((CORBA_TypeCode)&TC_Bonobo_Gdk_CrossType_struct)
#endif
#endif
#if !defined(_Bonobo_Gdk_CrossMode_defined)
#define _Bonobo_Gdk_CrossMode_defined 1
   typedef enum
   {
      Bonobo_Gdk_NORMAL,
      Bonobo_Gdk_GRAB,
      Bonobo_Gdk_UNGRAB
   }
   Bonobo_Gdk_CrossMode;
#if !defined(TC_IMPL_TC_Bonobo_Gdk_CrossMode_0)
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_CrossMode_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_CrossMode_struct;
#define TC_Bonobo_Gdk_CrossMode ((CORBA_TypeCode)&TC_Bonobo_Gdk_CrossMode_struct)
#endif
#endif
#if !defined(_Bonobo_Gdk_Time_defined)
#define _Bonobo_Gdk_Time_defined 1
   typedef CORBA_long Bonobo_Gdk_Time;
#if !defined(TC_IMPL_TC_Bonobo_Gdk_Time_0)
#define TC_IMPL_TC_Bonobo_Gdk_Time_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_Time_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_Time_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_Time_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_Time_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_Time_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_Time_struct;
#define TC_Bonobo_Gdk_Time ((CORBA_TypeCode)&TC_Bonobo_Gdk_Time_struct)
#endif
#endif
#if !defined(_Bonobo_Gdk_MotionEvent_defined)
#define _Bonobo_Gdk_MotionEvent_defined 1
   typedef struct
   {
      Bonobo_Gdk_Time time;
      CORBA_double x;
      CORBA_double y;
      CORBA_double x_root;
      CORBA_double y_root;
      CORBA_double pressure;
      CORBA_double xtilt;
      CORBA_double ytilt;
      CORBA_long state;
      CORBA_boolean is_hint;
   }
   Bonobo_Gdk_MotionEvent;

#if !defined(TC_IMPL_TC_Bonobo_Gdk_MotionEvent_0)
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_MotionEvent_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_MotionEvent_struct;
#define TC_Bonobo_Gdk_MotionEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_MotionEvent_struct)
#endif
   extern Bonobo_Gdk_MotionEvent *Bonobo_Gdk_MotionEvent__alloc(void);
   extern gpointer Bonobo_Gdk_MotionEvent__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Gdk_ButtonEvent_defined)
#define _Bonobo_Gdk_ButtonEvent_defined 1
   typedef struct
   {
      Bonobo_Gdk_ButtonType type;
      Bonobo_Gdk_Time time;
      CORBA_double x;
      CORBA_double y;
      CORBA_double x_root;
      CORBA_double y_root;
      CORBA_short button;
   }
   Bonobo_Gdk_ButtonEvent;

#if !defined(TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_0)
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_ButtonEvent_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_ButtonEvent_struct;
#define TC_Bonobo_Gdk_ButtonEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_ButtonEvent_struct)
#endif
   extern Bonobo_Gdk_ButtonEvent *Bonobo_Gdk_ButtonEvent__alloc(void);
   extern gpointer Bonobo_Gdk_ButtonEvent__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Gdk_KeyEvent_defined)
#define _Bonobo_Gdk_KeyEvent_defined 1
   typedef struct
   {
      Bonobo_Gdk_KeyType type;
      Bonobo_Gdk_Time time;
      CORBA_short state;
      CORBA_short keyval;
      CORBA_short length;
      CORBA_char *str;
   }
   Bonobo_Gdk_KeyEvent;

#if !defined(TC_IMPL_TC_Bonobo_Gdk_KeyEvent_0)
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_KeyEvent_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_KeyEvent_struct;
#define TC_Bonobo_Gdk_KeyEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_KeyEvent_struct)
#endif
   extern Bonobo_Gdk_KeyEvent *Bonobo_Gdk_KeyEvent__alloc(void);
   extern gpointer Bonobo_Gdk_KeyEvent__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Gdk_CrossingEvent_defined)
#define _Bonobo_Gdk_CrossingEvent_defined 1
   typedef struct
   {
      Bonobo_Gdk_CrossType type;
      Bonobo_Gdk_Time time;
      CORBA_double x;
      CORBA_double y;
      CORBA_double x_root;
      CORBA_double y_root;
      Bonobo_Gdk_CrossMode mode;
      CORBA_boolean focus;
      CORBA_short state;
   }
   Bonobo_Gdk_CrossingEvent;

#if !defined(TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_0)
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_CrossingEvent_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Gdk_CrossingEvent_struct;
#define TC_Bonobo_Gdk_CrossingEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_CrossingEvent_struct)
#endif
   extern Bonobo_Gdk_CrossingEvent *Bonobo_Gdk_CrossingEvent__alloc(void);
   extern gpointer Bonobo_Gdk_CrossingEvent__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Gdk_FocusEvent_defined)
#define _Bonobo_Gdk_FocusEvent_defined 1
   typedef struct
   {
      CORBA_boolean inside;
   }
   Bonobo_Gdk_FocusEvent;

#if !defined(TC_IMPL_TC_Bonobo_Gdk_FocusEvent_0)
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_FocusEvent_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_FocusEvent_struct;
#define TC_Bonobo_Gdk_FocusEvent ((CORBA_TypeCode)&TC_Bonobo_Gdk_FocusEvent_struct)
#endif
   extern Bonobo_Gdk_FocusEvent *Bonobo_Gdk_FocusEvent__alloc(void);
   extern gpointer Bonobo_Gdk_FocusEvent__free(gpointer mem, gpointer dat,
					       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Gdk_Event_defined)
#define _Bonobo_Gdk_Event_defined 1
   typedef struct
   {
      Bonobo_Gdk_EventType _d;
      union
      {
	 Bonobo_Gdk_FocusEvent focus;
	 Bonobo_Gdk_KeyEvent key;
	 Bonobo_Gdk_MotionEvent motion;
	 Bonobo_Gdk_ButtonEvent button;
	 Bonobo_Gdk_CrossingEvent crossing;
      }
      _u;
   }
   Bonobo_Gdk_Event;
#if !defined(TC_IMPL_TC_Bonobo_Gdk_Event_0)
#define TC_IMPL_TC_Bonobo_Gdk_Event_0 'B'
#define TC_IMPL_TC_Bonobo_Gdk_Event_1 'o'
#define TC_IMPL_TC_Bonobo_Gdk_Event_2 'n'
#define TC_IMPL_TC_Bonobo_Gdk_Event_3 'o'
#define TC_IMPL_TC_Bonobo_Gdk_Event_4 'b'
#define TC_IMPL_TC_Bonobo_Gdk_Event_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Gdk_Event_struct;
#define TC_Bonobo_Gdk_Event ((CORBA_TypeCode)&TC_Bonobo_Gdk_Event_struct)
#endif
   extern Bonobo_Gdk_Event *Bonobo_Gdk_Event__alloc(void);
   extern gpointer Bonobo_Gdk_Event__free(gpointer mem, gpointer dat,
					  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet) && !defined(_CORBA_sequence_CORBA_octet_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define _CORBA_sequence_CORBA_octet_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'B'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_octet;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'B'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
   extern CORBA_sequence_CORBA_octet *CORBA_sequence_CORBA_octet__alloc(void);
   extern gpointer CORBA_sequence_CORBA_octet__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_octet *CORBA_sequence_CORBA_octet_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_Canvas_pixbuf_defined)
#define _Bonobo_Canvas_pixbuf_defined 1
   typedef CORBA_sequence_CORBA_octet Bonobo_Canvas_pixbuf;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_pixbuf_0)
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_pixbuf_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_pixbuf_struct;
#define TC_Bonobo_Canvas_pixbuf ((CORBA_TypeCode)&TC_Bonobo_Canvas_pixbuf_struct)
#endif
   extern Bonobo_Canvas_pixbuf *Bonobo_Canvas_pixbuf__alloc(void);
   extern gpointer Bonobo_Canvas_pixbuf__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Canvas_window_id_defined)
#define _Bonobo_Canvas_window_id_defined 1
   typedef CORBA_unsigned_long Bonobo_Canvas_window_id;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_window_id_0)
#define TC_IMPL_TC_Bonobo_Canvas_window_id_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_window_id_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_window_id_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_window_id_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_window_id_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_window_id_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Canvas_window_id_struct;
#define TC_Bonobo_Canvas_window_id ((CORBA_TypeCode)&TC_Bonobo_Canvas_window_id_struct)
#endif
#endif
#if !defined(_Bonobo_Canvas_int32_defined)
#define _Bonobo_Canvas_int32_defined 1
   typedef CORBA_long Bonobo_Canvas_int32;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_int32_0)
#define TC_IMPL_TC_Bonobo_Canvas_int32_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_int32_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_int32_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_int32_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_int32_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_int32_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_int32_struct;
#define TC_Bonobo_Canvas_int32 ((CORBA_TypeCode)&TC_Bonobo_Canvas_int32_struct)
#endif
#endif
#if !defined(_Bonobo_Canvas_IRect_defined)
#define _Bonobo_Canvas_IRect_defined 1
   typedef struct
   {
      CORBA_long x0;
      CORBA_long y0;
      CORBA_long x1;
      CORBA_long y1;
   }
   Bonobo_Canvas_IRect;

#if !defined(TC_IMPL_TC_Bonobo_Canvas_IRect_0)
#define TC_IMPL_TC_Bonobo_Canvas_IRect_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_IRect_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_IRect_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_IRect_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_IRect_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_IRect_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_IRect_struct;
#define TC_Bonobo_Canvas_IRect ((CORBA_TypeCode)&TC_Bonobo_Canvas_IRect_struct)
#endif
   extern Bonobo_Canvas_IRect *Bonobo_Canvas_IRect__alloc(void);
   extern gpointer Bonobo_Canvas_IRect__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Canvas_DRect_defined)
#define _Bonobo_Canvas_DRect_defined 1
   typedef struct
   {
      CORBA_double x0;
      CORBA_double y0;
      CORBA_double x1;
      CORBA_double y1;
   }
   Bonobo_Canvas_DRect;

#if !defined(TC_IMPL_TC_Bonobo_Canvas_DRect_0)
#define TC_IMPL_TC_Bonobo_Canvas_DRect_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_DRect_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_DRect_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_DRect_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_DRect_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_DRect_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_DRect_struct;
#define TC_Bonobo_Canvas_DRect ((CORBA_TypeCode)&TC_Bonobo_Canvas_DRect_struct)
#endif
   extern Bonobo_Canvas_DRect *Bonobo_Canvas_DRect__alloc(void);
   extern gpointer Bonobo_Canvas_DRect__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#ifndef Bonobo_Canvas_IS_BG
#define Bonobo_Canvas_IS_BG 1
#endif				/* !Bonobo_Canvas_IS_BG */

#ifndef Bonobo_Canvas_IS_BUF
#define Bonobo_Canvas_IS_BUF 2
#endif				/* !Bonobo_Canvas_IS_BUF */

#if !defined(_Bonobo_Canvas_affine_defined)
#define _Bonobo_Canvas_affine_defined 1
   typedef CORBA_double Bonobo_Canvas_affine[6];
   typedef CORBA_double Bonobo_Canvas_affine_slice;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_affine_0)
#define TC_IMPL_TC_Bonobo_Canvas_affine_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_affine_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_affine_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_affine_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_affine_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_affine_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_affine_struct;
#define TC_Bonobo_Canvas_affine ((CORBA_TypeCode)&TC_Bonobo_Canvas_affine_struct)
#endif
   extern Bonobo_Canvas_affine_slice *Bonobo_Canvas_affine__alloc(void);
   extern gpointer Bonobo_Canvas_affine__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Canvas_Buf_defined)
#define _Bonobo_Canvas_Buf_defined 1
   typedef struct
   {
      Bonobo_Canvas_pixbuf rgb_buf;
      CORBA_long row_stride;
      Bonobo_Canvas_IRect rect;
      Bonobo_Canvas_int32 bg_color;
      CORBA_short flags;
   }
   Bonobo_Canvas_Buf;

#if !defined(TC_IMPL_TC_Bonobo_Canvas_Buf_0)
#define TC_IMPL_TC_Bonobo_Canvas_Buf_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_Buf_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Buf_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_Buf_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Buf_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_Buf_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_Buf_struct;
#define TC_Bonobo_Canvas_Buf ((CORBA_TypeCode)&TC_Bonobo_Canvas_Buf_struct)
#endif
   extern Bonobo_Canvas_Buf *Bonobo_Canvas_Buf__alloc(void);
   extern gpointer Bonobo_Canvas_Buf__free(gpointer mem, gpointer dat,
					   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Canvas_Point_defined)
#define _Bonobo_Canvas_Point_defined 1
   typedef struct
   {
      CORBA_double x;
      CORBA_double y;
   }
   Bonobo_Canvas_Point;

#if !defined(TC_IMPL_TC_Bonobo_Canvas_Point_0)
#define TC_IMPL_TC_Bonobo_Canvas_Point_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_Point_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Point_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_Point_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Point_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_Point_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_Point_struct;
#define TC_Bonobo_Canvas_Point ((CORBA_TypeCode)&TC_Bonobo_Canvas_Point_struct)
#endif
   extern Bonobo_Canvas_Point *Bonobo_Canvas_Point__alloc(void);
   extern gpointer Bonobo_Canvas_Point__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_Point) && !defined(_CORBA_sequence_Bonobo_Canvas_Point_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_Point 1
#define _CORBA_sequence_Bonobo_Canvas_Point_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_Point_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Canvas_Point *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_Canvas_Point;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_Point_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_Canvas_Point_struct;
#define TC_CORBA_sequence_Bonobo_Canvas_Point ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Canvas_Point_struct)
#endif
   extern CORBA_sequence_Bonobo_Canvas_Point
      *CORBA_sequence_Bonobo_Canvas_Point__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_Canvas_Point__free(gpointer mem,
							    gpointer dat,
							    CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_Canvas_Point
      *CORBA_sequence_Bonobo_Canvas_Point_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_Canvas_Points_defined)
#define _Bonobo_Canvas_Points_defined 1
   typedef CORBA_sequence_Bonobo_Canvas_Point Bonobo_Canvas_Points;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_Points_0)
#define TC_IMPL_TC_Bonobo_Canvas_Points_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_Points_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Points_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_Points_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Points_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_Points_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_Points_struct;
#define TC_Bonobo_Canvas_Points ((CORBA_TypeCode)&TC_Bonobo_Canvas_Points_struct)
#endif
   extern Bonobo_Canvas_Points *Bonobo_Canvas_Points__alloc(void);
   extern gpointer Bonobo_Canvas_Points__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Canvas_SVPSegment_defined)
#define _Bonobo_Canvas_SVPSegment_defined 1
   typedef struct
   {
      CORBA_boolean up;
      Bonobo_Canvas_DRect bbox;
      Bonobo_Canvas_Points points;
   }
   Bonobo_Canvas_SVPSegment;

#if !defined(TC_IMPL_TC_Bonobo_Canvas_SVPSegment_0)
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_SVPSegment_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Canvas_SVPSegment_struct;
#define TC_Bonobo_Canvas_SVPSegment ((CORBA_TypeCode)&TC_Bonobo_Canvas_SVPSegment_struct)
#endif
   extern Bonobo_Canvas_SVPSegment *Bonobo_Canvas_SVPSegment__alloc(void);
   extern gpointer Bonobo_Canvas_SVPSegment__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_SVPSegment) && !defined(_CORBA_sequence_Bonobo_Canvas_SVPSegment_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_SVPSegment 1
#define _CORBA_sequence_Bonobo_Canvas_SVPSegment_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_SVPSegment_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Canvas_SVPSegment *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_Canvas_SVPSegment;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_struct;
#define TC_CORBA_sequence_Bonobo_Canvas_SVPSegment ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Canvas_SVPSegment_struct)
#endif
   extern CORBA_sequence_Bonobo_Canvas_SVPSegment
      *CORBA_sequence_Bonobo_Canvas_SVPSegment__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_Canvas_SVPSegment__free(gpointer mem,
								 gpointer dat,
								 CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_Canvas_SVPSegment
      *CORBA_sequence_Bonobo_Canvas_SVPSegment_allocbuf(CORBA_unsigned_long
							len);
#endif
#if !defined(_Bonobo_Canvas_SVP_defined)
#define _Bonobo_Canvas_SVP_defined 1
   typedef CORBA_sequence_Bonobo_Canvas_SVPSegment Bonobo_Canvas_SVP;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_SVP_0)
#define TC_IMPL_TC_Bonobo_Canvas_SVP_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_SVP_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_SVP_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_SVP_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_SVP_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_SVP_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_SVP_struct;
#define TC_Bonobo_Canvas_SVP ((CORBA_TypeCode)&TC_Bonobo_Canvas_SVP_struct)
#endif
   extern Bonobo_Canvas_SVP *Bonobo_Canvas_SVP__alloc(void);
   extern gpointer Bonobo_Canvas_SVP__free(gpointer mem, gpointer dat,
					   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_int32) && !defined(_CORBA_sequence_Bonobo_Canvas_int32_defined)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Canvas_int32 1
#define _CORBA_sequence_Bonobo_Canvas_int32_defined 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_0 'B'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_1 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_2 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_3 'o'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_4 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Canvas_int32_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Canvas_int32 *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Bonobo_Canvas_int32;
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_0 'B'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_1 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_2 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_3 'o'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_4 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Canvas_int32_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Bonobo_Canvas_int32_struct;
#define TC_CORBA_sequence_Bonobo_Canvas_int32 ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Canvas_int32_struct)
#endif
   extern CORBA_sequence_Bonobo_Canvas_int32
      *CORBA_sequence_Bonobo_Canvas_int32__alloc(void);
   extern gpointer CORBA_sequence_Bonobo_Canvas_int32__free(gpointer mem,
							    gpointer dat,
							    CORBA_boolean free_strings);	/* ORBit internal use */
   Bonobo_Canvas_int32
      *CORBA_sequence_Bonobo_Canvas_int32_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_Canvas_ArtUTA_defined)
#define _Bonobo_Canvas_ArtUTA_defined 1
   typedef struct
   {
      CORBA_short x0;
      CORBA_short y0;
      CORBA_short width;
      CORBA_short height;
      CORBA_sequence_Bonobo_Canvas_int32 utiles;
   }
   Bonobo_Canvas_ArtUTA;

#if !defined(TC_IMPL_TC_Bonobo_Canvas_ArtUTA_0)
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_ArtUTA_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_ArtUTA_struct;
#define TC_Bonobo_Canvas_ArtUTA ((CORBA_TypeCode)&TC_Bonobo_Canvas_ArtUTA_struct)
#endif
   extern Bonobo_Canvas_ArtUTA *Bonobo_Canvas_ArtUTA__alloc(void);
   extern gpointer Bonobo_Canvas_ArtUTA__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Canvas_State_defined)
#define _Bonobo_Canvas_State_defined 1
   typedef struct
   {
      Bonobo_Canvas_affine item_aff;
      CORBA_double pixels_per_unit;
      CORBA_double canvas_scroll_x1;
      CORBA_double canvas_scroll_y1;
      CORBA_long zoom_xofs;
      CORBA_long zoom_yofs;
      CORBA_long xoffset;
      CORBA_long yoffset;
   }
   Bonobo_Canvas_State;

#if !defined(TC_IMPL_TC_Bonobo_Canvas_State_0)
#define TC_IMPL_TC_Bonobo_Canvas_State_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_State_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_State_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_State_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_State_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_State_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Canvas_State_struct;
#define TC_Bonobo_Canvas_State ((CORBA_TypeCode)&TC_Bonobo_Canvas_State_struct)
#endif
   extern Bonobo_Canvas_State *Bonobo_Canvas_State__alloc(void);
   extern gpointer Bonobo_Canvas_State__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_Canvas_Component) && !defined(_Bonobo_Canvas_Component_defined)
#define ORBIT_DECL_Bonobo_Canvas_Component 1
#define _Bonobo_Canvas_Component_defined 1
#define Bonobo_Canvas_Component__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Canvas_Component;
   extern CORBA_unsigned_long Bonobo_Canvas_Component__classid;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_Component_0)
#define TC_IMPL_TC_Bonobo_Canvas_Component_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_Component_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Component_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_Component_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_Component_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_Component_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Canvas_Component_struct;
#define TC_Bonobo_Canvas_Component ((CORBA_TypeCode)&TC_Bonobo_Canvas_Component_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Canvas_ComponentProxy) && !defined(_Bonobo_Canvas_ComponentProxy_defined)
#define ORBIT_DECL_Bonobo_Canvas_ComponentProxy 1
#define _Bonobo_Canvas_ComponentProxy_defined 1
#define Bonobo_Canvas_ComponentProxy__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Canvas_ComponentProxy;
   extern CORBA_unsigned_long Bonobo_Canvas_ComponentProxy__classid;
#if !defined(TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_0)
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_0 'B'
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_1 'o'
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_2 'n'
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_3 'o'
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_4 'b'
#define TC_IMPL_TC_Bonobo_Canvas_ComponentProxy_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Canvas_ComponentProxy_struct;
#define TC_Bonobo_Canvas_ComponentProxy ((CORBA_TypeCode)&TC_Bonobo_Canvas_ComponentProxy_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_View) && !defined(_Bonobo_View_defined)
#define ORBIT_DECL_Bonobo_View 1
#define _Bonobo_View_defined 1
#define Bonobo_View__free CORBA_Object__free
   typedef CORBA_Object Bonobo_View;
   extern CORBA_unsigned_long Bonobo_View__classid;
#if !defined(TC_IMPL_TC_Bonobo_View_0)
#define TC_IMPL_TC_Bonobo_View_0 'B'
#define TC_IMPL_TC_Bonobo_View_1 'o'
#define TC_IMPL_TC_Bonobo_View_2 'n'
#define TC_IMPL_TC_Bonobo_View_3 'o'
#define TC_IMPL_TC_Bonobo_View_4 'b'
#define TC_IMPL_TC_Bonobo_View_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_View_struct;
#define TC_Bonobo_View ((CORBA_TypeCode)&TC_Bonobo_View_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_ViewFrame) && !defined(_Bonobo_ViewFrame_defined)
#define ORBIT_DECL_Bonobo_ViewFrame 1
#define _Bonobo_ViewFrame_defined 1
#define Bonobo_ViewFrame__free CORBA_Object__free
   typedef CORBA_Object Bonobo_ViewFrame;
   extern CORBA_unsigned_long Bonobo_ViewFrame__classid;
#if !defined(TC_IMPL_TC_Bonobo_ViewFrame_0)
#define TC_IMPL_TC_Bonobo_ViewFrame_0 'B'
#define TC_IMPL_TC_Bonobo_ViewFrame_1 'o'
#define TC_IMPL_TC_Bonobo_ViewFrame_2 'n'
#define TC_IMPL_TC_Bonobo_ViewFrame_3 'o'
#define TC_IMPL_TC_Bonobo_ViewFrame_4 'b'
#define TC_IMPL_TC_Bonobo_ViewFrame_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_ViewFrame_struct;
#define TC_Bonobo_ViewFrame ((CORBA_TypeCode)&TC_Bonobo_ViewFrame_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Embeddable) && !defined(_Bonobo_Embeddable_defined)
#define ORBIT_DECL_Bonobo_Embeddable 1
#define _Bonobo_Embeddable_defined 1
#define Bonobo_Embeddable__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Embeddable;
   extern CORBA_unsigned_long Bonobo_Embeddable__classid;
#if !defined(TC_IMPL_TC_Bonobo_Embeddable_0)
#define TC_IMPL_TC_Bonobo_Embeddable_0 'B'
#define TC_IMPL_TC_Bonobo_Embeddable_1 'o'
#define TC_IMPL_TC_Bonobo_Embeddable_2 'n'
#define TC_IMPL_TC_Bonobo_Embeddable_3 'o'
#define TC_IMPL_TC_Bonobo_Embeddable_4 'b'
#define TC_IMPL_TC_Bonobo_Embeddable_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Embeddable_struct;
#define TC_Bonobo_Embeddable ((CORBA_TypeCode)&TC_Bonobo_Embeddable_struct)
#endif
#endif
#define ex_Bonobo_Embeddable_UserCancelledSave "IDL:Bonobo/Embeddable/UserCancelledSave:1.0"
   void _ORBIT_Bonobo_Embeddable_UserCancelledSave_demarshal(GIOPRecvBuffer *
							     _ORBIT_recv_buffer,
							     CORBA_Environment
							     * ev);
   void _ORBIT_Bonobo_Embeddable_UserCancelledSave_marshal(GIOPSendBuffer *
							   _ORBIT_send_buffer,
							   CORBA_Environment *
							   ev);
#if !defined(_Bonobo_Embeddable_UserCancelledSave_defined)
#define _Bonobo_Embeddable_UserCancelledSave_defined 1
   typedef struct
   {
      int dummy;
   }
   Bonobo_Embeddable_UserCancelledSave;

#if !defined(TC_IMPL_TC_Bonobo_Embeddable_UserCancelledSave_0)
#define TC_IMPL_TC_Bonobo_Embeddable_UserCancelledSave_0 'B'
#define TC_IMPL_TC_Bonobo_Embeddable_UserCancelledSave_1 'o'
#define TC_IMPL_TC_Bonobo_Embeddable_UserCancelledSave_2 'n'
#define TC_IMPL_TC_Bonobo_Embeddable_UserCancelledSave_3 'o'
#define TC_IMPL_TC_Bonobo_Embeddable_UserCancelledSave_4 'b'
#define TC_IMPL_TC_Bonobo_Embeddable_UserCancelledSave_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Embeddable_UserCancelledSave_struct;
#define TC_Bonobo_Embeddable_UserCancelledSave ((CORBA_TypeCode)&TC_Bonobo_Embeddable_UserCancelledSave_struct)
#endif
#define Bonobo_Embeddable_UserCancelledSave__alloc() NULL
   extern gpointer Bonobo_Embeddable_UserCancelledSave__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_Embeddable_CloseMode_defined)
#define _Bonobo_Embeddable_CloseMode_defined 1
   typedef enum
   {
      Bonobo_Embeddable_SAVE_IF_DIRTY,
      Bonobo_Embeddable_NO_SAVE,
      Bonobo_Embeddable_PROMPT_SAVE
   }
   Bonobo_Embeddable_CloseMode;
#if !defined(TC_IMPL_TC_Bonobo_Embeddable_CloseMode_0)
#define TC_IMPL_TC_Bonobo_Embeddable_CloseMode_0 'B'
#define TC_IMPL_TC_Bonobo_Embeddable_CloseMode_1 'o'
#define TC_IMPL_TC_Bonobo_Embeddable_CloseMode_2 'n'
#define TC_IMPL_TC_Bonobo_Embeddable_CloseMode_3 'o'
#define TC_IMPL_TC_Bonobo_Embeddable_CloseMode_4 'b'
#define TC_IMPL_TC_Bonobo_Embeddable_CloseMode_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Embeddable_CloseMode_struct;
#define TC_Bonobo_Embeddable_CloseMode ((CORBA_TypeCode)&TC_Bonobo_Embeddable_CloseMode_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_char) && !defined(_CORBA_sequence_CORBA_char_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_char 1
#define _CORBA_sequence_CORBA_char_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_char_0 'B'
#define ORBIT_IMPL_CORBA_sequence_CORBA_char_1 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_char_2 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_char_3 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_char_4 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_char_5 'o'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_char;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_char_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_char_0 'B'
#define TC_IMPL_TC_CORBA_sequence_CORBA_char_1 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_char_2 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_char_3 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_char_4 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_char_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_char_struct;
#define TC_CORBA_sequence_CORBA_char ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_char_struct)
#endif
   extern CORBA_sequence_CORBA_char *CORBA_sequence_CORBA_char__alloc(void);
   extern gpointer CORBA_sequence_CORBA_char__free(gpointer mem, gpointer dat,
						   CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char *CORBA_sequence_CORBA_char_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Bonobo_PrintData_defined)
#define _Bonobo_PrintData_defined 1
   typedef CORBA_sequence_CORBA_char Bonobo_PrintData;
#if !defined(TC_IMPL_TC_Bonobo_PrintData_0)
#define TC_IMPL_TC_Bonobo_PrintData_0 'B'
#define TC_IMPL_TC_Bonobo_PrintData_1 'o'
#define TC_IMPL_TC_Bonobo_PrintData_2 'n'
#define TC_IMPL_TC_Bonobo_PrintData_3 'o'
#define TC_IMPL_TC_Bonobo_PrintData_4 'b'
#define TC_IMPL_TC_Bonobo_PrintData_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PrintData_struct;
#define TC_Bonobo_PrintData ((CORBA_TypeCode)&TC_Bonobo_PrintData_struct)
#endif
   extern Bonobo_PrintData *Bonobo_PrintData__alloc(void);
   extern gpointer Bonobo_PrintData__free(gpointer mem, gpointer dat,
					  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_PrintScissor_defined)
#define _Bonobo_PrintScissor_defined 1
   typedef struct
   {
      CORBA_double width_first_page;
      CORBA_double width_per_page;
      CORBA_double height_first_page;
      CORBA_double height_per_page;
   }
   Bonobo_PrintScissor;

#if !defined(TC_IMPL_TC_Bonobo_PrintScissor_0)
#define TC_IMPL_TC_Bonobo_PrintScissor_0 'B'
#define TC_IMPL_TC_Bonobo_PrintScissor_1 'o'
#define TC_IMPL_TC_Bonobo_PrintScissor_2 'n'
#define TC_IMPL_TC_Bonobo_PrintScissor_3 'o'
#define TC_IMPL_TC_Bonobo_PrintScissor_4 'b'
#define TC_IMPL_TC_Bonobo_PrintScissor_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PrintScissor_struct;
#define TC_Bonobo_PrintScissor ((CORBA_TypeCode)&TC_Bonobo_PrintScissor_struct)
#endif
   extern Bonobo_PrintScissor *Bonobo_PrintScissor__alloc(void);
   extern gpointer Bonobo_PrintScissor__free(gpointer mem, gpointer dat,
					     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Bonobo_PrintDimensions_defined)
#define _Bonobo_PrintDimensions_defined 1
   typedef struct
   {
      CORBA_double width;
      CORBA_double height;
   }
   Bonobo_PrintDimensions;

#if !defined(TC_IMPL_TC_Bonobo_PrintDimensions_0)
#define TC_IMPL_TC_Bonobo_PrintDimensions_0 'B'
#define TC_IMPL_TC_Bonobo_PrintDimensions_1 'o'
#define TC_IMPL_TC_Bonobo_PrintDimensions_2 'n'
#define TC_IMPL_TC_Bonobo_PrintDimensions_3 'o'
#define TC_IMPL_TC_Bonobo_PrintDimensions_4 'b'
#define TC_IMPL_TC_Bonobo_PrintDimensions_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_PrintDimensions_struct;
#define TC_Bonobo_PrintDimensions ((CORBA_TypeCode)&TC_Bonobo_PrintDimensions_struct)
#endif
   extern Bonobo_PrintDimensions *Bonobo_PrintDimensions__alloc(void);
   extern gpointer Bonobo_PrintDimensions__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Bonobo_Print) && !defined(_Bonobo_Print_defined)
#define ORBIT_DECL_Bonobo_Print 1
#define _Bonobo_Print_defined 1
#define Bonobo_Print__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Print;
   extern CORBA_unsigned_long Bonobo_Print__classid;
#if !defined(TC_IMPL_TC_Bonobo_Print_0)
#define TC_IMPL_TC_Bonobo_Print_0 'B'
#define TC_IMPL_TC_Bonobo_Print_1 'o'
#define TC_IMPL_TC_Bonobo_Print_2 'n'
#define TC_IMPL_TC_Bonobo_Print_3 'o'
#define TC_IMPL_TC_Bonobo_Print_4 'b'
#define TC_IMPL_TC_Bonobo_Print_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Print_struct;
#define TC_Bonobo_Print ((CORBA_TypeCode)&TC_Bonobo_Print_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Desktop_Window) && !defined(_Bonobo_Desktop_Window_defined)
#define ORBIT_DECL_Bonobo_Desktop_Window 1
#define _Bonobo_Desktop_Window_defined 1
#define Bonobo_Desktop_Window__free CORBA_Object__free
   typedef CORBA_Object Bonobo_Desktop_Window;
   extern CORBA_unsigned_long Bonobo_Desktop_Window__classid;
#if !defined(TC_IMPL_TC_Bonobo_Desktop_Window_0)
#define TC_IMPL_TC_Bonobo_Desktop_Window_0 'B'
#define TC_IMPL_TC_Bonobo_Desktop_Window_1 'o'
#define TC_IMPL_TC_Bonobo_Desktop_Window_2 'n'
#define TC_IMPL_TC_Bonobo_Desktop_Window_3 'o'
#define TC_IMPL_TC_Bonobo_Desktop_Window_4 'b'
#define TC_IMPL_TC_Bonobo_Desktop_Window_5 'o'
   extern const struct CORBA_TypeCode_struct TC_Bonobo_Desktop_Window_struct;
#define TC_Bonobo_Desktop_Window ((CORBA_TypeCode)&TC_Bonobo_Desktop_Window_struct)
#endif
#endif
#if !defined(_Bonobo_Desktop_Window_Geometry_defined)
#define _Bonobo_Desktop_Window_Geometry_defined 1
   typedef struct
   {
      CORBA_short x;
      CORBA_short y;
      CORBA_short width;
      CORBA_short height;
   }
   Bonobo_Desktop_Window_Geometry;

#if !defined(TC_IMPL_TC_Bonobo_Desktop_Window_Geometry_0)
#define TC_IMPL_TC_Bonobo_Desktop_Window_Geometry_0 'B'
#define TC_IMPL_TC_Bonobo_Desktop_Window_Geometry_1 'o'
#define TC_IMPL_TC_Bonobo_Desktop_Window_Geometry_2 'n'
#define TC_IMPL_TC_Bonobo_Desktop_Window_Geometry_3 'o'
#define TC_IMPL_TC_Bonobo_Desktop_Window_Geometry_4 'b'
#define TC_IMPL_TC_Bonobo_Desktop_Window_Geometry_5 'o'
   extern const struct CORBA_TypeCode_struct
      TC_Bonobo_Desktop_Window_Geometry_struct;
#define TC_Bonobo_Desktop_Window_Geometry ((CORBA_TypeCode)&TC_Bonobo_Desktop_Window_Geometry_struct)
#endif
   extern Bonobo_Desktop_Window_Geometry
      *Bonobo_Desktop_Window_Geometry__alloc(void);
   extern gpointer Bonobo_Desktop_Window_Geometry__free(gpointer mem,
							gpointer dat,
							CORBA_boolean free_strings);	/* ORBit internal use */
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*ref) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unref) (PortableServer_Servant _servant, CORBA_Environment * ev);
      
	 Bonobo_Unknown(*queryInterface) (PortableServer_Servant _servant,
					  const CORBA_char * repoid,
					  CORBA_Environment * ev);
   }
   POA_Bonobo_Unknown__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
   }
   POA_Bonobo_Unknown__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Unknown__vepv *vepv;
   }
   POA_Bonobo_Unknown;
   extern void POA_Bonobo_Unknown__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Bonobo_Unknown__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 Bonobo_Moniker(*_get_parent) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
      void (*_set_parent) (PortableServer_Servant _servant,
			   const Bonobo_Moniker value,
			   CORBA_Environment * ev);
      CORBA_char *(*getDisplayName) (PortableServer_Servant _servant,
				     CORBA_Environment * ev);
       Bonobo_Moniker(*parseDisplayName) (PortableServer_Servant _servant,
					  const Bonobo_Moniker parent,
					  const CORBA_char * name,
					  CORBA_Environment * ev);
       Bonobo_Unknown(*resolve) (PortableServer_Servant _servant,
				 const Bonobo_ResolveOptions * options,
				 const CORBA_char * requestedInterface,
				 CORBA_Environment * ev);
   }
   POA_Bonobo_Moniker__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Moniker__epv *Bonobo_Moniker_epv;
   }
   POA_Bonobo_Moniker__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Moniker__vepv *vepv;
   }
   POA_Bonobo_Moniker;
   extern void POA_Bonobo_Moniker__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Bonobo_Moniker__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 Bonobo_Unknown(*resolve) (PortableServer_Servant _servant,
				   const Bonobo_Moniker m,
				   const Bonobo_ResolveOptions * options,
				   const CORBA_char * displayName,
				   const CORBA_char * requestedInterface,
				   CORBA_Environment * ev);
   }
   POA_Bonobo_MonikerExtender__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_MonikerExtender__epv *Bonobo_MonikerExtender_epv;
   }
   POA_Bonobo_MonikerExtender__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_MonikerExtender__vepv *vepv;
   }
   POA_Bonobo_MonikerExtender;
   extern void POA_Bonobo_MonikerExtender__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_Bonobo_MonikerExtender__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 Bonobo_Unknown(*getObject) (PortableServer_Servant _servant,
				     const CORBA_char * name,
				     const CORBA_char * repoId,
				     CORBA_Environment * ev);
       Bonobo_Moniker(*createFromName) (PortableServer_Servant _servant,
					const CORBA_char * name,
					CORBA_Environment * ev);
       Bonobo_Moniker(*createWithParent) (PortableServer_Servant _servant,
					  const Bonobo_Moniker optParent,
					  const CORBA_char * name,
					  CORBA_Environment * ev);
       Bonobo_MonikerExtender(*getExtender) (PortableServer_Servant _servant,
					     const CORBA_char * monikerPrefix,
					     const CORBA_char * interfaceId,
					     CORBA_Environment * ev);
   }
   POA_Bonobo_ActivationContext__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_ActivationContext__epv *Bonobo_ActivationContext_epv;
   }
   POA_Bonobo_ActivationContext__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_ActivationContext__vepv *vepv;
   }
   POA_Bonobo_ActivationContext;
   extern void POA_Bonobo_ActivationContext__init(PortableServer_Servant
						  servant,
						  CORBA_Environment * ev);
   extern void POA_Bonobo_ActivationContext__fini(PortableServer_Servant
						  servant,
						  CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*addObject) (PortableServer_Servant _servant,
			 const CORBA_Object object, CORBA_Environment * ev);
      void (*removeObject) (PortableServer_Servant _servant,
			    const CORBA_Object object,
			    CORBA_Environment * ev);
      void (*addKey) (PortableServer_Servant _servant, const CORBA_char * key,
		      CORBA_Environment * ev);
      void (*removeKey) (PortableServer_Servant _servant,
			 const CORBA_char * key, CORBA_Environment * ev);
   }
   POA_Bonobo_RunningContext__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_RunningContext__epv *Bonobo_RunningContext_epv;
   }
   POA_Bonobo_RunningContext__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_RunningContext__vepv *vepv;
   }
   POA_Bonobo_RunningContext;
   extern void POA_Bonobo_RunningContext__init(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   extern void POA_Bonobo_RunningContext__fini(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Bonobo_StorageInfo *(*getInfo) (PortableServer_Servant _servant,
				      const Bonobo_StorageInfoFields mask,
				      CORBA_Environment * ev);
      void (*setInfo) (PortableServer_Servant _servant,
		       const Bonobo_StorageInfo * info,
		       const Bonobo_StorageInfoFields mask,
		       CORBA_Environment * ev);
      void (*read) (PortableServer_Servant _servant, const CORBA_long count,
		    Bonobo_Stream_iobuf ** buffer, CORBA_Environment * ev);
      void (*write) (PortableServer_Servant _servant,
		     const Bonobo_Stream_iobuf * buffer,
		     CORBA_Environment * ev);
       CORBA_long(*seek) (PortableServer_Servant _servant,
			  const CORBA_long offset,
			  const Bonobo_Stream_SeekType whence,
			  CORBA_Environment * ev);
      void (*truncate) (PortableServer_Servant _servant,
			const CORBA_long length, CORBA_Environment * ev);
      void (*copyTo) (PortableServer_Servant _servant,
		      const CORBA_char * dest, const CORBA_long bytes,
		      CORBA_long * read, CORBA_long * written,
		      CORBA_Environment * ev);
      void (*commit) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
      void (*revert) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
   }
   POA_Bonobo_Stream__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Stream__epv *Bonobo_Stream_epv;
   }
   POA_Bonobo_Stream__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Stream__vepv *vepv;
   }
   POA_Bonobo_Stream;
   extern void POA_Bonobo_Stream__init(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   extern void POA_Bonobo_Stream__fini(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Bonobo_StorageInfo *(*getInfo) (PortableServer_Servant _servant,
				      const CORBA_char * path,
				      const Bonobo_StorageInfoFields mask,
				      CORBA_Environment * ev);
      void (*setInfo) (PortableServer_Servant _servant,
		       const CORBA_char * path,
		       const Bonobo_StorageInfo * info,
		       const Bonobo_StorageInfoFields mask,
		       CORBA_Environment * ev);
       Bonobo_Stream(*openStream) (PortableServer_Servant _servant,
				   const CORBA_char * path,
				   const Bonobo_Storage_OpenMode mode,
				   CORBA_Environment * ev);
       Bonobo_Storage(*openStorage) (PortableServer_Servant _servant,
				     const CORBA_char * path,
				     const Bonobo_Storage_OpenMode mode,
				     CORBA_Environment * ev);
      void (*copyTo) (PortableServer_Servant _servant,
		      const Bonobo_Storage target, CORBA_Environment * ev);
      Bonobo_Storage_DirectoryList *(*listContents) (PortableServer_Servant
						     _servant,
						     const CORBA_char * path,
						     const
						     Bonobo_StorageInfoFields
						     mask,
						     CORBA_Environment * ev);
      void (*erase) (PortableServer_Servant _servant, const CORBA_char * path,
		     CORBA_Environment * ev);
      void (*rename) (PortableServer_Servant _servant,
		      const CORBA_char * path_name,
		      const CORBA_char * new_path_name,
		      CORBA_Environment * ev);
      void (*commit) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
      void (*revert) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
   }
   POA_Bonobo_Storage__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Storage__epv *Bonobo_Storage_epv;
   }
   POA_Bonobo_Storage__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Storage__vepv *vepv;
   }
   POA_Bonobo_Storage;
   extern void POA_Bonobo_Storage__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Bonobo_Storage__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Bonobo_Persist_ContentTypeList
	 *(*getContentTypes) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
   }
   POA_Bonobo_Persist__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Persist__epv *Bonobo_Persist_epv;
   }
   POA_Bonobo_Persist__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Persist__vepv *vepv;
   }
   POA_Bonobo_Persist;
   extern void POA_Bonobo_Persist__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Bonobo_Persist__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*load) (PortableServer_Servant _servant, const CORBA_char * path,
		    CORBA_Environment * ev);
      void (*save) (PortableServer_Servant _servant, const CORBA_char * path,
		    CORBA_Environment * ev);
       CORBA_boolean(*isDirty) (PortableServer_Servant _servant,
				CORBA_Environment * ev);
      CORBA_char *(*getCurrentFile) (PortableServer_Servant _servant,
				     CORBA_Environment * ev);
   }
   POA_Bonobo_PersistFile__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Persist__epv *Bonobo_Persist_epv;
      POA_Bonobo_PersistFile__epv *Bonobo_PersistFile_epv;
   }
   POA_Bonobo_PersistFile__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_PersistFile__vepv *vepv;
   }
   POA_Bonobo_PersistFile;
   extern void POA_Bonobo_PersistFile__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Bonobo_PersistFile__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_boolean(*isDirty) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
      void (*load) (PortableServer_Servant _servant,
		    const Bonobo_Storage storage, CORBA_Environment * ev);
      void (*save) (PortableServer_Servant _servant,
		    const Bonobo_Storage storage,
		    const CORBA_boolean same_as_loaded,
		    CORBA_Environment * ev);
      void (*initNew) (PortableServer_Servant _servant,
		       const Bonobo_Storage storage, CORBA_Environment * ev);
   }
   POA_Bonobo_PersistStorage__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Persist__epv *Bonobo_Persist_epv;
      POA_Bonobo_PersistStorage__epv *Bonobo_PersistStorage_epv;
   }
   POA_Bonobo_PersistStorage__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_PersistStorage__vepv *vepv;
   }
   POA_Bonobo_PersistStorage;
   extern void POA_Bonobo_PersistStorage__init(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   extern void POA_Bonobo_PersistStorage__fini(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_boolean(*isDirty) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
      void (*load) (PortableServer_Servant _servant,
		    const Bonobo_Stream stream,
		    const Bonobo_Persist_ContentType type,
		    CORBA_Environment * ev);
      void (*save) (PortableServer_Servant _servant,
		    const Bonobo_Stream stream,
		    const Bonobo_Persist_ContentType type,
		    CORBA_Environment * ev);
       CORBA_long(*getMaxSize) (PortableServer_Servant _servant,
				CORBA_Environment * ev);
   }
   POA_Bonobo_PersistStream__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Persist__epv *Bonobo_Persist_epv;
      POA_Bonobo_PersistStream__epv *Bonobo_PersistStream_epv;
   }
   POA_Bonobo_PersistStream__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_PersistStream__vepv *vepv;
   }
   POA_Bonobo_PersistStream;
   extern void POA_Bonobo_PersistStream__init(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   extern void POA_Bonobo_PersistStream__fini(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*start) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*end) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*addData) (PortableServer_Servant _servant,
		       const Bonobo_ProgressiveDataSink_iobuf * buffer,
		       CORBA_Environment * ev);
      void (*setSize) (PortableServer_Servant _servant,
		       const CORBA_long count, CORBA_Environment * ev);
   }
   POA_Bonobo_ProgressiveDataSink__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_ProgressiveDataSink__epv *Bonobo_ProgressiveDataSink_epv;
   }
   POA_Bonobo_ProgressiveDataSink__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_ProgressiveDataSink__vepv *vepv;
   }
   POA_Bonobo_ProgressiveDataSink;
   extern void POA_Bonobo_ProgressiveDataSink__init(PortableServer_Servant
						    servant,
						    CORBA_Environment * ev);
   extern void POA_Bonobo_ProgressiveDataSink__fini(PortableServer_Servant
						    servant,
						    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*notify) (PortableServer_Servant _servant,
		      const CORBA_long notify_type, CORBA_Environment * ev);
      void (*notifyRename) (PortableServer_Servant _servant,
			    const CORBA_char * new_full_name,
			    CORBA_Environment * ev);
   }
   POA_Bonobo_AdviseSink__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_AdviseSink__epv *Bonobo_AdviseSink_epv;
   }
   POA_Bonobo_AdviseSink__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_AdviseSink__vepv *vepv;
   }
   POA_Bonobo_AdviseSink;
   extern void POA_Bonobo_AdviseSink__init(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   extern void POA_Bonobo_AdviseSink__fini(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*event) (PortableServer_Servant _servant,
		     const CORBA_char * event_name, const CORBA_any * args,
		     CORBA_Environment * ev);
   }
   POA_Bonobo_Listener__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Listener__epv *Bonobo_Listener_epv;
   }
   POA_Bonobo_Listener__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Listener__vepv *vepv;
   }
   POA_Bonobo_Listener;
   extern void POA_Bonobo_Listener__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_Bonobo_Listener__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 Bonobo_EventSource_ListenerId(*addListener) (PortableServer_Servant
						      _servant,
						      const Bonobo_Listener l,
						      CORBA_Environment * ev);
      
	 Bonobo_EventSource_ListenerId(*addListenerWithMask)
	 (PortableServer_Servant _servant, const Bonobo_Listener l,
	  const CORBA_char * event_mask, CORBA_Environment * ev);
      void (*removeListener) (PortableServer_Servant _servant,
			      const Bonobo_EventSource_ListenerId id,
			      CORBA_Environment * ev);
   }
   POA_Bonobo_EventSource__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_EventSource__epv *Bonobo_EventSource_epv;
   }
   POA_Bonobo_EventSource__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_EventSource__vepv *vepv;
   }
   POA_Bonobo_EventSource;
   extern void POA_Bonobo_EventSource__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Bonobo_EventSource__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*setContainer) (PortableServer_Servant _servant,
			    const Bonobo_UIContainer container,
			    CORBA_Environment * ev);
      void (*unsetContainer) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
      CORBA_char *(*_get_name) (PortableServer_Servant _servant,
				CORBA_Environment * ev);
      CORBA_char *(*describeVerbs) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
      void (*execVerb) (PortableServer_Servant _servant,
			const CORBA_char * cname, CORBA_Environment * ev);
      void (*uiEvent) (PortableServer_Servant _servant, const CORBA_char * id,
		       const Bonobo_UIComponent_EventType type,
		       const CORBA_char * state, CORBA_Environment * ev);
   }
   POA_Bonobo_UIComponent__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_UIComponent__epv *Bonobo_UIComponent_epv;
   }
   POA_Bonobo_UIComponent__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_UIComponent__vepv *vepv;
   }
   POA_Bonobo_UIComponent;
   extern void POA_Bonobo_UIComponent__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Bonobo_UIComponent__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*registerComponent) (PortableServer_Servant _servant,
				 const CORBA_char * component_name,
				 const Bonobo_UIComponent component,
				 CORBA_Environment * ev);
      void (*deregisterComponent) (PortableServer_Servant _servant,
				   const CORBA_char * component_name,
				   CORBA_Environment * ev);
      void (*freeze) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
      void (*thaw) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*setNode) (PortableServer_Servant _servant,
		       const CORBA_char * path, const CORBA_char * xml,
		       const CORBA_char * component_name,
		       CORBA_Environment * ev);
      CORBA_char *(*getNode) (PortableServer_Servant _servant,
			      const CORBA_char * path,
			      const CORBA_boolean nodeOnly,
			      CORBA_Environment * ev);
      void (*removeNode) (PortableServer_Servant _servant,
			  const CORBA_char * path,
			  const CORBA_char * by_component_name,
			  CORBA_Environment * ev);
       CORBA_boolean(*exists) (PortableServer_Servant _servant,
			       const CORBA_char * path,
			       CORBA_Environment * ev);
      void (*setObject) (PortableServer_Servant _servant,
			 const CORBA_char * path,
			 const Bonobo_Unknown control,
			 CORBA_Environment * ev);
       Bonobo_Unknown(*getObject) (PortableServer_Servant _servant,
				   const CORBA_char * path,
				   CORBA_Environment * ev);
   }
   POA_Bonobo_UIContainer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_UIContainer__epv *Bonobo_UIContainer_epv;
   }
   POA_Bonobo_UIContainer__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_UIContainer__vepv *vepv;
   }
   POA_Bonobo_UIContainer;
   extern void POA_Bonobo_UIContainer__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Bonobo_UIContainer__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*getName) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
       CORBA_TypeCode(*getType) (PortableServer_Servant _servant,
				 CORBA_Environment * ev);
      CORBA_any *(*getValue) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
      void (*setValue) (PortableServer_Servant _servant,
			const CORBA_any * value, CORBA_Environment * ev);
      CORBA_any *(*getDefault) (PortableServer_Servant _servant,
				CORBA_Environment * ev);
      CORBA_char *(*getDocString) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
       CORBA_long(*getFlags) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
   }
   POA_Bonobo_Property__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Property__epv *Bonobo_Property_epv;
   }
   POA_Bonobo_Property__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Property__vepv *vepv;
   }
   POA_Bonobo_Property;
   extern void POA_Bonobo_Property__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_Bonobo_Property__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Bonobo_PropertyList *(*getProperties) (PortableServer_Servant _servant,
					     CORBA_Environment * ev);
       Bonobo_Property(*getPropertyByName) (PortableServer_Servant _servant,
					    const CORBA_char * name,
					    CORBA_Environment * ev);
      Bonobo_PropertyNames *(*getPropertyNames) (PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev);
      void (*setValues) (PortableServer_Servant _servant,
			 const Bonobo_PropertySet * set,
			 CORBA_Environment * ev);
      Bonobo_PropertySet *(*getValues) (PortableServer_Servant _servant,
					CORBA_Environment * ev);
   }
   POA_Bonobo_PropertyBag__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_PropertyBag__epv *Bonobo_PropertyBag_epv;
   }
   POA_Bonobo_PropertyBag__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_PropertyBag__vepv *vepv;
   }
   POA_Bonobo_PropertyBag;
   extern void POA_Bonobo_PropertyBag__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Bonobo_PropertyBag__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*activated) (PortableServer_Servant _servant,
			 const CORBA_boolean state, CORBA_Environment * ev);
       Bonobo_PropertyBag(*getAmbientProperties) (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev);
      void (*queueResize) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
      void (*activateURI) (PortableServer_Servant _servant,
			   const CORBA_char * uri,
			   const CORBA_boolean relative,
			   CORBA_Environment * ev);
       Bonobo_Unknown(*getUIHandler) (PortableServer_Servant _servant,
				      CORBA_Environment * ev);
   }
   POA_Bonobo_ControlFrame__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_ControlFrame__epv *Bonobo_ControlFrame_epv;
   }
   POA_Bonobo_ControlFrame__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_ControlFrame__vepv *vepv;
   }
   POA_Bonobo_ControlFrame;
   extern void POA_Bonobo_ControlFrame__init(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   extern void POA_Bonobo_ControlFrame__fini(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*activate) (PortableServer_Servant _servant,
			const CORBA_boolean activate, CORBA_Environment * ev);
      void (*setFrame) (PortableServer_Servant _servant,
			const Bonobo_ControlFrame frame,
			CORBA_Environment * ev);
      void (*setWindowId) (PortableServer_Servant _servant,
			   const Bonobo_Control_windowId id,
			   CORBA_Environment * ev);
       Bonobo_PropertyBag(*getProperties) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
      void (*setSize) (PortableServer_Servant _servant,
		       const CORBA_short width, const CORBA_short height,
		       CORBA_Environment * ev);
      void (*getDesiredSize) (PortableServer_Servant _servant,
			      CORBA_short * desired_width,
			      CORBA_short * desired_height,
			      CORBA_Environment * ev);
      void (*setState) (PortableServer_Servant _servant,
			const Bonobo_Control_State state,
			CORBA_Environment * ev);
      void (*realize) (PortableServer_Servant _servant,
		       CORBA_Environment * ev);
      void (*unrealize) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
   }
   POA_Bonobo_Control__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Control__epv *Bonobo_Control_epv;
   }
   POA_Bonobo_Control__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Control__vepv *vepv;
   }
   POA_Bonobo_Control;
   extern void POA_Bonobo_Control__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Bonobo_Control__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_long(*_get_pageCount) (PortableServer_Servant _servant,
				      CORBA_Environment * ev);
       Bonobo_Control(*getControl) (PortableServer_Servant _servant,
				    const CORBA_long pagenumber,
				    CORBA_Environment * ev);
      void (*notifyAction) (PortableServer_Servant _servant,
			    const CORBA_long pagenumber,
			    const Bonobo_PropertyControl_Action action,
			    CORBA_Environment * ev);
   }
   POA_Bonobo_PropertyControl__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_PropertyControl__epv *Bonobo_PropertyControl_epv;
   }
   POA_Bonobo_PropertyControl__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_PropertyControl__vepv *vepv;
   }
   POA_Bonobo_PropertyControl;
   extern void POA_Bonobo_PropertyControl__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_Bonobo_PropertyControl__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*onLevelChanged) (PortableServer_Servant _servant,
			      const CORBA_float zoom_level,
			      CORBA_Environment * ev);
      void (*onParametersChanged) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
   }
   POA_Bonobo_ZoomableFrame__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_ZoomableFrame__epv *Bonobo_ZoomableFrame_epv;
   }
   POA_Bonobo_ZoomableFrame__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_ZoomableFrame__vepv *vepv;
   }
   POA_Bonobo_ZoomableFrame;
   extern void POA_Bonobo_ZoomableFrame__init(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   extern void POA_Bonobo_ZoomableFrame__fini(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_float(*_get_level) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
       CORBA_float(*_get_minLevel) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
       CORBA_float(*_get_maxLevel) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
       CORBA_boolean(*_get_hasMinLevel) (PortableServer_Servant _servant,
					 CORBA_Environment * ev);
       CORBA_boolean(*_get_hasMaxLevel) (PortableServer_Servant _servant,
					 CORBA_Environment * ev);
       CORBA_boolean(*_get_isContinuous) (PortableServer_Servant _servant,
					  CORBA_Environment * ev);
      Bonobo_ZoomLevelList *(*_get_preferredLevels) (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev);
      Bonobo_ZoomLevelNameList
	 *(*_get_preferredLevelNames) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
      void (*zoomIn) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
      void (*zoomOut) (PortableServer_Servant _servant,
		       CORBA_Environment * ev);
      void (*zoomFit) (PortableServer_Servant _servant,
		       CORBA_Environment * ev);
      void (*zoomDefault) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
      void (*setLevel) (PortableServer_Servant _servant,
			const CORBA_float zoom_level, CORBA_Environment * ev);
      void (*setFrame) (PortableServer_Servant _servant,
			const Bonobo_ZoomableFrame zoomable_frame,
			CORBA_Environment * ev);
   }
   POA_Bonobo_Zoomable__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Zoomable__epv *Bonobo_Zoomable_epv;
   }
   POA_Bonobo_Zoomable__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Zoomable__vepv *vepv;
   }
   POA_Bonobo_Zoomable;
   extern void POA_Bonobo_Zoomable__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_Bonobo_Zoomable__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Bonobo_ItemContainer_ObjectList *(*enumObjects) (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev);
       Bonobo_Unknown(*getObjectByName) (PortableServer_Servant _servant,
					 const CORBA_char * item_name,
					 const CORBA_boolean only_if_exists,
					 CORBA_Environment * ev);
   }
   POA_Bonobo_ItemContainer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_ItemContainer__epv *Bonobo_ItemContainer_epv;
   }
   POA_Bonobo_ItemContainer__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_ItemContainer__vepv *vepv;
   }
   POA_Bonobo_ItemContainer;
   extern void POA_Bonobo_ItemContainer__init(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   extern void POA_Bonobo_ItemContainer__fini(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 Bonobo_ItemContainer(*getContainer) (PortableServer_Servant _servant,
					      CORBA_Environment * ev);
      void (*showWindow) (PortableServer_Servant _servant,
			  const CORBA_boolean shown, CORBA_Environment * ev);
       Bonobo_Persist_Status(*saveObject) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
   }
   POA_Bonobo_ClientSite__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_ClientSite__epv *Bonobo_ClientSite_epv;
   }
   POA_Bonobo_ClientSite__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_ClientSite__vepv *vepv;
   }
   POA_Bonobo_ClientSite;
   extern void POA_Bonobo_ClientSite__init(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   extern void POA_Bonobo_ClientSite__fini(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Bonobo_Canvas_ArtUTA *(*update) (PortableServer_Servant _servant,
				       const Bonobo_Canvas_State * state,
				       const Bonobo_Canvas_affine aff,
				       const Bonobo_Canvas_SVP * clip_path,
				       const CORBA_long flags,
				       CORBA_double * x1, CORBA_double * y1,
				       CORBA_double * x2, CORBA_double * y2,
				       CORBA_Environment * ev);
      void (*realize) (PortableServer_Servant _servant,
		       const Bonobo_Canvas_window_id drawable,
		       CORBA_Environment * ev);
      void (*unrealize) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
      void (*map) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unmap) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*draw) (PortableServer_Servant _servant,
		    const Bonobo_Canvas_State * state,
		    const Bonobo_Canvas_window_id drawable,
		    const CORBA_short x, const CORBA_short y,
		    const CORBA_short width, const CORBA_short height,
		    CORBA_Environment * ev);
      void (*render) (PortableServer_Servant _servant,
		      Bonobo_Canvas_Buf * buf, CORBA_Environment * ev);
       CORBA_boolean(*contains) (PortableServer_Servant _servant,
				 const CORBA_double x, const CORBA_double y,
				 CORBA_Environment * ev);
      void (*bounds) (PortableServer_Servant _servant,
		      const Bonobo_Canvas_State * state, CORBA_double * x1,
		      CORBA_double * x2, CORBA_double * y1, CORBA_double * y2,
		      CORBA_Environment * ev);
       CORBA_boolean(*event) (PortableServer_Servant _servant,
			      const Bonobo_Canvas_State * state,
			      const Bonobo_Gdk_Event * event,
			      CORBA_Environment * ev);
      void (*setCanvasSize) (PortableServer_Servant _servant,
			     const CORBA_short x, const CORBA_short y,
			     const CORBA_short width,
			     const CORBA_short height,
			     CORBA_Environment * ev);
      void (*setBounds) (PortableServer_Servant _servant,
			 const Bonobo_Canvas_DRect * bbox,
			 CORBA_Environment * ev);
       Bonobo_UIComponent(*getUIComponent) (PortableServer_Servant _servant,
					    CORBA_Environment * ev);
   }
   POA_Bonobo_Canvas_Component__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Canvas_Component__epv *Bonobo_Canvas_Component_epv;
   }
   POA_Bonobo_Canvas_Component__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Canvas_Component__vepv *vepv;
   }
   POA_Bonobo_Canvas_Component;
   extern void POA_Bonobo_Canvas_Component__init(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   extern void POA_Bonobo_Canvas_Component__fini(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*updateArea) (PortableServer_Servant _servant,
			  const Bonobo_Canvas_ArtUTA * uta,
			  CORBA_Environment * ev);
   }
   POA_Bonobo_Canvas_ComponentProxy__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Canvas_ComponentProxy__epv *Bonobo_Canvas_ComponentProxy_epv;
   }
   POA_Bonobo_Canvas_ComponentProxy__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Canvas_ComponentProxy__vepv *vepv;
   }
   POA_Bonobo_Canvas_ComponentProxy;
   extern void POA_Bonobo_Canvas_ComponentProxy__init(PortableServer_Servant
						      servant,
						      CORBA_Environment * ev);
   extern void POA_Bonobo_Canvas_ComponentProxy__fini(PortableServer_Servant
						      servant,
						      CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*setZoomFactor) (PortableServer_Servant _servant,
			     const CORBA_double zoom, CORBA_Environment * ev);
   }
   POA_Bonobo_View__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Control__epv *Bonobo_Control_epv;
      POA_Bonobo_View__epv *Bonobo_View_epv;
   }
   POA_Bonobo_View__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_View__vepv *vepv;
   }
   POA_Bonobo_View;
   extern void POA_Bonobo_View__init(PortableServer_Servant servant,
				     CORBA_Environment * ev);
   extern void POA_Bonobo_View__fini(PortableServer_Servant servant,
				     CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 Bonobo_ClientSite(*getClientSite) (PortableServer_Servant _servant,
					    CORBA_Environment * ev);
   }
   POA_Bonobo_ViewFrame__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_ControlFrame__epv *Bonobo_ControlFrame_epv;
      POA_Bonobo_ViewFrame__epv *Bonobo_ViewFrame_epv;
   }
   POA_Bonobo_ViewFrame__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_ViewFrame__vepv *vepv;
   }
   POA_Bonobo_ViewFrame;
   extern void POA_Bonobo_ViewFrame__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_Bonobo_ViewFrame__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*setClientSite) (PortableServer_Servant _servant,
			     const Bonobo_ClientSite clientSite,
			     CORBA_Environment * ev);
       Bonobo_ClientSite(*getClientSite) (PortableServer_Servant _servant,
					  CORBA_Environment * ev);
      void (*setHostName) (PortableServer_Servant _servant,
			   const CORBA_char * name,
			   const CORBA_char * appname,
			   CORBA_Environment * ev);
      void (*setURI) (PortableServer_Servant _servant, const CORBA_char * uri,
		      CORBA_Environment * ev);
      void (*close) (PortableServer_Servant _servant,
		     const Bonobo_Embeddable_CloseMode mode,
		     CORBA_Environment * ev);
      void (*advise) (PortableServer_Servant _servant,
		      const Bonobo_AdviseSink advise, CORBA_Environment * ev);
      void (*unadvise) (PortableServer_Servant _servant,
			CORBA_Environment * ev);
       CORBA_long(*getMiscStatus) (PortableServer_Servant _servant,
				   const CORBA_long type,
				   CORBA_Environment * ev);
       Bonobo_View(*createView) (PortableServer_Servant _servant,
				 const Bonobo_ViewFrame frame,
				 CORBA_Environment * ev);
       Bonobo_Canvas_Component(*createCanvasItem) (PortableServer_Servant
						   _servant,
						   const CORBA_boolean aa,
						   const
						   Bonobo_Canvas_ComponentProxy
						   proxy,
						   CORBA_Environment * ev);
   }
   POA_Bonobo_Embeddable__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Embeddable__epv *Bonobo_Embeddable_epv;
   }
   POA_Bonobo_Embeddable__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Embeddable__vepv *vepv;
   }
   POA_Bonobo_Embeddable;
   extern void POA_Bonobo_Embeddable__init(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   extern void POA_Bonobo_Embeddable__fini(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Bonobo_PrintData *(*render) (PortableServer_Servant _servant,
				   const Bonobo_PrintDimensions * pd,
				   const Bonobo_PrintScissor * scissor,
				   CORBA_Environment * ev);
   }
   POA_Bonobo_Print__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Print__epv *Bonobo_Print_epv;
   }
   POA_Bonobo_Print__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Print__vepv *vepv;
   }
   POA_Bonobo_Print;
   extern void POA_Bonobo_Print__init(PortableServer_Servant servant,
				      CORBA_Environment * ev);
   extern void POA_Bonobo_Print__fini(PortableServer_Servant servant,
				      CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*_get_title) (PortableServer_Servant _servant,
				 CORBA_Environment * ev);
      void (*_set_title) (PortableServer_Servant _servant,
			  const CORBA_char * value, CORBA_Environment * ev);
       Bonobo_Desktop_Window_Geometry(*getGeometry) (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev);
      void (*setGeometry) (PortableServer_Servant _servant,
			   const Bonobo_Desktop_Window_Geometry * geo,
			   CORBA_Environment * ev);
       CORBA_unsigned_long(*getWindowId) (PortableServer_Servant _servant,
					  CORBA_Environment * ev);
   }
   POA_Bonobo_Desktop_Window__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Desktop_Window__epv *Bonobo_Desktop_Window_epv;
   }
   POA_Bonobo_Desktop_Window__vepv;
   typedef struct
   {
      void *_private;
      POA_Bonobo_Desktop_Window__vepv *vepv;
   }
   POA_Bonobo_Desktop_Window;
   extern void POA_Bonobo_Desktop_Window__init(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   extern void POA_Bonobo_Desktop_Window__fini(PortableServer_Servant servant,
					       CORBA_Environment * ev);

/** prototypes **/
   void Bonobo_Unknown_ref(Bonobo_Unknown _obj, CORBA_Environment * ev);
   void Bonobo_Unknown_unref(Bonobo_Unknown _obj, CORBA_Environment * ev);
   Bonobo_Unknown Bonobo_Unknown_queryInterface(Bonobo_Unknown _obj,
						const CORBA_char * repoid,
						CORBA_Environment * ev);
#define Bonobo_Moniker_ref Bonobo_Unknown_ref
#define Bonobo_Moniker_unref Bonobo_Unknown_unref
#define Bonobo_Moniker_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_Moniker Bonobo_Moniker__get_parent(Bonobo_Moniker _obj,
					     CORBA_Environment * ev);
   void Bonobo_Moniker__set_parent(Bonobo_Moniker _obj,
				   const Bonobo_Moniker value,
				   CORBA_Environment * ev);
   CORBA_char *Bonobo_Moniker_getDisplayName(Bonobo_Moniker _obj,
					     CORBA_Environment * ev);
   Bonobo_Moniker Bonobo_Moniker_parseDisplayName(Bonobo_Moniker _obj,
						  const Bonobo_Moniker parent,
						  const CORBA_char * name,
						  CORBA_Environment * ev);
   Bonobo_Unknown Bonobo_Moniker_resolve(Bonobo_Moniker _obj,
					 const Bonobo_ResolveOptions *
					 options,
					 const CORBA_char *
					 requestedInterface,
					 CORBA_Environment * ev);
#define Bonobo_MonikerExtender_ref Bonobo_Unknown_ref
#define Bonobo_MonikerExtender_unref Bonobo_Unknown_unref
#define Bonobo_MonikerExtender_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_Unknown Bonobo_MonikerExtender_resolve(Bonobo_MonikerExtender _obj,
						 const Bonobo_Moniker m,
						 const Bonobo_ResolveOptions *
						 options,
						 const CORBA_char *
						 displayName,
						 const CORBA_char *
						 requestedInterface,
						 CORBA_Environment * ev);
#define Bonobo_ActivationContext_ref Bonobo_Unknown_ref
#define Bonobo_ActivationContext_unref Bonobo_Unknown_unref
#define Bonobo_ActivationContext_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_Unknown Bonobo_ActivationContext_getObject(Bonobo_ActivationContext
						     _obj,
						     const CORBA_char * name,
						     const CORBA_char *
						     repoId,
						     CORBA_Environment * ev);
   Bonobo_Moniker
      Bonobo_ActivationContext_createFromName(Bonobo_ActivationContext _obj,
					      const CORBA_char * name,
					      CORBA_Environment * ev);
   Bonobo_Moniker
      Bonobo_ActivationContext_createWithParent(Bonobo_ActivationContext _obj,
						const Bonobo_Moniker
						optParent,
						const CORBA_char * name,
						CORBA_Environment * ev);
   Bonobo_MonikerExtender
      Bonobo_ActivationContext_getExtender(Bonobo_ActivationContext _obj,
					   const CORBA_char * monikerPrefix,
					   const CORBA_char * interfaceId,
					   CORBA_Environment * ev);
#define Bonobo_RunningContext_ref Bonobo_Unknown_ref
#define Bonobo_RunningContext_unref Bonobo_Unknown_unref
#define Bonobo_RunningContext_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_RunningContext_addObject(Bonobo_RunningContext _obj,
					const CORBA_Object object,
					CORBA_Environment * ev);
   void Bonobo_RunningContext_removeObject(Bonobo_RunningContext _obj,
					   const CORBA_Object object,
					   CORBA_Environment * ev);
   void Bonobo_RunningContext_addKey(Bonobo_RunningContext _obj,
				     const CORBA_char * key,
				     CORBA_Environment * ev);
   void Bonobo_RunningContext_removeKey(Bonobo_RunningContext _obj,
					const CORBA_char * key,
					CORBA_Environment * ev);
#define Bonobo_Stream_ref Bonobo_Unknown_ref
#define Bonobo_Stream_unref Bonobo_Unknown_unref
#define Bonobo_Stream_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_StorageInfo *Bonobo_Stream_getInfo(Bonobo_Stream _obj,
					     const Bonobo_StorageInfoFields
					     mask, CORBA_Environment * ev);
   void Bonobo_Stream_setInfo(Bonobo_Stream _obj,
			      const Bonobo_StorageInfo * info,
			      const Bonobo_StorageInfoFields mask,
			      CORBA_Environment * ev);
   void Bonobo_Stream_read(Bonobo_Stream _obj, const CORBA_long count,
			   Bonobo_Stream_iobuf ** buffer,
			   CORBA_Environment * ev);
   void Bonobo_Stream_write(Bonobo_Stream _obj,
			    const Bonobo_Stream_iobuf * buffer,
			    CORBA_Environment * ev);
   CORBA_long Bonobo_Stream_seek(Bonobo_Stream _obj, const CORBA_long offset,
				 const Bonobo_Stream_SeekType whence,
				 CORBA_Environment * ev);
   void Bonobo_Stream_truncate(Bonobo_Stream _obj, const CORBA_long length,
			       CORBA_Environment * ev);
   void Bonobo_Stream_copyTo(Bonobo_Stream _obj, const CORBA_char * dest,
			     const CORBA_long bytes, CORBA_long * read,
			     CORBA_long * written, CORBA_Environment * ev);
   void Bonobo_Stream_commit(Bonobo_Stream _obj, CORBA_Environment * ev);
   void Bonobo_Stream_revert(Bonobo_Stream _obj, CORBA_Environment * ev);
#define Bonobo_Storage_ref Bonobo_Unknown_ref
#define Bonobo_Storage_unref Bonobo_Unknown_unref
#define Bonobo_Storage_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_StorageInfo *Bonobo_Storage_getInfo(Bonobo_Storage _obj,
					      const CORBA_char * path,
					      const Bonobo_StorageInfoFields
					      mask, CORBA_Environment * ev);
   void Bonobo_Storage_setInfo(Bonobo_Storage _obj, const CORBA_char * path,
			       const Bonobo_StorageInfo * info,
			       const Bonobo_StorageInfoFields mask,
			       CORBA_Environment * ev);
   Bonobo_Stream Bonobo_Storage_openStream(Bonobo_Storage _obj,
					   const CORBA_char * path,
					   const Bonobo_Storage_OpenMode mode,
					   CORBA_Environment * ev);
   Bonobo_Storage Bonobo_Storage_openStorage(Bonobo_Storage _obj,
					     const CORBA_char * path,
					     const Bonobo_Storage_OpenMode
					     mode, CORBA_Environment * ev);
   void Bonobo_Storage_copyTo(Bonobo_Storage _obj,
			      const Bonobo_Storage target,
			      CORBA_Environment * ev);
   Bonobo_Storage_DirectoryList *Bonobo_Storage_listContents(Bonobo_Storage
							     _obj,
							     const CORBA_char
							     * path,
							     const
							     Bonobo_StorageInfoFields
							     mask,
							     CORBA_Environment
							     * ev);
   void Bonobo_Storage_erase(Bonobo_Storage _obj, const CORBA_char * path,
			     CORBA_Environment * ev);
   void Bonobo_Storage_rename(Bonobo_Storage _obj,
			      const CORBA_char * path_name,
			      const CORBA_char * new_path_name,
			      CORBA_Environment * ev);
   void Bonobo_Storage_commit(Bonobo_Storage _obj, CORBA_Environment * ev);
   void Bonobo_Storage_revert(Bonobo_Storage _obj, CORBA_Environment * ev);
#define Bonobo_Persist_ref Bonobo_Unknown_ref
#define Bonobo_Persist_unref Bonobo_Unknown_unref
#define Bonobo_Persist_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_Persist_ContentTypeList
      *Bonobo_Persist_getContentTypes(Bonobo_Persist _obj,
				      CORBA_Environment * ev);
#define Bonobo_PersistFile_ref Bonobo_Unknown_ref
#define Bonobo_PersistFile_unref Bonobo_Unknown_unref
#define Bonobo_PersistFile_queryInterface Bonobo_Unknown_queryInterface
#define Bonobo_PersistFile_getContentTypes Bonobo_Persist_getContentTypes
   void Bonobo_PersistFile_load(Bonobo_PersistFile _obj,
				const CORBA_char * path,
				CORBA_Environment * ev);
   void Bonobo_PersistFile_save(Bonobo_PersistFile _obj,
				const CORBA_char * path,
				CORBA_Environment * ev);
   CORBA_boolean Bonobo_PersistFile_isDirty(Bonobo_PersistFile _obj,
					    CORBA_Environment * ev);
   CORBA_char *Bonobo_PersistFile_getCurrentFile(Bonobo_PersistFile _obj,
						 CORBA_Environment * ev);
#define Bonobo_PersistStorage_ref Bonobo_Unknown_ref
#define Bonobo_PersistStorage_unref Bonobo_Unknown_unref
#define Bonobo_PersistStorage_queryInterface Bonobo_Unknown_queryInterface
#define Bonobo_PersistStorage_getContentTypes Bonobo_Persist_getContentTypes
   CORBA_boolean Bonobo_PersistStorage_isDirty(Bonobo_PersistStorage _obj,
					       CORBA_Environment * ev);
   void Bonobo_PersistStorage_load(Bonobo_PersistStorage _obj,
				   const Bonobo_Storage storage,
				   CORBA_Environment * ev);
   void Bonobo_PersistStorage_save(Bonobo_PersistStorage _obj,
				   const Bonobo_Storage storage,
				   const CORBA_boolean same_as_loaded,
				   CORBA_Environment * ev);
   void Bonobo_PersistStorage_initNew(Bonobo_PersistStorage _obj,
				      const Bonobo_Storage storage,
				      CORBA_Environment * ev);
#define Bonobo_PersistStream_ref Bonobo_Unknown_ref
#define Bonobo_PersistStream_unref Bonobo_Unknown_unref
#define Bonobo_PersistStream_queryInterface Bonobo_Unknown_queryInterface
#define Bonobo_PersistStream_getContentTypes Bonobo_Persist_getContentTypes
   CORBA_boolean Bonobo_PersistStream_isDirty(Bonobo_PersistStream _obj,
					      CORBA_Environment * ev);
   void Bonobo_PersistStream_load(Bonobo_PersistStream _obj,
				  const Bonobo_Stream stream,
				  const Bonobo_Persist_ContentType type,
				  CORBA_Environment * ev);
   void Bonobo_PersistStream_save(Bonobo_PersistStream _obj,
				  const Bonobo_Stream stream,
				  const Bonobo_Persist_ContentType type,
				  CORBA_Environment * ev);
   CORBA_long Bonobo_PersistStream_getMaxSize(Bonobo_PersistStream _obj,
					      CORBA_Environment * ev);
#define Bonobo_ProgressiveDataSink_ref Bonobo_Unknown_ref
#define Bonobo_ProgressiveDataSink_unref Bonobo_Unknown_unref
#define Bonobo_ProgressiveDataSink_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_ProgressiveDataSink_start(Bonobo_ProgressiveDataSink _obj,
					 CORBA_Environment * ev);
   void Bonobo_ProgressiveDataSink_end(Bonobo_ProgressiveDataSink _obj,
				       CORBA_Environment * ev);
   void Bonobo_ProgressiveDataSink_addData(Bonobo_ProgressiveDataSink _obj,
					   const
					   Bonobo_ProgressiveDataSink_iobuf *
					   buffer, CORBA_Environment * ev);
   void Bonobo_ProgressiveDataSink_setSize(Bonobo_ProgressiveDataSink _obj,
					   const CORBA_long count,
					   CORBA_Environment * ev);
#define Bonobo_AdviseSink_ref Bonobo_Unknown_ref
#define Bonobo_AdviseSink_unref Bonobo_Unknown_unref
#define Bonobo_AdviseSink_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_AdviseSink_notify(Bonobo_AdviseSink _obj,
				 const CORBA_long notify_type,
				 CORBA_Environment * ev);
   void Bonobo_AdviseSink_notifyRename(Bonobo_AdviseSink _obj,
				       const CORBA_char * new_full_name,
				       CORBA_Environment * ev);
#define Bonobo_Listener_ref Bonobo_Unknown_ref
#define Bonobo_Listener_unref Bonobo_Unknown_unref
#define Bonobo_Listener_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_Listener_event(Bonobo_Listener _obj,
			      const CORBA_char * event_name,
			      const CORBA_any * args, CORBA_Environment * ev);
#define Bonobo_EventSource_ref Bonobo_Unknown_ref
#define Bonobo_EventSource_unref Bonobo_Unknown_unref
#define Bonobo_EventSource_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_EventSource_ListenerId
      Bonobo_EventSource_addListener(Bonobo_EventSource _obj,
				     const Bonobo_Listener l,
				     CORBA_Environment * ev);
   Bonobo_EventSource_ListenerId
      Bonobo_EventSource_addListenerWithMask(Bonobo_EventSource _obj,
					     const Bonobo_Listener l,
					     const CORBA_char * event_mask,
					     CORBA_Environment * ev);
   void Bonobo_EventSource_removeListener(Bonobo_EventSource _obj,
					  const Bonobo_EventSource_ListenerId
					  id, CORBA_Environment * ev);
#define Bonobo_UIComponent_ref Bonobo_Unknown_ref
#define Bonobo_UIComponent_unref Bonobo_Unknown_unref
#define Bonobo_UIComponent_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_UIComponent_setContainer(Bonobo_UIComponent _obj,
					const Bonobo_UIContainer container,
					CORBA_Environment * ev);
   void Bonobo_UIComponent_unsetContainer(Bonobo_UIComponent _obj,
					  CORBA_Environment * ev);
   CORBA_char *Bonobo_UIComponent__get_name(Bonobo_UIComponent _obj,
					    CORBA_Environment * ev);
   CORBA_char *Bonobo_UIComponent_describeVerbs(Bonobo_UIComponent _obj,
						CORBA_Environment * ev);
   void Bonobo_UIComponent_execVerb(Bonobo_UIComponent _obj,
				    const CORBA_char * cname,
				    CORBA_Environment * ev);
   void Bonobo_UIComponent_uiEvent(Bonobo_UIComponent _obj,
				   const CORBA_char * id,
				   const Bonobo_UIComponent_EventType type,
				   const CORBA_char * state,
				   CORBA_Environment * ev);
#define Bonobo_UIContainer_ref Bonobo_Unknown_ref
#define Bonobo_UIContainer_unref Bonobo_Unknown_unref
#define Bonobo_UIContainer_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_UIContainer_registerComponent(Bonobo_UIContainer _obj,
					     const CORBA_char *
					     component_name,
					     const Bonobo_UIComponent
					     component,
					     CORBA_Environment * ev);
   void Bonobo_UIContainer_deregisterComponent(Bonobo_UIContainer _obj,
					       const CORBA_char *
					       component_name,
					       CORBA_Environment * ev);
   void Bonobo_UIContainer_freeze(Bonobo_UIContainer _obj,
				  CORBA_Environment * ev);
   void Bonobo_UIContainer_thaw(Bonobo_UIContainer _obj,
				CORBA_Environment * ev);
   void Bonobo_UIContainer_setNode(Bonobo_UIContainer _obj,
				   const CORBA_char * path,
				   const CORBA_char * xml,
				   const CORBA_char * component_name,
				   CORBA_Environment * ev);
   CORBA_char *Bonobo_UIContainer_getNode(Bonobo_UIContainer _obj,
					  const CORBA_char * path,
					  const CORBA_boolean nodeOnly,
					  CORBA_Environment * ev);
   void Bonobo_UIContainer_removeNode(Bonobo_UIContainer _obj,
				      const CORBA_char * path,
				      const CORBA_char * by_component_name,
				      CORBA_Environment * ev);
   CORBA_boolean Bonobo_UIContainer_exists(Bonobo_UIContainer _obj,
					   const CORBA_char * path,
					   CORBA_Environment * ev);
   void Bonobo_UIContainer_setObject(Bonobo_UIContainer _obj,
				     const CORBA_char * path,
				     const Bonobo_Unknown control,
				     CORBA_Environment * ev);
   Bonobo_Unknown Bonobo_UIContainer_getObject(Bonobo_UIContainer _obj,
					       const CORBA_char * path,
					       CORBA_Environment * ev);
   CORBA_char *Bonobo_Property_getName(Bonobo_Property _obj,
				       CORBA_Environment * ev);
   CORBA_TypeCode Bonobo_Property_getType(Bonobo_Property _obj,
					  CORBA_Environment * ev);
   CORBA_any *Bonobo_Property_getValue(Bonobo_Property _obj,
				       CORBA_Environment * ev);
   void Bonobo_Property_setValue(Bonobo_Property _obj,
				 const CORBA_any * value,
				 CORBA_Environment * ev);
   CORBA_any *Bonobo_Property_getDefault(Bonobo_Property _obj,
					 CORBA_Environment * ev);
   CORBA_char *Bonobo_Property_getDocString(Bonobo_Property _obj,
					    CORBA_Environment * ev);
   CORBA_long Bonobo_Property_getFlags(Bonobo_Property _obj,
				       CORBA_Environment * ev);
#define Bonobo_PropertyBag_ref Bonobo_Unknown_ref
#define Bonobo_PropertyBag_unref Bonobo_Unknown_unref
#define Bonobo_PropertyBag_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_PropertyList *Bonobo_PropertyBag_getProperties(Bonobo_PropertyBag
							 _obj,
							 CORBA_Environment *
							 ev);
   Bonobo_Property Bonobo_PropertyBag_getPropertyByName(Bonobo_PropertyBag
							_obj,
							const CORBA_char *
							name,
							CORBA_Environment *
							ev);
   Bonobo_PropertyNames
      *Bonobo_PropertyBag_getPropertyNames(Bonobo_PropertyBag _obj,
					   CORBA_Environment * ev);
   void Bonobo_PropertyBag_setValues(Bonobo_PropertyBag _obj,
				     const Bonobo_PropertySet * set,
				     CORBA_Environment * ev);
   Bonobo_PropertySet *Bonobo_PropertyBag_getValues(Bonobo_PropertyBag _obj,
						    CORBA_Environment * ev);
#define Bonobo_ControlFrame_ref Bonobo_Unknown_ref
#define Bonobo_ControlFrame_unref Bonobo_Unknown_unref
#define Bonobo_ControlFrame_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_ControlFrame_activated(Bonobo_ControlFrame _obj,
				      const CORBA_boolean state,
				      CORBA_Environment * ev);
   Bonobo_PropertyBag
      Bonobo_ControlFrame_getAmbientProperties(Bonobo_ControlFrame _obj,
					       CORBA_Environment * ev);
   void Bonobo_ControlFrame_queueResize(Bonobo_ControlFrame _obj,
					CORBA_Environment * ev);
   void Bonobo_ControlFrame_activateURI(Bonobo_ControlFrame _obj,
					const CORBA_char * uri,
					const CORBA_boolean relative,
					CORBA_Environment * ev);
   Bonobo_Unknown Bonobo_ControlFrame_getUIHandler(Bonobo_ControlFrame _obj,
						   CORBA_Environment * ev);
#define Bonobo_Control_ref Bonobo_Unknown_ref
#define Bonobo_Control_unref Bonobo_Unknown_unref
#define Bonobo_Control_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_Control_activate(Bonobo_Control _obj,
				const CORBA_boolean activate,
				CORBA_Environment * ev);
   void Bonobo_Control_setFrame(Bonobo_Control _obj,
				const Bonobo_ControlFrame frame,
				CORBA_Environment * ev);
   void Bonobo_Control_setWindowId(Bonobo_Control _obj,
				   const Bonobo_Control_windowId id,
				   CORBA_Environment * ev);
   Bonobo_PropertyBag Bonobo_Control_getProperties(Bonobo_Control _obj,
						   CORBA_Environment * ev);
   void Bonobo_Control_setSize(Bonobo_Control _obj, const CORBA_short width,
			       const CORBA_short height,
			       CORBA_Environment * ev);
   void Bonobo_Control_getDesiredSize(Bonobo_Control _obj,
				      CORBA_short * desired_width,
				      CORBA_short * desired_height,
				      CORBA_Environment * ev);
   void Bonobo_Control_setState(Bonobo_Control _obj,
				const Bonobo_Control_State state,
				CORBA_Environment * ev);
   void Bonobo_Control_realize(Bonobo_Control _obj, CORBA_Environment * ev);
   void Bonobo_Control_unrealize(Bonobo_Control _obj, CORBA_Environment * ev);
#define Bonobo_PropertyControl_ref Bonobo_Unknown_ref
#define Bonobo_PropertyControl_unref Bonobo_Unknown_unref
#define Bonobo_PropertyControl_queryInterface Bonobo_Unknown_queryInterface
   CORBA_long Bonobo_PropertyControl__get_pageCount(Bonobo_PropertyControl
						    _obj,
						    CORBA_Environment * ev);
   Bonobo_Control Bonobo_PropertyControl_getControl(Bonobo_PropertyControl
						    _obj,
						    const CORBA_long
						    pagenumber,
						    CORBA_Environment * ev);
   void Bonobo_PropertyControl_notifyAction(Bonobo_PropertyControl _obj,
					    const CORBA_long pagenumber,
					    const
					    Bonobo_PropertyControl_Action
					    action, CORBA_Environment * ev);
#define Bonobo_ZoomableFrame_ref Bonobo_Unknown_ref
#define Bonobo_ZoomableFrame_unref Bonobo_Unknown_unref
#define Bonobo_ZoomableFrame_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_ZoomableFrame_onLevelChanged(Bonobo_ZoomableFrame _obj,
					    const CORBA_float zoom_level,
					    CORBA_Environment * ev);
   void Bonobo_ZoomableFrame_onParametersChanged(Bonobo_ZoomableFrame _obj,
						 CORBA_Environment * ev);
#define Bonobo_Zoomable_ref Bonobo_Unknown_ref
#define Bonobo_Zoomable_unref Bonobo_Unknown_unref
#define Bonobo_Zoomable_queryInterface Bonobo_Unknown_queryInterface
   CORBA_float Bonobo_Zoomable__get_level(Bonobo_Zoomable _obj,
					  CORBA_Environment * ev);
   CORBA_float Bonobo_Zoomable__get_minLevel(Bonobo_Zoomable _obj,
					     CORBA_Environment * ev);
   CORBA_float Bonobo_Zoomable__get_maxLevel(Bonobo_Zoomable _obj,
					     CORBA_Environment * ev);
   CORBA_boolean Bonobo_Zoomable__get_hasMinLevel(Bonobo_Zoomable _obj,
						  CORBA_Environment * ev);
   CORBA_boolean Bonobo_Zoomable__get_hasMaxLevel(Bonobo_Zoomable _obj,
						  CORBA_Environment * ev);
   CORBA_boolean Bonobo_Zoomable__get_isContinuous(Bonobo_Zoomable _obj,
						   CORBA_Environment * ev);
   Bonobo_ZoomLevelList *Bonobo_Zoomable__get_preferredLevels(Bonobo_Zoomable
							      _obj,
							      CORBA_Environment
							      * ev);
   Bonobo_ZoomLevelNameList
      *Bonobo_Zoomable__get_preferredLevelNames(Bonobo_Zoomable _obj,
						CORBA_Environment * ev);
   void Bonobo_Zoomable_zoomIn(Bonobo_Zoomable _obj, CORBA_Environment * ev);
   void Bonobo_Zoomable_zoomOut(Bonobo_Zoomable _obj, CORBA_Environment * ev);
   void Bonobo_Zoomable_zoomFit(Bonobo_Zoomable _obj, CORBA_Environment * ev);
   void Bonobo_Zoomable_zoomDefault(Bonobo_Zoomable _obj,
				    CORBA_Environment * ev);
   void Bonobo_Zoomable_setLevel(Bonobo_Zoomable _obj,
				 const CORBA_float zoom_level,
				 CORBA_Environment * ev);
   void Bonobo_Zoomable_setFrame(Bonobo_Zoomable _obj,
				 const Bonobo_ZoomableFrame zoomable_frame,
				 CORBA_Environment * ev);
#define Bonobo_ItemContainer_ref Bonobo_Unknown_ref
#define Bonobo_ItemContainer_unref Bonobo_Unknown_unref
#define Bonobo_ItemContainer_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_ItemContainer_ObjectList
      *Bonobo_ItemContainer_enumObjects(Bonobo_ItemContainer _obj,
					CORBA_Environment * ev);
   Bonobo_Unknown Bonobo_ItemContainer_getObjectByName(Bonobo_ItemContainer
						       _obj,
						       const CORBA_char *
						       item_name,
						       const CORBA_boolean
						       only_if_exists,
						       CORBA_Environment *
						       ev);
#define Bonobo_ClientSite_ref Bonobo_Unknown_ref
#define Bonobo_ClientSite_unref Bonobo_Unknown_unref
#define Bonobo_ClientSite_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_ItemContainer Bonobo_ClientSite_getContainer(Bonobo_ClientSite _obj,
						       CORBA_Environment *
						       ev);
   void Bonobo_ClientSite_showWindow(Bonobo_ClientSite _obj,
				     const CORBA_boolean shown,
				     CORBA_Environment * ev);
   Bonobo_Persist_Status Bonobo_ClientSite_saveObject(Bonobo_ClientSite _obj,
						      CORBA_Environment * ev);
#define Bonobo_Canvas_Component_ref Bonobo_Unknown_ref
#define Bonobo_Canvas_Component_unref Bonobo_Unknown_unref
#define Bonobo_Canvas_Component_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_Canvas_ArtUTA
      *Bonobo_Canvas_Component_update(Bonobo_Canvas_Component _obj,
				      const Bonobo_Canvas_State * state,
				      const Bonobo_Canvas_affine aff,
				      const Bonobo_Canvas_SVP * clip_path,
				      const CORBA_long flags,
				      CORBA_double * x1, CORBA_double * y1,
				      CORBA_double * x2, CORBA_double * y2,
				      CORBA_Environment * ev);
   void Bonobo_Canvas_Component_realize(Bonobo_Canvas_Component _obj,
					const Bonobo_Canvas_window_id
					drawable, CORBA_Environment * ev);
   void Bonobo_Canvas_Component_unrealize(Bonobo_Canvas_Component _obj,
					  CORBA_Environment * ev);
   void Bonobo_Canvas_Component_map(Bonobo_Canvas_Component _obj,
				    CORBA_Environment * ev);
   void Bonobo_Canvas_Component_unmap(Bonobo_Canvas_Component _obj,
				      CORBA_Environment * ev);
   void Bonobo_Canvas_Component_draw(Bonobo_Canvas_Component _obj,
				     const Bonobo_Canvas_State * state,
				     const Bonobo_Canvas_window_id drawable,
				     const CORBA_short x, const CORBA_short y,
				     const CORBA_short width,
				     const CORBA_short height,
				     CORBA_Environment * ev);
   void Bonobo_Canvas_Component_render(Bonobo_Canvas_Component _obj,
				       Bonobo_Canvas_Buf * buf,
				       CORBA_Environment * ev);
   CORBA_boolean Bonobo_Canvas_Component_contains(Bonobo_Canvas_Component
						  _obj, const CORBA_double x,
						  const CORBA_double y,
						  CORBA_Environment * ev);
   void Bonobo_Canvas_Component_bounds(Bonobo_Canvas_Component _obj,
				       const Bonobo_Canvas_State * state,
				       CORBA_double * x1, CORBA_double * x2,
				       CORBA_double * y1, CORBA_double * y2,
				       CORBA_Environment * ev);
   CORBA_boolean Bonobo_Canvas_Component_event(Bonobo_Canvas_Component _obj,
					       const Bonobo_Canvas_State *
					       state,
					       const Bonobo_Gdk_Event * event,
					       CORBA_Environment * ev);
   void Bonobo_Canvas_Component_setCanvasSize(Bonobo_Canvas_Component _obj,
					      const CORBA_short x,
					      const CORBA_short y,
					      const CORBA_short width,
					      const CORBA_short height,
					      CORBA_Environment * ev);
   void Bonobo_Canvas_Component_setBounds(Bonobo_Canvas_Component _obj,
					  const Bonobo_Canvas_DRect * bbox,
					  CORBA_Environment * ev);
   Bonobo_UIComponent
      Bonobo_Canvas_Component_getUIComponent(Bonobo_Canvas_Component _obj,
					     CORBA_Environment * ev);
   void Bonobo_Canvas_ComponentProxy_updateArea(Bonobo_Canvas_ComponentProxy
						_obj,
						const Bonobo_Canvas_ArtUTA *
						uta, CORBA_Environment * ev);
#define Bonobo_View_ref Bonobo_Unknown_ref
#define Bonobo_View_unref Bonobo_Unknown_unref
#define Bonobo_View_queryInterface Bonobo_Unknown_queryInterface
#define Bonobo_View_activate Bonobo_Control_activate
#define Bonobo_View_setFrame Bonobo_Control_setFrame
#define Bonobo_View_setWindowId Bonobo_Control_setWindowId
#define Bonobo_View_getProperties Bonobo_Control_getProperties
#define Bonobo_View_setSize Bonobo_Control_setSize
#define Bonobo_View_getDesiredSize Bonobo_Control_getDesiredSize
#define Bonobo_View_setState Bonobo_Control_setState
#define Bonobo_View_realize Bonobo_Control_realize
#define Bonobo_View_unrealize Bonobo_Control_unrealize
   void Bonobo_View_setZoomFactor(Bonobo_View _obj, const CORBA_double zoom,
				  CORBA_Environment * ev);
#define Bonobo_ViewFrame_ref Bonobo_Unknown_ref
#define Bonobo_ViewFrame_unref Bonobo_Unknown_unref
#define Bonobo_ViewFrame_queryInterface Bonobo_Unknown_queryInterface
#define Bonobo_ViewFrame_activated Bonobo_ControlFrame_activated
#define Bonobo_ViewFrame_getAmbientProperties Bonobo_ControlFrame_getAmbientProperties
#define Bonobo_ViewFrame_queueResize Bonobo_ControlFrame_queueResize
#define Bonobo_ViewFrame_activateURI Bonobo_ControlFrame_activateURI
#define Bonobo_ViewFrame_getUIHandler Bonobo_ControlFrame_getUIHandler
   Bonobo_ClientSite Bonobo_ViewFrame_getClientSite(Bonobo_ViewFrame _obj,
						    CORBA_Environment * ev);
#define Bonobo_Embeddable_ref Bonobo_Unknown_ref
#define Bonobo_Embeddable_unref Bonobo_Unknown_unref
#define Bonobo_Embeddable_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_Embeddable_setClientSite(Bonobo_Embeddable _obj,
					const Bonobo_ClientSite clientSite,
					CORBA_Environment * ev);
   Bonobo_ClientSite Bonobo_Embeddable_getClientSite(Bonobo_Embeddable _obj,
						     CORBA_Environment * ev);
   void Bonobo_Embeddable_setHostName(Bonobo_Embeddable _obj,
				      const CORBA_char * name,
				      const CORBA_char * appname,
				      CORBA_Environment * ev);
   void Bonobo_Embeddable_setURI(Bonobo_Embeddable _obj,
				 const CORBA_char * uri,
				 CORBA_Environment * ev);
   void Bonobo_Embeddable_close(Bonobo_Embeddable _obj,
				const Bonobo_Embeddable_CloseMode mode,
				CORBA_Environment * ev);
   void Bonobo_Embeddable_advise(Bonobo_Embeddable _obj,
				 const Bonobo_AdviseSink advise,
				 CORBA_Environment * ev);
   void Bonobo_Embeddable_unadvise(Bonobo_Embeddable _obj,
				   CORBA_Environment * ev);
   CORBA_long Bonobo_Embeddable_getMiscStatus(Bonobo_Embeddable _obj,
					      const CORBA_long type,
					      CORBA_Environment * ev);
   Bonobo_View Bonobo_Embeddable_createView(Bonobo_Embeddable _obj,
					    const Bonobo_ViewFrame frame,
					    CORBA_Environment * ev);
   Bonobo_Canvas_Component
      Bonobo_Embeddable_createCanvasItem(Bonobo_Embeddable _obj,
					 const CORBA_boolean aa,
					 const Bonobo_Canvas_ComponentProxy
					 proxy, CORBA_Environment * ev);
#define Bonobo_Print_ref Bonobo_Unknown_ref
#define Bonobo_Print_unref Bonobo_Unknown_unref
#define Bonobo_Print_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_PrintData *Bonobo_Print_render(Bonobo_Print _obj,
					 const Bonobo_PrintDimensions * pd,
					 const Bonobo_PrintScissor * scissor,
					 CORBA_Environment * ev);
#define Bonobo_Desktop_Window_ref Bonobo_Unknown_ref
#define Bonobo_Desktop_Window_unref Bonobo_Unknown_unref
#define Bonobo_Desktop_Window_queryInterface Bonobo_Unknown_queryInterface
   CORBA_char *Bonobo_Desktop_Window__get_title(Bonobo_Desktop_Window _obj,
						CORBA_Environment * ev);
   void Bonobo_Desktop_Window__set_title(Bonobo_Desktop_Window _obj,
					 const CORBA_char * value,
					 CORBA_Environment * ev);
   Bonobo_Desktop_Window_Geometry
      Bonobo_Desktop_Window_getGeometry(Bonobo_Desktop_Window _obj,
					CORBA_Environment * ev);
   void Bonobo_Desktop_Window_setGeometry(Bonobo_Desktop_Window _obj,
					  const Bonobo_Desktop_Window_Geometry
					  * geo, CORBA_Environment * ev);
   CORBA_unsigned_long Bonobo_Desktop_Window_getWindowId(Bonobo_Desktop_Window
							 _obj,
							 CORBA_Environment *
							 ev);

   void _ORBIT_skel_Bonobo_Unknown_ref(POA_Bonobo_Unknown * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       void (*_impl_ref)
				       (PortableServer_Servant _servant,
					CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Unknown_unref(POA_Bonobo_Unknown * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_unref)
					 (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Unknown_queryInterface(POA_Bonobo_Unknown *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  Bonobo_Unknown
						  (*_impl_queryInterface)
						  (PortableServer_Servant
						   _servant,
						   const CORBA_char * repoid,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Moniker__get_parent(POA_Bonobo_Moniker *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       Bonobo_Moniker
					       (*_impl__get_parent)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Moniker__set_parent(POA_Bonobo_Moniker *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl__set_parent)
					       (PortableServer_Servant
						_servant,
						const Bonobo_Moniker value,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Moniker_getDisplayName(POA_Bonobo_Moniker *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_char *
						  (*_impl_getDisplayName)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Moniker_parseDisplayName(POA_Bonobo_Moniker *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    Bonobo_Moniker
						    (*_impl_parseDisplayName)
						    (PortableServer_Servant
						     _servant,
						     const Bonobo_Moniker
						     parent,
						     const CORBA_char * name,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Moniker_resolve(POA_Bonobo_Moniker *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   Bonobo_Unknown(*_impl_resolve)
					   (PortableServer_Servant _servant,
					    const Bonobo_ResolveOptions *
					    options,
					    const CORBA_char *
					    requestedInterface,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_MonikerExtender_resolve(POA_Bonobo_MonikerExtender
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   Bonobo_Unknown
						   (*_impl_resolve)
						   (PortableServer_Servant
						    _servant,
						    const Bonobo_Moniker m,
						    const
						    Bonobo_ResolveOptions *
						    options,
						    const CORBA_char *
						    displayName,
						    const CORBA_char *
						    requestedInterface,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ActivationContext_getObject
      (POA_Bonobo_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_Unknown(*_impl_getObject) (PortableServer_Servant _servant,
					 const CORBA_char * name,
					 const CORBA_char * repoId,
					 CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ActivationContext_createFromName
      (POA_Bonobo_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_Moniker(*_impl_createFromName) (PortableServer_Servant _servant,
					      const CORBA_char * name,
					      CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ActivationContext_createWithParent
      (POA_Bonobo_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_Moniker(*_impl_createWithParent) (PortableServer_Servant
						_servant,
						const Bonobo_Moniker
						optParent,
						const CORBA_char * name,
						CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ActivationContext_getExtender
      (POA_Bonobo_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_MonikerExtender(*_impl_getExtender) (PortableServer_Servant
						   _servant,
						   const CORBA_char *
						   monikerPrefix,
						   const CORBA_char *
						   interfaceId,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_RunningContext_addObject(POA_Bonobo_RunningContext
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_addObject)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_Object
						     object,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_RunningContext_removeObject(POA_Bonobo_RunningContext
						     * _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void
						     (*_impl_removeObject)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_Object
						      object,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Bonobo_RunningContext_addKey(POA_Bonobo_RunningContext *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_addKey)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char * key,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_RunningContext_removeKey(POA_Bonobo_RunningContext
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_removeKey)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_char * key,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_getInfo(POA_Bonobo_Stream * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  Bonobo_StorageInfo *
					  (*_impl_getInfo)
					  (PortableServer_Servant _servant,
					   const Bonobo_StorageInfoFields
					   mask, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_setInfo(POA_Bonobo_Stream * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_setInfo)
					  (PortableServer_Servant _servant,
					   const Bonobo_StorageInfo * info,
					   const Bonobo_StorageInfoFields
					   mask, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_read(POA_Bonobo_Stream * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       void (*_impl_read)
				       (PortableServer_Servant _servant,
					const CORBA_long count,
					Bonobo_Stream_iobuf ** buffer,
					CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_write(POA_Bonobo_Stream * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					void (*_impl_write)
					(PortableServer_Servant _servant,
					 const Bonobo_Stream_iobuf * buffer,
					 CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_seek(POA_Bonobo_Stream * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       CORBA_long(*_impl_seek)
				       (PortableServer_Servant _servant,
					const CORBA_long offset,
					const Bonobo_Stream_SeekType whence,
					CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_truncate(POA_Bonobo_Stream * _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_truncate)
					   (PortableServer_Servant _servant,
					    const CORBA_long length,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_copyTo(POA_Bonobo_Stream * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_copyTo)
					 (PortableServer_Servant _servant,
					  const CORBA_char * dest,
					  const CORBA_long bytes,
					  CORBA_long * read,
					  CORBA_long * written,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_commit(POA_Bonobo_Stream * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_commit)
					 (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Stream_revert(POA_Bonobo_Stream * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_revert)
					 (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_getInfo(POA_Bonobo_Storage *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   Bonobo_StorageInfo *
					   (*_impl_getInfo)
					   (PortableServer_Servant _servant,
					    const CORBA_char * path,
					    const Bonobo_StorageInfoFields
					    mask, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_setInfo(POA_Bonobo_Storage *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_setInfo)
					   (PortableServer_Servant _servant,
					    const CORBA_char * path,
					    const Bonobo_StorageInfo * info,
					    const Bonobo_StorageInfoFields
					    mask, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_openStream(POA_Bonobo_Storage *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      Bonobo_Stream(*_impl_openStream)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * path,
					       const Bonobo_Storage_OpenMode
					       mode, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_openStorage(POA_Bonobo_Storage *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       Bonobo_Storage
					       (*_impl_openStorage)
					       (PortableServer_Servant
						_servant,
						const CORBA_char * path,
						const Bonobo_Storage_OpenMode
						mode,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_copyTo(POA_Bonobo_Storage * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_copyTo)
					  (PortableServer_Servant _servant,
					   const Bonobo_Storage target,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_listContents(POA_Bonobo_Storage *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						Bonobo_Storage_DirectoryList *
						(*_impl_listContents)
						(PortableServer_Servant
						 _servant,
						 const CORBA_char * path,
						 const
						 Bonobo_StorageInfoFields
						 mask,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_erase(POA_Bonobo_Storage * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_erase)
					 (PortableServer_Servant _servant,
					  const CORBA_char * path,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_rename(POA_Bonobo_Storage * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_rename)
					  (PortableServer_Servant _servant,
					   const CORBA_char * path_name,
					   const CORBA_char * new_path_name,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_commit(POA_Bonobo_Storage * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_commit)
					  (PortableServer_Servant _servant,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Storage_revert(POA_Bonobo_Storage * _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_revert)
					  (PortableServer_Servant _servant,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Persist_getContentTypes(POA_Bonobo_Persist *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   Bonobo_Persist_ContentTypeList
						   *
						   (*_impl_getContentTypes)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistFile_load(POA_Bonobo_PersistFile *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_load)
					    (PortableServer_Servant _servant,
					     const CORBA_char * path,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistFile_save(POA_Bonobo_PersistFile *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_save)
					    (PortableServer_Servant _servant,
					     const CORBA_char * path,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistFile_isDirty(POA_Bonobo_PersistFile *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_boolean(*_impl_isDirty)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistFile_getCurrentFile(POA_Bonobo_PersistFile *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_char *
						      (*_impl_getCurrentFile)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Bonobo_PersistStorage_isDirty(POA_Bonobo_PersistStorage *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_boolean
						  (*_impl_isDirty)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistStorage_load(POA_Bonobo_PersistStorage *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_load)
					       (PortableServer_Servant
						_servant,
						const Bonobo_Storage storage,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistStorage_save(POA_Bonobo_PersistStorage *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_save)
					       (PortableServer_Servant
						_servant,
						const Bonobo_Storage storage,
						const CORBA_boolean
						same_as_loaded,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistStorage_initNew(POA_Bonobo_PersistStorage *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_initNew)
						  (PortableServer_Servant
						   _servant,
						   const Bonobo_Storage
						   storage,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistStream_isDirty(POA_Bonobo_PersistStream *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 CORBA_boolean(*_impl_isDirty)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistStream_load(POA_Bonobo_PersistStream *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_load)
					      (PortableServer_Servant
					       _servant,
					       const Bonobo_Stream stream,
					       const
					       Bonobo_Persist_ContentType
					       type, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistStream_save(POA_Bonobo_PersistStream *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_save)
					      (PortableServer_Servant
					       _servant,
					       const Bonobo_Stream stream,
					       const
					       Bonobo_Persist_ContentType
					       type, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PersistStream_getMaxSize(POA_Bonobo_PersistStream *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    CORBA_long
						    (*_impl_getMaxSize)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ProgressiveDataSink_start
      (POA_Bonobo_ProgressiveDataSink * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_start) (PortableServer_Servant _servant,
			    CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ProgressiveDataSink_end
      (POA_Bonobo_ProgressiveDataSink * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_end) (PortableServer_Servant _servant,
			  CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ProgressiveDataSink_addData
      (POA_Bonobo_ProgressiveDataSink * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_addData) (PortableServer_Servant _servant,
			      const Bonobo_ProgressiveDataSink_iobuf * buffer,
			      CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ProgressiveDataSink_setSize
      (POA_Bonobo_ProgressiveDataSink * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_setSize) (PortableServer_Servant _servant,
			      const CORBA_long count,
			      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_AdviseSink_notify(POA_Bonobo_AdviseSink *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_notify)
					     (PortableServer_Servant _servant,
					      const CORBA_long notify_type,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_AdviseSink_notifyRename(POA_Bonobo_AdviseSink *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_notifyRename)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_char *
						    new_full_name,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Listener_event(POA_Bonobo_Listener *
					  _ORBIT_servant,
					  GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev,
					  void (*_impl_event)
					  (PortableServer_Servant _servant,
					   const CORBA_char * event_name,
					   const CORBA_any * args,
					   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_EventSource_addListener(POA_Bonobo_EventSource *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   Bonobo_EventSource_ListenerId
						   (*_impl_addListener)
						   (PortableServer_Servant
						    _servant,
						    const Bonobo_Listener l,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_EventSource_addListenerWithMask
      (POA_Bonobo_EventSource * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_EventSource_ListenerId(*_impl_addListenerWithMask)
       (PortableServer_Servant _servant, const Bonobo_Listener l,
	const CORBA_char * event_mask, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_EventSource_removeListener(POA_Bonobo_EventSource *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      void
						      (*_impl_removeListener)
						      (PortableServer_Servant
						       _servant,
						       const
						       Bonobo_EventSource_ListenerId
						       id,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Bonobo_UIComponent_setContainer(POA_Bonobo_UIComponent *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_setContainer)
						    (PortableServer_Servant
						     _servant,
						     const Bonobo_UIContainer
						     container,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIComponent_unsetContainer(POA_Bonobo_UIComponent *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      void
						      (*_impl_unsetContainer)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Bonobo_UIComponent__get_name(POA_Bonobo_UIComponent *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 CORBA_char *
						 (*_impl__get_name)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIComponent_describeVerbs(POA_Bonobo_UIComponent *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     CORBA_char *
						     (*_impl_describeVerbs)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Bonobo_UIComponent_execVerb(POA_Bonobo_UIComponent *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_execVerb)
						(PortableServer_Servant
						 _servant,
						 const CORBA_char * cname,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIComponent_uiEvent(POA_Bonobo_UIComponent *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_uiEvent)
					       (PortableServer_Servant
						_servant,
						const CORBA_char * id,
						const
						Bonobo_UIComponent_EventType
						type,
						const CORBA_char * state,
						CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_UIContainer_registerComponent(POA_Bonobo_UIContainer
						       * _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       void
						       (*_impl_registerComponent)
						       (PortableServer_Servant
							_servant,
							const CORBA_char *
							component_name,
							const
							Bonobo_UIComponent
							component,
							CORBA_Environment *
							ev));
   void
      _ORBIT_skel_Bonobo_UIContainer_deregisterComponent
      (POA_Bonobo_UIContainer * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_deregisterComponent) (PortableServer_Servant _servant,
					  const CORBA_char * component_name,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_freeze(POA_Bonobo_UIContainer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_freeze)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_thaw(POA_Bonobo_UIContainer *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_thaw)
					    (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_setNode(POA_Bonobo_UIContainer *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_setNode)
					       (PortableServer_Servant
						_servant,
						const CORBA_char * path,
						const CORBA_char * xml,
						const CORBA_char *
						component_name,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_getNode(POA_Bonobo_UIContainer *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_char *
					       (*_impl_getNode)
					       (PortableServer_Servant
						_servant,
						const CORBA_char * path,
						const CORBA_boolean nodeOnly,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_removeNode(POA_Bonobo_UIContainer *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_removeNode)
						  (PortableServer_Servant
						   _servant,
						   const CORBA_char * path,
						   const CORBA_char *
						   by_component_name,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_exists(POA_Bonobo_UIContainer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_boolean(*_impl_exists)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * path,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_setObject(POA_Bonobo_UIContainer *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_setObject)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char * path,
						  const Bonobo_Unknown
						  control,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_UIContainer_getObject(POA_Bonobo_UIContainer *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 Bonobo_Unknown
						 (*_impl_getObject)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char * path,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Property_getName(POA_Bonobo_Property *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    CORBA_char *
					    (*_impl_getName)
					    (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Property_getType(POA_Bonobo_Property *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    CORBA_TypeCode(*_impl_getType)
					    (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Property_getValue(POA_Bonobo_Property *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     CORBA_any *
					     (*_impl_getValue)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Property_setValue(POA_Bonobo_Property *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_setValue)
					     (PortableServer_Servant _servant,
					      const CORBA_any * value,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Property_getDefault(POA_Bonobo_Property *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_any *
					       (*_impl_getDefault)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Property_getDocString(POA_Bonobo_Property *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 CORBA_char *
						 (*_impl_getDocString)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Property_getFlags(POA_Bonobo_Property *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     CORBA_long(*_impl_getFlags)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PropertyBag_getProperties(POA_Bonobo_PropertyBag *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     Bonobo_PropertyList *
						     (*_impl_getProperties)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_Bonobo_PropertyBag_getPropertyByName(POA_Bonobo_PropertyBag
						       * _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       Bonobo_Property
						       (*_impl_getPropertyByName)
						       (PortableServer_Servant
							_servant,
							const CORBA_char *
							name,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Bonobo_PropertyBag_getPropertyNames(POA_Bonobo_PropertyBag
							* _ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							Bonobo_PropertyNames *
							(*_impl_getPropertyNames)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_Bonobo_PropertyBag_setValues(POA_Bonobo_PropertyBag *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_setValues)
						 (PortableServer_Servant
						  _servant,
						  const Bonobo_PropertySet *
						  set,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_PropertyBag_getValues(POA_Bonobo_PropertyBag *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 Bonobo_PropertySet *
						 (*_impl_getValues)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ControlFrame_activated(POA_Bonobo_ControlFrame *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_activated)
						  (PortableServer_Servant
						   _servant,
						   const CORBA_boolean state,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ControlFrame_getAmbientProperties
      (POA_Bonobo_ControlFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_PropertyBag(*_impl_getAmbientProperties) (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Bonobo_ControlFrame_queueResize(POA_Bonobo_ControlFrame *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_queueResize)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ControlFrame_activateURI(POA_Bonobo_ControlFrame *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_activateURI)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_char * uri,
						     const CORBA_boolean
						     relative,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ControlFrame_getUIHandler(POA_Bonobo_ControlFrame *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     Bonobo_Unknown
						     (*_impl_getUIHandler)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Bonobo_Control_activate(POA_Bonobo_Control *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_activate)
					    (PortableServer_Servant _servant,
					     const CORBA_boolean activate,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_setFrame(POA_Bonobo_Control *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_setFrame)
					    (PortableServer_Servant _servant,
					     const Bonobo_ControlFrame frame,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_setWindowId(POA_Bonobo_Control *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_setWindowId)
					       (PortableServer_Servant
						_servant,
						const Bonobo_Control_windowId
						id, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_getProperties(POA_Bonobo_Control *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 Bonobo_PropertyBag
						 (*_impl_getProperties)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_setSize(POA_Bonobo_Control *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_setSize)
					   (PortableServer_Servant _servant,
					    const CORBA_short width,
					    const CORBA_short height,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_getDesiredSize(POA_Bonobo_Control *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_getDesiredSize)
						  (PortableServer_Servant
						   _servant,
						   CORBA_short *
						   desired_width,
						   CORBA_short *
						   desired_height,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_setState(POA_Bonobo_Control *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_setState)
					    (PortableServer_Servant _servant,
					     const Bonobo_Control_State state,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_realize(POA_Bonobo_Control *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_realize)
					   (PortableServer_Servant _servant,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Control_unrealize(POA_Bonobo_Control *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_unrealize)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_PropertyControl__get_pageCount
      (POA_Bonobo_PropertyControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_long(*_impl__get_pageCount) (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_PropertyControl_getControl(POA_Bonobo_PropertyControl
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    Bonobo_Control
						    (*_impl_getControl)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_long
						     pagenumber,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_PropertyControl_notifyAction
      (POA_Bonobo_PropertyControl * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_notifyAction) (PortableServer_Servant _servant,
				   const CORBA_long pagenumber,
				   const Bonobo_PropertyControl_Action action,
				   CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_ZoomableFrame_onLevelChanged(POA_Bonobo_ZoomableFrame
						      * _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      void
						      (*_impl_onLevelChanged)
						      (PortableServer_Servant
						       _servant,
						       const CORBA_float
						       zoom_level,
						       CORBA_Environment *
						       ev));
   void
      _ORBIT_skel_Bonobo_ZoomableFrame_onParametersChanged
      (POA_Bonobo_ZoomableFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_onParametersChanged) (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable__get_level(POA_Bonobo_Zoomable *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_float(*_impl__get_level)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable__get_minLevel(POA_Bonobo_Zoomable *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_float
						  (*_impl__get_minLevel)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable__get_maxLevel(POA_Bonobo_Zoomable *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_float
						  (*_impl__get_maxLevel)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable__get_hasMinLevel(POA_Bonobo_Zoomable *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     CORBA_boolean
						     (*_impl__get_hasMinLevel)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Bonobo_Zoomable__get_hasMaxLevel(POA_Bonobo_Zoomable *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     CORBA_boolean
						     (*_impl__get_hasMaxLevel)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Bonobo_Zoomable__get_isContinuous(POA_Bonobo_Zoomable *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_boolean
						      (*_impl__get_isContinuous)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Bonobo_Zoomable__get_preferredLevels(POA_Bonobo_Zoomable *
							 _ORBIT_servant,
							 GIOPRecvBuffer *
							 _ORBIT_recv_buffer,
							 CORBA_Environment *
							 ev,
							 Bonobo_ZoomLevelList
							 *
							 (*_impl__get_preferredLevels)
							 (PortableServer_Servant
							  _servant,
							  CORBA_Environment *
							  ev));
   void
      _ORBIT_skel_Bonobo_Zoomable__get_preferredLevelNames(POA_Bonobo_Zoomable
							   * _ORBIT_servant,
							   GIOPRecvBuffer *
							   _ORBIT_recv_buffer,
							   CORBA_Environment *
							   ev,
							   Bonobo_ZoomLevelNameList
							   *
							   (*_impl__get_preferredLevelNames)
							   (PortableServer_Servant
							    _servant,
							    CORBA_Environment
							    * ev));
   void _ORBIT_skel_Bonobo_Zoomable_zoomIn(POA_Bonobo_Zoomable *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_zoomIn)
					   (PortableServer_Servant _servant,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable_zoomOut(POA_Bonobo_Zoomable *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_zoomOut)
					    (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable_zoomFit(POA_Bonobo_Zoomable *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_zoomFit)
					    (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable_zoomDefault(POA_Bonobo_Zoomable *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_zoomDefault)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable_setLevel(POA_Bonobo_Zoomable *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_setLevel)
					     (PortableServer_Servant _servant,
					      const CORBA_float zoom_level,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Zoomable_setFrame(POA_Bonobo_Zoomable *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_setFrame)
					     (PortableServer_Servant _servant,
					      const Bonobo_ZoomableFrame
					      zoomable_frame,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ItemContainer_enumObjects(POA_Bonobo_ItemContainer
						     * _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     Bonobo_ItemContainer_ObjectList
						     *
						     (*_impl_enumObjects)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_Bonobo_ItemContainer_getObjectByName
      (POA_Bonobo_ItemContainer * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_Unknown(*_impl_getObjectByName) (PortableServer_Servant
					       _servant,
					       const CORBA_char * item_name,
					       const CORBA_boolean
					       only_if_exists,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ClientSite_getContainer(POA_Bonobo_ClientSite *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   Bonobo_ItemContainer
						   (*_impl_getContainer)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ClientSite_showWindow(POA_Bonobo_ClientSite *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_showWindow)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_boolean shown,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ClientSite_saveObject(POA_Bonobo_ClientSite *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 Bonobo_Persist_Status
						 (*_impl_saveObject)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Canvas_Component_update(POA_Bonobo_Canvas_Component
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   Bonobo_Canvas_ArtUTA *
						   (*_impl_update)
						   (PortableServer_Servant
						    _servant,
						    const Bonobo_Canvas_State
						    * state,
						    const Bonobo_Canvas_affine
						    aff,
						    const Bonobo_Canvas_SVP *
						    clip_path,
						    const CORBA_long flags,
						    CORBA_double * x1,
						    CORBA_double * y1,
						    CORBA_double * x2,
						    CORBA_double * y2,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Canvas_Component_realize(POA_Bonobo_Canvas_Component
						  * _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_realize)
						  (PortableServer_Servant
						   _servant,
						   const
						   Bonobo_Canvas_window_id
						   drawable,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Canvas_Component_unrealize
      (POA_Bonobo_Canvas_Component * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_unrealize) (PortableServer_Servant _servant,
				CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Canvas_Component_map(POA_Bonobo_Canvas_Component *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_map)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Canvas_Component_unmap(POA_Bonobo_Canvas_Component
						  * _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_unmap)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Canvas_Component_draw(POA_Bonobo_Canvas_Component *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_draw)
						 (PortableServer_Servant
						  _servant,
						  const Bonobo_Canvas_State *
						  state,
						  const
						  Bonobo_Canvas_window_id
						  drawable,
						  const CORBA_short x,
						  const CORBA_short y,
						  const CORBA_short width,
						  const CORBA_short height,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Canvas_Component_render(POA_Bonobo_Canvas_Component
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_render)
						   (PortableServer_Servant
						    _servant,
						    Bonobo_Canvas_Buf * buf,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Canvas_Component_contains(POA_Bonobo_Canvas_Component
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   CORBA_boolean
						   (*_impl_contains)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_double x,
						    const CORBA_double y,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Canvas_Component_bounds(POA_Bonobo_Canvas_Component
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_bounds)
						   (PortableServer_Servant
						    _servant,
						    const Bonobo_Canvas_State
						    * state,
						    CORBA_double * x1,
						    CORBA_double * x2,
						    CORBA_double * y1,
						    CORBA_double * y2,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Canvas_Component_event(POA_Bonobo_Canvas_Component
						  * _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_boolean(*_impl_event)
						  (PortableServer_Servant
						   _servant,
						   const Bonobo_Canvas_State *
						   state,
						   const Bonobo_Gdk_Event *
						   event,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Canvas_Component_setCanvasSize
      (POA_Bonobo_Canvas_Component * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_setCanvasSize) (PortableServer_Servant _servant,
				    const CORBA_short x, const CORBA_short y,
				    const CORBA_short width,
				    const CORBA_short height,
				    CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Canvas_Component_setBounds
      (POA_Bonobo_Canvas_Component * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_setBounds) (PortableServer_Servant _servant,
				const Bonobo_Canvas_DRect * bbox,
				CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Canvas_Component_getUIComponent
      (POA_Bonobo_Canvas_Component * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Bonobo_UIComponent(*_impl_getUIComponent) (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Canvas_ComponentProxy_updateArea
      (POA_Bonobo_Canvas_ComponentProxy * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_updateArea) (PortableServer_Servant _servant,
				 const Bonobo_Canvas_ArtUTA * uta,
				 CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_View_setZoomFactor(POA_Bonobo_View *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_setZoomFactor)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_double zoom,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_ViewFrame_getClientSite(POA_Bonobo_ViewFrame *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   Bonobo_ClientSite
						   (*_impl_getClientSite)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_setClientSite(POA_Bonobo_Embeddable *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl_setClientSite)
						    (PortableServer_Servant
						     _servant,
						     const Bonobo_ClientSite
						     clientSite,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_getClientSite(POA_Bonobo_Embeddable *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    Bonobo_ClientSite
						    (*_impl_getClientSite)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_setHostName(POA_Bonobo_Embeddable *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_setHostName)
						  (PortableServer_Servant
						   _servant,
						   const CORBA_char * name,
						   const CORBA_char * appname,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_setURI(POA_Bonobo_Embeddable *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_setURI)
					     (PortableServer_Servant _servant,
					      const CORBA_char * uri,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_close(POA_Bonobo_Embeddable *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_close)
					    (PortableServer_Servant _servant,
					     const Bonobo_Embeddable_CloseMode
					     mode, CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_advise(POA_Bonobo_Embeddable *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_advise)
					     (PortableServer_Servant _servant,
					      const Bonobo_AdviseSink advise,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_unadvise(POA_Bonobo_Embeddable *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_unadvise)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_getMiscStatus(POA_Bonobo_Embeddable *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    CORBA_long
						    (*_impl_getMiscStatus)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_long type,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_createView(POA_Bonobo_Embeddable *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 Bonobo_View
						 (*_impl_createView)
						 (PortableServer_Servant
						  _servant,
						  const Bonobo_ViewFrame
						  frame,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Embeddable_createCanvasItem(POA_Bonobo_Embeddable *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       Bonobo_Canvas_Component
						       (*_impl_createCanvasItem)
						       (PortableServer_Servant
							_servant,
							const CORBA_boolean
							aa,
							const
							Bonobo_Canvas_ComponentProxy
							proxy,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Bonobo_Print_render(POA_Bonobo_Print * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					Bonobo_PrintData *
					(*_impl_render)
					(PortableServer_Servant _servant,
					 const Bonobo_PrintDimensions * pd,
					 const Bonobo_PrintScissor * scissor,
					 CORBA_Environment * ev));
   void _ORBIT_skel_Bonobo_Desktop_Window__get_title(POA_Bonobo_Desktop_Window
						     * _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     CORBA_char *
						     (*_impl__get_title)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Bonobo_Desktop_Window__set_title(POA_Bonobo_Desktop_Window
						     * _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void (*_impl__set_title)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_char *
						      value,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_Bonobo_Desktop_Window_getGeometry(POA_Bonobo_Desktop_Window
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    Bonobo_Desktop_Window_Geometry
						    (*_impl_getGeometry)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Desktop_Window_setGeometry(POA_Bonobo_Desktop_Window
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_setGeometry)
						    (PortableServer_Servant
						     _servant,
						     const
						     Bonobo_Desktop_Window_Geometry
						     * geo,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_Bonobo_Desktop_Window_getWindowId(POA_Bonobo_Desktop_Window
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    CORBA_unsigned_long
						    (*_impl_getWindowId)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
