<refentry id="bonobo-bonobo-view" revision="15 Feb 2001">
<refmeta>
<refentrytitle>BonoboView</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboView</refname><refpurpose>View object for exporting a view of a BonoboEmbeddable component</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="BONOBO-VIEW-TYPE-CAPS">BONOBO_VIEW_TYPE</link>
#define     <link linkend="BONOBO-VIEW-CAPS">BONOBO_VIEW</link>                     (o)
#define     <link linkend="BONOBO-VIEW-CLASS-CAPS">BONOBO_VIEW_CLASS</link>               (k)
#define     <link linkend="BONOBO-IS-VIEW-CAPS">BONOBO_IS_VIEW</link>                  (o)
#define     <link linkend="BONOBO-IS-VIEW-CLASS-CAPS">BONOBO_IS_VIEW_CLASS</link>            (k)
struct      <link linkend="BonoboView-struct">BonoboView</link>;
typedef     <link linkend="BonoboViewClass">BonoboViewClass</link>;
#define     <link linkend="BONOBO-VIEW-VERB-FUNC-CAPS">BONOBO_VIEW_VERB_FUNC</link>           (fn)
void        (<link linkend="BonoboViewVerbFunc">*BonoboViewVerbFunc</link>)           (<link linkend="BonoboView">BonoboView</link> *view,
                                             const char *verb_name,
                                             void *user_data);
<link linkend="BonoboView">BonoboView</link>* <link linkend="bonobo-view-construct">bonobo_view_construct</link>           (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="Bonobo-View">Bonobo_View</link> corba_view,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="BonoboView">BonoboView</link>* <link linkend="bonobo-view-new">bonobo_view_new</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="Bonobo-View">Bonobo_View</link> <link linkend="bonobo-view-corba-object-create">bonobo_view_corba_object_create</link> (<link linkend="BonoboObject">BonoboObject</link> *object);
void        <link linkend="bonobo-view-set-embeddable">bonobo_view_set_embeddable</link>      (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="BonoboEmbeddable">BonoboEmbeddable</link> *embeddable);
<link linkend="BonoboEmbeddable">BonoboEmbeddable</link>* <link linkend="bonobo-view-get-embeddable">bonobo_view_get_embeddable</link>
                                            (<link linkend="BonoboView">BonoboView</link> *view);
void        <link linkend="bonobo-view-set-view-frame">bonobo_view_set_view_frame</link>      (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="Bonobo-ViewFrame">Bonobo_ViewFrame</link> view_frame);
<link linkend="Bonobo-ViewFrame">Bonobo_ViewFrame</link> <link linkend="bonobo-view-get-view-frame">bonobo_view_get_view_frame</link> (<link linkend="BonoboView">BonoboView</link> *view);
<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> <link linkend="bonobo-view-get-remote-ui-container">bonobo_view_get_remote_ui_container</link>
                                            (<link linkend="BonoboView">BonoboView</link> *view);
<link linkend="BonoboUIComponent">BonoboUIComponent</link>* <link linkend="bonobo-view-get-ui-component">bonobo_view_get_ui_component</link>
                                            (<link linkend="BonoboView">BonoboView</link> *view);
void        <link linkend="bonobo-view-activate-notify">bonobo_view_activate_notify</link>     (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="gboolean">gboolean</link> activated);
<link linkend="POA-Bonobo-View--epv">POA_Bonobo_View__epv</link>* <link linkend="bonobo-view-get-epv">bonobo_view_get_epv</link>   (void);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
   <link linkend="BonoboView">BonoboView</link> objects are typically created on the view factory
   callback of a <link linkend="BonoboEmbeddable">BonoboEmbeddable</link> object.  Bonobo components should be
   able to provide as many view objects as requested by the
   <link linkend="BonoboEmbeddable">BonoboEmbeddable</link> object on demand.
</para>

<para>
   It is the programmer's responsibility to keep the contents of all the
   views displaying the same information (modulo per-view state, like
   the zoom factor).
</para>

<!-- FIXME: BonoboView API no longer matches following description -->

<para>
   If your component provides menus, then you use the
   <link linkend="bonobo-view-set-ui-handler">bonobo_view_set_ui_handler</link>() on your view to provide it with a set
   of menus and toolbars.   You can also retrieve the container's UI
   handler using <link linkend="bonobo-view-get-ui-handler">bonobo_view_get_ui_handler</link>().
</para>

<para>
   You can register verbs in the View by using the
   <link linkend="bonobo-view-register-verb">bonobo_view_register_verb</link>().  When you want to stop supporting a
   verb, you can use the <link linkend="bonobo-view-unregister-verb">bonobo_view_unregister_verb</link>().  Alternatively,
   you can hook up to the "do_verb" signal and catch the verb requests
   on the signal handler.
</para>

<para>
   <link linkend="BonoboView">BonoboView</link> objects get a chance to tell their containers their
   desired size by responding to the "size_query" signal.  They will
   get their size assigned later.  The size assignment happens on the
   GtkWidget using the normal Gtk+ size allocation procedure.
</para>

<para>
   If your component supports zooming, connect to the
   "set_zoom_factor" signal.  This signal takes a floating point value
   that indicates the desired zoom factor requested by your container.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BONOBO-VIEW-TYPE-CAPS">BONOBO_VIEW_TYPE</title>
<programlisting>#define BONOBO_VIEW_TYPE        (bonobo_view_get_type ())
</programlisting>
<para>
   Returns the GtkType associated with the <link linkend="BonoboView">BonoboView</link> object.
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-VIEW-CAPS">BONOBO_VIEW()</title>
<programlisting>#define BONOBO_VIEW(o)          (GTK_CHECK_CAST ((o), BONOBO_VIEW_TYPE, BonoboView))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>o</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-VIEW-CLASS-CAPS">BONOBO_VIEW_CLASS()</title>
<programlisting>#define BONOBO_VIEW_CLASS(k)    (GTK_CHECK_CLASS_CAST((k), BONOBO_VIEW_TYPE, BonoboViewClass))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>k</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-IS-VIEW-CAPS">BONOBO_IS_VIEW()</title>
<programlisting>#define BONOBO_IS_VIEW(o)       (GTK_CHECK_TYPE ((o), BONOBO_VIEW_TYPE))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>o</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-IS-VIEW-CLASS-CAPS">BONOBO_IS_VIEW_CLASS()</title>
<programlisting>#define BONOBO_IS_VIEW_CLASS(k) (GTK_CHECK_CLASS_TYPE ((k), BONOBO_VIEW_TYPE))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>k</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BonoboView-struct">struct BonoboView</title>
<programlisting>struct BonoboView;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboViewClass">BonoboViewClass</title>
<programlisting>typedef struct {
	BonoboControlClass parent_class;

	/*
	 * Signals
	 */
	void (*do_verb)                  (BonoboView *view,
					  const CORBA_char *verb_name);
	void (*set_zoom_factor)          (BonoboView *view, double zoom);
} BonoboViewClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-VIEW-VERB-FUNC-CAPS">BONOBO_VIEW_VERB_FUNC()</title>
<programlisting>#define BONOBO_VIEW_VERB_FUNC(fn) ((BonoboViewVerbFunc)(fn))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>fn</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BonoboViewVerbFunc">BonoboViewVerbFunc ()</title>
<programlisting>void        (*BonoboViewVerbFunc)           (<link linkend="BonoboView">BonoboView</link> *view,
                                             const char *verb_name,
                                             void *user_data);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>verb_name</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-construct">bonobo_view_construct ()</title>
<programlisting><link linkend="BonoboView">BonoboView</link>* bonobo_view_construct           (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="Bonobo-View">Bonobo_View</link> corba_view,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>corba_view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>widget</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-new">bonobo_view_new ()</title>
<programlisting><link linkend="BonoboView">BonoboView</link>* bonobo_view_new                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>widget</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-corba-object-create">bonobo_view_corba_object_create ()</title>
<programlisting><link linkend="Bonobo-View">Bonobo_View</link> bonobo_view_corba_object_create (<link linkend="BonoboObject">BonoboObject</link> *object);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-set-embeddable">bonobo_view_set_embeddable ()</title>
<programlisting>void        bonobo_view_set_embeddable      (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="BonoboEmbeddable">BonoboEmbeddable</link> *embeddable);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>embeddable</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-get-embeddable">bonobo_view_get_embeddable ()</title>
<programlisting><link linkend="BonoboEmbeddable">BonoboEmbeddable</link>* bonobo_view_get_embeddable
                                            (<link linkend="BonoboView">BonoboView</link> *view);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-set-view-frame">bonobo_view_set_view_frame ()</title>
<programlisting>void        bonobo_view_set_view_frame      (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="Bonobo-ViewFrame">Bonobo_ViewFrame</link> view_frame);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>view_frame</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-get-view-frame">bonobo_view_get_view_frame ()</title>
<programlisting><link linkend="Bonobo-ViewFrame">Bonobo_ViewFrame</link> bonobo_view_get_view_frame (<link linkend="BonoboView">BonoboView</link> *view);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-get-remote-ui-container">bonobo_view_get_remote_ui_container ()</title>
<programlisting><link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> bonobo_view_get_remote_ui_container
                                            (<link linkend="BonoboView">BonoboView</link> *view);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-get-ui-component">bonobo_view_get_ui_component ()</title>
<programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link>* bonobo_view_get_ui_component
                                            (<link linkend="BonoboView">BonoboView</link> *view);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-activate-notify">bonobo_view_activate_notify ()</title>
<programlisting>void        bonobo_view_activate_notify     (<link linkend="BonoboView">BonoboView</link> *view,
                                             <link linkend="gboolean">gboolean</link> activated);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>view</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>activated</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-view-get-epv">bonobo_view_get_epv ()</title>
<programlisting><link linkend="POA-Bonobo-View--epv">POA_Bonobo_View__epv</link>* bonobo_view_get_epv   (void);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
   <link linkend="BonoboViewFrame">BonoboViewFrame</link>,  <link linkend="BonoboEmbeddable">BonoboEmbeddable</link>, <link linkend="BonoboWidget">BonoboWidget</link>, <link linkend="bonobo-widget-new">bonobo_widget_new</link>()
</para>
</refsect1>

</refentry>
