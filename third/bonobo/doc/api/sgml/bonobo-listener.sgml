<refentry id="bonobo-bonobo-listener" revision="9 Feb 2001">
<refmeta>
<refentrytitle>bonobo-listener</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-listener</refname><refpurpose>An Event Listener (an implementation of Bonobo::Listener)</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="BONOBO-LISTENER-TYPE-CAPS">BONOBO_LISTENER_TYPE</link>
#define     <link linkend="BONOBO-LISTENER-CAPS">BONOBO_LISTENER</link>                 (o)
#define     <link linkend="BONOBO-IS-LISTENER-CAPS">BONOBO_IS_LISTENER</link>              (o)
#define     <link linkend="BONOBO-LISTENER-CLASS-CAPS">BONOBO_LISTENER_CLASS</link>           (k)
#define     <link linkend="BONOBO-IS-LISTENER-CLASS-CAPS">BONOBO_IS_LISTENER_CLASS</link>        (k)
typedef     <link linkend="BonoboListener">BonoboListener</link>;
typedef     <link linkend="BonoboListenerClass">BonoboListenerClass</link>;
void        (<link linkend="BonoboListenerCallbackFn">*BonoboListenerCallbackFn</link>)     (<link linkend="BonoboListener">BonoboListener</link> *listener,
                                             char *event_name,
                                             <link linkend="CORBA-any">CORBA_any</link> *any,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="BonoboListener">BonoboListener</link>* <link linkend="bonobo-listener-new">bonobo_listener_new</link>         (<link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_callback,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="BonoboListener">BonoboListener</link>* <link linkend="bonobo-listener-construct">bonobo_listener_construct</link>   (<link linkend="BonoboListener">BonoboListener</link> *listener,
                                             <link linkend="Bonobo-Listener">Bonobo_Listener</link> corba_listener);
<link linkend="POA-Bonobo-Listener--epv">POA_Bonobo_Listener__epv</link>* <link linkend="bonobo-listener-get-epv">bonobo_listener_get_epv</link>
                                            (void);
<link linkend="Bonobo-Listener">Bonobo_Listener</link> <link linkend="bonobo-listener-corba-object-create">bonobo_listener_corba_object_create</link>
                                            (<link linkend="BonoboObject">BonoboObject</link> *object);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
   The BonoboListener object is a CORBA server used to receive events
   emmited by a remote Bonobo::EventSource server.  The combination
   EventSource/Listener is used to notify one or more client
   applications of events that happen in a component.    Think of the
   EventSource/Listener as a notification/callback system that allows
   multiple clients to be informed of events.
</para>

<para>
   Once created, the BonoboListener object needs to be attached to a
   remote IDL:Bonobo/EventSource:1.0 server.  This done by passing the
   CORBA Object reference of the BonoboListener to the addListener
   method in the IDL:Bonobo/EventSource:1.0.  
</para>

<para>
   The BonoboListener object allows the user to specify a callback
   function to be invoked when an event is emmited by the
   IDL:Bonobo/EventSource:1.0 server.  The BonoboListener object also
   emits the "event_notify" Gtk+ signal, which allows you to connnect
   multiple code segments to the same event notification. 
</para>

<para>
    Here is a sample client application that registers interest in
    being notified of events from the fictional "Keyboard" event
    source:

    <informalexample>
      <programlisting>

BonoboListener *keyboard_listener;

my_listener_function (BonoboListener *l, char *event_name,
                      CORBA_any value, CORBA_Environment *ev,
                      gpointer user_data)
{
	printf ("Received event named: <literal>s</literal>\n", event_name);
}

connect_to_keyboard_source (Bonobo_EventSource *keyboard)
{
        Bonobo_Unknown reference;

        /*
         * First, create the listener Bonobo server.
         */
	keyboard_listener = bonobo_listener_new (my_listener_function, NULL);

        /*
         * Now, register our listener with the EventSource
         */
        reference = bonobo_object_corba_objref (keyboard_listener);
        Bonobo_EventSource_addListener (keyboard, reference);

      </programlisting>
    </informalexample>

</para>

<para>
  The CORBA::any value passed to the listener function is defined by
  the contract between the EventSource's event you are using and you.
  To manipulate the value, you can use the CORBA DynAny interface to
  introspect the value and extract the information you need. 
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BONOBO-LISTENER-TYPE-CAPS">BONOBO_LISTENER_TYPE</title>
<programlisting>#define BONOBO_LISTENER_TYPE        (bonobo_listener_get_type ())
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-LISTENER-CAPS">BONOBO_LISTENER()</title>
<programlisting>#define BONOBO_LISTENER(o)          (GTK_CHECK_CAST ((o), BONOBO_LISTENER_TYPE, BonoboListener))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>o</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-IS-LISTENER-CAPS">BONOBO_IS_LISTENER()</title>
<programlisting>#define BONOBO_IS_LISTENER(o)       (GTK_CHECK_TYPE ((o), BONOBO_LISTENER_TYPE))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>o</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-LISTENER-CLASS-CAPS">BONOBO_LISTENER_CLASS()</title>
<programlisting>#define BONOBO_LISTENER_CLASS(k)    (GTK_CHECK_CLASS_CAST((k), BONOBO_LISTENER_TYPE, BonoboListenerClass))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>k</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-IS-LISTENER-CLASS-CAPS">BONOBO_IS_LISTENER_CLASS()</title>
<programlisting>#define BONOBO_IS_LISTENER_CLASS(k) (GTK_CHECK_CLASS_TYPE ((k), BONOBO_LISTENER_TYPE))
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>k</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BonoboListener">BonoboListener</title>
<programlisting>typedef struct {
        BonoboObject	       parent;

	BonoboListenerPrivate *priv;
} BonoboListener;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboListenerClass">BonoboListenerClass</title>
<programlisting>typedef struct {
	BonoboObjectClass parent_class;

	/* Signals */
	void (* event_notify) (BonoboListener    *listener, 
			       char              *event_name,
			       BonoboArg         *event_data, 
			       CORBA_Environment *ev);
} BonoboListenerClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboListenerCallbackFn">BonoboListenerCallbackFn ()</title>
<programlisting>void        (*BonoboListenerCallbackFn)     (<link linkend="BonoboListener">BonoboListener</link> *listener,
                                             char *event_name,
                                             <link linkend="CORBA-any">CORBA_any</link> *any,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
   The signature for the callback function invoked when an event is
   delivered to the BonoboListener object.  
</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry>a pointer to the BonoboListener.
</entry></row>
<row><entry align="right"><parameter>event_name</parameter>&nbsp;:</entry>
<entry>the event name that was emmited.
</entry></row>
<row><entry align="right"><parameter>any</parameter>&nbsp;:</entry>
<entry>The value (A CORBA Any) that was passed by the EventSource.
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry>Environment for returning CORBA errors. 
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>the data pointer specified when you called bonobo_listener_new


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-listener-new">bonobo_listener_new ()</title>
<programlisting><link linkend="BonoboListener">BonoboListener</link>* bonobo_listener_new         (<link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_callback,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>event_callback</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-listener-construct">bonobo_listener_construct ()</title>
<programlisting><link linkend="BonoboListener">BonoboListener</link>* bonobo_listener_construct   (<link linkend="BonoboListener">BonoboListener</link> *listener,
                                             <link linkend="Bonobo-Listener">Bonobo_Listener</link> corba_listener);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>corba_listener</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-listener-get-epv">bonobo_listener_get_epv ()</title>
<programlisting><link linkend="POA-Bonobo-Listener--epv">POA_Bonobo_Listener__epv</link>* bonobo_listener_get_epv
                                            (void);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-listener-corba-object-create">bonobo_listener_corba_object_create ()</title>
<programlisting><link linkend="Bonobo-Listener">Bonobo_Listener</link> bonobo_listener_corba_object_create
                                            (<link linkend="BonoboObject">BonoboObject</link> *object);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
   <link linkend="BonoboEventSource">BonoboEventSource</link>
</para>
</refsect1>

</refentry>
