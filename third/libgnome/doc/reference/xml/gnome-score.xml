<refentry id="libgnome-gnome-score">
<refmeta>
<refentrytitle>gnome-score</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-score</refname><refpurpose>Tracking best scores for games</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;libgnome/libgnome.h&gt;


<link linkend="gint">gint</link>        <link linkend="gnome-score-init">gnome_score_init</link>                (const <link linkend="gchar">gchar</link> *gamename);
<link linkend="gint">gint</link>        <link linkend="gnome-score-log">gnome_score_log</link>                 (<link linkend="gfloat">gfloat</link> score,
                                             const <link linkend="gchar">gchar</link> *level,
                                             <link linkend="gboolean">gboolean</link> higher_to_lower_score_order);
<link linkend="gint">gint</link>        <link linkend="gnome-score-get-notable">gnome_score_get_notable</link>         (const <link linkend="gchar">gchar</link> *gamename,
                                             const <link linkend="gchar">gchar</link> *level,
                                             <link linkend="gchar">gchar</link> ***names,
                                             <link linkend="gfloat">gfloat</link> **scores,
                                             <link linkend="time-t">time_t</link> **scoretimes);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
The routines in this module provide a simple way to keep track of users' scores
in a game.
</para>
<para>
In order to acommodate file ownership permissions, the game application should
be installed setgid <wordasword>games</wordasword> and the scoretable should
only be writable by the <wordasword>games</wordasword> group. The program
should call <link linkend="gnome-score-init"><function>gnome_score_init()</function></link> as soon as possible inside the <link linkend="main"><function>main()</function></link> routine.
This will open a pair of pipes to a child process which can read and write the
score table and then will drop the group privileges of the main program back to
the user's normal group id.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-score-init"/>gnome_score_init ()</title>
<indexterm><primary>gnome_score_init</primary></indexterm><programlisting><link linkend="gint">gint</link>        gnome_score_init                (const <link linkend="gchar">gchar</link> *gamename);</programlisting>
<warning><para><literal>gnome_score_init</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
GNOME games should call this routine as the first statement
in <link linkend="main"><function>main()</function></link> if they have been installed setgid to the "games" group. It
performs the intialization required to later record information in the
scores table and then drops the groups privileges.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gamename</parameter>&nbsp;:</term>
<listitem><simpara> Identifies the game name.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>0</literal> on success, returns <literal>-1</literal> on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-score-log"/>gnome_score_log ()</title>
<indexterm><primary>gnome_score_log</primary></indexterm><programlisting><link linkend="gint">gint</link>        gnome_score_log                 (<link linkend="gfloat">gfloat</link> score,
                                             const <link linkend="gchar">gchar</link> *level,
                                             <link linkend="gboolean">gboolean</link> higher_to_lower_score_order);</programlisting>
<warning><para><literal>gnome_score_log</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Logs a score entry for the user. You should call this every time a game
ends.  This function takes care of working out whether the user's score made
it into the ten best scores and, if so, records it in the table.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>score</parameter>&nbsp;:</term>
<listitem><simpara> The score achieved by the user in this game
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara> The level on which the score was obtained
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>higher_to_lower_score_order</parameter>&nbsp;:</term>
<listitem><simpara> Set to <literal>TRUE</literal> if high scores are better than
low scores.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>0</literal> on failure or the status from the gnome-score helper
program.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-score-get-notable"/>gnome_score_get_notable ()</title>
<indexterm><primary>gnome_score_get_notable</primary></indexterm><programlisting><link linkend="gint">gint</link>        gnome_score_get_notable         (const <link linkend="gchar">gchar</link> *gamename,
                                             const <link linkend="gchar">gchar</link> *level,
                                             <link linkend="gchar">gchar</link> ***names,
                                             <link linkend="gfloat">gfloat</link> **scores,
                                             <link linkend="time-t">time_t</link> **scoretimes);</programlisting>
<warning><para><literal>gnome_score_get_notable</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Fetches the most notable players on <parameter>gamename</parameter> at level <parameter>level</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gamename</parameter>&nbsp;:</term>
<listitem><simpara>   The name of the game we want to fetch information from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara>      The level for which we want to pull information.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>names</parameter>&nbsp;:</term>
<listitem><simpara>      An array of strings is returned at the address pointed here
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scores</parameter>&nbsp;:</term>
<listitem><simpara>     An array of gfloats is returned at the address pointed here
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scoretimes</parameter>&nbsp;:</term>
<listitem><simpara> An array of time_t is returned at the address pointed here
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The number of scores returned.  The <parameter>names</parameter>, <parameter>scores</parameter> and <parameter>scoretime</parameter>
pointers point to regions that were allocated with <link linkend="g-malloc"><function>g_malloc()</function></link> with the
contents.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
