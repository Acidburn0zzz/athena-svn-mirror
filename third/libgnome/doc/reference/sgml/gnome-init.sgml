<refentry id="libgnome-gnome-init">
<refmeta>
<refentrytitle>gnome-init</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-init</refname><refpurpose>Functions used during initialisation of libgnome and other platform libraries.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;libgnome/libgnome.h&gt;



#define     <link linkend="LIBGNOME-MODULE-CAPS">LIBGNOME_MODULE</link>

const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link>* <link linkend="libgnome-module-info-get">libgnome_module_info_get</link>
                                            (void);
const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link>* <link linkend="gnome-bonobo-module-info-get">gnome_bonobo_module_info_get</link>
                                            (void);

const char* <link linkend="gnome-user-dir-get">gnome_user_dir_get</link>              (void);
const char* <link linkend="gnome-user-private-dir-get">gnome_user_private_dir_get</link>      (void);
const char* <link linkend="gnome-user-accels-dir-get">gnome_user_accels_dir_get</link>       (void);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="LIBGNOME-MODULE-CAPS">LIBGNOME_MODULE</title>
<programlisting>#define LIBGNOME_MODULE libgnome_module_info_get()
</programlisting>
<para>
This macro wraps the call to <link linkend="libgnome-module-info-get">libgnome_module_info_get</link>() and is the usual way of
retrieving the <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> returned by this function.
</para></refsect2>
<refsect2>
<title><anchor id="libgnome-module-info-get">libgnome_module_info_get ()</title>
<programlisting>const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link>* libgnome_module_info_get
                                            (void);</programlisting>
<para>
Retrieves the current libgnome version and the modules it depends on.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> structure describing the version and
the versions of the dependents.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-bonobo-module-info-get">gnome_bonobo_module_info_get ()</title>
<programlisting>const <link linkend="GnomeModuleInfo">GnomeModuleInfo</link>* gnome_bonobo_module_info_get
                                            (void);</programlisting>
<para>
Retrieves the bonobo module version and indicate that it requires the current
libgnome and its dependencies (although libbonobo does not depend on
libgnome, libbonoboui does and this will also be initialised when
initialising a GNOME app).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new <link linkend="GnomeModuleInfo">GnomeModuleInfo</link> structure describing the version of the
bonobo modules and its dependents.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-user-dir-get">gnome_user_dir_get ()</title>
<programlisting>const char* gnome_user_dir_get              (void);</programlisting>
<para>
Retrieves the user-specific directory for GNOME apps to use ($HOME/.gnome2
is the usual GNOME 2 value).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> An absolute path to the directory.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-user-private-dir-get">gnome_user_private_dir_get ()</title>
<programlisting>const char* gnome_user_private_dir_get      (void);</programlisting>
<para>
Differs from <link linkend="gnome-user-dir-get">gnome_user_dir_get</link>() in that the directory returned here will
have had permissions of 0700 (rwx------) enforced when it was created.  Of
course, the permissions may have been altered since creation, so care still
needs to be taken.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> An absolute path to the user-specific private directory that GNOME
apps can use.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-user-accels-dir-get">gnome_user_accels_dir_get ()</title>
<programlisting>const char* gnome_user_accels_dir_get       (void);</programlisting>
<para>
Retrieves the user-specific directory that stores the keyboard shortcut files
for each GNOME app. Note that most applications should be using GConf for
storing this information, but it may be necessary to use the
<link linkend="gnome-user-accels-dir-get">gnome_user_accels_dir_get</link>() directory for legacy applications.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The absolute path to the directory.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
