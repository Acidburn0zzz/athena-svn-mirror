<refentry id="libgnome-gnome-url">
<refmeta>
<refentrytitle>gnome-url</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-url</refname><refpurpose>Display urls using appropriate viewers.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;libgnome/libgnome.h&gt;


enum        <link linkend="GnomeURLError">GnomeURLError</link>;
#define     <link linkend="GNOME-URL-ERROR-CAPS">GNOME_URL_ERROR</link>
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-url-show">gnome_url_show</link>                  (const char *url,
                                             <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-url-show-with-env">gnome_url_show_with_env</link>         (const char *url,
                                             char **envp,
                                             <link linkend="GError">GError</link> **error);

</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
A GNOME user can configure which viewers they wish to use to view certain
protocols. Protocols can include http, ftp (where "view" might mean
"download"), ghelp, etc. This module provides a means for application to
display a url without having to worry about which viewer is going to ultimately
handle the job.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeURLError">enum GnomeURLError</title>
<programlisting>typedef enum {
  GNOME_URL_ERROR_PARSE
} GnomeURLError;
</programlisting>
<para>
The errors that can be returned due to bad parameters being pass to
<link linkend="gnome-url-show">gnome_url_show</link>().</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>GNOME_URL_ERROR_PARSE</literal></term>
<listitem><simpara> The parsing of the handler failed.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-URL-ERROR-CAPS">GNOME_URL_ERROR</title>
<programlisting>#define GNOME_URL_ERROR (gnome_url_error_quark ())
</programlisting>
<para>
The class (domain) of errors raised by this module.
</para></refsect2>
<refsect2>
<title><anchor id="gnome-url-show">gnome_url_show ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_url_show                  (const char *url,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Displays the given URL in an appropriate viewer. The appropriate viewer is
user definable. It is determined by extracting the protocol from the <parameter>url</parameter>,
then seeing if the /desktop/gnome/url-handlers/&lt;protocol&gt;/command key
exists in the configuration database. It it does, this entry is used as the
template for the command. 
</para>
<para>
If no protocol specific handler exists, the
/desktop/gnome/url-handlers/unknown/command key is used to determine the
viewer.
</para>
<para>
Once a viewer is determined, it is called with the <parameter>url</parameter> as a parameter. If
any errors occur, they are returned in the <parameter>error</parameter> parameter. These errors
will either be in the <literal>GNOME_URL_ERROR</literal>, <literal>GNOME_SHELL_ERROR</literal>, or
<literal>G_SPAWN_ERROR</literal> domains.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>url</parameter>&nbsp;:</term>
<listitem><simpara> The url to display. Should begin with the protocol to use (e.g.
"http:", "ghelp:", etc)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to store any errors that result from trying to display the <parameter>url</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if everything went fine, <literal>FALSE</literal> otherwise (in which case
<parameter>error</parameter> will contain the actual error).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-url-show-with-env">gnome_url_show_with_env ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_url_show_with_env         (const char *url,
                                             char **envp,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Like <link linkend="gnome-url-show">gnome_url_show</link>(), but the the contents of <parameter>envp</parameter>
will become the url viewer's environment rather than inheriting
from the parents environment.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>url</parameter>&nbsp;:</term>
<listitem><simpara> The url to display. Should begin with the protocol to use (e.g.
"http:", "ghelp:", etc)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>envp</parameter>&nbsp;:</term>
<listitem><simpara> child's environment, or <literal>NULL</literal> to inherit parent's.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> Used to store any errors that result from trying to display the <parameter>url</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if everything went fine, <literal>FALSE</literal> otherwise (in which case
<parameter>error</parameter> will contain the actual error).
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
