<refentry id="libbonoboui-bonobo-ui-engine">
<refmeta>
<refentrytitle>BonoboUIEngine</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBOUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboUIEngine</refname><refpurpose>The guts of the UI handler</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<anchor id="BonoboUIEngine"/>
<synopsis>



struct      <link linkend="BonoboUIEngine-struct">BonoboUIEngine</link>;
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-deregister-dead-components">bonobo_ui_engine_deregister_dead_components</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-deregister-component-by-ref">bonobo_ui_engine_deregister_component_by_ref</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> ref);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-deregister-component">bonobo_ui_engine_deregister_component</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *name);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-register-component">bonobo_ui_engine_register_component</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *name,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> component);
<link linkend="GList">GList</link>*      <link linkend="bonobo-ui-engine-get-component-names">bonobo_ui_engine_get_component_names</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> <link linkend="bonobo-ui-engine-get-component">bonobo_ui_engine_get_component</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *name);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-config-set-path">bonobo_ui_engine_config_set_path</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path);
const <link linkend="char">char</link>* <link linkend="bonobo-ui-engine-config-get-path">bonobo_ui_engine_config_get_path</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-set-ui-container">bonobo_ui_engine_set_ui_container</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUIContainer">BonoboUIContainer</link> *ui_container);
<link linkend="BonoboUIContainer">BonoboUIContainer</link>* <link linkend="bonobo-ui-engine-get-ui-container">bonobo_ui_engine_get_ui_container</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-freeze">bonobo_ui_engine_freeze</link>         (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-thaw">bonobo_ui_engine_thaw</link>           (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-update">bonobo_ui_engine_update</link>         (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
enum        <link linkend="BonoboUIError">BonoboUIError</link>;
struct      <link linkend="BonoboUIEnginePrivate">BonoboUIEnginePrivate</link>;
struct      <link linkend="BonoboUIEngineClass">BonoboUIEngineClass</link>;
<link linkend="BonoboUIEngine">BonoboUIEngine</link>* <link linkend="bonobo-ui-engine-construct">bonobo_ui_engine_construct</link>  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GObject">GObject</link> *view);
<link linkend="BonoboUIEngine">BonoboUIEngine</link>* <link linkend="bonobo-ui-engine-new">bonobo_ui_engine_new</link>        (<link linkend="GObject">GObject</link> *view);
<link linkend="GObject">GObject</link>*    <link linkend="bonobo-ui-engine-get-view">bonobo_ui_engine_get_view</link>       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-add-sync">bonobo_ui_engine_add_sync</link>       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUISync">BonoboUISync</link> *sync);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-remove-sync">bonobo_ui_engine_remove_sync</link>    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUISync">BonoboUISync</link> *sync);
<link linkend="GSList">GSList</link>*     <link linkend="bonobo-ui-engine-get-syncs">bonobo_ui_engine_get_syncs</link>      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-update-node">bonobo_ui_engine_update_node</link>    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUISync">BonoboUISync</link> *sync,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-queue-update">bonobo_ui_engine_queue_update</link>   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *cmd_node);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="bonobo-ui-engine-build-control">bonobo_ui_engine_build_control</link>  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-engine-widget-get-node">bonobo_ui_engine_widget_get_node</link>
                                            (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-widget-set-node">bonobo_ui_engine_widget_set_node</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="BonoboUIError">BonoboUIError</link> <link linkend="bonobo-ui-engine-xml-set-prop">bonobo_ui_engine_xml_set_prop</link> (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             const <link linkend="char">char</link> *property,
                                             const <link linkend="char">char</link> *value,
                                             const <link linkend="char">char</link> *component);
<link linkend="CORBA-char">CORBA_char</link>* <link linkend="bonobo-ui-engine-xml-get-prop">bonobo_ui_engine_xml_get_prop</link>   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             const <link linkend="char">char</link> *prop,
                                             <link linkend="gboolean">gboolean</link> *invalid_path);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-prune-widget-info">bonobo_ui_engine_prune_widget_info</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> save_custom);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-engine-get-path">bonobo_ui_engine_get_path</link>     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-dirty-tree">bonobo_ui_engine_dirty_tree</link>     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-clean-tree">bonobo_ui_engine_clean_tree</link>     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-dump">bonobo_ui_engine_dump</link>           (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="FILE-CAPS">FILE</link> *out,
                                             const <link linkend="char">char</link> *msg);
<link linkend="CORBA-Object">CORBA_Object</link> <link linkend="bonobo-ui-engine-node-get-object">bonobo_ui_engine_node_get_object</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-ui-engine-node-is-dirty">bonobo_ui_engine_node_is_dirty</link>  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="bonobo-ui-engine-node-get-widget">bonobo_ui_engine_node_get_widget</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
const <link linkend="char">char</link>* <link linkend="bonobo-ui-engine-node-get-id">bonobo_ui_engine_node_get_id</link>    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-engine-get-cmd-node">bonobo_ui_engine_get_cmd_node</link> (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *from_node);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-node-set-dirty">bonobo_ui_engine_node_set_dirty</link> (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> dirty);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-stamp-custom">bonobo_ui_engine_stamp_custom</link>   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-widget-set">bonobo_ui_engine_widget_set</link>     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-stamp-root">bonobo_ui_engine_stamp_root</link>     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-add-hint">bonobo_ui_engine_add_hint</link>       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *str);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-remove-hint">bonobo_ui_engine_remove_hint</link>    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-emit-verb-on">bonobo_ui_engine_emit_verb_on</link>   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-emit-event-on">bonobo_ui_engine_emit_event_on</link>  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const <link linkend="char">char</link> *state);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-emit-verb-on-w">bonobo_ui_engine_emit_verb_on_w</link> (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-emit-event-on-w">bonobo_ui_engine_emit_event_on_w</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             const <link linkend="char">char</link> *state);
<link linkend="char">char</link>*       <link linkend="bonobo-ui-engine-get-attr">bonobo_ui_engine_get_attr</link>       (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *cmd_node,
                                             const <link linkend="char">char</link> *attr);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-widget-attach-node">bonobo_ui_engine_widget_attach_node</link>
                                            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="CORBA-char">CORBA_char</link>* <link linkend="bonobo-ui-engine-xml-get">bonobo_ui_engine_xml_get</link>        (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="gboolean">gboolean</link> node_only);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-ui-engine-xml-node-exists">bonobo_ui_engine_xml_node_exists</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path);
<link linkend="BonoboUIError">BonoboUIError</link> <link linkend="bonobo-ui-engine-xml-merge-tree">bonobo_ui_engine_xml_merge_tree</link>
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *tree,
                                             const <link linkend="char">char</link> *component);
<link linkend="BonoboUIError">BonoboUIError</link> <link linkend="bonobo-ui-engine-xml-rm">bonobo_ui_engine_xml_rm</link>       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             const <link linkend="char">char</link> *by_component);
<link linkend="BonoboUIError">BonoboUIError</link> <link linkend="bonobo-ui-engine-object-set">bonobo_ui_engine_object_set</link>   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="BonoboUIError">BonoboUIError</link> <link linkend="bonobo-ui-engine-object-get">bonobo_ui_engine_object_get</link>   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> *object,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-exec-verb">bonobo_ui_engine_exec_verb</link>      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="CORBA-char">CORBA_char</link> *cname,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>        <link linkend="bonobo-ui-engine-ui-event">bonobo_ui_engine_ui_event</link>       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="CORBA-char">CORBA_char</link> *id,
                                             const <link linkend="Bonobo-UIComponent-EventType">Bonobo_UIComponent_EventType</link> type,
                                             const <link linkend="CORBA-char">CORBA_char</link> *state,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----BonoboUIEngine
</synopsis>

</refsect1>






<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="BonoboUIEngine-add-hint">add-hint</link>&quot;  <link linkend="void">void</link>        user_function      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gchar">gchar</link> *arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="BonoboUIEngine-destroy">destroy</link>&quot;   <link linkend="void">void</link>        user_function      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="BonoboUIEngine-emit-event-on">emit-event-on</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gchar">gchar</link> *arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="BonoboUIEngine-emit-verb-on">emit-verb-on</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="BonoboUIEngine-remove-hint">remove-hint</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>
The Bonobo UI code as exposed through the <link linkend="BonoboWindow"><type>BonoboWindow</type></link>,
<link linkend="BonoboUIComponent"><type>BonoboUIComponent</type></link> and <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> API's use the
BonoboUIEngine. The Engine effectively maintains a
<link linkend="BonoboUIXml"><type>BonoboUIXml</type></link> tree internaly, and a list of <link linkend="BonoboUISync"><type>BonoboUISync</type></link>
synchronizers that, when the tree changes are used to
re-sync the associated widgets with the XML model.
</para>

<para>
The Engine can be tweaked by getting its pointer from an
associated BonoboWindow eg. this can be useful for setting
the configuration path. To allow a BonoboWindow to be
configurable you need to do:
  <example>
    <title>How to make your UI user configurable</title>
    <programlisting>
bonobo_ui_engine_config_set_path (
	bonobo_window_get_ui_engine (win),
	"/my-application-name/UIConfig/kvps");
    </programlisting>
  </example>
  where "UIConfig/kvps" is some convenient path into your
gnome_config file.
</para>
<para>
Key value pairs (kvps) are stored in
this, mangled into a comma delimited string and these are
used to clobber the XML on merges, eg.
  <example>
    <title>User configuration format</title>
    <programlisting>
[UIConfig]
kvps=/Toolbar:look:both
    </programlisting>
  </example>
  inside your ~/.gnome/my-application-name file, will
ensure that whenever the item with path '/Toolbar' is
modified the 'look="both"' attribute will be stamped
onto it, effecively forcing a certain look.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboUIEngine-struct"/>struct BonoboUIEngine</title>
<indexterm><primary>BonoboUIEngine</primary></indexterm><programlisting>struct BonoboUIEngine;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-deregister-dead-components"/>bonobo_ui_engine_deregister_dead_components ()</title>
<indexterm><primary>bonobo_ui_engine_deregister_dead_components</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_deregister_dead_components
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>
Detect any components that have died and deregister
them - unmerging their UI elements.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-deregister-component-by-ref"/>bonobo_ui_engine_deregister_component_by_ref ()</title>
<indexterm><primary>bonobo_ui_engine_deregister_component_by_ref</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_deregister_component_by_ref
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> ref);</programlisting>
<para>
Deregisters component with reference <parameter>ref</parameter> from <parameter>engine</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ref</parameter>&nbsp;:</term>
<listitem><simpara> the ref.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-deregister-component"/>bonobo_ui_engine_deregister_component ()</title>
<indexterm><primary>bonobo_ui_engine_deregister_component</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_deregister_component
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *name);</programlisting>
<para>
Deregisters component of <parameter>name</parameter> from <parameter>engine</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the component name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-register-component"/>bonobo_ui_engine_register_component ()</title>
<indexterm><primary>bonobo_ui_engine_register_component</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_register_component
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *name,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> component);</programlisting>
<para>
Registers <parameter>component</parameter> with <parameter>engine</parameter> by <parameter>name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a name to associate a component with
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component</parameter>&nbsp;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-component-names"/>bonobo_ui_engine_get_component_names ()</title>
<indexterm><primary>bonobo_ui_engine_get_component_names</primary></indexterm><programlisting><link linkend="GList">GList</link>*      bonobo_ui_engine_get_component_names
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the names of all registered components
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-component"/>bonobo_ui_engine_get_component ()</title>
<indexterm><primary>bonobo_ui_engine_get_component</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link> bonobo_ui_engine_get_component
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the component to fetch
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the component with name <parameter>name</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-config-set-path"/>bonobo_ui_engine_config_set_path ()</title>
<indexterm><primary>bonobo_ui_engine_config_set_path</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_config_set_path
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-config-get-path"/>bonobo_ui_engine_config_get_path ()</title>
<indexterm><primary>bonobo_ui_engine_config_get_path</primary></indexterm><programlisting>const <link linkend="char">char</link>* bonobo_ui_engine_config_get_path
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-set-ui-container"/>bonobo_ui_engine_set_ui_container ()</title>
<indexterm><primary>bonobo_ui_engine_set_ui_container</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_set_ui_container
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUIContainer">BonoboUIContainer</link> *ui_container);</programlisting>
<para>
Associates a given UI Container with this BonoboUIEngine.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ui_container</parameter>&nbsp;:</term>
<listitem><simpara> a UI Container bonobo object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-ui-container"/>bonobo_ui_engine_get_ui_container ()</title>
<indexterm><primary>bonobo_ui_engine_get_ui_container</primary></indexterm><programlisting><link linkend="BonoboUIContainer">BonoboUIContainer</link>* bonobo_ui_engine_get_ui_container
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>
Fetches the associated UI Container</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the associated UI container.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-freeze"/>bonobo_ui_engine_freeze ()</title>
<indexterm role="deprecated"><primary>bonobo_ui_engine_freeze</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_freeze         (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<warning><para><literal>bonobo_ui_engine_freeze</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This increments the freeze count on the tree, while
this count &gt; 0 no syncronization between the internal
XML model and the widget views occurs. This means that
many simple merges can be glupped together with little
performance impact and overhead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-thaw"/>bonobo_ui_engine_thaw ()</title>
<indexterm role="deprecated"><primary>bonobo_ui_engine_thaw</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_thaw           (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<warning><para><literal>bonobo_ui_engine_thaw</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This decrements the freeze count and if it is 0
causes the UI widgets to be re-synched with the
XML model, see also bonobo_ui_engine_freeze</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-update"/>bonobo_ui_engine_update ()</title>
<indexterm role="deprecated"><primary>bonobo_ui_engine_update</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_update         (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<warning><para><literal>bonobo_ui_engine_update</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is called to update the entire
UI model synchronizing any changes in it with
the widget tree where neccessary</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BonoboUIError"/>enum BonoboUIError</title>
<indexterm><primary>BonoboUIError</primary></indexterm><programlisting>typedef enum {
	BONOBO_UI_ERROR_OK = 0,
	BONOBO_UI_ERROR_BAD_PARAM,
	BONOBO_UI_ERROR_INVALID_PATH,
	BONOBO_UI_ERROR_INVALID_XML
} BonoboUIError;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboUIEnginePrivate"/>struct BonoboUIEnginePrivate</title>
<indexterm><primary>BonoboUIEnginePrivate</primary></indexterm><programlisting>struct BonoboUIEnginePrivate;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboUIEngineClass"/>struct BonoboUIEngineClass</title>
<indexterm><primary>BonoboUIEngineClass</primary></indexterm><programlisting>struct BonoboUIEngineClass {

	GObjectClass parent_class;

	/* Signals */
	void (*add_hint)      (BonoboUIEngine *engine,
			       const char     *str);
	void (*remove_hint)   (BonoboUIEngine *engine);

	void (*emit_verb_on)  (BonoboUIEngine *engine,
			       BonoboUINode   *node);

	void (*emit_event_on) (BonoboUIEngine *engine,
			       BonoboUINode   *node,
			       const char     *state);

	void (*destroy)       (BonoboUIEngine *engine);

};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-construct"/>bonobo_ui_engine_construct ()</title>
<indexterm><primary>bonobo_ui_engine_construct</primary></indexterm><programlisting><link linkend="BonoboUIEngine">BonoboUIEngine</link>* bonobo_ui_engine_construct  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GObject">GObject</link> *view);</programlisting>
<para>
Construct a new bonobo_ui_engine</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara> the view [ often a BonoboWindow ]
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the constructed engine.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-new"/>bonobo_ui_engine_new ()</title>
<indexterm><primary>bonobo_ui_engine_new</primary></indexterm><programlisting><link linkend="BonoboUIEngine">BonoboUIEngine</link>* bonobo_ui_engine_new        (<link linkend="GObject">GObject</link> *view);</programlisting>
<para>
Create a new <link linkend="BonoboUIEngine"><type>BonoboUIEngine</type></link> structure</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new UI Engine.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-view"/>bonobo_ui_engine_get_view ()</title>
<indexterm><primary>bonobo_ui_engine_get_view</primary></indexterm><programlisting><link linkend="GObject">GObject</link>*    bonobo_ui_engine_get_view       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>
This returns the associated view, often a BonoboWindow</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the view widget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-add-sync"/>bonobo_ui_engine_add_sync ()</title>
<indexterm><primary>bonobo_ui_engine_add_sync</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_add_sync       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUISync">BonoboUISync</link> *sync);</programlisting>
<para>
Add a <link linkend="BonoboUISync"><type>BonoboUISync</type></link> synchronizer to the engine</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the enginer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sync</parameter>&nbsp;:</term>
<listitem><simpara> the synchronizer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-remove-sync"/>bonobo_ui_engine_remove_sync ()</title>
<indexterm><primary>bonobo_ui_engine_remove_sync</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_remove_sync    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUISync">BonoboUISync</link> *sync);</programlisting>
<para>
Remove a specified <link linkend="BonoboUISync"><type>BonoboUISync</type></link> synchronizer from the engine</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sync</parameter>&nbsp;:</term>
<listitem><simpara> the sync
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-syncs"/>bonobo_ui_engine_get_syncs ()</title>
<indexterm><primary>bonobo_ui_engine_get_syncs</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*     bonobo_ui_engine_get_syncs      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>
Retrieve a list of available synchronizers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a GSList of <link linkend="BonoboUISync"><type>BonoboUISync</type></link> s
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-update-node"/>bonobo_ui_engine_update_node ()</title>
<indexterm><primary>bonobo_ui_engine_update_node</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_update_node    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUISync">BonoboUISync</link> *sync,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
This function is used to write recursive synchronizers
and is intended only for internal / privilaged use.
</para>
<para>
By the time this returns, due to re-enterancy, node
points at undefined memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sync</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node to start updating.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-queue-update"/>bonobo_ui_engine_queue_update ()</title>
<indexterm><primary>bonobo_ui_engine_queue_update</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_queue_update   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *cmd_node);</programlisting>
<para>
This function is used to queue a state update on
<parameter>widget</parameter>, essentialy transfering any state from the 
XML model into the widget view. This is queued to
avoid re-enterancy problems.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> the widget to update later
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cmd_node</parameter>&nbsp;:</term>
<listitem><simpara> the associated command's node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-build-control"/>bonobo_ui_engine_build_control ()</title>
<indexterm><primary>bonobo_ui_engine_build_control</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*  bonobo_ui_engine_build_control  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
A helper function for synchronizers, this creates a control
if possible from the node's associated object, stamps the
node as containing a control and sets its widget.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the control node.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a Control's GtkWidget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-widget-get-node"/>bonobo_ui_engine_widget_get_node ()</title>
<indexterm><primary>bonobo_ui_engine_widget_get_node</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_engine_widget_get_node
                                            (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> the widget
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the <link linkend="BonoboUINode"><type>BonoboUINode</type></link> associated with this widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-widget-set-node"/>bonobo_ui_engine_widget_set_node ()</title>
<indexterm><primary>bonobo_ui_engine_widget_set_node</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_widget_set_node
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Used internaly to associate a widget with a node,
some synchronisers need to be able to execute code
on widget creation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> the widget
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-xml-set-prop"/>bonobo_ui_engine_xml_set_prop ()</title>
<indexterm><primary>bonobo_ui_engine_xml_set_prop</primary></indexterm><programlisting><link linkend="BonoboUIError">BonoboUIError</link> bonobo_ui_engine_xml_set_prop (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             const <link linkend="char">char</link> *property,
                                             const <link linkend="char">char</link> *value,
                                             const <link linkend="char">char</link> *component);</programlisting>
<para>
This function sets the property of a node in the internal tree
representation at <parameter>path</parameter> in <parameter>engine</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property</parameter>&nbsp;:</term>
<listitem><simpara> The property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The new value of the property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component</parameter>&nbsp;:</term>
<listitem><simpara> the component ID associated with the nodes.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> flag on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-xml-get-prop"/>bonobo_ui_engine_xml_get_prop ()</title>
<indexterm><primary>bonobo_ui_engine_xml_get_prop</primary></indexterm><programlisting><link linkend="CORBA-char">CORBA_char</link>* bonobo_ui_engine_xml_get_prop   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             const <link linkend="char">char</link> *prop,
                                             <link linkend="gboolean">gboolean</link> *invalid_path);</programlisting>
<para>
This function fetches the property <parameter>prop</parameter> at node
at <parameter>path</parameter> in the internal structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&nbsp;:</term>
<listitem><simpara> The property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>invalid_path</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a CORBA allocated string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-prune-widget-info"/>bonobo_ui_engine_prune_widget_info ()</title>
<indexterm><primary>bonobo_ui_engine_prune_widget_info</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_prune_widget_info
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> save_custom);</programlisting>
<para>
This function destroys any widgets associated with
<parameter>node</parameter> and all its children, if <parameter>save_custom</parameter>, any widget
that is a custom widget ( such as a control ) will be
preserved. All widgets flagged ROOT are preserved always.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save_custom</parameter>&nbsp;:</term>
<listitem><simpara> whether to save custom widgets
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-path"/>bonobo_ui_engine_get_path ()</title>
<indexterm><primary>bonobo_ui_engine_get_path</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_engine_get_path     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path);</programlisting>
<para>
This routine gets a node from the internal XML tree
pointed at by <parameter>path</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the node.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-dirty-tree"/>bonobo_ui_engine_dirty_tree ()</title>
<indexterm><primary>bonobo_ui_engine_dirty_tree</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_dirty_tree     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Mark all the node's children as being dirty and needing
a re-synch with their widget views.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-clean-tree"/>bonobo_ui_engine_clean_tree ()</title>
<indexterm><primary>bonobo_ui_engine_clean_tree</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_clean_tree     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
This cleans the tree, marking the node and its children
as not needing a re-synch with their widget views.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-dump"/>bonobo_ui_engine_dump ()</title>
<indexterm><primary>bonobo_ui_engine_dump</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_dump           (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="FILE-CAPS">FILE</link> *out,
                                             const <link linkend="char">char</link> *msg);</programlisting>
<para>
This is a debugging function mostly for internal
and testing use, it dumps the XML tree, including
the assoicated, and overridden nodes in a wierd
hackish format to the <parameter>out</parameter> stream with the
helpful <parameter>msg</parameter> prepended.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> the FILE stream to dump to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> user visible message
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-node-get-object"/>bonobo_ui_engine_node_get_object ()</title>
<indexterm><primary>bonobo_ui_engine_node_get_object</primary></indexterm><programlisting><link linkend="CORBA-Object">CORBA_Object</link> bonobo_ui_engine_node_get_object
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the CORBA_Object associated with a <parameter>node</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-node-is-dirty"/>bonobo_ui_engine_node_is_dirty ()</title>
<indexterm><primary>bonobo_ui_engine_node_is_dirty</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    bonobo_ui_engine_node_is_dirty  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> whether the <parameter>node</parameter> is marked dirty
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-node-get-widget"/>bonobo_ui_engine_node_get_widget ()</title>
<indexterm><primary>bonobo_ui_engine_node_get_widget</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*  bonobo_ui_engine_node_get_widget
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Gets the widget associated with <parameter>node</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-node-get-id"/>bonobo_ui_engine_node_get_id ()</title>
<indexterm><primary>bonobo_ui_engine_node_get_id</primary></indexterm><programlisting>const <link linkend="char">char</link>* bonobo_ui_engine_node_get_id    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Each component has an associated textual id or name - see
bonobo_ui_engine_register_component</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the component id associated with the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-cmd-node"/>bonobo_ui_engine_get_cmd_node ()</title>
<indexterm><primary>bonobo_ui_engine_get_cmd_node</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_engine_get_cmd_node (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *from_node);</programlisting>
<para>
This function seeks the command node associated
with <parameter>from_node</parameter> in <parameter>engine</parameter> 's internal tree.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>from_node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the command node or NULL
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-node-set-dirty"/>bonobo_ui_engine_node_set_dirty ()</title>
<indexterm><primary>bonobo_ui_engine_node_set_dirty</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_node_set_dirty (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> dirty);</programlisting>
<para>
Set <parameter>node</parameter> s dirty bit to <parameter>dirty</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dirty</parameter>&nbsp;:</term>
<listitem><simpara> whether the node should be dirty.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-stamp-custom"/>bonobo_ui_engine_stamp_custom ()</title>
<indexterm><primary>bonobo_ui_engine_stamp_custom</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_stamp_custom   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Marks a node as containing a custom widget.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-widget-set"/>bonobo_ui_engine_widget_set ()</title>
<indexterm><primary>bonobo_ui_engine_widget_set</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_widget_set     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-stamp-root"/>bonobo_ui_engine_stamp_root ()</title>
<indexterm><primary>bonobo_ui_engine_stamp_root</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_stamp_root     (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This stamps <parameter>node</parameter> with <parameter>widget</parameter> which is marked as
being a ROOT node, so the engine will never destroy
it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> the root widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-add-hint"/>bonobo_ui_engine_add_hint ()</title>
<indexterm><primary>bonobo_ui_engine_add_hint</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_add_hint       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *str);</programlisting>
<para>
This fires the 'add_hint' signal.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> the hint string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-remove-hint"/>bonobo_ui_engine_remove_hint ()</title>
<indexterm><primary>bonobo_ui_engine_remove_hint</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_remove_hint    (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>
This fires the 'remove_hint' signal</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-emit-verb-on"/>bonobo_ui_engine_emit_verb_on ()</title>
<indexterm><primary>bonobo_ui_engine_emit_verb_on</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_emit_verb_on   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
This fires the 'emit_verb' signal</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-emit-event-on"/>bonobo_ui_engine_emit_event_on ()</title>
<indexterm><primary>bonobo_ui_engine_emit_event_on</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_emit_event_on  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const <link linkend="char">char</link> *state);</programlisting>
<para>
This fires the 'emit_event_on' signal</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> the new state of the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-emit-verb-on-w"/>bonobo_ui_engine_emit_verb_on_w ()</title>
<indexterm><primary>bonobo_ui_engine_emit_verb_on_w</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_emit_verb_on_w (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function looks up the node from <parameter>widget</parameter> and
emits the 'emit_verb_on' signal on that node.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> the widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-emit-event-on-w"/>bonobo_ui_engine_emit_event_on_w ()</title>
<indexterm><primary>bonobo_ui_engine_emit_event_on_w</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_emit_event_on_w
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             const <link linkend="char">char</link> *state);</programlisting>
<para>
This function looks up the node from <parameter>widget</parameter> and
emits the 'emit_event_on' signal on that node
passint <parameter>state</parameter> as the new state.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> the widget
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> the new state
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-get-attr"/>bonobo_ui_engine_get_attr ()</title>
<indexterm><primary>bonobo_ui_engine_get_attr</primary></indexterm><programlisting><link linkend="char">char</link>*       bonobo_ui_engine_get_attr       (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *cmd_node,
                                             const <link linkend="char">char</link> *attr);</programlisting>
<para>
This function is used to get node attributes in many
UI synchronizers, it first attempts to get the attribute
from <parameter>node</parameter>, and if this fails falls back to <parameter>cmd_node</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cmd_node</parameter>&nbsp;:</term>
<listitem><simpara> the command's node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> the attribute name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the attr or NULL if it doesn't exist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-widget-attach-node"/>bonobo_ui_engine_widget_attach_node ()</title>
<indexterm><primary>bonobo_ui_engine_widget_attach_node</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_widget_attach_node
                                            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Associate <parameter>node</parameter> with <parameter>widget</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&nbsp;:</term>
<listitem><simpara> the widget
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-xml-get"/>bonobo_ui_engine_xml_get ()</title>
<indexterm><primary>bonobo_ui_engine_xml_get</primary></indexterm><programlisting><link linkend="CORBA-char">CORBA_char</link>* bonobo_ui_engine_xml_get        (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="gboolean">gboolean</link> node_only);</programlisting>
<para>
This function fetches the node at <parameter>path</parameter> in the
internal structure, and if <parameter>node_only</parameter> dumps the
node to an XML string, otherwise it dumps it and
its children.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node_only</parameter>&nbsp;:</term>
<listitem><simpara> just the node, or children too.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the XML string - use CORBA_free to free
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-xml-node-exists"/>bonobo_ui_engine_xml_node_exists ()</title>
<indexterm><primary>bonobo_ui_engine_xml_node_exists</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    bonobo_ui_engine_xml_node_exists
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> true if the node at <parameter>path</parameter> exists
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-xml-merge-tree"/>bonobo_ui_engine_xml_merge_tree ()</title>
<indexterm><primary>bonobo_ui_engine_xml_merge_tree</primary></indexterm><programlisting><link linkend="BonoboUIError">BonoboUIError</link> bonobo_ui_engine_xml_merge_tree
                                            (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *tree,
                                             const <link linkend="char">char</link> *component);</programlisting>
<para>
This function merges the XML <parameter>tree</parameter> into the internal tree
representation as children of the node at <parameter>path</parameter> in <parameter>engine</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tree</parameter>&nbsp;:</term>
<listitem><simpara> the nodes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component</parameter>&nbsp;:</term>
<listitem><simpara> the component ID associated with these nodes.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> flag on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-xml-rm"/>bonobo_ui_engine_xml_rm ()</title>
<indexterm><primary>bonobo_ui_engine_xml_rm</primary></indexterm><programlisting><link linkend="BonoboUIError">BonoboUIError</link> bonobo_ui_engine_xml_rm       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             const <link linkend="char">char</link> *by_component);</programlisting>
<para>
Remove a chunk of the xml tree pointed at by <parameter>path</parameter>
in <parameter>engine</parameter>, if <parameter>by_component</parameter> then only remove items
associated with that component - possibly revealing
other overridden items.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>by_component</parameter>&nbsp;:</term>
<listitem><simpara> whether to remove elements from only a
specific component
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> flag on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-object-set"/>bonobo_ui_engine_object_set ()</title>
<indexterm><primary>bonobo_ui_engine_object_set</primary></indexterm><programlisting><link linkend="BonoboUIError">BonoboUIError</link> bonobo_ui_engine_object_set   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This associates a CORBA Object reference with a node
in the tree, most often this is done to insert a Control's
reference into a 'control' element.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> an object reference
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara> CORBA exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> flag if success
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-object-get"/>bonobo_ui_engine_object_get ()</title>
<indexterm><primary>bonobo_ui_engine_object_get</primary></indexterm><programlisting><link linkend="BonoboUIError">BonoboUIError</link> bonobo_ui_engine_object_get   (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="char">char</link> *path,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> *object,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This extracts a CORBA object reference associated with
the node at <parameter>path</parameter> in <parameter>engine</parameter>, and returns it in the
reference pointed to by <parameter>object</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path into the tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> an pointer to an object reference
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara> CORBA exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> flag if success
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-exec-verb"/>bonobo_ui_engine_exec_verb ()</title>
<indexterm><primary>bonobo_ui_engine_exec_verb</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_exec_verb      (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="CORBA-char">CORBA_char</link> *cname,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cname</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-engine-ui-event"/>bonobo_ui_engine_ui_event ()</title>
<indexterm><primary>bonobo_ui_engine_ui_event</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_ui_engine_ui_event       (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine,
                                             const <link linkend="CORBA-char">CORBA_char</link> *id,
                                             const <link linkend="Bonobo-UIComponent-EventType">Bonobo_UIComponent_EventType</link> type,
                                             const <link linkend="CORBA-char">CORBA_char</link> *state,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>engine</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="BonoboUIEngine-add-hint"/>The &quot;add-hint&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gchar">gchar</link> *arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bonobouiengine</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="BonoboUIEngine-destroy"/>The &quot;destroy&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bonobouiengine</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="BonoboUIEngine-emit-event-on"/>The &quot;emit-event-on&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gchar">gchar</link> *arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bonobouiengine</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="BonoboUIEngine-emit-verb-on"/>The &quot;emit-verb-on&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bonobouiengine</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="BonoboUIEngine-remove-hint"/>The &quot;remove-hint&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="BonoboUIEngine">BonoboUIEngine</link> *bonobouiengine,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bonobouiengine</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
