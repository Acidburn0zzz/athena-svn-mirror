<refentry id="AtkStateSet">
<refmeta>
<refentrytitle>AtkStateSet</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkStateSet</refname><refpurpose>An AtkStateSet determines a component's state set.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



<link linkend="AtkStateSet">AtkStateSet</link>* <link linkend="atk-state-set-new">atk_state_set_new</link>              (void);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-state-set-is-empty">atk_state_set_is_empty</link>          (<link linkend="AtkStateSet">AtkStateSet</link> *set);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-state-set-add-state">atk_state_set_add_state</link>         (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> type);
void        <link linkend="atk-state-set-add-states">atk_state_set_add_states</link>        (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> *types,
                                             <link linkend="gint">gint</link> n_types);
void        <link linkend="atk-state-set-clear-states">atk_state_set_clear_states</link>      (<link linkend="AtkStateSet">AtkStateSet</link> *set);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-state-set-contains-state">atk_state_set_contains_state</link>    (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> type);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-state-set-contains-states">atk_state_set_contains_states</link>   (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> *types,
                                             <link linkend="gint">gint</link> n_types);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-state-set-remove-state">atk_state_set_remove_state</link>      (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> type);
<link linkend="AtkStateSet">AtkStateSet</link>* <link linkend="atk-state-set-and-sets">atk_state_set_and_sets</link>         (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateSet">AtkStateSet</link> *compare_set);
<link linkend="AtkStateSet">AtkStateSet</link>* <link linkend="atk-state-set-or-sets">atk_state_set_or_sets</link>          (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateSet">AtkStateSet</link> *compare_set);
<link linkend="AtkStateSet">AtkStateSet</link>* <link linkend="atk-state-set-xor-sets">atk_state_set_xor_sets</link>         (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateSet">AtkStateSet</link> *compare_set);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
An AtkStateSet determines a component's state set. It is composed of a set 
of AtkStates.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="atk-state-set-new">atk_state_set_new ()</title>
<programlisting><link linkend="AtkStateSet">AtkStateSet</link>* atk_state_set_new              (void);</programlisting>
<para>
Creates a new empty state set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> a new <link linkend="AtkStateSet">AtkStateSet</link> 
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-is-empty">atk_state_set_is_empty ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_state_set_is_empty          (<link linkend="AtkStateSet">AtkStateSet</link> *set);</programlisting>
<para>
Checks whether the state set is empty, i.e. has no states set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateType">AtkStateType</link>
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> <literal>TRUE</literal> if <parameter>set</parameter> has no states set, otherwise <literal>FALSE</literal>
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-add-state">atk_state_set_add_state ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_state_set_add_state         (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> type);</programlisting>
<para>
Add a new state for the specified type to the current state set if
it is not already present.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateType">AtkStateType</link>
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> <literal>TRUE</literal> if  the state for <parameter>type</parameter> is not already in <parameter>set</parameter>.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-add-states">atk_state_set_add_states ()</title>
<programlisting>void        atk_state_set_add_states        (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> *types,
                                             <link linkend="gint">gint</link> n_types);</programlisting>
<para>
Add the states for the specified types to the current state set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>types</parameter>&nbsp;:</term>
<listitem><para> an array of <link linkend="AtkStateType">AtkStateType</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>n_types</parameter>&nbsp;:</term>
<listitem><para> The number of elements in the array
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-clear-states">atk_state_set_clear_states ()</title>
<programlisting>void        atk_state_set_clear_states      (<link linkend="AtkStateSet">AtkStateSet</link> *set);</programlisting>
<para>
Removes all states from the state set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-contains-state">atk_state_set_contains_state ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_state_set_contains_state    (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> type);</programlisting>
<para>
Checks whether the state for the specified type is in the specified set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateType">AtkStateType</link>
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> <literal>TRUE</literal> if <parameter>type</parameter> is the state type is in <parameter>set</parameter>.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-contains-states">atk_state_set_contains_states ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_state_set_contains_states   (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> *types,
                                             <link linkend="gint">gint</link> n_types);</programlisting>
<para>
Checks whether the states for all the specified types are in the 
specified set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>types</parameter>&nbsp;:</term>
<listitem><para> an array of <link linkend="AtkStateType">AtkStateType</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>n_types</parameter>&nbsp;:</term>
<listitem><para> The number of elements in the array
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> <literal>TRUE</literal> if all the states for <parameter>type</parameter> are in <parameter>set</parameter>.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-remove-state">atk_state_set_remove_state ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_state_set_remove_state      (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateType">AtkStateType</link> type);</programlisting>
<para>
Removes the state for the specified type from the state set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkType">AtkType</link>
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> <literal>TRUE</literal> if <parameter>type</parameter> was the state type is in <parameter>set</parameter>.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-and-sets">atk_state_set_and_sets ()</title>
<programlisting><link linkend="AtkStateSet">AtkStateSet</link>* atk_state_set_and_sets         (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateSet">AtkStateSet</link> *compare_set);</programlisting>
<para>
Constructs the intersection of the two sets, returning <literal>NULL</literal> if the
intersection is empty.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>compare_set</parameter>&nbsp;:</term>
<listitem><para> another <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> a new <link linkend="AtkStateSet">AtkStateSet</link> which is the intersection of the two sets.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-or-sets">atk_state_set_or_sets ()</title>
<programlisting><link linkend="AtkStateSet">AtkStateSet</link>* atk_state_set_or_sets          (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateSet">AtkStateSet</link> *compare_set);</programlisting>
<para>
Constructs the union of the two sets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>compare_set</parameter>&nbsp;:</term>
<listitem><para> another <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> a new <link linkend="AtkStateSet">AtkStateSet</link> which is the union of the two sets,
returning <literal>NULL</literal> is empty.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-state-set-xor-sets">atk_state_set_xor_sets ()</title>
<programlisting><link linkend="AtkStateSet">AtkStateSet</link>* atk_state_set_xor_sets         (<link linkend="AtkStateSet">AtkStateSet</link> *set,
                                             <link linkend="AtkStateSet">AtkStateSet</link> *compare_set);</programlisting>
<para>
Constructs the exclusive-or of the two sets, returning <literal>NULL</literal> is empty.
The set returned by this operation contains the states in exactly
one of the two sets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>set</parameter>&nbsp;:</term>
<listitem><para> an <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><parameter>compare_set</parameter>&nbsp;:</term>
<listitem><para> another <link linkend="AtkStateSet">AtkStateSet</link>
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para> a new <link linkend="AtkStateSet">AtkStateSet</link> which contains the states which are 
in exactly one of the two sets.
</para></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
