<refentry id="libbonobo-bonobo-generic-factory">
<refmeta>
<refentrytitle>BonoboGenericFactory</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboGenericFactory</refname><refpurpose>The basic, generic Bonobo object factory implementation</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="BonoboObject">BonoboObject</link>* (<link linkend="BonoboFactoryCallback">*BonoboFactoryCallback</link>)      (<link linkend="BonoboGenericFactory">BonoboGenericFactory</link> *factory,
                                             const <link linkend="char">char</link> *component_id,
                                             <link linkend="gpointer">gpointer</link> closure);
<link linkend="BonoboGenericFactory">BonoboGenericFactory</link>* <link linkend="bonobo-generic-factory-new">bonobo_generic_factory_new</link>
                                            (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="BonoboFactoryCallback">BonoboFactoryCallback</link> factory_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="BonoboGenericFactory">BonoboGenericFactory</link>* <link linkend="bonobo-generic-factory-new-closure">bonobo_generic_factory_new_closure</link>
                                            (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="GClosure">GClosure</link> *factory_closure);
<link linkend="BonoboGenericFactory">BonoboGenericFactory</link>* <link linkend="bonobo-generic-factory-construct">bonobo_generic_factory_construct</link>
                                            (<link linkend="BonoboGenericFactory">BonoboGenericFactory</link> *factory,
                                             const <link linkend="char">char</link> *act_iid,
                                             <link linkend="GClosure">GClosure</link> *factory_closure);
<link linkend="void">void</link>        <link linkend="bonobo-generic-factory-construct-noreg">bonobo_generic_factory_construct_noreg</link>
                                            (<link linkend="BonoboGenericFactory">BonoboGenericFactory</link> *factory,
                                             const <link linkend="char">char</link> *act_iid,
                                             <link linkend="GClosure">GClosure</link> *factory_closure);
<link linkend="int">int</link>         <link linkend="bonobo-generic-factory-main">bonobo_generic_factory_main</link>     (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="BonoboFactoryCallback">BonoboFactoryCallback</link> factory_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="int">int</link>         <link linkend="bonobo-generic-factory-main-timeout">bonobo_generic_factory_main_timeout</link>
                                            (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="BonoboFactoryCallback">BonoboFactoryCallback</link> factory_cb,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="guint">guint</link> quit_timeout);
#define     <link linkend="BONOBO-FACTORY-INIT-CAPS">BONOBO_FACTORY_INIT</link>             (descr, version, argcp, argv)
#define     <link linkend="BONOBO-OAF-FACTORY-CAPS">BONOBO_OAF_FACTORY</link>              (oafiid, descr, version, callback, data)
#define     <link linkend="BONOBO-OAF-FACTORY-MULTI-CAPS">BONOBO_OAF_FACTORY_MULTI</link>        (oafiid, descr, version, callback, data)
#define     <link linkend="BONOBO-ACTIVATION-FACTORY-CAPS">BONOBO_ACTIVATION_FACTORY</link>       (oafiid, descr, version, callback, data)
#define     <link linkend="BONOBO-ACTIVATION-FACTORY-TIMEOUT-CAPS">BONOBO_ACTIVATION_FACTORY_TIMEOUT</link>(oafiid, descr, version, callback, data, quit_timeout)


</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
The vast majority of Bonobo objects are created by the
<link linkend="BonoboGenericFactory"><type>BonoboGenericFactory</type></link> implementation. This provides a
very simple C sugar wrapper of the GNOME::ObjectFactory
IDL interface, used by OAF to instantiate new objects.
</para>

<para>
Most applications when they start up will register their
Bonobo object factory with OAF, this can be done like this:
  <example>
    <title>How to register a factory with OAF</title>
    <programlisting>
BonoboGenericFactory *factory;

factory = bonobo_generic_factory_new (
	"OAFIID:GNOME_MyApp_myId",
	my_factory_function, NULL);
bonobo_running_context_auto_exit_unref (BONOBO_OBJECT (factory));
    </programlisting>
  </example>
  This registers the factory with OAF, associated with your
factory's OAFIID ( as specified in the installed .oaf file ).
The running_context_auto_exit_unref function is used to ensure
that the program exits the gtk main loop when all of the factory's
( or any derived ) objects are destroyed.
</para>
<para>
When an object that is created by your factory is demanded from
OAF the my_factory_function will be called:
  <example>
    <title>A simple factory</title>
    <programlisting>
static BonoboObject *
my_factory_fn (BonoboGenericFactory *this,
               const char           *object_id,
               void                 *data)
{
	BonoboObject *object = NULL;
	
	g_return_val_if_fail (object_id != NULL, NULL);

	if (!strcmp (object_id, "OAFIID:Bonobo_Sample_Clock"))
		object = <link linkend="bonobo-clock-control-new"><function>bonobo_clock_control_new()</function></link>;
	else
		g_warning ("Unknown OAFIID '<literal>s</literal>'", object_id);

	return object;
}
     </programlisting>
  </example>
  This will return the newly constructed object via OAF to
the Object requestor.
</para>

<para>
There is a macro that can be used for simple components to remove the
burden of writing the main function and getting the initialization
correct, see <link linkend="BONOBO-ACTIVATION-FACTORY-CAPS"><type>BONOBO_ACTIVATION_FACTORY</type></link>.  </para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboFactoryCallback"/>BonoboFactoryCallback ()</title>
<indexterm><primary>BonoboFactoryCallback</primary></indexterm><programlisting><link linkend="BonoboObject">BonoboObject</link>* (*BonoboFactoryCallback)      (<link linkend="BonoboGenericFactory">BonoboGenericFactory</link> *factory,
                                             const <link linkend="char">char</link> *component_id,
                                             <link linkend="gpointer">gpointer</link> closure);</programlisting>
<para>
Type of function that is called when it's time for the factory to create a new instance.
</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara>the factory that invoked this callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component_id</parameter>&nbsp;:</term>
<listitem><simpara>OAFIID of the component that should be activated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&nbsp;:</term>
<listitem><simpara>user data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the newly created <link linkend="BonoboObject"><type>BonoboObject</type></link>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-generic-factory-new"/>bonobo_generic_factory_new ()</title>
<indexterm><primary>bonobo_generic_factory_new</primary></indexterm><programlisting><link linkend="BonoboGenericFactory">BonoboGenericFactory</link>* bonobo_generic_factory_new
                                            (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="BonoboFactoryCallback">BonoboFactoryCallback</link> factory_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
This is a helper routine that simplifies the creation of factory
objects for GNOME objects.  The <parameter>factory</parameter> function will be
invoked by the CORBA server when a request arrives to create a new
instance of an object supporting the Bonobo::Generic interface.
The factory callback routine is passed the <parameter>data</parameter> pointer to provide
the creation function with some state information.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>act_iid</parameter>&nbsp;:</term>
<listitem><simpara> The GOAD id that this factory implements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factory_cb</parameter>&nbsp;:</term>
<listitem><simpara> A callback which is used to create new BonoboObject instances.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> The closure data to be passed to the <parameter>factory</parameter> callback routine.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A BonoboGenericFactory object that has an activated
Bonobo::GenericFactory object that has registered with the GNOME
name server.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-generic-factory-new-closure"/>bonobo_generic_factory_new_closure ()</title>
<indexterm><primary>bonobo_generic_factory_new_closure</primary></indexterm><programlisting><link linkend="BonoboGenericFactory">BonoboGenericFactory</link>* bonobo_generic_factory_new_closure
                                            (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="GClosure">GClosure</link> *factory_closure);</programlisting>
<para>
This is a helper routine that simplifies the creation of factory
objects for GNOME objects.  The <parameter>factory_closure</parameter> closure will be
invoked by the CORBA server when a request arrives to create a new
instance of an object supporting the Bonobo::Generic interface.
The factory callback routine is passed the <parameter>data</parameter> pointer to provide
the creation function with some state information.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>act_iid</parameter>&nbsp;:</term>
<listitem><simpara> The GOAD id that this factory implements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factory_closure</parameter>&nbsp;:</term>
<listitem><simpara> A closure which is used to create new BonoboObject instances.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A BonoboGenericFactory object that has an activated
Bonobo::GenericFactory object that has registered with the GNOME
name server.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-generic-factory-construct"/>bonobo_generic_factory_construct ()</title>
<indexterm><primary>bonobo_generic_factory_construct</primary></indexterm><programlisting><link linkend="BonoboGenericFactory">BonoboGenericFactory</link>* bonobo_generic_factory_construct
                                            (<link linkend="BonoboGenericFactory">BonoboGenericFactory</link> *factory,
                                             const <link linkend="char">char</link> *act_iid,
                                             <link linkend="GClosure">GClosure</link> *factory_closure);</programlisting>
<para>
Initializes <parameter>c_factory</parameter> with and registers the new factory with
the name server.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> The object to be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>act_iid</parameter>&nbsp;:</term>
<listitem><simpara> The Bonobo activation id that the new factory will implement.
Bonobo::GenericFactory interface and which will be used to
construct this BonoboGenericFactory Gtk object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factory_closure</parameter>&nbsp;:</term>
<listitem><simpara> A Multi object factory closure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The initialized BonoboGenericFactory object or NULL
         if already registered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-generic-factory-construct-noreg"/>bonobo_generic_factory_construct_noreg ()</title>
<indexterm><primary>bonobo_generic_factory_construct_noreg</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_generic_factory_construct_noreg
                                            (<link linkend="BonoboGenericFactory">BonoboGenericFactory</link> *factory,
                                             const <link linkend="char">char</link> *act_iid,
                                             <link linkend="GClosure">GClosure</link> *factory_closure);</programlisting>
<para>
Initializes <parameter>c_factory</parameter> with the supplied closure and iid.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>factory</parameter>&nbsp;:</term>
<listitem><simpara> The object to be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>act_iid</parameter>&nbsp;:</term>
<listitem><simpara> The GOAD id that the new factory will implement.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factory_closure</parameter>&nbsp;:</term>
<listitem><simpara> A Multi object factory closure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-generic-factory-main"/>bonobo_generic_factory_main ()</title>
<indexterm><primary>bonobo_generic_factory_main</primary></indexterm><programlisting><link linkend="int">int</link>         bonobo_generic_factory_main     (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="BonoboFactoryCallback">BonoboFactoryCallback</link> factory_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
A Generic 'main' routine so we don't stick a load of code
inside a public macro. See also <link linkend="bonobo-generic-factory-main-timeout"><function>bonobo_generic_factory_main_timeout()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>act_iid</parameter>&nbsp;:</term>
<listitem><simpara> the oaf iid of the factory
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factory_cb</parameter>&nbsp;:</term>
<listitem><simpara> the factory callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> a user data pointer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> 0 on success, 1 on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-generic-factory-main-timeout"/>bonobo_generic_factory_main_timeout ()</title>
<indexterm><primary>bonobo_generic_factory_main_timeout</primary></indexterm><programlisting><link linkend="int">int</link>         bonobo_generic_factory_main_timeout
                                            (const <link linkend="char">char</link> *act_iid,
                                             <link linkend="BonoboFactoryCallback">BonoboFactoryCallback</link> factory_cb,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="guint">guint</link> quit_timeout);</programlisting>
<para>
A Generic 'main' routine so we don't stick a load of code
inside a public macro.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>act_iid</parameter>&nbsp;:</term>
<listitem><simpara> the oaf iid of the factory
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factory_cb</parameter>&nbsp;:</term>
<listitem><simpara> the factory callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> a user data pointer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>quit_timeout</parameter>&nbsp;:</term>
<listitem><simpara> ammount of time to wait (miliseconds) after all
objects have been released before quitting the main loop.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> 0 on success, 1 on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-FACTORY-INIT-CAPS"/>BONOBO_FACTORY_INIT()</title>
<indexterm><primary>BONOBO_FACTORY_INIT</primary></indexterm><programlisting>#define     BONOBO_FACTORY_INIT(descr, version, argcp, argv)</programlisting>
<para>
Macro that expands to the code need to initialize an exe factory.  Should be placed at the beginning of the <link linkend="main"><function>main()</function></link> function.
</para><variablelist role="params">
<varlistentry><term><parameter>descr</parameter>&nbsp;:</term>
<listitem><simpara>factory description string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara>version string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argcp</parameter>&nbsp;:</term>
<listitem><simpara>pointer to <link linkend="main"><function>main()</function></link>'s argc
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&nbsp;:</term>
<listitem><simpara><link linkend="main"><function>main()</function></link>'s argv


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-OAF-FACTORY-CAPS"/>BONOBO_OAF_FACTORY()</title>
<indexterm><primary>BONOBO_OAF_FACTORY</primary></indexterm><programlisting>#define     BONOBO_OAF_FACTORY(oafiid, descr, version, callback, data)</programlisting>
<para>
Deprecated; see <link linkend="BONOBO-ACTIVATION-FACTORY-CAPS"><function>BONOBO_ACTIVATION_FACTORY()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>oafiid</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>descr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-OAF-FACTORY-MULTI-CAPS"/>BONOBO_OAF_FACTORY_MULTI()</title>
<indexterm><primary>BONOBO_OAF_FACTORY_MULTI</primary></indexterm><programlisting>#define     BONOBO_OAF_FACTORY_MULTI(oafiid, descr, version, callback, data)</programlisting>
<para>
Deprecated; see <link linkend="BONOBO-ACTIVATION-FACTORY-CAPS"><function>BONOBO_ACTIVATION_FACTORY()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>oafiid</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>descr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-ACTIVATION-FACTORY-CAPS"/>BONOBO_ACTIVATION_FACTORY()</title>
<indexterm><primary>BONOBO_ACTIVATION_FACTORY</primary></indexterm><programlisting>#define     BONOBO_ACTIVATION_FACTORY(oafiid, descr, version, callback, data)</programlisting>

<para>
    Macro that includes all boiler-plate code necessary to create an exe
    type factory, including a <link linkend="main"><function>main()</function></link> function and a generic factory.
</para><variablelist role="params">
<varlistentry><term><parameter>oafiid</parameter>&nbsp;:</term>
<listitem><simpara>The factory's OAFIID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>descr</parameter>&nbsp;:</term>
<listitem><simpara>Description of the factory
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara>Version string of the factory program
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara>Function (<link linkend="BonoboFactoryCallback"><type>BonoboFactoryCallback</type></link>) responsible for intantiating components
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>Additional data to be passed to the callback


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-ACTIVATION-FACTORY-TIMEOUT-CAPS"/>BONOBO_ACTIVATION_FACTORY_TIMEOUT()</title>
<indexterm><primary>BONOBO_ACTIVATION_FACTORY_TIMEOUT</primary></indexterm><programlisting>#define     BONOBO_ACTIVATION_FACTORY_TIMEOUT(oafiid, descr, version, callback, data, quit_timeout)</programlisting>
<para>
    Like <link linkend="BONOBO-ACTIVATION-FACTORY-CAPS"><function>BONOBO_ACTIVATION_FACTORY()</function></link>, but has an extra <parameter>quit_timeout</parameter> argument.
</para><variablelist role="params">
<varlistentry><term><parameter>oafiid</parameter>&nbsp;:</term>
<listitem><simpara>The factory's OAFIID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>descr</parameter>&nbsp;:</term>
<listitem><simpara>Description of the factory
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara>Version string of the factory program
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara>Function (<link linkend="BonoboFactoryCallback"><type>BonoboFactoryCallback</type></link>) responsible for intantiating components
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>Additional data to be passed to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>quit_timeout</parameter>&nbsp;:</term>
<listitem><simpara>Ammount of time to wait (in milliseconds) before deciding to quit the factory.  A larger value prevents frequent respawning of a new factory process when there are many consecutive one-time requests, so that your factory appears to start faster after the first time.


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
