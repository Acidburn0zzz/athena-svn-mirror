<refentry id="libbonobo-bonobo-item-container">
<refmeta>
<refentrytitle>BonoboItemContainer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboItemContainer</refname><refpurpose>this implements a simple container interface for compound document containers</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<anchor id="BonoboItemContainer"/>
<synopsis>



struct      <link linkend="BonoboItemContainer-struct">BonoboItemContainer</link>;
struct      <link linkend="BonoboItemContainerClass">BonoboItemContainerClass</link>;
<link linkend="BonoboItemContainer">BonoboItemContainer</link>* <link linkend="bonobo-item-container-new">bonobo_item_container_new</link>
                                            (void);
<link linkend="void">void</link>        <link linkend="bonobo-item-container-add">bonobo_item_container_add</link>       (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const <link linkend="char">char</link> *name,
                                             <link linkend="BonoboObject">BonoboObject</link> *object);
<link linkend="void">void</link>        <link linkend="bonobo-item-container-remove-by-name">bonobo_item_container_remove_by_name</link>
                                            (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const <link linkend="char">char</link> *name);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboItemContainer
</synopsis>

</refsect1>






<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="BonoboItemContainer-get-object">get-object</link>&quot;
            <link linkend="BonoboUnknown">BonoboUnknown</link>*user_function      (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *bonoboitemcontainer,
                                            <link linkend="gchar">gchar</link> *arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="BonoboCorbaException">BonoboCorbaException</link> *arg3,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>
This implementation is mostly deprecated, see <link linkend="BonoboItemHandler"><type>BonoboItemHandler</type></link>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboItemContainer-struct"/>struct BonoboItemContainer</title>
<indexterm><primary>BonoboItemContainer</primary></indexterm><programlisting>struct BonoboItemContainer;</programlisting>
<para>
Object that implements Bonobo::ItemHandler
</para></refsect2>
<refsect2>
<title><anchor id="BonoboItemContainerClass"/>struct BonoboItemContainerClass</title>
<indexterm><primary>BonoboItemContainerClass</primary></indexterm><programlisting>struct BonoboItemContainerClass {

	BonoboObjectClass parent_class;

	POA_Bonobo_ItemContainer__epv epv;

	Bonobo_Unknown (*get_object) (BonoboItemContainer *item_container,
				      CORBA_char          *item_name,
				      CORBA_boolean        only_if_exists,
				      CORBA_Environment   *ev);
};
</programlisting>
<para>
<link linkend="BonoboItemContainer"><type>BonoboItemContainer</type></link>'s class
</para></refsect2>
<refsect2>
<title><anchor id="bonobo-item-container-new"/>bonobo_item_container_new ()</title>
<indexterm><primary>bonobo_item_container_new</primary></indexterm><programlisting><link linkend="BonoboItemContainer">BonoboItemContainer</link>* bonobo_item_container_new
                                            (void);</programlisting>
<para>
Creates a new BonoboItemContainer object.  These are used to hold
client sites.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The newly created BonoboItemContainer object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-item-container-add"/>bonobo_item_container_add ()</title>
<indexterm><primary>bonobo_item_container_add</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_item_container_add       (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const <link linkend="char">char</link> *name,
                                             <link linkend="BonoboObject">BonoboObject</link> *object);</programlisting>
<para>
Adds the <parameter>object</parameter> to the list of objects managed by this
container</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The object to operate on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> The object to add to the container
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-item-container-remove-by-name"/>bonobo_item_container_remove_by_name ()</title>
<indexterm><primary>bonobo_item_container_remove_by_name</primary></indexterm><programlisting><link linkend="void">void</link>        bonobo_item_container_remove_by_name
                                            (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const <link linkend="char">char</link> *name);</programlisting>
<para>
Removes the named object from the <parameter>container</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The object to operate on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the object to remove from the container
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="BonoboItemContainer-get-object"/>The &quot;get-object&quot; signal</title>
<programlisting><link linkend="BonoboUnknown">BonoboUnknown</link>*user_function                  (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *bonoboitemcontainer,
                                            <link linkend="gchar">gchar</link> *arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="BonoboCorbaException">BonoboCorbaException</link> *arg3,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Signal emitted when a sub-object is requested from the item container.
</para><variablelist role="params">
<varlistentry><term><parameter>bonoboitemcontainer</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>the item name, i.e. the string after the '!' character, usually a semicolon separated list of key=value options
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara>the "only_if_exists" flag; if <literal>TRUE</literal>, client requests that subobject be returned if it exists, but that it should not be created on demand if it doesn't
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg3</parameter>&nbsp;:</term>
<listitem><simpara>environment, in case the signal wishes to raise an exception
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>an object contained by the item container, or <literal>CORBA_OBJECT_NIL</literal>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1>
<title>See Also</title>
<para>
   <link linkend="BonoboItemHandler"><type>BonoboItemHandler</type></link>
</para>
</refsect1>

</refentry>
