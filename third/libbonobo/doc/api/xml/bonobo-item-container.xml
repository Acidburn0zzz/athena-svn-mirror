<refentry id="libbonobo-bonobo-item-container">
<refmeta>
<refentrytitle>BonoboItemContainer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboItemContainer</refname><refpurpose>this implements a simple container interface for compound document containers</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="BONOBO-ITEM-CONTAINER-TYPE-CAPS">BONOBO_ITEM_CONTAINER_TYPE</link>
typedef     <link linkend="BonoboClientSiteList">BonoboClientSiteList</link>;
struct      <link linkend="BonoboItemContainerPrivate">BonoboItemContainerPrivate</link>;
typedef     <link linkend="BonoboItemContainer">BonoboItemContainer</link>;
typedef     <link linkend="BonoboItemContainerClass">BonoboItemContainerClass</link>;
<link linkend="BonoboItemContainer">BonoboItemContainer</link>* <link linkend="bonobo-item-container-new">bonobo_item_container_new</link>
                                            (void);
void        <link linkend="bonobo-item-container-add">bonobo_item_container_add</link>       (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const char *name,
                                             <link linkend="BonoboObject">BonoboObject</link> *object);
void        <link linkend="bonobo-item-container-remove-by-name">bonobo_item_container_remove_by_name</link>
                                            (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const char *name);

</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
This implementation is mostly deprecated, see <link linkend="BonoboItemHandler">BonoboItemHandler</link>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BONOBO-ITEM-CONTAINER-TYPE-CAPS"/>BONOBO_ITEM_CONTAINER_TYPE</title>
<programlisting>#define BONOBO_ITEM_CONTAINER_TYPE        BONOBO_TYPE_ITEM_CONTAINER /* deprecated, you should use BONOBO_TYPE_ITEM_CONTAINER */
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboClientSiteList"/>BonoboClientSiteList</title>
<programlisting>typedef GList BonoboClientSiteList;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboItemContainerPrivate"/>struct BonoboItemContainerPrivate</title>
<programlisting>struct BonoboItemContainerPrivate;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboItemContainer"/>BonoboItemContainer</title>
<programlisting>typedef struct {
	BonoboObject base;

	BonoboItemContainerPrivate *priv;
} BonoboItemContainer;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboItemContainerClass"/>BonoboItemContainerClass</title>
<programlisting>typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_ItemContainer__epv epv;

	Bonobo_Unknown (*get_object) (BonoboItemContainer *item_container,
				      CORBA_char          *item_name,
				      CORBA_boolean        only_if_exists,
				      CORBA_Environment   *ev);
} BonoboItemContainerClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-item-container-new"/>bonobo_item_container_new ()</title>
<programlisting><link linkend="BonoboItemContainer">BonoboItemContainer</link>* bonobo_item_container_new
                                            (void);</programlisting>
<para>
Creates a new BonoboItemContainer object.  These are used to hold
client sites.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The newly created BonoboItemContainer object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-item-container-add"/>bonobo_item_container_add ()</title>
<programlisting>void        bonobo_item_container_add       (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const char *name,
                                             <link linkend="BonoboObject">BonoboObject</link> *object);</programlisting>
<para>
Adds the <parameter>object</parameter> to the list of objects managed by this
container</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The object to operate on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> The object to add to the container
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-item-container-remove-by-name"/>bonobo_item_container_remove_by_name ()</title>
<programlisting>void        bonobo_item_container_remove_by_name
                                            (<link linkend="BonoboItemContainer">BonoboItemContainer</link> *container,
                                             const char *name);</programlisting>
<para>
Removes the named object from the <parameter>container</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&nbsp;:</term>
<listitem><simpara> The object to operate on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the object to remove from the container
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
   <link linkend="BonoboItemHandler">BonoboItemHandler</link>
</para>
</refsect1>

</refentry>
