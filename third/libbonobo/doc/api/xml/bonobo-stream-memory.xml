<refentry id="libbonobo-bonobo-stream-memory">
<refmeta>
<refentrytitle>BonoboStreamMem</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboStreamMem</refname><refpurpose>
In-memory implementation of Bonobo::Stream interface.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="BonoboStreamMem">BonoboStreamMem</link>;
struct      <link linkend="BonoboStreamMemPrivate">BonoboStreamMemPrivate</link>;
#define     <link linkend="BONOBO-STREAM-MEM-TYPE-CAPS">BONOBO_STREAM_MEM_TYPE</link>
typedef     <link linkend="BonoboStreamMemClass">BonoboStreamMemClass</link>;
<link linkend="BonoboStreamMem">BonoboStreamMem</link>* <link linkend="bonobo-stream-mem-construct">bonobo_stream_mem_construct</link>
                                            (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem,
                                             const char *buffer,
                                             <link linkend="size-t">size_t</link> size,
                                             <link linkend="gboolean">gboolean</link> read_only,
                                             <link linkend="gboolean">gboolean</link> resizable);
<link linkend="BonoboObject">BonoboObject</link>* <link linkend="bonobo-stream-mem-create">bonobo_stream_mem_create</link>      (const char *buffer,
                                             <link linkend="size-t">size_t</link> size,
                                             <link linkend="gboolean">gboolean</link> read_only,
                                             <link linkend="gboolean">gboolean</link> resizable);
const char* <link linkend="bonobo-stream-mem-get-buffer">bonobo_stream_mem_get_buffer</link>    (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);
<link linkend="size-t">size_t</link>      <link linkend="bonobo-stream-mem-get-size">bonobo_stream_mem_get_size</link>      (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);

</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
   The BonoboStreamMem is an implementation of the
   IDL:Bonobo/Stream:1.0 interface.  This implementation allows an
   in-memory buffer to be exposed as a IDL:Bonobo/Stream:1.0 to
   clients.  
</para>

<para>
   Here is a sample way of exposing a C string as an
   IDL:Bonobo/Stream:1.0:

   <example>
     <title>Sample BonoboStreamMem usage</title>

     <programlisting>
BonoboStream *make_bonobo_stream_on_string (char *string)
{
    return bonobo_stream_mem_create (string, strlen (string), TRUE, FALSE);
}
     </programlisting>
   </example>

   This example will make the string argument be exposed as a CORBA
   stream.  </para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboStreamMem"/>struct BonoboStreamMem</title>
<programlisting>struct BonoboStreamMem {

	BonoboObject parent;

	char         *buffer;
	size_t        size;
	long          pos;
	gboolean      read_only;
	gboolean      resizable;
	char         *content_type;
	char         *name;

	BonoboStreamMemPrivate *priv;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboStreamMemPrivate"/>struct BonoboStreamMemPrivate</title>
<programlisting>struct BonoboStreamMemPrivate;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-STREAM-MEM-TYPE-CAPS"/>BONOBO_STREAM_MEM_TYPE</title>
<programlisting>#define BONOBO_STREAM_MEM_TYPE        BONOBO_TYPE_STREAM_MEM /* deprecated, you should use BONOBO_TYPE_STREAM_MEM */
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboStreamMemClass"/>BonoboStreamMemClass</title>
<programlisting>typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_Stream__epv epv;

	char           *(*get_buffer) (BonoboStreamMem *stream_mem);
	size_t          (*get_size)   (BonoboStreamMem *stream_mem);
} BonoboStreamMemClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-mem-construct"/>bonobo_stream_mem_construct ()</title>
<programlisting><link linkend="BonoboStreamMem">BonoboStreamMem</link>* bonobo_stream_mem_construct
                                            (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem,
                                             const char *buffer,
                                             <link linkend="size-t">size_t</link> size,
                                             <link linkend="gboolean">gboolean</link> read_only,
                                             <link linkend="gboolean">gboolean</link> resizable);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream_mem</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>read_only</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resizable</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-mem-create"/>bonobo_stream_mem_create ()</title>
<programlisting><link linkend="BonoboObject">BonoboObject</link>* bonobo_stream_mem_create      (const char *buffer,
                                             <link linkend="size-t">size_t</link> size,
                                             <link linkend="gboolean">gboolean</link> read_only,
                                             <link linkend="gboolean">gboolean</link> resizable);</programlisting>
<para>
Creates a new BonoboStreamMem object.
</para>
<para>
If <parameter>buffer</parameter> is non-<literal>NULL</literal>, <parameter>size</parameter> bytes are copied from it into a new
buffer. If <parameter>buffer</parameter> is <literal>NULL</literal>, a new buffer of size <parameter>size</parameter> is created
and filled with zero bytes.
</para>
<para>
When data is read out of or (if <parameter>read_only</parameter> is FALSE) written into
the returned BonoboStream object, the <link linkend="read">read</link>() and <link linkend="write">write</link>() operations
operate on the new buffer. If <parameter>resizable</parameter> is TRUE, writing or seeking
past the end of the buffer will cause the buffer to be expanded (with
the new space zero-filled for a seek).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> The data for which a BonoboStreamMem object is to be created.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> The size in bytes of <parameter>buffer</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>read_only</parameter>&nbsp;:</term>
<listitem><simpara> Specifies whether or not the returned BonoboStreamMem
object should allow <link linkend="write">write</link>() operations.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resizable</parameter>&nbsp;:</term>
<listitem><simpara> Whether or not the buffer should be resized as needed.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the constructed BonoboStream object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-mem-get-buffer"/>bonobo_stream_mem_get_buffer ()</title>
<programlisting>const char* bonobo_stream_mem_get_buffer    (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);</programlisting>
<para>
Returns the buffer associated with a BonoboStreamMem. If the stream
is set to automatically resize itself, this buffer is only guaranteed
to stay valid until the next write operation on the stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream_mem</parameter>&nbsp;:</term>
<listitem><simpara> a BonoboStreamMem
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a buffer containing the data written to the stream (or
the data the stream was initialized with if nothing has been written).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-mem-get-size"/>bonobo_stream_mem_get_size ()</title>
<programlisting><link linkend="size-t">size_t</link>      bonobo_stream_mem_get_size      (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);</programlisting>
<para>
Returns the size of the data associated with a BonoboStreamMem
see bonobo_stream_mem_get_buffer</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream_mem</parameter>&nbsp;:</term>
<listitem><simpara> a BonoboStreamMem
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
  <variablelist>
    <varlistentry>
      <term><link linkend="BonoboStream">BonoboStream</link></term>
      <listitem><para>An abstract class to implement
      IDL:Bonobo/Streams.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term>IDL:Bonobo/Stream:1.0</term>
      <listitem><para>The CORBA interface implemented .</para></listitem>
    </varlistentry>
   </variablelist>
</para>
</refsect1>

</refentry>
