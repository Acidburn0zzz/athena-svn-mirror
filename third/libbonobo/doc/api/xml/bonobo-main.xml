<refentry id="libbonobo-bonobo-main">
<refmeta>
<refentrytitle>bonobo-main</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-main</refname><refpurpose>Bonobo initialization.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-is-initialized">bonobo_is_initialized</link>           (void);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-init">bonobo_init</link>                     (int *argc,
                                             char **argv);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-init-full">bonobo_init_full</link>                (int *argc,
                                             char **argv,
                                             <link linkend="CORBA-ORB-CAPS">CORBA_ORB</link> orb,
                                             <link linkend="PortableServer-POA">PortableServer_POA</link> poa,
                                             <link linkend="PortableServer-POAManager">PortableServer_POAManager</link> manager);
int         <link linkend="bonobo-debug-shutdown">bonobo_debug_shutdown</link>           (void);
void        <link linkend="bonobo-main">bonobo_main</link>                     (void);
void        <link linkend="bonobo-main-quit">bonobo_main_quit</link>                (void);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-activate">bonobo_activate</link>                 (void);
void        <link linkend="bonobo-setup-x-error-handler">bonobo_setup_x_error_handler</link>    (void);
<link linkend="CORBA-ORB-CAPS">CORBA_ORB</link>   <link linkend="bonobo-orb">bonobo_orb</link>                      (void);
<link linkend="PortableServer-POA">PortableServer_POA</link> <link linkend="bonobo-poa">bonobo_poa</link>               (void);
<link linkend="PortableServer-POAManager">PortableServer_POAManager</link> <link linkend="bonobo-poa-manager">bonobo_poa_manager</link>
                                            (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
  Initialization functions for Bonobo applications.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="bonobo-is-initialized"/>bonobo_is_initialized ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_is_initialized           (void);</programlisting>
<para>
This allows you to protect against double
initialization in your code.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> whether the ORB is initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-init"/>bonobo_init ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_init                     (int *argc,
                                             char **argv);</programlisting>
<para>
Initializes the bonobo component model.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>argc</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the number of arguments
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&nbsp;:</term>
<listitem><simpara> the array of arguments
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara><literal>TRUE</literal> on success, or <literal>FALSE</literal> on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-init-full"/>bonobo_init_full ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_init_full                (int *argc,
                                             char **argv,
                                             <link linkend="CORBA-ORB-CAPS">CORBA_ORB</link> orb,
                                             <link linkend="PortableServer-POA">PortableServer_POA</link> poa,
                                             <link linkend="PortableServer-POAManager">PortableServer_POAManager</link> manager);</programlisting>
<para>
Initializes the bonobo document model.  It requires at least
the value for <parameter>orb</parameter>.  If <parameter>poa</parameter> is CORBA_OBJECT_NIL, then the
RootPOA will be used, in this case <parameter>manager</parameter> should be CORBA_OBJECT_NIL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>argc</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the number of arguments
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&nbsp;:</term>
<listitem><simpara> the array of arguments
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>orb</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>poa</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>manager</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara><literal>TRUE</literal> on success, or <literal>FALSE</literal> on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-debug-shutdown"/>bonobo_debug_shutdown ()</title>
<programlisting>int         bonobo_debug_shutdown           (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-main"/>bonobo_main ()</title>
<programlisting>void        bonobo_main                     (void);</programlisting>
<para>
Activates the Bonobo POA Manager and enters the main event loop.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-main-quit"/>bonobo_main_quit ()</title>
<programlisting>void        bonobo_main_quit                (void);</programlisting>
<para>
Quits the main event loop.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-activate"/>bonobo_activate ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_activate                 (void);</programlisting>
<para>
Activates the Bonobo POA manager registered by bonobo_init.
This should be called at the end of application initialization.
You do not need to call this function if you use <link linkend="bonobo-main">bonobo_main</link>().</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara><literal>TRUE</literal> on success, or <literal>FALSE</literal> on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-setup-x-error-handler"/>bonobo_setup_x_error_handler ()</title>
<programlisting>void        bonobo_setup_x_error_handler    (void);</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-orb"/>bonobo_orb ()</title>
<programlisting><link linkend="CORBA-ORB-CAPS">CORBA_ORB</link>   bonobo_orb                      (void);</programlisting>
<para>
</para>
<para>
   Returns the CORBA_ORB object that is being used by Bonobo.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The ORB used for this Bonobo application.  The ORB
is created in <link linkend="bonobo-init">bonobo_init</link>().
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-poa"/>bonobo_poa ()</title>
<programlisting><link linkend="PortableServer-POA">PortableServer_POA</link> bonobo_poa               (void);</programlisting>
<para>
</para>
<para>
   Returns the POA object that is being used by Bonobo.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The POA used for this Bonobo application.  The POA
is created when <link linkend="bonobo-init">bonobo_init</link>() is called.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-poa-manager"/>bonobo_poa_manager ()</title>
<programlisting><link linkend="PortableServer-POAManager">PortableServer_POAManager</link> bonobo_poa_manager
                                            (void);</programlisting>
<para>
</para>
<para>
   Returns the POA Manager object that is being used by Bonobo.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The POA Manager used for this Bonobo application.  The POA
Manager is created when <link linkend="bonobo-init">bonobo_init</link>() is called, but it is not
activated until <link linkend="bonobo-main">bonobo_main</link>() is called.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
