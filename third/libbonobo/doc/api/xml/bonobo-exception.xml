<refentry id="libbonobo-bonobo-exception">
<refmeta>
<refentrytitle>bonobo-exception</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-exception</refname><refpurpose>maps CORBA exceptions to user readable text, + helper macros</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="bonobo-exception-set">bonobo_exception_set</link>            (opt_ev,repo_id)
#define     <link linkend="bonobo-return-if-fail">bonobo_return_if_fail</link>           (expr,opt_ev)
#define     <link linkend="bonobo-return-val-if-fail">bonobo_return_val_if_fail</link>       (expr,val,opt_ev)
#define     <link linkend="BONOBO-EX-CAPS">BONOBO_EX</link>                       (ev)
#define     <link linkend="BONOBO-USER-EX-CAPS">BONOBO_USER_EX</link>                  (ev,id)
#define     <link linkend="BONOBO-EX-REPOID-CAPS">BONOBO_EX_REPOID</link>                (ev)
#define     <link linkend="BONOBO-RET-EX-CAPS">BONOBO_RET_EX</link>                   (ev)
#define     <link linkend="BONOBO-RET-VAL-EX-CAPS">BONOBO_RET_VAL_EX</link>               (ev,v)
char*       (<link linkend="BonoboExceptionFn">*BonoboExceptionFn</link>)            (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);
char*       <link linkend="bonobo-exception-get-text">bonobo_exception_get_text</link>       (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
char*       <link linkend="bonobo-exception-repoid-to-text">bonobo_exception_repoid_to_text</link> (const char *repo_id);
void        <link linkend="bonobo-exception-add-handler-str">bonobo_exception_add_handler_str</link>
                                            (const char *repo_id,
                                             const char *str);
void        <link linkend="bonobo-exception-add-handler-fn">bonobo_exception_add_handler_fn</link> (const char *repo_id,
                                             <link linkend="BonoboExceptionFn">BonoboExceptionFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);
void        <link linkend="bonobo-exception-general-error-set">bonobo_exception_general_error_set</link>
                                            (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> opt_deriv,
                                             const char *format,
                                             ...);
const char* <link linkend="bonobo-exception-general-error-get">bonobo_exception_general_error_get</link>
                                            (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
This module contains some useful helper functions
that can be used to set various exceptions inside your
CORBA methods. It also contains code to map between
complex CORBA_Environment exceptions and helpful
strings suitable for display to the user.
</para>

<para>
Typically to test for exceptions the BONOBO_EX macro
is used thus:
  <example>
     <title>Bonobo exception trapping and reporting</title>
     <programlisting>
int
do_something (CORBA_Environment *ev)
{
	...

	retval = Foo_Baa_method (object, ev);

	if (BONOBO_EX (ev)) {
		if (BONOBO_USER_EX (ev, ex_CosNaming_NamingContext_NotFound)) {
		        g_warning ("Not found");
		} else {
		        char *str;

			g_warning ("Exception '<literal>s</literal>' occured",
				(str = bonobo_exception_get_text (ev)));
			g_free (str);
		}
		return -1;
	}
	...
}
     </programlisting>
  </example>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="bonobo-exception-set"/>bonobo_exception_set()</title>
<programlisting>#define     bonobo_exception_set(opt_ev,repo_id)</programlisting>
<para>
This macro sets the stateless user exception with <parameter>repo_id</parameter> on
<parameter>opt_ev</parameter> or warns if <parameter>opt_ev</parameter> == NULL
</para><variablelist role="params">
<varlistentry><term><parameter>opt_ev</parameter>&nbsp;:</term>
<listitem><simpara>an optional corba exception environment.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>repo_id</parameter>&nbsp;:</term>
<listitem><simpara>repoid of the exception to set.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-return-if-fail"/>bonobo_return_if_fail()</title>
<programlisting>#define     bonobo_return_if_fail(expr,opt_ev)</programlisting>
<para>
this macro is used for bonobo preconditons on argument types,
usualy inside skels if <parameter>expr</parameter> is FALSE a warning is printed and
<parameter>opt_ev</parameter> is set to ex_Bonobo_BadArg.
</para><variablelist role="params">
<varlistentry><term><parameter>expr</parameter>&nbsp;:</term>
<listitem><simpara>an expression that should be true
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&nbsp;:</term>
<listitem><simpara>an optional corba exception environment.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-return-val-if-fail"/>bonobo_return_val_if_fail()</title>
<programlisting>#define     bonobo_return_val_if_fail(expr,val,opt_ev)</programlisting>
<para>
this macro is used for bonobo preconditons on argument types,
usualy inside skels if <parameter>expr</parameter> is FALSE a warning is printed and
<parameter>opt_ev</parameter> is set to ex_Bonobo_BadArg.
</para><variablelist role="params">
<varlistentry><term><parameter>expr</parameter>&nbsp;:</term>
<listitem><simpara>an expression that should be true
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>a value to return on failure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&nbsp;:</term>
<listitem><simpara>an optional corba exception environment.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-EX-CAPS"/>BONOBO_EX()</title>
<programlisting>#define BONOBO_EX(ev)         ((ev) &amp;&amp; (ev)-&gt;_major != CORBA_NO_EXCEPTION)
</programlisting>
<para>
This macro returns TRUE if <parameter>ev</parameter> flags an exception.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>the exception environment


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-USER-EX-CAPS"/>BONOBO_USER_EX()</title>
<programlisting>#define     BONOBO_USER_EX(ev,id)</programlisting>
<para>
This macro returns TRUE if <parameter>ev</parameter> contains a user exception
of type <parameter>id</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>the repo_id of the exception


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-EX-REPOID-CAPS"/>BONOBO_EX_REPOID()</title>
<programlisting>#define BONOBO_EX_REPOID(ev)  (ev)-&gt;_id
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-RET-EX-CAPS"/>BONOBO_RET_EX()</title>
<programlisting>#define     BONOBO_RET_EX(ev)</programlisting>
<para>
returns if there is an exception flagged in <parameter>ev</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>the exception environment


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-RET-VAL-EX-CAPS"/>BONOBO_RET_VAL_EX()</title>
<programlisting>#define     BONOBO_RET_VAL_EX(ev,v)</programlisting>
<para>
returns <parameter>v</parameter> if there is an exception flagged in <parameter>ev</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&nbsp;:</term>
<listitem><simpara>the value to return


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BonoboExceptionFn"/>BonoboExceptionFn ()</title>
<programlisting>char*       (*BonoboExceptionFn)            (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The prototype for user registerable exception decoders.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data to be passed to the function
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a g_malloc'd copy of a translated user readable error string.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-exception-get-text"/>bonobo_exception_get_text ()</title>
<programlisting>char*       bonobo_exception_get_text       (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Returns a user readable description of the exception.  First
checks <parameter>ev</parameter> against builtin Bonobo exceptions, then falls back to
exception names added through bonobo_exception_add_handler_str
or bonobo_exception_add_handler_fn.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara> the corba environment.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A g_malloc'd description, which the caller must free.
NULL is never returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-exception-repoid-to-text"/>bonobo_exception_repoid_to_text ()</title>
<programlisting>char*       bonobo_exception_repoid_to_text (const char *repo_id);</programlisting>
<para>
This maps builtin bonobo exceptions that the system
knows about to user readable strings.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>repo_id</parameter>&nbsp;:</term>
<listitem><simpara> exception repository id
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a user string or NULL for an unknown repo_id
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-exception-add-handler-str"/>bonobo_exception_add_handler_str ()</title>
<programlisting>void        bonobo_exception_add_handler_str
                                            (const char *repo_id,
                                             const char *str);</programlisting>
<para>
This routine adds a simple string mapping for an exception
with repository id <parameter>repo_id</parameter>, such that when we call
bonobo_exception_get_text on an exception of id <parameter>repo_id</parameter> we
get <parameter>str</parameter> back.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>repo_id</parameter>&nbsp;:</term>
<listitem><simpara> exception repository id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> the user readable, translated exception text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-exception-add-handler-fn"/>bonobo_exception_add_handler_fn ()</title>
<programlisting>void        bonobo_exception_add_handler_fn (const char *repo_id,
                                             <link linkend="BonoboExceptionFn">BonoboExceptionFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);</programlisting>
<para>
This routine adds a method mapping for an exception
with repository id <parameter>repo_id</parameter>, such that when we call
bonobo_exception_get_text on an exception of id <parameter>repo_id</parameter>
the <parameter>fn</parameter> is called and passed <parameter>user_data</parameter>.
When the handler is removed the <parameter>destroy_fn</parameter> is called
on its <parameter>user_data</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>repo_id</parameter>&nbsp;:</term>
<listitem><simpara> exception repository id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fn</parameter>&nbsp;:</term>
<listitem><simpara> function to make exception human readable
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> the user data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy_fn</parameter>&nbsp;:</term>
<listitem><simpara> user data destroy function or NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-exception-general-error-set"/>bonobo_exception_general_error_set ()</title>
<programlisting>void        bonobo_exception_general_error_set
                                            (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> opt_deriv,
                                             const char *format,
                                             ...);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_deriv</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-exception-general-error-get"/>bonobo_exception_general_error_get ()</title>
<programlisting>const char* bonobo_exception_general_error_get
                                            (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
