<refentry id="libbonobo-bonobo-storage">
<refmeta>
<refentrytitle>bonobo-storage</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-storage</refname><refpurpose>Abstract implementation of the Bonobo::Storage interface</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="BonoboStream">BonoboStream</link>
#define     <link linkend="BONOBO-STREAM-CAPS">BONOBO_STREAM</link>                   (o)
#define     <link linkend="BONOBO-STREAM-CLASS-CAPS">BONOBO_STREAM_CLASS</link>             (k)
#define     <link linkend="BonoboStorage">BonoboStorage</link>
#define     <link linkend="BONOBO-STORAGE-CAPS">BONOBO_STORAGE</link>                  (o)
#define     <link linkend="BONOBO-STORAGE-CLASS-CAPS">BONOBO_STORAGE_CLASS</link>            (k)
void        <link linkend="bonobo-storage-copy-to">bonobo_storage_copy_to</link>          (<link linkend="Bonobo-Storage">Bonobo_Storage</link> src,
                                             <link linkend="Bonobo-Storage">Bonobo_Storage</link> dest,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
The BonoboStorage C interface is extremely simple, this is since
the CORBA client interface is where the action occurs. It is
anticipated that relatively few people need to implement the
Bonobo/Storage IDL interface.
</para>

<para>
The common entry point for BonoboStorage is that of opening a
storage using the bonobo_storage_open function, perhaps by a
container to use to persist a compound document:
  <example>
     <title>An example storage use case</title>
     <programlisting>
void
container_save (SampleApp         *app,
                const char        *filename,
                CORBA_Environment *ev)
{
	BonoboStorage *storage;
	Bonobo_Storage corba_storage;
	GList *components;
	int i;

	storage = bonobo_storage_open (STORAGE_TYPE, filename,
				       Bonobo_Storage_READ |
				       Bonobo_Storage_WRITE |
				       Bonobo_Storage_CREATE,
				       0664);
	g_return_if_fail (storage);

	corba_storage = BONOBO_OBJREF (storage);

	... 
	Serialize components to streams created in the storage
	...

	Bonobo_Storage_commit (corba_storage, ev);

	CORBA_exception_free (ev);

	bonobo_object_unref (BONOBO_OBJECT (storage));
}
     </programlisting>
  </example>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboStream"/>BonoboStream</title>
<programlisting>#define BonoboStream BonoboObject
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-STREAM-CAPS"/>BONOBO_STREAM()</title>
<programlisting>#define BONOBO_STREAM(o)       ((BonoboStream *)(o))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>o</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-STREAM-CLASS-CAPS"/>BONOBO_STREAM_CLASS()</title>
<programlisting>#define BONOBO_STREAM_CLASS(k) ((BonoboObjectClass *)(k))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>k</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BonoboStorage"/>BonoboStorage</title>
<programlisting>#define BonoboStorage BonoboObject
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-STORAGE-CAPS"/>BONOBO_STORAGE()</title>
<programlisting>#define BONOBO_STORAGE(o)          ((BonoboStorage *)(o))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>o</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="BONOBO-STORAGE-CLASS-CAPS"/>BONOBO_STORAGE_CLASS()</title>
<programlisting>#define BONOBO_STORAGE_CLASS(k)    ((BonoboObjectClass *)(k))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>k</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-storage-copy-to"/>bonobo_storage_copy_to ()</title>
<programlisting>void        bonobo_storage_copy_to          (<link linkend="Bonobo-Storage">Bonobo_Storage</link> src,
                                             <link linkend="Bonobo-Storage">Bonobo_Storage</link> dest,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Implements a pure CORBA method for copying one storage into
another, this is used by several BonoboStorage implemetations
where a fast case localy copy cannot work.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> the source storage
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> the destination storage
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&nbsp;:</term>
<listitem><simpara> CORBA exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
<link linkend="BonoboPersist">BonoboPersist</link> <link linkend="BonoboPersistStream">BonoboPersistStream</link>
</para>
</refsect1>

</refentry>
