<refentry id="libbonobo-bonobo-app-client">
<refmeta>
<refentrytitle>bonobo-app-client</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-app-client</refname><refpurpose>client interface to remote <link linkend="BonoboApplication"><type>BonoboApplication</type></link> objects</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="BonoboAppClientMsgDesc">BonoboAppClientMsgDesc</link>;
<link linkend="BonoboAppClient">BonoboAppClient</link>* <link linkend="bonobo-app-client-new">bonobo_app_client_new</link>      (<link linkend="Bonobo-Application">Bonobo_Application</link> app_server);
<link linkend="gint">gint</link>        <link linkend="bonobo-app-client-new-instance">bonobo_app_client_new_instance</link>  (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             <link linkend="int">int</link> argc,
                                             <link linkend="char">char</link> *argv[],
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env);
<link linkend="GValue">GValue</link>*     <link linkend="bonobo-app-client-msg-send-valist">bonobo_app_client_msg_send_valist</link>
                                            (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             const <link linkend="char">char</link> *message,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env,
                                             <link linkend="GType">GType</link> first_arg_type,
                                             <link linkend="va-list">va_list</link> var_args);
<link linkend="GValue">GValue</link>*     <link linkend="bonobo-app-client-msg-send-argv">bonobo_app_client_msg_send_argv</link> (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             const <link linkend="char">char</link> *message,
                                             const <link linkend="GValue">GValue</link> *argv[],
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env);
<link linkend="GValue">GValue</link>*     <link linkend="bonobo-app-client-msg-send">bonobo_app_client_msg_send</link>      (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             const <link linkend="char">char</link> *message,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env,
                                             <link linkend="GType">GType</link> first_arg_type,
                                             ...);

</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboAppClientMsgDesc"/>struct BonoboAppClientMsgDesc</title>
<indexterm><primary>BonoboAppClientMsgDesc</primary></indexterm><programlisting>struct BonoboAppClientMsgDesc {

	gchar *name;
	GType  return_type;
	GType *types;		/* G_TYPE_NONE-terminated array */
	gchar *description;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-app-client-new"/>bonobo_app_client_new ()</title>
<indexterm><primary>bonobo_app_client_new</primary></indexterm><programlisting><link linkend="BonoboAppClient">BonoboAppClient</link>* bonobo_app_client_new      (<link linkend="Bonobo-Application">Bonobo_Application</link> app_server);</programlisting>
<para>
<parameter>app_server</parameter>: object reference to a Bonobo::Application; this
function takes ownership of this reference (use
<link linkend="bonobo-object-dup-ref"><function>bonobo_object_dup_ref()</function></link> if you want to keep your own reference.)
</para>
<para>
Create an application client object connected to the remote (or
local) Bonobo::Application object.
</para>
<para>
<warning>Applications should not use this function. See
<link linkend="bonobo-application-register-unique"><function>bonobo_application_register_unique()</function></link>.</warning></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_server</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="BonoboAppClient"><type>BonoboAppClient</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-app-client-new-instance"/>bonobo_app_client_new_instance ()</title>
<indexterm><primary>bonobo_app_client_new_instance</primary></indexterm><programlisting><link linkend="gint">gint</link>        bonobo_app_client_new_instance  (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             <link linkend="int">int</link> argc,
                                             <link linkend="char">char</link> *argv[],
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env);</programlisting>
<para>
Ask the application server to emit a "new-instance" signal
containing the specified string vector.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_client</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="BonoboAppClient"><type>BonoboAppClient</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argc</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>argv</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&nbsp;:</term>
<listitem><simpara> array of command-line arguments
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_env</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="CORBA-Environment"><type>CORBA_Environment</type></link>, or <literal>NULL</literal>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the message return value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-app-client-msg-send-valist"/>bonobo_app_client_msg_send_valist ()</title>
<indexterm><primary>bonobo_app_client_msg_send_valist</primary></indexterm><programlisting><link linkend="GValue">GValue</link>*     bonobo_app_client_msg_send_valist
                                            (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             const <link linkend="char">char</link> *message,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env,
                                             <link linkend="GType">GType</link> first_arg_type,
                                             <link linkend="va-list">va_list</link> var_args);</programlisting>
<para>
See <link linkend="bonobo-app-client-msg-send"><function>bonobo_app_client_msg_send()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_client</parameter>&nbsp;:</term>
<listitem><simpara> client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> message name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_env</parameter>&nbsp;:</term>
<listitem><simpara> optional corba environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_arg_type</parameter>&nbsp;:</term>
<listitem><simpara> first message parameter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>var_args</parameter>&nbsp;:</term>
<listitem><simpara> remaining parameters
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> return value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-app-client-msg-send-argv"/>bonobo_app_client_msg_send_argv ()</title>
<indexterm><primary>bonobo_app_client_msg_send_argv</primary></indexterm><programlisting><link linkend="GValue">GValue</link>*     bonobo_app_client_msg_send_argv (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             const <link linkend="char">char</link> *message,
                                             const <link linkend="GValue">GValue</link> *argv[],
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env);</programlisting>
<para>
Like <link linkend="bonobo-app-client-msg-send"><function>bonobo_app_client_msg_send()</function></link>, except that it receives a single
argument vector instead of a variable number of arguments.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_client</parameter>&nbsp;:</term>
<listitem><simpara> client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> message name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&nbsp;:</term>
<listitem><simpara> <literal>NULL</literal>-terminated vector of pointers to GValue, the arguments
to pass with the message.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_env</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the message return value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="bonobo-app-client-msg-send"/>bonobo_app_client_msg_send ()</title>
<indexterm><primary>bonobo_app_client_msg_send</primary></indexterm><programlisting><link linkend="GValue">GValue</link>*     bonobo_app_client_msg_send      (<link linkend="BonoboAppClient">BonoboAppClient</link> *app_client,
                                             const <link linkend="char">char</link> *message,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_env,
                                             <link linkend="GType">GType</link> first_arg_type,
                                             ...);</programlisting>
<para>
Send a message to the application server. Takes a variable length
argument list of GType, value pairs, terminated with
<literal>G_TYPE_NONE</literal>. Values are direct C values, not GValues! Example:
<informalexample><programlisting>
GValue *retval;
retval = bonobo_app_client_msg_send (app_client, "openURL",
                                     G_TYPE_STRING, "http://www.gnome.org",
                                     G_TYPE_BOOLEAN, TRUE,
                                     G_TYPE_NONE);
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_client</parameter>&nbsp;:</term>
<listitem><simpara> the client interface associated with the application
to which we wish to send a message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> message name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_env</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_arg_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> arguments
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a GValue containing the value returned from the
aplication server.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
