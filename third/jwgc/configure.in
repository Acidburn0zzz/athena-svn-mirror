dnl Process this file with autoconf to produce a configure script.
AC_INIT(Jabber Windowgram Client,
	beta5,
	jadestorm@users.sourceforge.net,
	jwgc)
AC_CONFIG_SRCDIR([config.h.in])
AM_CONFIG_HEADER([config.h])
AC_CANONICAL_HOST
AM_INIT_AUTOMAKE

dnl OS specific options.
case "$host" in
*-*-netbsd*)
	need_dash_r=1
	;;
*-*-solaris*)
	need_dash_r=1
	;;
esac

dnl Custom args we care about.
AC_ARG_WITH(default-server,
[  --with-default-server=SERVER          change default server (jabber.org)],
[
	AC_DEFINE_UNQUOTED([DEFSERVER], "$withval",
		[Default server (other than jabber.org)])
]
)
AC_ARG_WITH(default-port,
[  --with-default-port=PORT              change default port (5222)],
[
	AC_DEFINE_UNQUOTED([DEFPORT], "$withval",
		[Default port (other than 5222)])
]
)
AC_ARG_WITH(default-sslport,
[  --with-default-sslport=PORT           change default ssl port (5223)],
[
	AC_DEFINE_UNQUOTED([DEFSSLPORT], "$withval",
		[Default ssl port (other than 5223)])
]
)
AC_ARG_WITH(default-resource,
[  --with-default-resource=RESOURCE      change default resource (jwgc)],
[
	AC_DEFINE_UNQUOTED([DEFRESOURCE], "$withval",
		[Default resource (other than jwgc)])
]
)
AC_ARG_WITH(default-presence,
[  --with-default-presence=PRESENCE      change default presence (available)],
[
	AC_DEFINE_UNQUOTED([DEFPRESENCE], "$withval",
		[Default presence (other than available)])
]
)
AC_ARG_WITH(default-priority,
[  --with-default-priority=PRIORITY      change default priority (0)],
[
	AC_DEFINE_UNQUOTED([DEFPRIORITY], "$withval",
		[Default priority (other than 0)])
]
)
AC_ARG_WITH(default-usessl,
[  --with-default-usessl=BOOL            default ssl usage (false)],
[
	AC_DEFINE_UNQUOTED([DEFUSESSL], "$withval",
		[Default ssl usage (other than false)])
]
)
AC_ARG_WITH(default-usegpg,
[  --with-default-usegpg=BOOL            default gpg usage (false)],
[
	AC_DEFINE_UNQUOTED([DEFUSEGPG], "$withval",
		[Default gpg usage (other than false)])
]
)
AC_ARG_WITH(desc-user,
[  --with-desc-user=FILENAME             user desc filename (.jwgc.desc)],
[
	AC_DEFINE_UNQUOTED([USRDESC], "$withval",
		[User desc filename (other than .jwgc.desc)])
]
)
AC_ARG_WITH(desc-default,
[  --with-desc-default=FILENAME          default desc filename (jwgc.desc)],
[
	AC_DEFINE_UNQUOTED([DEFDESC], "$withval",
		[Default desc filename (other than jwgc.desc)])
]
)
AC_ARG_WITH(vars-default,
[  --with-vars-default=FILENAME          default vars filename (jwgc.vars)],
[
	AC_DEFINE_UNQUOTED([DEFVARS], "$withval",
		[Default vars filename (other than jwgc.vars)])
]
)
AC_ARG_WITH(vars-user,
[  --with-vars-user=FILENAME             user vars filename (.jwgc.vars)],
[
	AC_DEFINE_UNQUOTED([USRVARS], "$withval",
		[User vars filename (other than .jwgc.vars)])
]
)
AC_ARG_WITH(vars-fixed,
[  --with-vars-fixed=FILENAME            fixed vars filename (jwgc.vars.fixed)],
[
	AC_DEFINE_UNQUOTED([FIXEDVARS], "$withval",
		[Fixed vars filename (other than jwgc.vars.fixed)])
]
)
AC_ARG_WITH(ssl-dir,
[  --with-ssl-dir=PATH                   path to OpenSSL installation],
[
	CFLAGS="$CFLAGS -I${withval}/include"
	CPPFLAGS="$CPPFLAGS -I${withval}/include"
	LDFLAGS="$LDFLAGS -L${withval}/lib"
	if test -n "${need_dash_r}"; then
		LDFLAGS="$LDFLAGS -R${withval}/lib"
	fi
]
)
AC_ARG_WITH(ssl-include,
[    --with-ssl-include=PATH               path to OpenSSL header files],
[
	CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"
]
)
AC_ARG_WITH(ssl-lib,
[    --with-ssl-lib=PATH                   path to OpenSSL libraries],
[
	LDFLAGS="$LDFLAGS -L${withval}"
	if test -n "${need_dash_r}"; then
		LDFLAGS="$LDFLAGS -R${withval}"
	fi
]
)
AC_ARG_WITH(gpgme-dir,
[  --with-gpgme-dir=PATH                   path to GPGME installation],
[
	CFLAGS="$CFLAGS -I${withval}/include"
	CPPFLAGS="$CPPFLAGS -I${withval}/include"
	LDFLAGS="$LDFLAGS -L${withval}/lib"
	if test -n "${need_dash_r}"; then
		LDFLAGS="$LDFLAGS -R${withval}/lib"
	fi
]
)
AC_ARG_WITH(gpgme-include,
[    --with-gpgme-include=PATH               path to GPGME header files],
[
	CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"
]
)
AC_ARG_WITH(gpgme-lib,
[    --with-gpgme-lib=PATH                   path to GPGME libraries],
[
	LDFLAGS="$LDFLAGS -L${withval}"
	if test -n "${need_dash_r}"; then
		LDFLAGS="$LDFLAGS -R${withval}"
	fi
]
)
AC_ARG_WITH(iconv-dir,
[  --with-iconv-dir=PATH                   path to iconv installation],
[
	CFLAGS="$CFLAGS -I${withval}/include"
	CPPFLAGS="$CPPFLAGS -I${withval}/include"
	LDFLAGS="$LDFLAGS -L${withval}/lib"
	if test -n "${need_dash_r}"; then
		LDFLAGS="$LDFLAGS -R${withval}/lib"
	fi
]
)
AC_ARG_WITH(iconv-include,
[    --with-iconv-include=PATH               path to iconv header files],
[
	CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"
]
)
AC_ARG_WITH(iconv-lib,
[    --with-iconv-lib=PATH                   path to iconv libraries],
[
	LDFLAGS="$LDFLAGS -L${withval}"
	if test -n "${need_dash_r}"; then
		LDFLAGS="$LDFLAGS -R${withval}"
	fi
]
)
AC_ARG_ENABLE(nodebug,
[  --enable-nodebug                      disable debugging functionality],
[
	AC_DEFINE([NODEBUG], 1,
		[Disable debugging functionality])
]
)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_AWK
AC_PROG_YACC
AC_PROG_RANLIB
AC_PROG_MAKE_SET

dnl Check some initial paths and such.
AC_PATH_X
CFLAGS="$CFLAGS -I${ac_x_includes}"
CPPFLAGS="$CPPFLAGS -I${ac_x_includes}"
LDFLAGS="$LDFLAGS -L${ac_x_libraries}"
if test -n "${need_dash_r}"; then
	LDFLAGS="$LDFLAGS -R${ac_x_libraries}"
fi

dnl Checks for libraries.
AC_CHECK_LIB(X11, XrmInitialize)
AC_CHECK_LIB(termcap, tgetent)
AC_FUNC_CHECK(connect, :, [AC_CHECK_LIB(socket, socket)
                           AC_CHECK_LIB(nsl, gethostbyname)])
AC_CHECK_LIB(resolv, res_send)
AC_CHECK_LIB(curses, tgetstr, [TLIB=-lcurses], [TLIB=-ltermcap])
AC_CHECK_LIB(gen, regcmp, [RLIB=-lgen])
AC_CHECK_LIB(ssl, kssl_krb5_free_data_contents, [CFLAGS="$CFLAGS -DOPENSSL_NO_KRB5" CPPFLAGS="$CPPFLAGS -DOPENSSL_NO_KRB5" LDFLAGS="$LDFLAGS"])
AC_CHECK_LIB(ssl, SSL_new)
AC_CHECK_LIB(crypto, SSLeay)
AC_CHECK_LIB(gpgme, gpgme_new)
AC_CHECK_LIB(iconv, libiconv)
AC_CHECK_LIB(iconv, locale_charset, :, [AC_CHECK_LIB(charset, locale_charset)])

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([ \
	gpgme.h \
	arpa/inet.h \
	ctype.h \
	errno.h \
	fcntl.h \
	libgen.h \
	math.h \
	netdb.h \
	netinet/in.h \
	nameser.h \
	resolv.h \
	openssl/ssl.h \
	pwd.h \
	regex.h \
	regexp.h \
	setjmp.h \
	signal.h \
	stdarg.h \
	stddef.h \
	stdio.h \
	stdlib.h \
	string.h \
	strings.h \
	syslog.h \
	sys/param.h \
	sys/socket.h \
	sys/stat.h \
	sys/time.h \
	sys/types.h \
	sys/un.h \
	termio.h \
	termios.h \
	time.h \
	unistd.h \
	varargs.h \
	wait.h \
	windows.h \
	iconv.h \
	libcharset.h \
])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_STRUCT_TM
AC_TYPE_SIZE_T
AC_DEFINE_UNQUOTED([MACHINE_TYPE], "$host", [Canonical machine type.])

dnl Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_FUNC_GETPGRP
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_SETPGRP
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_WAIT3
AC_CHECK_FUNCS([ \
	bzero \
	dup2 \
	gethostbyname \
	gethostname \
	getpass \
	getpassphrase \
	gettimeofday \
	isascii \
	memmove \
	memset \
	modf \
	re_comp \
	regcmp \
	regcomp \
	select \
	socket \
	strcasecmp \
	strchr \
	strdup \
	strerror \
	strncasecmp \
	strrchr \
	strstr \
	usleep \
	waitpid \
])

dnl Create files necessary to compile jwgc.
AC_CONFIG_FILES([
	Makefile
	lib/Makefile
	lib/libxode/Makefile
	lib/libjabber/Makefile
	lib/libjwgc/Makefile
	clients/Makefile
	clients/jwgc/Makefile
	clients/jlocate/Makefile
	clients/jwrite/Makefile
	clients/jctl/Makefile
	clients/jstat/Makefile
])
AC_OUTPUT
