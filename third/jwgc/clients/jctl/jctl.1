.\" Automatically generated by Pod::Man version 1.15
.\" Tue Apr 13 14:45:57 2004
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "JCTL 1"
.TH JCTL 1 "beta4" "2004-04-13" "Jabber Windowgram Client"
.UC
.SH "NAME"
jctl \- control the Jwgc session
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
jctl [ \-h ] [ \-d <flags> ] command < args... >
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIJctl\fR is used to control the status of the Jwgc process.  It operates
by accepting a command and various args from the command line.  The commands
are listed and explained below, as well as the few options.  Note that when
a jid is requested that it is important to specify the full jid.  This includes
contacts behind transports.  For example, if you know someone in \s-1AIM\s0 called
NinjaMan3 and you wanted to subscribe to their presence, you might type:
.PP
jctl\ subscribe\ NinjaMan3@aim.jabber.somewhere.org
.Sh "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
\&\fIJctl\fR understands the following options:
.PP
\&\-h             Displays usage information.
.PP
\&\-d <flags>     Debugging output.  Run without <flags> for usage.
.PP
The debugging output referred to above is for \fIjctl\fR, not \fIjwgc\fR.  The
\&\fIdebug\fR command below affects \fIjwgc\fR.
.Sh "\s-1COMMANDS\s0"
.IX Subsection "COMMANDS"
\&\fIjctl\fR understands the following commands:
.PP
help                   Displays usage information
.PP
.Vb 1
\&        Same as -h.
.Ve
reread                 Reread description file ($HOME/.jwgc.desc)
.PP
.Vb 5
\&        This command triggers I<jwgc> to reread this description file
\&        and incorporate any changes you have made to it since the last
\&        time it was read (which is normally when I<jwgc> is first
\&        invoked.  The description file is explained in detail in
\&        jwgc.desc(5).
.Ve
subscribe \fIjid\fR          Subscribe to a user's presence
.PP
.Vb 3
\&        This triggers I<jwgc> to subscribe you to the presence of
\&        the I<jid> you specify, thereby adding them to your contact
\&        list.
.Ve
unsubscribe \fIjid\fR        Unsubscribe from a user's presence
.PP
.Vb 3
\&        This triggers I<jwgc> to unsubscribe you from the presence of
\&        the I<jid> you specify, thereby removing them from your contact
\&        list.  The same rules apply here that apply to I<subscribe>.
.Ve
nickname \fIjid\fR \fInick\fR      Gives a contact a nickname
.PP
.Vb 5
\&        This triggers I<jwgc> to set a nickname on a contact.  This
\&        nickname can then be used to refer to the contact from I<jwrite>
\&        and will be show in many of the output formats of I<jlocate>.
\&        If you want to remove a nickname from a contact, you can leave
\&        off I<nick>.
.Ve
group \fIjid\fR \fIgroup\fR        Puts a contact in a group
.PP
.Vb 4
\&        This triggers I<jwgc> to make a contact a member of a group.
\&        This can be show via the -g option of I<jlocate> and can help
\&        you organize your contact list.  If you want to remove a contact
\&        from a group, you can leave off I<group>.
.Ve
join \fIjid\fR                  Join conference chatroom
.PP
.Vb 4
\&        Joins a chat room identified by the jid.  The jid is normally
\&        something like roomname@hostname/nickname.  Nickname is what
\&        you would like to be called in the chat room.
\&        Eg: jdev@conference.jabber.org/chatguy
.Ve
leave \fIjid\fR                 Leave conference chatroom
.PP
.Vb 2
\&        Leaves a chat room identified by the jid.  The jid is normally
\&        something like roomname@hostname.  Eg: help@conference.jabber.org.
.Ve
debug \fIdebugflags\fR          Configures jwgc debugging output
.PP
.Vb 3
\&        Allows you to change debugging flags on the fly.  Takes the
\&        same style of flags as the -d option.  Note that this adjusts
\&        jwgc, not jctl.
.Ve
set \fIvar\fR \fIsetting\fR        Set variable
.PP
.Vb 1
\&        This sets a variable in the currently running jwgc.
.Ve
show \fIvar\fR                  Show variable setting
.PP
.Vb 2
\&        This shows the current setting of the specified variable
\&        in the currently running jwgc.
.Ve
shutdown               Log off of Jabber server and shut down \fIjwgc\fR
.PP
.Vb 3
\&        This triggers I<jwgc> to log you off of the Jabber server and
\&        shut itself down.  You should use this to shut down and log off
\&        cleanly.
.Ve
register \fIjid\fR        Register with a transport
.PP
.Vb 5
\&        This triggers I<jwgc> to register you with a transport.  You
\&        should use the jid of the transport, not the "name".
\&        You should check I<jstat> to see what transports are
\&        available.  This will return a form for you to fill out
\&        if the transport allows registration.
.Ve
search \fIjid\fR          Search a transport
.PP
.Vb 3
\&        This triggers I<jwgc> to perform a search with the specified
\&        transport I<jid>.  This will return a form for you to fill you
\&        with search parameters.
.Ve
debug \fIflags\fR         Alter debug flags
.PP
.Vb 7
\&        Allows you to change debug flags on the fly by specifying them
\&        just as you would from the command line.  This only affects the
\&        debugging state of I<jwgc> and is modifying what is already set.
\&        For instance, if you have the I<jab> debugging flag turned on,
\&        and you specify I<-jab> to I<jctl debug>, you will turn off
\&        jabber communication debugging output and will not affect any
\&        other debugging flags.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Henninger <jadestorm@users.sourceforge.net>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002 Daniel Henninger. All right reserved.
This program is free software; you can redistribute it
and/or modify it under the terms explained in the \fB\s-1LICENSE\s0\fR
file that comes with the \fIjwgc\fR distribution.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIjwgc\fR\|(1), \fIjwrite\fR\|(1), \fIjctl\fR\|(1), \fIjlocate\fR\|(1)
