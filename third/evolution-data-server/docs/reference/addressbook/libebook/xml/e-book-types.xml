<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libebook-e-book-types">
<refmeta>
<refentrytitle>e-book-types</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBEBOOK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>e-book-types</refname><refpurpose>
Client-side GOBject which exposes the
Evolution:BookListener interface.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="E-BOOK-ERROR-CAPS">E_BOOK_ERROR</link>
<link linkend="GQuark">GQuark</link>      <link linkend="e-book-error-quark">e_book_error_quark</link>              (void);
enum        <link linkend="EBookStatus">EBookStatus</link>;
enum        <link linkend="EBookViewStatus">EBookViewStatus</link>;
enum        <link linkend="EBookChangeType">EBookChangeType</link>;
struct      <link linkend="EBookChange">EBookChange</link>;
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="E-BOOK-ERROR-CAPS"/>E_BOOK_ERROR</title>
<indexterm><primary>E_BOOK_ERROR</primary></indexterm><programlisting>#define E_BOOK_ERROR e_book_error_quark()
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="e-book-error-quark"/>e_book_error_quark ()</title>
<indexterm><primary>e_book_error_quark</primary></indexterm><programlisting><link linkend="GQuark">GQuark</link>      e_book_error_quark              (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="EBookStatus"/>enum EBookStatus</title>
<indexterm><primary>EBookStatus</primary></indexterm><programlisting>typedef enum {
	E_BOOK_ERROR_OK,
	E_BOOK_ERROR_INVALID_ARG,
	E_BOOK_ERROR_BUSY,
	E_BOOK_ERROR_REPOSITORY_OFFLINE,
	E_BOOK_ERROR_NO_SUCH_BOOK,
	E_BOOK_ERROR_NO_SELF_CONTACT,
	E_BOOK_ERROR_SOURCE_NOT_LOADED,
	E_BOOK_ERROR_SOURCE_ALREADY_LOADED,
	E_BOOK_ERROR_PERMISSION_DENIED,
	E_BOOK_ERROR_CONTACT_NOT_FOUND,
	E_BOOK_ERROR_CONTACT_ID_ALREADY_EXISTS,
	E_BOOK_ERROR_PROTOCOL_NOT_SUPPORTED,
	E_BOOK_ERROR_CANCELLED,
	E_BOOK_ERROR_COULD_NOT_CANCEL,
	E_BOOK_ERROR_AUTHENTICATION_FAILED,
	E_BOOK_ERROR_AUTHENTICATION_REQUIRED,
	E_BOOK_ERROR_TLS_NOT_AVAILABLE,
	E_BOOK_ERROR_CORBA_EXCEPTION,
	E_BOOK_ERROR_NO_SUCH_SOURCE,
	E_BOOK_ERROR_OTHER_ERROR
} EBookStatus;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="EBookViewStatus"/>enum EBookViewStatus</title>
<indexterm><primary>EBookViewStatus</primary></indexterm><programlisting>typedef enum {
	E_BOOK_VIEW_STATUS_OK,
	E_BOOK_VIEW_STATUS_TIME_LIMIT_EXCEEDED,
	E_BOOK_VIEW_STATUS_SIZE_LIMIT_EXCEEDED,
	E_BOOK_VIEW_ERROR_INVALID_QUERY,
	E_BOOK_VIEW_ERROR_QUERY_REFUSED,
	E_BOOK_VIEW_ERROR_OTHER_ERROR
} EBookViewStatus;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="EBookChangeType"/>enum EBookChangeType</title>
<indexterm><primary>EBookChangeType</primary></indexterm><programlisting>typedef enum {
	E_BOOK_CHANGE_CARD_ADDED,
	E_BOOK_CHANGE_CARD_DELETED,
	E_BOOK_CHANGE_CARD_MODIFIED
} EBookChangeType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="EBookChange"/>struct EBookChange</title>
<indexterm><primary>EBookChange</primary></indexterm><programlisting>struct EBookChange {

	EBookChangeType  change_type;
	EContact        *contact;
};
</programlisting>
<para>

</para></refsect2>

</refsect1>




</refentry>
