<refentry id="gconf-gconf-value">
<refmeta>
<refentrytitle>GConfValue, GConfEntry, GConfMetaInfo</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GCONF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GConfValue, GConfEntry, GConfMetaInfo</refname><refpurpose>
A <link linkend="GConfValue">GConfValue</link> stores a dynamically-typed value. A <link linkend="GConfEntry">GConfEntry</link> stores a
key-value pair.  A <link linkend="GConfMetaInfo">GConfMetaInfo</link> stores metainformation about a key.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="GConfValueType">GConfValueType</link>;
struct      <link linkend="GConfValue">GConfValue</link>;
#define     <link linkend="GCONF-VALUE-TYPE-VALID-CAPS">GCONF_VALUE_TYPE_VALID</link>          (x)
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-new">gconf_value_new</link>                 (<link linkend="GConfValueType">GConfValueType</link> type);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-copy">gconf_value_copy</link>                (const <link linkend="GConfValue">GConfValue</link> *src);
void        <link linkend="gconf-value-free">gconf_value_free</link>                (<link linkend="GConfValue">GConfValue</link> *value);
const char* <link linkend="gconf-value-get-string">gconf_value_get_string</link>          (const <link linkend="GConfValue">GConfValue</link> *value);
int         <link linkend="gconf-value-get-int">gconf_value_get_int</link>             (const <link linkend="GConfValue">GConfValue</link> *value);
<link linkend="double">double</link>      <link linkend="gconf-value-get-float">gconf_value_get_float</link>           (const <link linkend="GConfValue">GConfValue</link> *value);
<link linkend="GConfValueType">GConfValueType</link> <link linkend="gconf-value-get-list-type">gconf_value_get_list_type</link>    (const <link linkend="GConfValue">GConfValue</link> *value);
<link linkend="GSList">GSList</link>*     <link linkend="gconf-value-get-list">gconf_value_get_list</link>            (const <link linkend="GConfValue">GConfValue</link> *value);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-get-car">gconf_value_get_car</link>             (const <link linkend="GConfValue">GConfValue</link> *value);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-get-cdr">gconf_value_get_cdr</link>             (const <link linkend="GConfValue">GConfValue</link> *value);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-value-get-bool">gconf_value_get_bool</link>            (const <link linkend="GConfValue">GConfValue</link> *value);
<link linkend="GConfSchema">GConfSchema</link>* <link linkend="gconf-value-get-schema">gconf_value_get_schema</link>         (const <link linkend="GConfValue">GConfValue</link> *value);
void        <link linkend="gconf-value-set-int">gconf_value_set_int</link>             (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="gint">gint</link> the_int);
void        <link linkend="gconf-value-set-string">gconf_value_set_string</link>          (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="gchar">gchar</link> *the_str);
void        <link linkend="gconf-value-set-float">gconf_value_set_float</link>           (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="gdouble">gdouble</link> the_float);
void        <link linkend="gconf-value-set-bool">gconf_value_set_bool</link>            (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="gboolean">gboolean</link> the_bool);
void        <link linkend="gconf-value-set-schema">gconf_value_set_schema</link>          (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="GConfSchema">GConfSchema</link> *sc);
void        <link linkend="gconf-value-set-schema-nocopy">gconf_value_set_schema_nocopy</link>   (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfSchema">GConfSchema</link> *sc);
void        <link linkend="gconf-value-set-car">gconf_value_set_car</link>             (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="GConfValue">GConfValue</link> *car);
void        <link linkend="gconf-value-set-car-nocopy">gconf_value_set_car_nocopy</link>      (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfValue">GConfValue</link> *car);
void        <link linkend="gconf-value-set-cdr">gconf_value_set_cdr</link>             (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="GConfValue">GConfValue</link> *cdr);
void        <link linkend="gconf-value-set-cdr-nocopy">gconf_value_set_cdr_nocopy</link>      (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfValue">GConfValue</link> *cdr);
void        <link linkend="gconf-value-set-list-type">gconf_value_set_list_type</link>       (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfValueType">GConfValueType</link> type);
void        <link linkend="gconf-value-set-list-nocopy">gconf_value_set_list_nocopy</link>     (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GSList">GSList</link> *list);
void        <link linkend="gconf-value-set-list">gconf_value_set_list</link>            (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GSList">GSList</link> *list);
<link linkend="gchar">gchar</link>*      <link linkend="gconf-value-to-string">gconf_value_to_string</link>           (const <link linkend="GConfValue">GConfValue</link> *value);
struct      <link linkend="GConfMetaInfo">GConfMetaInfo</link>;
<link linkend="GConfMetaInfo">GConfMetaInfo</link>* <link linkend="gconf-meta-info-new">gconf_meta_info_new</link>          (void);
void        <link linkend="gconf-meta-info-free">gconf_meta_info_free</link>            (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);
const char* <link linkend="gconf-meta-info-get-schema">gconf_meta_info_get_schema</link>      (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);
const char* <link linkend="gconf-meta-info-get-mod-user">gconf_meta_info_get_mod_user</link>    (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);
<link linkend="GTime">GTime</link>       <link linkend="gconf-meta-info-mod-time">gconf_meta_info_mod_time</link>        (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);
void        <link linkend="gconf-meta-info-set-schema">gconf_meta_info_set_schema</link>      (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi,
                                             const <link linkend="gchar">gchar</link> *schema_name);
void        <link linkend="gconf-meta-info-set-mod-user">gconf_meta_info_set_mod_user</link>    (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi,
                                             const <link linkend="gchar">gchar</link> *mod_user);
void        <link linkend="gconf-meta-info-set-mod-time">gconf_meta_info_set_mod_time</link>    (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi,
                                             <link linkend="GTime">GTime</link> mod_time);
struct      <link linkend="GConfEntry">GConfEntry</link>;
<link linkend="GConfEntry">GConfEntry</link>* <link linkend="gconf-entry-new-nocopy">gconf_entry_new_nocopy</link>          (<link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValue">GConfValue</link> *val);
void        <link linkend="gconf-entry-free">gconf_entry_free</link>                (<link linkend="GConfEntry">GConfEntry</link> *entry);
const char* <link linkend="gconf-entry-get-key">gconf_entry_get_key</link>             (const <link linkend="GConfEntry">GConfEntry</link> *entry);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-entry-get-value">gconf_entry_get_value</link>           (const <link linkend="GConfEntry">GConfEntry</link> *entry);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-entry-steal-value">gconf_entry_steal_value</link>         (<link linkend="GConfEntry">GConfEntry</link> *entry);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-entry-get-is-default">gconf_entry_get_is_default</link>      (const <link linkend="GConfEntry">GConfEntry</link> *entry);
const char* <link linkend="gconf-entry-get-schema-name">gconf_entry_get_schema_name</link>     (const <link linkend="GConfEntry">GConfEntry</link> *entry);
void        <link linkend="gconf-entry-set-is-default">gconf_entry_set_is_default</link>      (<link linkend="GConfEntry">GConfEntry</link> *entry,
                                             <link linkend="gboolean">gboolean</link> is_default);
void        <link linkend="gconf-entry-set-schema-name">gconf_entry_set_schema_name</link>     (<link linkend="GConfEntry">GConfEntry</link> *entry,
                                             const <link linkend="gchar">gchar</link> *name);
void        <link linkend="gconf-entry-set-value-nocopy">gconf_entry_set_value_nocopy</link>    (<link linkend="GConfEntry">GConfEntry</link> *entry,
                                             <link linkend="GConfValue">GConfValue</link> *val);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
<link linkend="GConfValue">GConfValue</link> stores one of the value types GConf understands; GConf
uses <link linkend="GConfValue">GConfValue</link> to pass values around because it doesn't know the
type of its values at compile time. 
</para>

<para>
A <link linkend="GConfEntry">GConfEntry</link> pairs a relative key
name with a value, for example if the value "10" is stored at the key 
"/foo/bar/baz", the <link linkend="GConfEntry">GConfEntry</link> will store "baz" and "10".
</para>

<para>
A <link linkend="GConfMetaInfo">GConfMetaInfo</link> object holds metainformation about a key, such as 
its last modification time and the name of the schema associated with
it. You should rarely if ever need to use <link linkend="GConfMetaInfo">GConfMetaInfo</link>.
(In fact you can't get the metainfo for a key using the current API.)
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GConfValueType">enum GConfValueType</title>
<programlisting>typedef enum { /*&lt; prefix=GCONF_VALUE &gt;*/
  GCONF_VALUE_INVALID,
  GCONF_VALUE_STRING,
  GCONF_VALUE_INT,
  GCONF_VALUE_FLOAT,
  GCONF_VALUE_BOOL,
  GCONF_VALUE_SCHEMA,

  /* unfortunately these aren't really types; we want list_of_string,
     list_of_int, etc.  but it's just too complicated to implement.
     instead we'll complain in various places if you do something
     moronic like mix types in a list or treat pair&lt;string,int&gt; and
     pair&lt;float,bool&gt; as the same type. */
  GCONF_VALUE_LIST,
  GCONF_VALUE_PAIR
  
} GConfValueType;
</programlisting>
<para>
Used to indicate the type of a <link linkend="GConfValue">GConfValue</link>.
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>GCONF_VALUE_INVALID</literal></entry>
<entry>Never the type of a <link linkend="GConfValue">GConfValue</link> obtained from GConf functions; used to indicate errors and the like.
</entry>
</row>
<row>
<entry><literal>GCONF_VALUE_STRING</literal></entry>
<entry>String value (<link linkend="gchar">gchar</link>*).
</entry>
</row>
<row>
<entry><literal>GCONF_VALUE_INT</literal></entry>
<entry>Integer value (<link linkend="gint">gint</link>).
</entry>
</row>
<row>
<entry><literal>GCONF_VALUE_FLOAT</literal></entry>
<entry>Floating point value (<link linkend="gdouble">gdouble</link>).
</entry>
</row>
<row>
<entry><literal>GCONF_VALUE_BOOL</literal></entry>
<entry>Boolean value (<link linkend="gboolean">gboolean</link>).
</entry>
</row>
<row>
<entry><literal>GCONF_VALUE_SCHEMA</literal></entry>
<entry>Schema value (<link linkend="GConfSchema">GConfSchema</link>).
</entry>
</row>
<row>
<entry><literal>GCONF_VALUE_LIST</literal></entry>
<entry>List of <link linkend="GConfValue">GConfValue</link>; <link linkend="GConfValue">GConfValue</link> elements must have
a primitive type (i.e. they may not be lists or pairs), and all elements
of a list must have the same type.
</entry>
</row>
<row>
<entry><literal>GCONF_VALUE_PAIR</literal></entry>
<entry>Pair of <link linkend="GConfValue">GConfValue</link>; the first field (car) and the second
field (cdr) may have different types. The two elements of a pair must be primitive
types, not lists or pairs.

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GConfValue">struct GConfValue</title>
<programlisting>struct GConfValue {
  GConfValueType type;
};
</programlisting>
<para>
Represents a dynamically-typed value. The <parameter>type</parameter> field tells you the
type of the value; the other fields should be accessed with the
accessor functions and macros.
</para>

<para>
<emphasis>A <link linkend="GConfValue">GConfValue</link> should always
be initialized before use. That is, you should not use a <link linkend="GConfValue">GConfValue</link>
unless you have called one of the functions beginning with
"gconf_value_set_".</emphasis>. For lists, initialization has two
steps: first you must set the list element type, then you must set the
list value.
</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="GConfValueType">GConfValueType</link> <structfield>type</structfield></entry>
<entry>The <link linkend="GConfValueType">GConfValueType</link> of this <link linkend="GConfValue">GConfValue</link>. The only field of
<link linkend="GConfValue">GConfValue</link> you should access directly.

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GCONF-VALUE-TYPE-VALID-CAPS">GCONF_VALUE_TYPE_VALID()</title>
<programlisting>#define GCONF_VALUE_TYPE_VALID(x) (((x) &gt; GCONF_VALUE_INVALID) &amp;&amp; ((x) &lt;= GCONF_VALUE_PAIR))
</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-new">gconf_value_new ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_new                 (<link linkend="GConfValueType">GConfValueType</link> type);</programlisting>
<para>
Creates a new <link linkend="GConfValue">GConfValue</link> with type <parameter>type</parameter>. The type is immutable after
creation; values have a fixed type. You <emphasis>must</emphasis>
initialize the <link linkend="GConfValue">GConfValue</link> after creation; that is, you must set its 
value with one of the "setter" functions.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>type of the new <link linkend="GConfValue">GConfValue</link>.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>newly-allocated <link linkend="GConfValue">GConfValue</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-copy">gconf_value_copy ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_copy                (const <link linkend="GConfValue">GConfValue</link> *src);</programlisting>
<para>
Copies a <link linkend="GConfValue">GConfValue</link>. The copy is a deep copy, that is, any allocated
memory inside the <link linkend="GConfValue">GConfValue</link> will also be copied.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>src</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> to copy.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a newly-allocated <link linkend="GConfValue">GConfValue</link> identical to <parameter>src</parameter>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-free">gconf_value_free ()</title>
<programlisting>void        gconf_value_free                (<link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Deallocates a <link linkend="GConfValue">GConfValue</link>. Also deallocates any allocated memory
inside the <link linkend="GConfValue">GConfValue</link> (such as lists, pair members, strings, and schemas).
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> to destroy.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-string">gconf_value_get_string ()</title>
<programlisting>const char* gconf_value_get_string          (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns a <symbol>const gchar*</symbol> for a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_STRING</literal>. The returned string is <emphasis>not</emphasis> a
copy, don't try to free it. It is "owned" by the <link linkend="GConfValue">GConfValue</link> and will
be destroyed when the <link linkend="GConfValue">GConfValue</link> is destroyed.
</para>

<para>
If the <link linkend="GConfValue">GConfValue</link> is not initialized (i.e. no one has called
<link linkend="gconf-value-set-string">gconf_value_set_string</link>()) then the string may be
<symbol>NULL</symbol>, but of course you should not try to use an
uninitialized <link linkend="GConfValue">GConfValue</link>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-int">gconf_value_get_int ()</title>
<programlisting>int         gconf_value_get_int             (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns a <link linkend="gint">gint</link> for a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_INT</literal>. 
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-float">gconf_value_get_float ()</title>
<programlisting><link linkend="double">double</link>      gconf_value_get_float           (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns a <link linkend="gdouble">gdouble</link> for a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_DOUBLE</literal>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-list-type">gconf_value_get_list_type ()</title>
<programlisting><link linkend="GConfValueType">GConfValueType</link> gconf_value_get_list_type    (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns the type of the list elements in a <link linkend="GConfValue">GConfValue</link> with type 
<literal>GCONF_VALUE_LIST</literal>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-list">gconf_value_get_list ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gconf_value_get_list            (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns a <link linkend="GSList">GSList</link> containing <link linkend="GConfValue">GConfValue</link> objects. Each <link linkend="GConfValue">GConfValue</link> in
the returned list will have the type returned by
<link linkend="gconf-value-get-list-type">gconf_value_get_list_type</link>(). Remember that the empty <link linkend="GSList">GSList</link> is equal to
<symbol>NULL</symbol>.  The list is not a copy; it is "owned" by the
<link linkend="GConfValue">GConfValue</link> and will be destroyed when the <link linkend="GConfValue">GConfValue</link> is destroyed.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-car">gconf_value_get_car ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_get_car             (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns the first member (car) of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_PAIR</literal>. The car is another <link linkend="GConfValue">GConfValue</link>, with a primitive
type (bool, int, float, string, schema).
</para>

<para>
The returned value is not a copy; it is "owned" by the pair and will
be destroyed when the pair is destroyed.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-cdr">gconf_value_get_cdr ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_get_cdr             (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns the second member (cdr) of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_PAIR</literal>. The cdr is another <link linkend="GConfValue">GConfValue</link>, with a primitive
type (bool, int, float, string, schema).
</para>

<para>
The returned value is not a copy; it is "owned" by the pair and will
be destroyed when the pair is destroyed.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-bool">gconf_value_get_bool ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_value_get_bool            (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns a <link linkend="gboolean">gboolean</link> for a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_BOOL</literal>. 
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-get-schema">gconf_value_get_schema ()</title>
<programlisting><link linkend="GConfSchema">GConfSchema</link>* gconf_value_get_schema         (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Returns a <link linkend="GConfSchema">GConfSchema</link> for a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_SCHEMA</literal>. If the <link linkend="GConfValue">GConfValue</link> is uninitialized, it 
may return <symbol>NULL</symbol>; but of course you should have
initialized the <link linkend="GConfValue">GConfValue</link>. The GConf library will not return values
with a <symbol>NULL</symbol> schema.
</para>

<para>
The returned value is not a copy; it is "owned" by the <link linkend="GConfValue">GConfValue</link> and will
be destroyed when the <link linkend="GConfValue">GConfValue</link> is destroyed.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-int">gconf_value_set_int ()</title>
<programlisting>void        gconf_value_set_int             (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="gint">gint</link> the_int);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_INT</literal>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> of type <literal>GCONF_VALUE_INT</literal>.
</entry></row>
<row><entry align="right"><parameter>the_int</parameter>&nbsp;:</entry>
<entry>the integer.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-string">gconf_value_set_string ()</title>
<programlisting>void        gconf_value_set_string          (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="gchar">gchar</link> *the_str);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_STRING</literal>. <parameter>the_str</parameter> is copied.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> of type <literal>GCONF_VALUE_STRING</literal>.
</entry></row>
<row><entry align="right"><parameter>the_str</parameter>&nbsp;:</entry>
<entry>the string.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-float">gconf_value_set_float ()</title>
<programlisting>void        gconf_value_set_float           (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="gdouble">gdouble</link> the_float);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_FLOAT</literal>. 
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> of type <literal>GCONF_VALUE_FLOAT</literal>.
</entry></row>
<row><entry align="right"><parameter>the_float</parameter>&nbsp;:</entry>
<entry>the floating point number.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-bool">gconf_value_set_bool ()</title>
<programlisting>void        gconf_value_set_bool            (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="gboolean">gboolean</link> the_bool);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_BOOL</literal>. 
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> of type <literal>GCONF_VALUE_BOOL</literal>.
</entry></row>
<row><entry align="right"><parameter>the_bool</parameter>&nbsp;:</entry>
<entry>a boolean value (<symbol>TRUE</symbol> or <symbol>FALSE</symbol>).


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-schema">gconf_value_set_schema ()</title>
<programlisting>void        gconf_value_set_schema          (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="GConfSchema">GConfSchema</link> *sc);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_SCHEMA</literal>. The
<link linkend="GConfSchema">GConfSchema</link> is copied. Alternatively you can use
<link linkend="gconf-value-set-schema-nocopy">gconf_value_set_schema_nocopy</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_SCHEMA</literal>.
</entry></row>
<row><entry align="right"><parameter>sc</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfSchema">GConfSchema</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-schema-nocopy">gconf_value_set_schema_nocopy ()</title>
<programlisting>void        gconf_value_set_schema_nocopy   (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfSchema">GConfSchema</link> *sc);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_SCHEMA</literal>. The <link linkend="GConfSchema">GConfSchema</link> is <emphasis>not</emphasis>
copied; the <link linkend="GConfValue">GConfValue</link> takes ownership of it, and it should only be
accessed via the <link linkend="gconf-value-get-schema">gconf_value_get_schema</link>() macro. This function is provided 
as a more efficient version of <link linkend="gconf-value-set-schema">gconf_value_set_schema</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_SCHEMA</literal>.
</entry></row>
<row><entry align="right"><parameter>sc</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfSchema">GConfSchema</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-car">gconf_value_set_car ()</title>
<programlisting>void        gconf_value_set_car             (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="GConfValue">GConfValue</link> *car);</programlisting>
<para>
Sets the value of the first field (car) of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_PAIR</literal>. The <link linkend="GConfValue">GConfValue</link> is copied. Alternatively, use
<link linkend="gconf-value-set-car-nocopy">gconf_value_set_car_nocopy</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_PAIR</literal>.
</entry></row>
<row><entry align="right"><parameter>car</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfValue">GConfValue</link> to set as the car of the pair.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-car-nocopy">gconf_value_set_car_nocopy ()</title>
<programlisting>void        gconf_value_set_car_nocopy      (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfValue">GConfValue</link> *car);</programlisting>
<para>
Sets the value of the first field (car) of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_PAIR</literal>. The <link linkend="GConfValue">GConfValue</link> is <emphasis>not</emphasis> copied;
the <link linkend="GConfValue">GConfValue</link> takes ownership of it. Alternatively, use
<link linkend="gconf-value-set-car">gconf_value_set_car</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_PAIR</literal>.
</entry></row>
<row><entry align="right"><parameter>car</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfValue">GConfValue</link> to set as the car of the pair.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-cdr">gconf_value_set_cdr ()</title>
<programlisting>void        gconf_value_set_cdr             (<link linkend="GConfValue">GConfValue</link> *value,
                                             const <link linkend="GConfValue">GConfValue</link> *cdr);</programlisting>
<para>
Sets the value of the second field (cdr) of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_PAIR</literal>. The <link linkend="GConfValue">GConfValue</link> is copied. Alternatively, use
<link linkend="gconf-value-set-cdr-nocopy">gconf_value_set_cdr_nocopy</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_PAIR</literal>.
</entry></row>
<row><entry align="right"><parameter>cdr</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfValue">GConfValue</link> to set as the cdr of the pair.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-cdr-nocopy">gconf_value_set_cdr_nocopy ()</title>
<programlisting>void        gconf_value_set_cdr_nocopy      (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfValue">GConfValue</link> *cdr);</programlisting>
<para>
Sets the value of the second field (cdr) of a <link linkend="GConfValue">GConfValue</link> with type
<literal>GCONF_VALUE_PAIR</literal>. The <link linkend="GConfValue">GConfValue</link> is <emphasis>not</emphasis> copied;
the <link linkend="GConfValue">GConfValue</link> takes ownership of it. Alternatively, use
<link linkend="gconf-value-set-cdr">gconf_value_set_cdr</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_PAIR</literal>.
</entry></row>
<row><entry align="right"><parameter>cdr</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfValue">GConfValue</link> to set as the cdr of the pair.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-list-type">gconf_value_set_list_type ()</title>
<programlisting>void        gconf_value_set_list_type       (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GConfValueType">GConfValueType</link> type);</programlisting>
<para>
Sets the type of the elements in a <link linkend="GConfValue">GConfValue</link> of type
<literal>GCONF_VALUE_LIST</literal>. All the elements in the list must have the same
type. You must set the list type before you can set the list value.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_LIST</literal>.
</entry></row>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>the type of elements in this list.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-list-nocopy">gconf_value_set_list_nocopy ()</title>
<programlisting>void        gconf_value_set_list_nocopy     (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GSList">GSList</link> *list);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_LIST</literal>.  The
<parameter>list</parameter> argument should be a <link linkend="GSList">GSList</link> of <link linkend="GConfValue">GConfValue</link>. Each <link linkend="GConfValue">GConfValue</link> in
the list must have the same type, and this type must be specified in
advance with <link linkend="gconf-value-set-list-type">gconf_value_set_list_type</link>(). This function does
<emphasis>not</emphasis> copy the list; the <link linkend="GConfValue">GConfValue</link> will take
ownership of the list and its contents, and they will be destroyed
when the <link linkend="GConfValue">GConfValue</link> is destroyed. Alternatively, use
<link linkend="gconf-value-set-list">gconf_value_set_list</link>() to make a copy.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_LIST</literal>.
</entry></row>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>the <link linkend="GSList">GSList</link> of <link linkend="GConfValue">GConfValue</link> to set as the list value.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-set-list">gconf_value_set_list ()</title>
<programlisting>void        gconf_value_set_list            (<link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GSList">GSList</link> *list);</programlisting>
<para>
Sets the value of a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_LIST</literal>.  The
<parameter>list</parameter> argument should be a <link linkend="GSList">GSList</link> of <link linkend="GConfValue">GConfValue</link>. Each <link linkend="GConfValue">GConfValue</link> in
the list must have the same type, and this type must be specified in
advance with <link linkend="gconf-value-set-list-type">gconf_value_set_list_type</link>(). This function copies the
list; it will not modify the <parameter>list</parameter> argument.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link> with type <literal>GCONF_VALUE_LIST</literal>.
</entry></row>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>the <link linkend="GSList">GSList</link> of <link linkend="GConfValue">GConfValue</link> to set as the list value.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-to-string">gconf_value_to_string ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_value_to_string           (const <link linkend="GConfValue">GConfValue</link> *value);</programlisting>
<para>
Creates a human-readable string representation of a <link linkend="GConfValue">GConfValue</link>. This
is intended for debugging and the like; the string representation is
not suitable for reliable machine parsing (that is, you shouldn't use
this function to save a value to a file or anything like that). The
exact nature of the string representation may change in future
versions. The returned string is newly-allocated and must be freed
with <link linkend="g-free">g_free</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfValue">GConfValue</link>.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a newly-allocated string representing the <link linkend="GConfValue">GConfValue</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GConfMetaInfo">struct GConfMetaInfo</title>
<programlisting>struct GConfMetaInfo {
  gchar* schema;
  gchar* mod_user; /* user owning the daemon that made the last modification */
  GTime  mod_time; /* time of the modification */
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-new">gconf_meta_info_new ()</title>
<programlisting><link linkend="GConfMetaInfo">GConfMetaInfo</link>* gconf_meta_info_new          (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-free">gconf_meta_info_free ()</title>
<programlisting>void        gconf_meta_info_free            (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gcmi</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-get-schema">gconf_meta_info_get_schema ()</title>
<programlisting>const char* gconf_meta_info_get_schema      (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gcmi</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-get-mod-user">gconf_meta_info_get_mod_user ()</title>
<programlisting>const char* gconf_meta_info_get_mod_user    (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gcmi</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-mod-time">gconf_meta_info_mod_time ()</title>
<programlisting><link linkend="GTime">GTime</link>       gconf_meta_info_mod_time        (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gcmi</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-set-schema">gconf_meta_info_set_schema ()</title>
<programlisting>void        gconf_meta_info_set_schema      (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi,
                                             const <link linkend="gchar">gchar</link> *schema_name);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gcmi</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>schema_name</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-set-mod-user">gconf_meta_info_set_mod_user ()</title>
<programlisting>void        gconf_meta_info_set_mod_user    (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi,
                                             const <link linkend="gchar">gchar</link> *mod_user);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gcmi</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mod_user</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-meta-info-set-mod-time">gconf_meta_info_set_mod_time ()</title>
<programlisting>void        gconf_meta_info_set_mod_time    (<link linkend="GConfMetaInfo">GConfMetaInfo</link> *gcmi,
                                             <link linkend="GTime">GTime</link> mod_time);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>gcmi</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mod_time</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GConfEntry">struct GConfEntry</title>
<programlisting>struct GConfEntry {
  char *key;
  GConfValue *value;
};
</programlisting>
<para>
Stores an entry from a GConf "directory," including a key-value pair,
the name of the schema applicable to this entry, whether the value is
a default value, and whether GConf can write a new value at this
key. <parameter>key</parameter> should be an absolute key, not a relative key.  (Note that
internally GConf breaks this rule sometimes; but in the public
interface, <parameter>key</parameter> is always an absolute key.)  To access the key and
value, use <link linkend="gconf-entry-get-key">gconf_entry_get_key</link>() and <link linkend="gconf-entry-get-value">gconf_entry_get_value</link>().
</para>

<warning><para>Value can be <symbol>NULL</symbol>, indicating that the
value is not set.</para></warning><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry>char *<structfield>key</structfield></entry>
<entry>an absolute key name
</entry>
</row>
<row>
<entry><link linkend="GConfValue">GConfValue</link> *<structfield>value</structfield></entry>
<entry>

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-new-nocopy">gconf_entry_new_nocopy ()</title>
<programlisting><link linkend="GConfEntry">GConfEntry</link>* gconf_entry_new_nocopy          (<link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValue">GConfValue</link> *val);</programlisting>
<para>
Creates a new <link linkend="GConfEntry">GConfEntry</link> with key <parameter>key</parameter> and value <parameter>val</parameter>. <parameter>key</parameter> should be a full
path to the key, starting with '/'. Neither the key nor the value is copied;
both are freed when the <link linkend="GConfEntry">GConfEntry</link> is freed. The string will be freed with
<link linkend="g-free">g_free</link>() so should be allocated with a GLib function, not <link linkend="malloc">malloc</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key name
</entry></row>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>the value
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new <link linkend="GConfentry">GConfentry</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-free">gconf_entry_free ()</title>
<programlisting>void        gconf_entry_free                (<link linkend="GConfEntry">GConfEntry</link> *entry);</programlisting>
<para>
Destroys a <link linkend="GConfEntry">GConfEntry</link>, freeing the key, the value, and the entry itself.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEntry">GConfEntry</link> to free.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-get-key">gconf_entry_get_key ()</title>
<programlisting>const char* gconf_entry_get_key             (const <link linkend="GConfEntry">GConfEntry</link> *entry);</programlisting>
<para>
Accesses the <parameter>key</parameter> field of a <link linkend="GConfEntry">GConfEntry</link>. The returned key is not a
copy, and should not be freed or modified.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-get-value">gconf_entry_get_value ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_entry_get_value           (const <link linkend="GConfEntry">GConfEntry</link> *entry);</programlisting>
<para>
Accesses the <parameter>value</parameter> field of a <link linkend="GConfEntry">GConfEntry</link>. The returned value is not
a copy, and should not be freed or modified. If you have called
<link linkend="gconf-entry-steal-value">gconf_entry_steal_value</link>(), the returned value will be
<symbol>NULL</symbol>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-steal-value">gconf_entry_steal_value ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_entry_steal_value         (<link linkend="GConfEntry">GConfEntry</link> *entry);</programlisting>
<para>
Extracts the value from a <link linkend="GConfEntry">GConfEntry</link>, leaving the <parameter>value</parameter> field in
<link linkend="GConfEntry">GConfEntry</link> set to <symbol>NULL</symbol>. Destroying the <link linkend="GConfEntry">GConfEntry</link>
will <emphasis>not</emphasis> destroy the value; the caller of
<link linkend="gconf-entry-steal-value">gconf_entry_steal_value</link>() assumes ownership of it.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEntry">GConfEntry</link>.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a <link linkend="GConfValue">GConfValue</link> that the caller must free.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-get-is-default">gconf_entry_get_is_default ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_entry_get_is_default      (const <link linkend="GConfEntry">GConfEntry</link> *entry);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-get-schema-name">gconf_entry_get_schema_name ()</title>
<programlisting>const char* gconf_entry_get_schema_name     (const <link linkend="GConfEntry">GConfEntry</link> *entry);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-set-is-default">gconf_entry_set_is_default ()</title>
<programlisting>void        gconf_entry_set_is_default      (<link linkend="GConfEntry">GConfEntry</link> *entry,
                                             <link linkend="gboolean">gboolean</link> is_default);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>is_default</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-set-schema-name">gconf_entry_set_schema_name ()</title>
<programlisting>void        gconf_entry_set_schema_name     (<link linkend="GConfEntry">GConfEntry</link> *entry,
                                             const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-entry-set-value-nocopy">gconf_entry_set_value_nocopy ()</title>
<programlisting>void        gconf_entry_set_value_nocopy    (<link linkend="GConfEntry">GConfEntry</link> *entry,
                                             <link linkend="GConfValue">GConfValue</link> *val);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
