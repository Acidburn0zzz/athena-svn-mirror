<refentry id="gconf-gconf-engine">
<refmeta>
<refentrytitle>GConfEngine</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GCONF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GConfEngine</refname><refpurpose>
a GConf "database"</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="GConfEngine">GConfEngine</link>;
<link linkend="GConfEngine">GConfEngine</link>* <link linkend="gconf-engine-get-default">gconf_engine_get_default</link>       (void);
<link linkend="GConfEngine">GConfEngine</link>* <link linkend="gconf-engine-get-for-address">gconf_engine_get_for_address</link>   (const <link linkend="gchar">gchar</link> *address,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfEngine">GConfEngine</link>* <link linkend="gconf-engine-get-local">gconf_engine_get_local</link>         (const <link linkend="gchar">gchar</link> *address,
                                             <link linkend="GError">GError</link> **err);
void        <link linkend="gconf-engine-unref">gconf_engine_unref</link>              (<link linkend="GConfEngine">GConfEngine</link> *conf);
void        <link linkend="gconf-engine-ref">gconf_engine_ref</link>                (<link linkend="GConfEngine">GConfEngine</link> *conf);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
A <link linkend="GConfEngine">GConfEngine</link> represents a connection to the GConf database. The
default <link linkend="GConfEngine">GConfEngine</link>, returned from <link linkend="gconf-engine-get-default">gconf_engine_get_default</link>(), represents the
user's normal configuration source search path. Configuration-related
utilities, such as a configuration editor tool, might wish to access a
particular configuration source directly; they can obtain a
non-default <link linkend="GConfEngine">GConfEngine</link> with <link linkend="gconf-engine-get-for-address">gconf_engine_get_for_address</link>().
</para>

<para>
Once you have a <link linkend="GConfEngine">GConfEngine</link>, you can query and manipulate
configuration values.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GConfEngine">struct GConfEngine</title>
<programlisting>struct GConfEngine;</programlisting>
<para>
An opaque data type representing one or more configuration sources.
</para></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-default">gconf_engine_get_default ()</title>
<programlisting><link linkend="GConfEngine">GConfEngine</link>* gconf_engine_get_default       (void);</programlisting>
<para>
Returns the default <link linkend="GConfEngine">GConfEngine</link>. All clients should use this, unless 
they are special configuration-related tools. The caller of this
function assumes one reference count, and must call
<link linkend="gconf-engine-unref">gconf_engine_unref</link>() at some point. It's fairly important to unref the
<link linkend="GConfEngine">GConfEngine</link>, to cleanly close the connection to
<application>gconfd</application>. So if possible close the connection
before exiting your application.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the default <link linkend="GConfEngine">GConfEngine</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-for-address">gconf_engine_get_for_address ()</title>
<programlisting><link linkend="GConfEngine">GConfEngine</link>* gconf_engine_get_for_address   (const <link linkend="gchar">gchar</link> *address,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Obtains a special <link linkend="GConfEngine">GConfEngine</link>; mostly useful for specialized
GConf-related tools. Normal clients shouldn't need to use it.
As with <link linkend="gconf-engine-get-default">gconf_engine_get_default</link>(), the returned <link linkend="GConfEngine">GConfEngine</link> should be
unreferenced by the caller of this function.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>address</parameter>&nbsp;:</entry>
<entry>a configuration source address.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a <link linkend="GConfEngine">GConfEngine</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-local">gconf_engine_get_local ()</title>
<programlisting><link linkend="GConfEngine">GConfEngine</link>* gconf_engine_get_local         (const <link linkend="gchar">gchar</link> *address,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Obtain a local (non-process-transparent) <link linkend="GConfEngine">GConfEngine</link>. Local engines
do not support notification, and can only access config databases
directly (they do not use the multiple sources in a path system
supported by nonlocal engines).
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>address</parameter>&nbsp;:</entry>
<entry>address of local database
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>return location of an allocated <link linkend="GError">GError</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a <link linkend="GConfEngine">GConfEngine</link>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-unref">gconf_engine_unref ()</title>
<programlisting>void        gconf_engine_unref              (<link linkend="GConfEngine">GConfEngine</link> *conf);</programlisting>
<para>
Decreases the reference count of a <link linkend="GConfEngine">GConfEngine</link> by one; if the
reference count reaches 0, destroys the <link linkend="GConfEngine">GConfEngine</link>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-ref">gconf_engine_ref ()</title>
<programlisting>void        gconf_engine_ref                (<link linkend="GConfEngine">GConfEngine</link> *conf);</programlisting>
<para>
Increases the reference count of a <link linkend="GConfEngine">GConfEngine</link> by one.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
