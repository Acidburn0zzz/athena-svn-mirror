<refentry id="gconf-gconf">
<refmeta>
<refentrytitle>
GConf Core Interfaces</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GCONF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>
GConf Core Interfaces</refname><refpurpose>
Basic functions to initialize GConf and get/set values</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



<link linkend="gboolean">gboolean</link>    <link linkend="gconf-init">gconf_init</link>                      (int argc,
                                             char **argv,
                                             <link linkend="GError">GError</link> **err);
void        <link linkend="gconf-preinit">gconf_preinit</link>                   (<link linkend="gpointer">gpointer</link> app,
                                             <link linkend="gpointer">gpointer</link> mod_info);
void        <link linkend="gconf-postinit">gconf_postinit</link>                  (<link linkend="gpointer">gpointer</link> app,
                                             <link linkend="gpointer">gpointer</link> mod_info);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-is-initialized">gconf_is_initialized</link>            (void);
void        (<link linkend="GConfNotifyFunc">*GConfNotifyFunc</link>)              (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             <link linkend="guint">guint</link> cnxn_id,
                                             <link linkend="GConfEntry">GConfEntry</link> *entry,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="guint">guint</link>       <link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *namespace_section,
                                             <link linkend="GConfNotifyFunc">GConfNotifyFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GError">GError</link> **err);
void        <link linkend="gconf-engine-notify-remove">gconf_engine_notify_remove</link>      (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             <link linkend="guint">guint</link> cnxn);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-engine-get">gconf_engine_get</link>                (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-engine-get-with-locale">gconf_engine_get_with_locale</link>    (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *locale,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-engine-get-without-default">gconf_engine_get_without_default</link>
                                            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfEntry">GConfEntry</link>* <link linkend="gconf-engine-get-entry">gconf_engine_get_entry</link>          (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *locale,
                                             <link linkend="gboolean">gboolean</link> use_schema_default,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-engine-get-default-from-schema">gconf_engine_get_default_from_schema</link>
                                            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set">gconf_engine_set</link>                (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-unset">gconf_engine_unset</link>              (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-associate-schema">gconf_engine_associate_schema</link>   (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *schema_key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GSList">GSList</link>*     <link linkend="gconf-engine-all-entries">gconf_engine_all_entries</link>        (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *dir,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GSList">GSList</link>*     <link linkend="gconf-engine-all-dirs">gconf_engine_all_dirs</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *dir,
                                             <link linkend="GError">GError</link> **err);
void        <link linkend="gconf-engine-suggest-sync">gconf_engine_suggest_sync</link>       (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-dir-exists">gconf_engine_dir_exists</link>         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *dir,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-valid-key">gconf_valid_key</link>                 (const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gchar">gchar</link> **why_invalid);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-key-is-below">gconf_key_is_below</link>              (const <link linkend="gchar">gchar</link> *above,
                                             const <link linkend="gchar">gchar</link> *below);
<link linkend="gdouble">gdouble</link>     <link linkend="gconf-engine-get-float">gconf_engine_get_float</link>          (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gint">gint</link>        <link linkend="gconf-engine-get-int">gconf_engine_get_int</link>            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gchar">gchar</link>*      <link linkend="gconf-engine-get-string">gconf_engine_get_string</link>         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-get-bool">gconf_engine_get_bool</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfSchema">GConfSchema</link>* <link linkend="gconf-engine-get-schema">gconf_engine_get_schema</link>        (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GSList">GSList</link>*     <link linkend="gconf-engine-get-list">gconf_engine_get_list</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-get-pair">gconf_engine_get_pair</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gpointer">gpointer</link> car_retloc,
                                             <link linkend="gpointer">gpointer</link> cdr_retloc,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set-float">gconf_engine_set_float</link>          (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gdouble">gdouble</link> val,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set-int">gconf_engine_set_int</link>            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gint">gint</link> val,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set-string">gconf_engine_set_string</link>         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *val,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set-bool">gconf_engine_set_bool</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gboolean">gboolean</link> val,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set-schema">gconf_engine_set_schema</link>         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="GConfSchema">GConfSchema</link> *val,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set-list">gconf_engine_set_list</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GSList">GSList</link> *list,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-engine-set-pair">gconf_engine_set_pair</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_car,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_cdr,
                                             <link linkend="GError">GError</link> **err);
struct      <link linkend="GConfEnumStringPair">GConfEnumStringPair</link>;
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-string-to-enum">gconf_string_to_enum</link>            (<link linkend="GConfEnumStringPair">GConfEnumStringPair</link> lookup_table[],
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="gint">gint</link> *enum_value_retloc);
const <link linkend="gchar">gchar</link>* <link linkend="gconf-enum-to-string">gconf_enum_to_string</link>           (<link linkend="GConfEnumStringPair">GConfEnumStringPair</link> lookup_table[],
                                             <link linkend="gint">gint</link> enum_value);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
These functions initialize GConf, and communicate with the
<application>gconfd</application> server via a
<link linkend="GConfEngine">GConfEngine</link> object. You can install a notification
request on the server, get values, set values, list directories, and associate
schema names with keys.
</para>

<para>
Most of this interface is replicated in the <link linkend="GtkObject">GtkObject</link> wrapper
(<link linkend="GConfClient">GConfClient</link> object); an alternative to the value-setting functions
is the <link linkend="GConfChangeSet">GConfChangeSet</link> interface.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gconf-init">gconf_init ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_init                      (int argc,
                                             char **argv,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<warning>
<para>
<literal>gconf_init</literal> is deprecated and should not be used in newly-written code.
</para>
</warning>
<para>
Initializes the GConf library. Creates a connection to a CORBA ORB, and
initializes OAF (the object activation framework) if it isn't already
initialized.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> on success, <symbol>FALSE</symbol> otherwise.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-preinit">gconf_preinit ()</title>
<programlisting>void        gconf_preinit                   (<link linkend="gpointer">gpointer</link> app,
                                             <link linkend="gpointer">gpointer</link> mod_info);</programlisting>
<warning>
<para>
<literal>gconf_preinit</literal> is deprecated and should not be used in newly-written code.
</para>
</warning>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>app</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mod_info</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-postinit">gconf_postinit ()</title>
<programlisting>void        gconf_postinit                  (<link linkend="gpointer">gpointer</link> app,
                                             <link linkend="gpointer">gpointer</link> mod_info);</programlisting>
<warning>
<para>
<literal>gconf_postinit</literal> is deprecated and should not be used in newly-written code.
</para>
</warning>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>app</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mod_info</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-is-initialized">gconf_is_initialized ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_is_initialized            (void);</programlisting>
<warning>
<para>
<literal>gconf_is_initialized</literal> is deprecated and should not be used in newly-written code.
</para>
</warning>
<para>
Asks whether the library has been initialized.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> if the library has been initialized.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GConfNotifyFunc">GConfNotifyFunc ()</title>
<programlisting>void        (*GConfNotifyFunc)              (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             <link linkend="guint">guint</link> cnxn_id,
                                             <link linkend="GConfEntry">GConfEntry</link> *entry,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
A callback function invoked when a key's value changes. The <parameter>cnxn_id</parameter> parameter
will be the connection ID returned from <link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>(). <parameter>key</parameter> will be the
full path of the changed key, <parameter>value</parameter> will be the new value if the key is set.
If the key is unset, <parameter>value</parameter> will be the default value if one exists, or
<symbol>NULL</symbol> otherwise. <parameter>is_default</parameter> indicates whether a value is a
default setting or a user setting. If <parameter>value</parameter> is <symbol>NULL</symbol>,
<parameter>is_default</parameter> will be <symbol>TRUE</symbol>. <parameter>user_data</parameter> is the data passed to
<link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfEngine">GConfEngine</link> passed to <link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>().
</entry></row>
<row><entry align="right"><parameter>cnxn_id</parameter>&nbsp;:</entry>
<entry>the ID returned from <link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>().
</entry></row>
<row><entry align="right"><parameter>entry</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>the user data passed to <link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-notify-add">gconf_engine_notify_add ()</title>
<programlisting><link linkend="guint">guint</link>       gconf_engine_notify_add         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *namespace_section,
                                             <link linkend="GConfNotifyFunc">GConfNotifyFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Registers a notification request with the <application>gconfd</application>
server.  The server will notify the client when any key at or below
<parameter>namespace_section</parameter> is set or unset. Try to watch the smallest possible part of
the namespace; otherwise you will slow down the server and your application with
unnecessary notifications. Note that you should prefer <link linkend="gconf-client-notify-add">gconf_client_notify_add</link>()
if you're using the <link linkend="GtkObject">GtkObject</link> wrapper library, because
<link linkend="gconf-client-notify-add">gconf_client_notify_add</link>() does not require a client-server conversation for
every callback. <link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>() requests a different server notification for
every callback. The function returns an ID you can use to remove the
notification request; 0 is an invalid ID, and is returned if an error occurs.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to monitor for changes.
</entry></row>
<row><entry align="right"><parameter>namespace_section</parameter>&nbsp;:</entry>
<entry>the directory or key to watch; you will be notified of changes at or below this point.
</entry></row>
<row><entry align="right"><parameter>func</parameter>&nbsp;:</entry>
<entry>the callback to invoke when a notification is received from the server.
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>the data to pass to the callback.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an ID for the notification request, or 0 on error.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-notify-remove">gconf_engine_notify_remove ()</title>
<programlisting>void        gconf_engine_notify_remove      (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             <link linkend="guint">guint</link> cnxn);</programlisting>
<para>
Removes a notification request.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfEngine">GConfEngine</link> you were monitoring for changes.
</entry></row>
<row><entry align="right"><parameter>cnxn</parameter>&nbsp;:</entry>
<entry>The ID returned by <link linkend="gconf-engine-notify-add">gconf_engine_notify_add</link>().


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get">gconf_engine_get ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_engine_get                (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Returns the <link linkend="GConfValue">GConfValue</link> stored at <parameter>key</parameter>, or <symbol>NULL</symbol> if no value is
set. You must call <link linkend="gconf-value-free">gconf_value_free</link>() to free the returned value. If you know
the expected type of the value, you probably want to use the type-specific
convenience wrappers (<link linkend="gconf-engine-get-int">gconf_engine_get_int</link>(), etc.)  because they will do the
type-checking for you and return the appropriate type. Automatically returns the
default value for a key, if the key is unset and a default exists.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to get the value from.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key to get.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>newly-allocated <link linkend="GConfValue">GConfValue</link>, or <symbol>NULL</symbol> if unset and no default exists.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-with-locale">gconf_engine_get_with_locale ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_engine_get_with_locale    (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *locale,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the value appropriate for a particular locale. Right now,
only values of type <literal>GCONF_VALUE_SCHEMA</literal> are localized; the locale is
meaningless for other value types. Also, <link linkend="gconf-engine-get">gconf_engine_get</link>() automatically
requests the value in the user's current locale. So this function is
only useful if you want a schema for some locale other than the user's
current locale. Except for the additional argument, this function is
identical to <link linkend="gconf-engine-get">gconf_engine_get</link>() in all respects.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to get the value from.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key to get.
</entry></row>
<row><entry align="right"><parameter>locale</parameter>&nbsp;:</entry>
<entry>preferred locale (as in the locale-related environment variables).
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>newly-allocated <link linkend="GConfValue">GConfValue</link>, or <symbol>NULL</symbol> if unset.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-without-default">gconf_engine_get_without_default ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_engine_get_without_default
                                            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Identical to <link linkend="gconf-engine-get">gconf_engine_get</link>(), except that it will return <symbol>NULL</symbol> in
place of the default value if the key is unset. Note that <link linkend="gconf-engine-get">gconf_engine_get</link>() can also
return <symbol>NULL</symbol> if no default exists or an error occurs.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to get the value from.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key to get.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>newly-allocated <link linkend="GConfValue">GConfValue</link>, or <symbol>NULL</symbol> if unset.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-entry">gconf_engine_get_entry ()</title>
<programlisting><link linkend="GConfEntry">GConfEntry</link>* gconf_engine_get_entry          (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *locale,
                                             <link linkend="gboolean">gboolean</link> use_schema_default,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Obtain the full <link linkend="GConfEntry">GConfEntry</link> for a value.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>locale</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>use_schema_default</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-default-from-schema">gconf_engine_get_default_from_schema ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_engine_get_default_from_schema
                                            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Returns the default value stored in the key's schema, if the key has a schema
associated and the schema exists and the schema contains a default value.  Note
that <link linkend="gconf-engine-get">gconf_engine_get</link>(), <link linkend="gconf-engine-get-string">gconf_engine_get_string</link>(), and so on already return the default value
if no other value is found, so normally you do not need this function. This
function is just for convenience; you could also get the <link linkend="GConfMetaInfo">GConfMetaInfo</link> for the
key, read the schema name from there, then look up the schema by name and
extract the default value.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to get the value from.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key to get the default value for.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>newly-allocated <link linkend="GConfValue">GConfValue</link>, or <symbol>NULL</symbol> if unset.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set">gconf_engine_set ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set                (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="GConfValue">GConfValue</link> *value,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Sets the value of <parameter>key</parameter> to <parameter>value</parameter>. Does not modify the passed-in
<link linkend="GConfValue">GConfValue</link>, you must free it yourself. You may prefer a type-specific
convenience wrapper, such as <link linkend="gconf-engine-set-int">gconf_engine_set_int</link>().
</para>

<para>
 An error of note is <literal>GCONF_OVERRIDDEN</literal>, indicating that the system
administrator has "forced" a value for this key. If no writable
configuration sources exist, it is not an error, but GConf will just
forget all your values; this allows users to have a configuration-free
setup without a constant barrage of error messages.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to set the value in.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key to set.
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>the new value of <parameter>key</parameter>.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> on success, <symbol>FALSE</symbol> on error.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-unset">gconf_engine_unset ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_unset              (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Unsets the value of <parameter>key</parameter>; if <parameter>key</parameter> is already unset, has no effect.  An
error of note is <literal>GCONF_OVERRIDDEN</literal>, indicating that the system
administrator has "forced" a value for this key.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to affect.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key to unset.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> on success, <symbol>FALSE</symbol> on error.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-associate-schema">gconf_engine_associate_schema ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_associate_schema   (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *schema_key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Directs GConf to find the schema for <parameter>key</parameter> at location
<parameter>schema_key</parameter>. That is, the value stored at <parameter>schema_key</parameter> should have type
<link linkend="GCONF-VALUE-SCHEMA-CAPS">GCONF_VALUE_SCHEMA</link>, and be descriptive of <parameter>key</parameter>. Normally you don't
call this function from C code; you can ship a special file with your
application and ask <application>gconftool</application> to install
schema associations into the database during "make install."
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link> to affect.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>the key to associate the schema with.
</entry></row>
<row><entry align="right"><parameter>schema_key</parameter>&nbsp;:</entry>
<entry>the key where the schema will be stored.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> on success, <symbol>FALSE</symbol> on error.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-all-entries">gconf_engine_all_entries ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gconf_engine_all_entries        (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *dir,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Lists the key-value pairs in <parameter>dir</parameter>. Does not list subdirectories; for
that use <link linkend="gconf-engine-all-dirs">gconf_engine_all_dirs</link>(). The returned list contains <link linkend="GConfEntry">GConfEntry</link>
objects. A <link linkend="GConfEntry">GConfEntry</link> contains a <emphasis>relative</emphasis> key
and a value. The list is not recursive, it contains only the immediate
children of <parameter>dir</parameter>.  To free the returned list, <link linkend="gconf-entry-free">gconf_entry_free</link>()
each list element, then <link linkend="g-slist-free">g_slist_free</link>() the list itself.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>dir</parameter>&nbsp;:</entry>
<entry>Directory to list.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>List of <link linkend="GConfEntry">GConfEntry</link>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-all-dirs">gconf_engine_all_dirs ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gconf_engine_all_dirs           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *dir,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Lists the subdirectories in <parameter>dir</parameter>. The returned list contains allocated
strings; you should <link linkend="g-free">g_free</link>() each string in the list, then
<link linkend="g-slist-free">g_slist_free</link>() the list itself.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>dir</parameter>&nbsp;:</entry>
<entry>Directory to get subdirectories from.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>List of allocated subdirectory names.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-suggest-sync">gconf_engine_suggest_sync ()</title>
<programlisting>void        gconf_engine_suggest_sync       (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Suggests to <application>gconfd</application> that you've just finished
a block of changes, and it would be an optimal time to sync to
permanent storage. This is only a suggestion; and
<application>gconfd</application> will eventually sync even if you
don't call <link linkend="gconf-engine-suggest-sync">gconf_engine_suggest_sync</link>(). This function is just a "hint"
provided to <application>gconfd</application> to maximize efficiency
and minimize data loss.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>the <link linkend="GConfEngine">GConfEngine</link> to suggest syncing to.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-dir-exists">gconf_engine_dir_exists ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_dir_exists         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *dir,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Queries whether the directory <parameter>dir</parameter> exists in the GConf
database. Returns <symbol>TRUE</symbol> or <symbol>FALSE</symbol>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>dir</parameter>&nbsp;:</entry>
<entry>Directory to check for.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> or <symbol>FALSE</symbol>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-valid-key">gconf_valid_key ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_valid_key                 (const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gchar">gchar</link> **why_invalid);</programlisting>
<para>
Asks whether a key is syntactically correct, that is, it ensures that
the key consists of slash-separated strings and contains only legal
characters. Normally you shouldn't need to call this function; the
GConf functions all check this for you and return an error if the key
is invalid. However, it may be useful to validate input to an entry
field or the like. If you pass a non-<symbol>NULL</symbol> address as
the <parameter>why_invalid</parameter> argument, an allocated string is returned explaining
why the key is invalid, if it is. If the key is valid the <parameter>why_invalid</parameter>
argument is unused.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key to check.
</entry></row>
<row><entry align="right"><parameter>why_invalid</parameter>&nbsp;:</entry>
<entry>return location for an explanation of the problem, if any. <link linkend="g-free">g_free</link>() the returned string.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> if the key is valid, or <symbol>FALSE</symbol> if not.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-key-is-below">gconf_key_is_below ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_key_is_below              (const <link linkend="gchar">gchar</link> *above,
                                             const <link linkend="gchar">gchar</link> *below);</programlisting>
<para>
Asks whether the key <parameter>below</parameter> would be found below the key <parameter>above</parameter>, were
they both to exist in the database. For example, <symbol>/foo</symbol>
is always found below <symbol>/</symbol> and above
<symbol>/foo/bar</symbol>. This probably isn't useful but GConf uses
it internally so here it is if you need it.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>above</parameter>&nbsp;:</entry>
<entry>the key on the "left hand side" of the predicate.
</entry></row>
<row><entry align="right"><parameter>below</parameter>&nbsp;:</entry>
<entry>the key on the "right hand side."
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> or <symbol>FALSE</symbol>.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-float">gconf_engine_get_float ()</title>
<programlisting><link linkend="gdouble">gdouble</link>     gconf_engine_get_float          (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the floating point number (<literal>GCONF_VALUE_FLOAT</literal>) stored at
<parameter>key</parameter>. Automatically performs type-checking, so if a non-float is
stored at <parameter>key</parameter>, an error is returned. On error, or if <parameter>key</parameter> is unset, 
0.0 is returned.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key you want the value of.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of <parameter>key</parameter>, or 0.0 if no value is obtained.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-int">gconf_engine_get_int ()</title>
<programlisting><link linkend="gint">gint</link>        gconf_engine_get_int            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the integer (<literal>GCONF_VALUE_INT</literal>) stored at
<parameter>key</parameter>. Automatically performs type-checking, so if a non-integer is
stored at <parameter>key</parameter>, an error is returned. On error, or if <parameter>key</parameter> is unset, 
0 is returned.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key you want the value of.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of <parameter>key</parameter>, or 0 if no value is obtained.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-string">gconf_engine_get_string ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_engine_get_string         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the string (<literal>GCONF_VALUE_STRING</literal>) stored at
<parameter>key</parameter>. Automatically performs type-checking, so if a non-string is
stored at <parameter>key</parameter>, an error is returned. On error, or if <parameter>key</parameter> is unset, 
<symbol>NULL</symbol> is returned.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key you want the value of.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>allocated string (value of <parameter>key</parameter>), or <symbol>NULL</symbol> if no value is obtained.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-bool">gconf_engine_get_bool ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_get_bool           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the boolean value (<literal>GCONF_VALUE_BOOL</literal>) stored at
<parameter>key</parameter>. Automatically performs type-checking, so if a non-bool is
stored at <parameter>key</parameter>, an error is returned. On error, or if <parameter>key</parameter> is unset, 
<symbol>FALSE</symbol> is returned.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key you want the value of.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of <parameter>key</parameter>, or <symbol>FALSE</symbol> if no value is obtained.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-schema">gconf_engine_get_schema ()</title>
<programlisting><link linkend="GConfSchema">GConfSchema</link>* gconf_engine_get_schema        (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the schema (<literal>GCONF_VALUE_SCHEMA</literal>) stored at <parameter>key</parameter>.
Automatically performs type-checking, so if a non-schema is stored at
<parameter>key</parameter>, an error is returned. If no value is set or an error occurs,
<symbol>NULL</symbol> is returned.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key you want the value of.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of <parameter>key</parameter> as an allocated <link linkend="GConfSchema">GConfSchema</link>, or <symbol>NULL</symbol> if no value was obtained.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-list">gconf_engine_get_list ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gconf_engine_get_list           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the list (<literal>GCONF_VALUE_LIST</literal>) stored at <parameter>key</parameter>.  Automatically
performs type-checking, so if a non-list is stored at <parameter>key</parameter>, or the
list does not contain elements of type <parameter>list_type</parameter>, an error is
returned. If no value is set or an error occurs, <symbol>NULL</symbol>
is returned. Note that <symbol>NULL</symbol> is also the empty list,
so if you need to distinguish the empty list from an unset value, you
must use <link linkend="gconf-engine-get">gconf_engine_get</link>() to obtain a raw <link linkend="GConfValue">GConfValue</link>.
</para>

<para>
<emphasis>Remember that GConf lists can only store primitive types:
<literal>GCONF_VALUE_FLOAT</literal>, <literal>GCONF_VALUE_INT</literal>, <literal>GCONF_VALUE_BOOL</literal>,
<literal>GCONF_VALUE_STRING</literal>, <literal>GCONF_VALUE_SCHEMA</literal>.</emphasis> Also remember
that lists must be uniform, you may not mix types in the same list.
</para>

<para>
The type of the list elements depends on <parameter>list_type</parameter>. A <link linkend="GConfValue">GConfValue</link>
with type <literal>GCONF_VALUE_LIST</literal> normally stores a list of more <link linkend="GConfValue">GConfValue</link>
objects. <link linkend="gconf-engine-get-list">gconf_engine_get_list</link>() automatically converts to primitive C
types. Thus, the list-&gt;data fields in the returned list 
contain:
 
<informaltable pgwide=1 frame="none">
<tgroup cols="2"><colspec colwidth="2*"><colspec colwidth="8*">
<tbody>

<row>
<entry><literal>GCONF_VALUE_INT</literal></entry>
<entry>The integer itself, converted with <link linkend="GINT-TO-POINTER-CAPS">GINT_TO_POINTER</link>()</entry>
</row>

<row>
<entry><literal>GCONF_VALUE_BOOL</literal></entry>
<entry>The bool itself, converted with <link linkend="GINT-TO-POINTER-CAPS">GINT_TO_POINTER</link>()</entry>
</row>

<row>
<entry><literal>GCONF_VALUE_FLOAT</literal></entry>
<entry>A pointer to <link linkend="gdouble">gdouble</link>, which should be freed with <link linkend="g-free">g_free</link>()</entry>
</row>

<row>
<entry><literal>GCONF_VALUE_STRING</literal></entry>
<entry>A pointer to <link linkend="gchar">gchar</link>, which should be freed with <link linkend="g-free">g_free</link>()</entry>
</row>

<row>
<entry><literal>GCONF_VALUE_SCHEMA</literal></entry>
<entry>A pointer to <link linkend="GConfSchema">GConfSchema</link>, which should be freed with <link linkend="gconf-schema-free">gconf_schema_free</link>()</entry>
</row>

</tbody></tgroup></informaltable>

In the <literal>GCONF_VALUE_FLOAT</literal> and <literal>GCONF_VALUE_STRING</literal> cases, you must
<link linkend="g-free">g_free</link>() each list element. In the <literal>GCONF_VALUE_SCHEMA</literal> case you must
<link linkend="gconf-schema-free">gconf_schema_free</link>() each element. In all cases you must free the
list itself with <link linkend="g-slist-free">g_slist_free</link>().
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key you want the value of.
</entry></row>
<row><entry align="right"><parameter>list_type</parameter>&nbsp;:</entry>
<entry>type of each list element.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated list, with elements as described above.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-pair">gconf_engine_get_pair ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_get_pair           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gpointer">gpointer</link> car_retloc,
                                             <link linkend="gpointer">gpointer</link> cdr_retloc,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Requests the pair (<literal>GCONF_VALUE_PAIR</literal>) stored at <parameter>key</parameter>.  Automatically
performs type-checking, so if a non-pair is stored at <parameter>key</parameter>, or the
pair does not have the right <parameter>car_type</parameter> and <parameter>cdr_type</parameter>, an error is
returned. Remember that the <firstterm>car</firstterm> of a pair is
its first value, and the <firstterm>cdr</firstterm> is its second
value, in the Lisp tradition. 
</para>

<para>
<emphasis>Remember that GConf pairs can only store primitive types:
<literal>GCONF_VALUE_FLOAT</literal>, <literal>GCONF_VALUE_INT</literal>, <literal>GCONF_VALUE_BOOL</literal>,
<literal>GCONF_VALUE_STRING</literal>, <literal>GCONF_VALUE_SCHEMA</literal>.</emphasis>
</para>

<para>
<link linkend="gconf-engine-get-pair">gconf_engine_get_pair</link>() stores the two fields of the pair in the locations
pointed to by <parameter>car_retloc</parameter> and <parameter>cdr_retloc</parameter>. The type of these pointers
depends on the corresponding <parameter>car_type</parameter> and <parameter>cdr_type</parameter>:
 
<informaltable pgwide=1 frame="none">
<tgroup cols="2"><colspec colwidth="2*"><colspec colwidth="8*">
<tbody>

<row>
<entry><literal>GCONF_VALUE_INT</literal></entry>
<entry>pointer to <link linkend="gint">gint</link></entry>
</row>

<row>
<entry><literal>GCONF_VALUE_BOOL</literal></entry>
<entry>pointer to <link linkend="gboolean">gboolean</link></entry>
</row>

<row>
<entry><literal>GCONF_VALUE_FLOAT</literal></entry>
<entry>pointer to <link linkend="gdouble">gdouble</link></entry>
</row>

<row>
<entry><literal>GCONF_VALUE_STRING</literal></entry>
<entry>pointer to <link linkend="gchar">gchar</link>*</entry>
</row>

<row>
<entry><literal>GCONF_VALUE_SCHEMA</literal></entry>
<entry>pointer to <link linkend="GConfSchema">GConfSchema</link>*</entry>
</row>

</tbody></tgroup></informaltable>

In the <literal>GCONF_VALUE_STRING</literal> case, you must <link linkend="g-free">g_free</link>() the string(s)
stored in the return location(s). In the <literal>GCONF_VALUE_SCHEMA</literal> case you
must <link linkend="gconf-schema-free">gconf_schema_free</link>() the returned schema. If there's an error
or the value is unset, <parameter>car_retloc</parameter> and <parameter>cdr_retloc</parameter> are left unchanged.
</para>

<para>
<link linkend="gconf-engine-get-pair">gconf_engine_get_pair</link>() returns <symbol>TRUE</symbol> on success.
</para>

<para>
An example of <link linkend="gconf-engine-get-pair">gconf_engine_get_pair</link>() in action:
<programlisting>
gdouble car = 10.0;
gchar* cdr  = NULL; 
GError* error = NULL;

if (!gconf_engine_get_pair(conf, "/foo", 
                    GCONF_VALUE_FLOAT,
                    GCONF_VALUE_STRING, 
                    &amp;car, &amp;cdr, &amp;error))
  {
    /* Note: car/cdr should be untouched, because an error occurred */
    g_assert(error != NULL);
    fprintf(stderr, "Error: <literal>s</literal>\n", error->message);
    g_error_free(error);
    error = NULL;
  }
else
  {
    /* Note: car/cdr may be untouched even though there was no error, 
       if no value was set for "/foo"
     */
    printf("Found pair (<literal>g</literal>,<literal>s</literal>)\n", car, cdr);
    if (cdr != NULL)
      g_free(cdr);
  }
</programlisting>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>key you want the value of.
</entry></row>
<row><entry align="right"><parameter>car_type</parameter>&nbsp;:</entry>
<entry>desired type of the pair's first field (car).
</entry></row>
<row><entry align="right"><parameter>cdr_type</parameter>&nbsp;:</entry>
<entry>desired type of the pair's second field (cdr).
</entry></row>
<row><entry align="right"><parameter>car_retloc</parameter>&nbsp;:</entry>
<entry>address of a return location for the car.
</entry></row>
<row><entry align="right"><parameter>cdr_retloc</parameter>&nbsp;:</entry>
<entry>address of a return location for the cdr.
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> on success, <symbol>FALSE</symbol> on error.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-float">gconf_engine_set_float ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set_float          (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gdouble">gdouble</link> val,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-int">gconf_engine_set_int ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set_int            (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gint">gint</link> val,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-string">gconf_engine_set_string ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set_string         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *val,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-bool">gconf_engine_set_bool ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set_bool           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gboolean">gboolean</link> val,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-schema">gconf_engine_set_schema ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set_schema         (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="GConfSchema">GConfSchema</link> *val,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-list">gconf_engine_set_list ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set_list           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GSList">GSList</link> *list,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>list_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-set-pair">gconf_engine_set_pair ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_engine_set_pair           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_car,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_cdr,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>a <link linkend="GConfEngine">GConfEngine</link>.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>car_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>cdr_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>address_of_car</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>address_of_cdr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>the return location for an allocated <link linkend="GError">GError</link>, or <symbol>NULL</symbol> to ignore errors.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GConfEnumStringPair">struct GConfEnumStringPair</title>
<programlisting>struct GConfEnumStringPair {
  gint enum_value;
  const gchar* str;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gconf-string-to-enum">gconf_string_to_enum ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_string_to_enum            (<link linkend="GConfEnumStringPair">GConfEnumStringPair</link> lookup_table[],
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="gint">gint</link> *enum_value_retloc);</programlisting>
<para>
It's best to store enumeration values as strings rather than integers. This is
robust against changes in the enumeration, and also human-readable.
This function makes it more convenient to store enums as strings.
</para>

<para>
The first argument is a lookup table, typically declared statically as follows:
<programlisting>
static GConfEnumStringPair foo_enum_lookup_table[] = {
  { FOO_BLAH, "Blah" },
  { FOO_BAR,  "Bar"  },
  { 0, NULL }
};
</programlisting>
Note that the last element of the table is <literal>{ 0, NULL }</literal>.
Typically the strings you use should be semi-human-readable, for GTK+ and GNOME
stripping off the library prefix and converting to StudlyCaps is the recommended
convention.
</para>

<para>
The function returns <symbol>TRUE</symbol> if a match for the string is found,
and if a match is found the enum value is placed in <parameter>enum_value_retloc</parameter>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>lookup_table</parameter>&nbsp;:</entry>
<entry>a lookup table mapping enum values to strings.
</entry></row>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>the string to convert to an enum value.
</entry></row>
<row><entry align="right"><parameter>enum_value_retloc</parameter>&nbsp;:</entry>
<entry>the address of an enum variable.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry><symbol>TRUE</symbol> if a match was found.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-enum-to-string">gconf_enum_to_string ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gconf_enum_to_string           (<link linkend="GConfEnumStringPair">GConfEnumStringPair</link> lookup_table[],
                                             <link linkend="gint">gint</link> enum_value);</programlisting>
<para>
See <link linkend="gconf-string-to-enum">gconf_string_to_enum</link>() for background information on this function.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>lookup_table</parameter>&nbsp;:</entry>
<entry>a lookup table mapping enum values to strings.
</entry></row>
<row><entry align="right"><parameter>enum_value</parameter>&nbsp;:</entry>
<entry>the enumeration value to convert to a string.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a pointer to the proper string in the lookup table, or <symbol>NULL</symbol> if no match was found.


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
