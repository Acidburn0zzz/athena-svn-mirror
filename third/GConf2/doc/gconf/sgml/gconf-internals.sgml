<refentry id="gconf-gconf-internals">
<refmeta>
<refentrytitle>gconf-internals</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GCONF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gconf-internals</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



<link linkend="gchar">gchar</link>*      <link linkend="gconf-key-directory">gconf_key_directory</link>             (const <link linkend="gchar">gchar</link> *key);
const <link linkend="gchar">gchar</link>* <link linkend="gconf-key-key">gconf_key_key</link>                  (const <link linkend="gchar">gchar</link> *key);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-file-test">gconf_file_test</link>                 (const <link linkend="gchar">gchar</link> *filename,
                                             int test);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-file-exists">gconf_file_exists</link>               (const <link linkend="gchar">gchar</link> *filename);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-from-corba-value">gconf_value_from_corba_value</link>    (const <link linkend="ConfigValue">ConfigValue</link> *value);
<link linkend="GConfSchema">GConfSchema</link>* <link linkend="gconf-schema-from-corba-schema">gconf_schema_from_corba_schema</link> (const <link linkend="ConfigSchema">ConfigSchema</link> *cs);
const <link linkend="gchar">gchar</link>* <link linkend="gconf-value-type-to-string">gconf_value_type_to_string</link>     (<link linkend="GConfValueType">GConfValueType</link> type);
<link linkend="GConfValueType">GConfValueType</link> <link linkend="gconf-value-type-from-string">gconf_value_type_from_string</link> (const <link linkend="gchar">gchar</link> *str);
<link linkend="GSList">GSList</link>*     <link linkend="gconf-load-source-path">gconf_load_source_path</link>          (const <link linkend="gchar">gchar</link> *filename,
                                             <link linkend="GError">GError</link> **err);
void        <link linkend="gconf-shutdown-daemon">gconf_shutdown_daemon</link>           (<link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-ping-daemon">gconf_ping_daemon</link>               (void);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-spawn-daemon">gconf_spawn_daemon</link>              (<link linkend="GError">GError</link> **err);
<link linkend="gchar">gchar</link>*      <link linkend="gconf-concat-dir-and-key">gconf_concat_dir_and_key</link>        (const <link linkend="gchar">gchar</link> *dir,
                                             const <link linkend="gchar">gchar</link> *key);
<link linkend="gulong">gulong</link>      <link linkend="gconf-string-to-gulong">gconf_string_to_gulong</link>          (const <link linkend="gchar">gchar</link> *str);
const <link linkend="gchar">gchar</link>* <link linkend="gconf-current-locale">gconf_current_locale</link>           (void);
enum        <link linkend="GConfLogPriority">GConfLogPriority</link>;
void        <link linkend="gconf-log">gconf_log</link>                       (<link linkend="GConfLogPriority">GConfLogPriority</link> pri,
                                             const <link linkend="gchar">gchar</link> *format,
                                             ...);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-key-check">gconf_key_check</link>                 (const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-new-from-string">gconf_value_new_from_string</link>     (<link linkend="GConfValueType">GConfValueType</link> type,
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-new-list-from-string">gconf_value_new_list_from_string</link>
                                            (<link linkend="GConfValueType">GConfValueType</link> list_type,
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-new-pair-from-string">gconf_value_new_pair_from_string</link>
                                            (<link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gchar">gchar</link>*      <link linkend="gconf-quote-string">gconf_quote_string</link>              (const <link linkend="gchar">gchar</link> *str);
<link linkend="gchar">gchar</link>*      <link linkend="gconf-unquote-string">gconf_unquote_string</link>            (const <link linkend="gchar">gchar</link> *str,
                                             const <link linkend="gchar">gchar</link> **end,
                                             <link linkend="GError">GError</link> **err);
void        <link linkend="gconf-unquote-string-inplace">gconf_unquote_string_inplace</link>    (<link linkend="gchar">gchar</link> *str,
                                             <link linkend="gchar">gchar</link> **end,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-decode">gconf_value_decode</link>              (const <link linkend="gchar">gchar</link> *encoded);
<link linkend="gchar">gchar</link>*      <link linkend="gconf-value-encode">gconf_value_encode</link>              (<link linkend="GConfValue">GConfValue</link> *val);
<link linkend="gchar">gchar</link>*      <link linkend="gconf-quote-percents">gconf_quote_percents</link>            (const <link linkend="gchar">gchar</link> *src);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-list-from-primitive-list">gconf_value_list_from_primitive_list</link>
                                            (<link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GSList">GSList</link> *list,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-value-pair-from-primitive-pair">gconf_value_pair_from_primitive_pair</link>
                                            (<link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_car,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_cdr,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GSList">GSList</link>*     <link linkend="gconf-value-list-to-primitive-list-destructive">gconf_value_list_to_primitive_list_destructive</link>
                                            (<link linkend="GConfValue">GConfValue</link> *val,
                                             <link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GError">GError</link> **err);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-value-pair-to-primitive-pair-destructive">gconf_value_pair_to_primitive_pair_destructive</link>
                                            (<link linkend="GConfValue">GConfValue</link> *val,
                                             <link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gpointer">gpointer</link> car_retloc,
                                             <link linkend="gpointer">gpointer</link> cdr_retloc,
                                             <link linkend="GError">GError</link> **err);
void        <link linkend="gconf-set-daemon-mode">gconf_set_daemon_mode</link>           (<link linkend="gboolean">gboolean</link> setting);
<link linkend="gboolean">gboolean</link>    <link linkend="gconf-handle-oaf-exception">gconf_handle_oaf_exception</link>      (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GConfValue">GConfValue</link>* <link linkend="gconf-engine-get-full">gconf_engine_get_full</link>           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *locale,
                                             <link linkend="gboolean">gboolean</link> use_schema_default,
                                             <link linkend="gboolean">gboolean</link> *is_default_p,
                                             <link linkend="gboolean">gboolean</link> *is_writable_p,
                                             <link linkend="GError">GError</link> **err);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gconf-key-directory">gconf_key_directory ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_key_directory             (const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-key-key">gconf_key_key ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gconf_key_key                  (const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-file-test">gconf_file_test ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_file_test                 (const <link linkend="gchar">gchar</link> *filename,
                                             int test);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>test</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-file-exists">gconf_file_exists ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_file_exists               (const <link linkend="gchar">gchar</link> *filename);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-from-corba-value">gconf_value_from_corba_value ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_from_corba_value    (const <link linkend="ConfigValue">ConfigValue</link> *value);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-schema-from-corba-schema">gconf_schema_from_corba_schema ()</title>
<programlisting><link linkend="GConfSchema">GConfSchema</link>* gconf_schema_from_corba_schema (const <link linkend="ConfigSchema">ConfigSchema</link> *cs);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>cs</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-type-to-string">gconf_value_type_to_string ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gconf_value_type_to_string     (<link linkend="GConfValueType">GConfValueType</link> type);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-type-from-string">gconf_value_type_from_string ()</title>
<programlisting><link linkend="GConfValueType">GConfValueType</link> gconf_value_type_from_string (const <link linkend="gchar">gchar</link> *str);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-load-source-path">gconf_load_source_path ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gconf_load_source_path          (const <link linkend="gchar">gchar</link> *filename,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-shutdown-daemon">gconf_shutdown_daemon ()</title>
<programlisting>void        gconf_shutdown_daemon           (<link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-ping-daemon">gconf_ping_daemon ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_ping_daemon               (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-spawn-daemon">gconf_spawn_daemon ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_spawn_daemon              (<link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-concat-dir-and-key">gconf_concat_dir_and_key ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_concat_dir_and_key        (const <link linkend="gchar">gchar</link> *dir,
                                             const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dir</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-string-to-gulong">gconf_string_to_gulong ()</title>
<programlisting><link linkend="gulong">gulong</link>      gconf_string_to_gulong          (const <link linkend="gchar">gchar</link> *str);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-current-locale">gconf_current_locale ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gconf_current_locale           (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GConfLogPriority">enum GConfLogPriority</title>
<programlisting>typedef enum {
  GCL_EMERG,
  GCL_ALERT,
  GCL_CRIT,
  GCL_ERR,
  GCL_WARNING,
  GCL_NOTICE,
  GCL_INFO,
  GCL_DEBUG
} GConfLogPriority;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gconf-log">gconf_log ()</title>
<programlisting>void        gconf_log                       (<link linkend="GConfLogPriority">GConfLogPriority</link> pri,
                                             const <link linkend="gchar">gchar</link> *format,
                                             ...);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>pri</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>format</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-key-check">gconf_key_check ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_key_check                 (const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-new-from-string">gconf_value_new_from_string ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_new_from_string     (<link linkend="GConfValueType">GConfValueType</link> type,
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Tries to parse a string and create a primitive <link linkend="GConfValue">GConfValue</link> from
it. Only works on primitive types.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-new-list-from-string">gconf_value_new_list_from_string ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_new_list_from_string
                                            (<link linkend="GConfValueType">GConfValueType</link> list_type,
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
This function does not work. Don't use it.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-new-pair-from-string">gconf_value_new_pair_from_string ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_new_pair_from_string
                                            (<link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             const <link linkend="gchar">gchar</link> *str,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
This function does not work. Don't use it.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>car_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>cdr_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-quote-string">gconf_quote_string ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_quote_string              (const <link linkend="gchar">gchar</link> *str);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-unquote-string">gconf_unquote_string ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_unquote_string            (const <link linkend="gchar">gchar</link> *str,
                                             const <link linkend="gchar">gchar</link> **end,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-unquote-string-inplace">gconf_unquote_string_inplace ()</title>
<programlisting>void        gconf_unquote_string_inplace    (<link linkend="gchar">gchar</link> *str,
                                             <link linkend="gchar">gchar</link> **end,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>end</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-decode">gconf_value_decode ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_decode              (const <link linkend="gchar">gchar</link> *encoded);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>encoded</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-encode">gconf_value_encode ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_value_encode              (<link linkend="GConfValue">GConfValue</link> *val);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-quote-percents">gconf_quote_percents ()</title>
<programlisting><link linkend="gchar">gchar</link>*      gconf_quote_percents            (const <link linkend="gchar">gchar</link> *src);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>src</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-list-from-primitive-list">gconf_value_list_from_primitive_list ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_list_from_primitive_list
                                            (<link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GSList">GSList</link> *list,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-pair-from-primitive-pair">gconf_value_pair_from_primitive_pair ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_value_pair_from_primitive_pair
                                            (<link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_car,
                                             <link linkend="gconstpointer">gconstpointer</link> address_of_cdr,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>car_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>cdr_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>address_of_car</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>address_of_cdr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-list-to-primitive-list-destructive">gconf_value_list_to_primitive_list_destructive ()</title>
<programlisting><link linkend="GSList">GSList</link>*     gconf_value_list_to_primitive_list_destructive
                                            (<link linkend="GConfValue">GConfValue</link> *val,
                                             <link linkend="GConfValueType">GConfValueType</link> list_type,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>list_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-value-pair-to-primitive-pair-destructive">gconf_value_pair_to_primitive_pair_destructive ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_value_pair_to_primitive_pair_destructive
                                            (<link linkend="GConfValue">GConfValue</link> *val,
                                             <link linkend="GConfValueType">GConfValueType</link> car_type,
                                             <link linkend="GConfValueType">GConfValueType</link> cdr_type,
                                             <link linkend="gpointer">gpointer</link> car_retloc,
                                             <link linkend="gpointer">gpointer</link> cdr_retloc,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>val</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>car_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>cdr_type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>car_retloc</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>cdr_retloc</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-set-daemon-mode">gconf_set_daemon_mode ()</title>
<programlisting>void        gconf_set_daemon_mode           (<link linkend="gboolean">gboolean</link> setting);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>setting</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-handle-oaf-exception">gconf_handle_oaf_exception ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gconf_handle_oaf_exception      (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gconf-engine-get-full">gconf_engine_get_full ()</title>
<programlisting><link linkend="GConfValue">GConfValue</link>* gconf_engine_get_full           (<link linkend="GConfEngine">GConfEngine</link> *conf,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *locale,
                                             <link linkend="gboolean">gboolean</link> use_schema_default,
                                             <link linkend="gboolean">gboolean</link> *is_default_p,
                                             <link linkend="gboolean">gboolean</link> *is_writable_p,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
This function is basically for internal use.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>conf</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>locale</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>use_schema_default</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>is_default_p</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>is_writable_p</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
