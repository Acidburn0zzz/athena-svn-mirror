
/*  A Bison parser, made from ./otp.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NUMBER	258
#define	ID	259
#define	STRING	260
#define	LEFTARROW	261
#define	RIGHTARROW	262
#define	INPUT	263
#define	OUTPUT	264
#define	ALIASES	265
#define	STATES	266
#define	TABLES	267
#define	EXPRESSIONS	268
#define	PUSH	269
#define	POP	270
#define	DIV	271
#define	MOD	272
#define	BEG	273
#define	END	274

#line 1 "./otp.y"

/*
 * This file is part of the Omega project, which
 * is based in the web2c distribution of TeX.
 *
 * Copyright (c) 1994--1998 John Plaice and Yannis Haralambous
 */

#include "otp.h"
#include "routines.h"
#include "yystype.h"
int k, len;

void yyerror(msg)
char *msg;
{
fprintf(stderr, "line %d: %s\n", line_number, msg);
}
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		158
#define	YYFLAG		-32768
#define	YYNTBASE	40

#define YYTRANSLATE(x) ((unsigned)(x) <= 274 ? yytranslate[x] : 75)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    39,    38,     2,     2,     2,    34,
    35,    22,    20,    29,    21,    32,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    23,    30,
    26,    31,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    24,    37,    25,    33,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    27,    36,    28,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     7,     8,    12,    13,    17,    18,    21,    23,    26,
    27,    38,    39,    41,    43,    47,    48,    52,    54,    58,
    59,    62,    64,    67,    72,    74,    81,    87,    89,    91,
    95,    97,   102,   106,   110,   112,   116,   119,   121,   124,
   125,   126,   127,   138,   139,   142,   143,   147,   151,   152,
   154,   155,   157,   159,   162,   163,   166,   168,   170,   173,
   176,   183,   186,   193,   200,   209,   212,   214,   218,   222,
   226,   230,   234,   235,   241,   243,   246,   249,   256,   260,
   261,   265,   270
};

static const short yyrhs[] = {    41,
    42,    43,    49,    51,    57,     0,     0,     8,     3,    23,
     0,     0,     9,     3,    23,     0,     0,    12,    44,     0,
    45,     0,    44,    45,     0,     0,     4,    24,     3,    25,
    46,    26,    27,    47,    28,    23,     0,     0,    48,     0,
     3,     0,    48,    29,     3,     0,     0,    11,    50,    23,
     0,     4,     0,    50,    29,     4,     0,     0,    10,    52,
     0,    53,     0,    52,    53,     0,     4,    26,    54,    23,
     0,     5,     0,    55,    30,     3,    29,     3,    31,     0,
    55,    30,     3,    29,    31,     0,    55,     0,     3,     0,
     3,    21,     3,     0,    32,     0,    33,    34,    56,    35,
     0,    34,    56,    35,     0,    27,     4,    28,     0,    55,
     0,    56,    36,    55,     0,    13,    58,     0,    59,     0,
    58,    59,     0,     0,     0,     0,    64,    60,    65,    61,
     7,    69,    62,    63,    74,    23,     0,     0,     6,    69,
     0,     0,    30,     4,    31,     0,    66,    68,    67,     0,
     0,    18,     0,     0,    19,     0,    54,     0,    68,    54,
     0,     0,    69,    70,     0,     5,     0,     3,     0,    37,
     3,     0,    37,    38,     0,    37,    34,    38,    21,     3,
    35,     0,    37,    22,     0,    37,    34,    22,    20,     3,
    35,     0,    37,    34,    22,    21,     3,    35,     0,    37,
    34,    22,    20,     3,    21,     3,    35,     0,    39,    73,
     0,    73,     0,    71,    20,    73,     0,    71,    21,    73,
     0,    71,    22,    73,     0,    71,    16,    73,     0,    71,
    17,    73,     0,     0,     4,    72,    24,    71,    25,     0,
     3,     0,    37,     3,     0,    37,    38,     0,    37,    34,
    38,    21,     3,    35,     0,    34,    71,    35,     0,     0,
    30,     4,    31,     0,    30,    14,     4,    31,     0,    30,
    15,    31,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    44,    53,    56,    60,    63,    67,    69,    72,    74,    77,
    80,    83,    85,    88,    91,    95,    97,   100,   103,   107,
   109,   112,   114,   117,   122,   125,   127,   129,   133,   136,
   138,   140,   142,   144,   148,   151,   155,   170,   172,   175,
   179,   180,   182,   186,   188,   191,   194,   198,   203,   206,
   210,   213,   217,   220,   224,   226,   229,   237,   239,   241,
   243,   245,   250,   255,   260,   265,   269,   271,   273,   275,
   277,   279,   281,   283,   287,   290,   292,   294,   296,   299,
   301,   303,   305
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NUMBER",
"ID","STRING","LEFTARROW","RIGHTARROW","INPUT","OUTPUT","ALIASES","STATES","TABLES",
"EXPRESSIONS","PUSH","POP","DIV","MOD","BEG","END","'+'","'-'","'*'","';'","'['",
"']'","'='","'{'","'}'","','","'<'","'>'","'.'","'^'","'('","')'","'|'","'\\'",
"'$'","'#'","File","Input","Output","Tables","MoreTables","OneTable","@1","Numbers",
"MoreNumbers","States","MoreStates","Aliases","MoreAliases","OneAlias","OneCompleteLeft",
"OneLeft","ChoiceLeft","Expressions","MoreExpressions","OneExpr","@2","@3","@4",
"PushBack","LeftState","TotalLeft","BegLeft","EndLeft","Left","Right","OneRight",
"RestRightExpr","@5","OneRightExpr","RightState", NULL
};
#endif

static const short yyr1[] = {     0,
    40,    41,    41,    42,    42,    43,    43,    44,    44,    46,
    45,    47,    47,    48,    48,    49,    49,    50,    50,    51,
    51,    52,    52,    53,    54,    54,    54,    54,    55,    55,
    55,    55,    55,    55,    56,    56,    57,    58,    58,    60,
    61,    62,    59,    63,    63,    64,    64,    65,    66,    66,
    67,    67,    68,    68,    69,    69,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    71,    71,    71,    71,
    71,    71,    72,    71,    73,    73,    73,    73,    73,    74,
    74,    74,    74
};

static const short yyr2[] = {     0,
     6,     0,     3,     0,     3,     0,     2,     1,     2,     0,
    10,     0,     1,     1,     3,     0,     3,     1,     3,     0,
     2,     1,     2,     4,     1,     6,     5,     1,     1,     3,
     1,     4,     3,     3,     1,     3,     2,     1,     2,     0,
     0,     0,    10,     0,     2,     0,     3,     3,     0,     1,
     0,     1,     1,     2,     0,     2,     1,     1,     2,     2,
     6,     2,     6,     6,     8,     2,     1,     3,     3,     3,
     3,     3,     0,     5,     1,     2,     2,     6,     3,     0,
     3,     4,     3
};

static const short yydefact[] = {     2,
     0,     4,     0,     0,     6,     3,     0,     0,    16,     5,
     0,     7,     8,     0,    20,     0,     9,    18,     0,     0,
     0,     0,    17,     0,     0,    21,    22,    46,     1,    10,
    19,     0,    23,     0,    46,    38,    40,     0,    29,    25,
     0,    31,     0,     0,     0,    28,     0,    39,    49,     0,
     0,     0,     0,    35,     0,    24,     0,    47,    50,    41,
     0,    12,    30,    34,     0,    33,     0,     0,     0,    53,
    51,    14,     0,    13,    32,    36,     0,    55,    52,    54,
    48,     0,     0,     0,    27,    42,    11,    15,    26,    58,
    57,     0,     0,    44,    56,    59,    62,     0,    60,    75,
     0,     0,    66,    55,    80,     0,     0,    73,     0,    67,
    76,     0,    77,    45,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    79,     0,     0,     0,     0,
    43,     0,     0,     0,     0,    71,    72,    68,    69,    70,
     0,    81,     0,    83,     0,    63,    64,    61,     0,     0,
    82,     0,    74,    78,    65,     0,     0,     0
};

static const short yydefgoto[] = {   156,
     2,     5,     9,    12,    13,    38,    73,    74,    15,    19,
    21,    26,    27,    45,    46,    55,    29,    35,    36,    49,
    69,    94,   105,    37,    60,    61,    81,    71,    86,    95,
   109,   120,   110,   116
};

static const short yypact[] = {    12,
    54,    52,    44,    68,    60,-32768,    57,    77,    74,-32768,
    64,    77,-32768,    82,    79,    87,-32768,-32768,   -16,    88,
    78,    69,-32768,    89,    70,    88,-32768,    65,-32768,-32768,
-32768,    22,-32768,    93,    17,-32768,-32768,    72,    80,-32768,
    95,-32768,    66,    41,    81,    73,    71,-32768,    90,    83,
   102,    84,    41,-32768,   -20,-32768,   103,-32768,-32768,-32768,
    22,   104,-32768,-32768,    30,-32768,    41,    85,   106,-32768,
    19,-32768,    91,    86,-32768,-32768,    45,-32768,-32768,-32768,
-32768,    94,   108,    92,-32768,    -3,-32768,-32768,-32768,-32768,
-32768,     1,     8,   110,-32768,-32768,-32768,   -17,-32768,-32768,
     6,     3,-32768,-32768,    96,    49,    97,-32768,    42,-32768,
-32768,    98,-32768,    -3,     4,    99,   117,   118,   121,   101,
     8,     8,     8,     8,     8,-32768,   107,   100,   105,   109,
-32768,    -7,   111,   112,     6,-32768,-32768,-32768,-32768,-32768,
   124,-32768,   113,-32768,   126,-32768,-32768,-32768,    62,   114,
-32768,   115,-32768,-32768,-32768,   130,   132,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,   122,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   116,   -11,   -41,   119,-32768,-32768,   120,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    29,-32768,
     0,-32768,   -92,-32768
};


#define	YYLAST		172


static const short yytable[] = {    90,
   103,    91,    54,    96,   106,   111,    23,   128,   100,   108,
   100,    54,    24,   145,    66,    67,   -37,   129,   130,     1,
   107,    39,    97,    40,    39,    76,    40,   146,   136,   137,
   138,   139,   140,    92,    98,    93,   112,    79,    99,   101,
   113,   101,   102,    39,   102,    41,    34,    84,    41,    70,
    42,    43,    44,    42,    43,    44,     3,   121,   122,    80,
     4,   123,   124,   125,    75,    67,     6,    41,   117,   118,
     7,     8,    42,    43,    44,    85,   126,   121,   122,    10,
    11,   123,   124,   125,    14,    18,   153,    16,    20,    22,
    28,    25,    31,    30,    34,    32,    47,    50,    52,    53,
    51,    58,    57,    56,    63,    68,    72,    59,   143,    62,
    88,    64,    78,    77,    83,   104,    87,   119,    82,   132,
   133,   131,    89,   134,   135,   115,   150,   141,   152,   157,
   142,   158,   114,    17,   149,   127,     0,     0,     0,   144,
     0,    33,     0,   151,     0,   147,   148,     0,   154,   155,
     0,     0,     0,     0,    48,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    65
};

static const short yycheck[] = {     3,
    93,     5,    44,     3,    22,     3,    23,     4,     3,     4,
     3,    53,    29,    21,    35,    36,     0,    14,    15,     8,
    38,     3,    22,     5,     3,    67,     5,    35,   121,   122,
   123,   124,   125,    37,    34,    39,    34,    19,    38,    34,
    38,    34,    37,     3,    37,    27,    30,     3,    27,    61,
    32,    33,    34,    32,    33,    34,     3,    16,    17,    71,
     9,    20,    21,    22,    35,    36,    23,    27,    20,    21,
     3,    12,    32,    33,    34,    31,    35,    16,    17,    23,
     4,    20,    21,    22,    11,     4,    25,    24,    10,     3,
    13,     4,     4,    25,    30,    26,     4,    26,     4,    34,
    21,    31,    30,    23,     3,     3,     3,    18,     4,    27,
     3,    28,     7,    29,    29,     6,    23,    21,    28,     3,
     3,    23,    31,     3,    24,    30,     3,    21,     3,     0,
    31,     0,   104,    12,   135,    38,    -1,    -1,    -1,    31,
    -1,    26,    -1,    31,    -1,    35,    35,    -1,    35,    35,
    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    53
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 55 "./otp.y"
{ input_bytes=2; ;
    break;}
case 3:
#line 57 "./otp.y"
{ input_bytes=yyvsp[-1].yint; ;
    break;}
case 4:
#line 62 "./otp.y"
{ output_bytes=2; ;
    break;}
case 5:
#line 64 "./otp.y"
{ output_bytes=yyvsp[-1].yint; ;
    break;}
case 10:
#line 79 "./otp.y"
{ store_table(yyvsp[-3].ystring, yyvsp[-1].yint); ;
    break;}
case 14:
#line 90 "./otp.y"
{ add_to_table(yyvsp[0].yint); ;
    break;}
case 15:
#line 92 "./otp.y"
{ add_to_table(yyvsp[0].yint); ;
    break;}
case 18:
#line 102 "./otp.y"
{ store_state(yyvsp[0].ystring); ;
    break;}
case 19:
#line 104 "./otp.y"
{ store_state(yyvsp[0].ystring); ;
    break;}
case 24:
#line 119 "./otp.y"
{ store_alias(yyvsp[-3].ystring, yyvsp[-1].yleft); ;
    break;}
case 25:
#line 124 "./otp.y"
{ yyval.yleft = StringLeft(yyvsp[0].ystring); ;
    break;}
case 26:
#line 126 "./otp.y"
{ yyval.yleft = CompleteLeft(yyvsp[-5].yleft, yyvsp[-3].yint, yyvsp[-1].yint); ;
    break;}
case 27:
#line 128 "./otp.y"
{ yyval.yleft = PlusLeft(yyvsp[-4].yleft, yyvsp[-2].yint); ;
    break;}
case 28:
#line 130 "./otp.y"
{ yyval.yleft = yyvsp[0].yleft; ;
    break;}
case 29:
#line 135 "./otp.y"
{ yyval.yleft = SingleLeft(yyvsp[0].yint); ;
    break;}
case 30:
#line 137 "./otp.y"
{ yyval.yleft = DoubleLeft(yyvsp[-2].yint, yyvsp[0].yint); ;
    break;}
case 31:
#line 139 "./otp.y"
{ yyval.yleft = WildCard(); ;
    break;}
case 32:
#line 141 "./otp.y"
{ yyval.yleft = NotChoiceLeft(yyvsp[-1].ylleft); ;
    break;}
case 33:
#line 143 "./otp.y"
{ yyval.yleft = ChoiceLeft(yyvsp[-1].ylleft); ;
    break;}
case 34:
#line 145 "./otp.y"
{ yyval.yleft = lookup_alias(yyvsp[-1].ystring); ;
    break;}
case 35:
#line 150 "./otp.y"
{ yyval.ylleft = llist1(yyvsp[0].yleft); ;
    break;}
case 36:
#line 152 "./otp.y"
{ yyval.ylleft = lappend1(yyvsp[-2].ylleft, yyvsp[0].yleft); ;
    break;}
case 37:
#line 157 "./otp.y"
{
	  for(cur_state=0; cur_state<no_states; cur_state++) {
		  if ((states[cur_state].no_exprs)==0) {
        	     out_int(OTP_LEFT_START, 0);
		  } else {
        	     out_int(OTP_LEFT_RETURN, 0);
                  }
		  out_int(OTP_RIGHT_CHAR, 1);
		  out_int(OTP_STOP, 0);
	  }
	;
    break;}
case 40:
#line 177 "./otp.y"
{ states[cur_state].no_exprs++; ;
    break;}
case 41:
#line 179 "./otp.y"
{ out_left(yyvsp[0].ylleft); right_offset=0; ;
    break;}
case 42:
#line 181 "./otp.y"
{ right_offset=OTP_PBACK_OFFSET; ;
    break;}
case 43:
#line 183 "./otp.y"
{ fill_in_left(); ;
    break;}
case 46:
#line 193 "./otp.y"
{ cur_state = 0; ;
    break;}
case 47:
#line 195 "./otp.y"
{ cur_state = lookup_state(yyvsp[-1].ystring); ;
    break;}
case 48:
#line 200 "./otp.y"
{ yyval.ylleft = lappend(yyvsp[-2].ylleft, lappend(yyvsp[-1].ylleft, yyvsp[0].ylleft)); ;
    break;}
case 49:
#line 205 "./otp.y"
{ yyval.ylleft = nil; ;
    break;}
case 50:
#line 207 "./otp.y"
{ yyval.ylleft = llist1(BeginningLeft()); ;
    break;}
case 51:
#line 212 "./otp.y"
{ yyval.ylleft = nil; ;
    break;}
case 52:
#line 214 "./otp.y"
{ yyval.ylleft = llist1(EndLeft()); ;
    break;}
case 53:
#line 219 "./otp.y"
{ yyval.ylleft = llist1(yyvsp[0].yleft); ;
    break;}
case 54:
#line 221 "./otp.y"
{ yyval.ylleft = lappend1(yyvsp[-1].ylleft, yyvsp[0].yleft); ;
    break;}
case 57:
#line 231 "./otp.y"
{
	 len=strlen(yyvsp[0].ystring);
	 for (k=0; k<len; k++) {
            out_right(OTP_RIGHT_NUM, (yyvsp[0].ystring)[k]);
         }
	;
    break;}
case 58:
#line 238 "./otp.y"
{ out_right(OTP_RIGHT_NUM, yyvsp[0].yint); ;
    break;}
case 59:
#line 240 "./otp.y"
{ out_right(OTP_RIGHT_CHAR, yyvsp[0].yint); ;
    break;}
case 60:
#line 242 "./otp.y"
{ out_right(OTP_RIGHT_LCHAR, 0); ;
    break;}
case 61:
#line 244 "./otp.y"
{ out_right(OTP_RIGHT_LCHAR, yyvsp[-1].yint); ;
    break;}
case 62:
#line 246 "./otp.y"
{
	 out_right(OTP_RIGHT_SOME, 0); 
	 out_int(0,0);
	;
    break;}
case 63:
#line 251 "./otp.y"
{
	 out_right(OTP_RIGHT_SOME, yyvsp[-1].yint);
	 out_int(0, 0);
	;
    break;}
case 64:
#line 256 "./otp.y"
{
	 out_right(OTP_RIGHT_SOME, 0);
	 out_int(0, yyvsp[-1].yint);
	;
    break;}
case 65:
#line 261 "./otp.y"
{
	 out_right(OTP_RIGHT_SOME, yyvsp[-3].yint);
	 out_int(0, yyvsp[-1].yint);
	;
    break;}
case 66:
#line 266 "./otp.y"
{ out_right(OTP_RIGHT_OUTPUT, 0); ;
    break;}
case 68:
#line 272 "./otp.y"
{ out_int(OTP_ADD, 0); ;
    break;}
case 69:
#line 274 "./otp.y"
{ out_int(OTP_SUB, 0); ;
    break;}
case 70:
#line 276 "./otp.y"
{ out_int(OTP_MULT, 0); ;
    break;}
case 71:
#line 278 "./otp.y"
{ out_int(OTP_DIV, 0); ;
    break;}
case 72:
#line 280 "./otp.y"
{ out_int(OTP_MOD, 0); ;
    break;}
case 73:
#line 282 "./otp.y"
{ out_int(OTP_PUSH_NUM, lookup_table(yyvsp[0].ystring)); ;
    break;}
case 74:
#line 284 "./otp.y"
{ out_int(OTP_LOOKUP, 0); ;
    break;}
case 75:
#line 289 "./otp.y"
{ out_int(OTP_PUSH_NUM, yyvsp[0].yint); ;
    break;}
case 76:
#line 291 "./otp.y"
{ out_int(OTP_PUSH_CHAR, yyvsp[0].yint); ;
    break;}
case 77:
#line 293 "./otp.y"
{ out_int(OTP_PUSH_LCHAR, 0); ;
    break;}
case 78:
#line 295 "./otp.y"
{ out_int(OTP_PUSH_LCHAR, yyvsp[-1].yint); ;
    break;}
case 81:
#line 302 "./otp.y"
{ out_int(OTP_STATE_CHANGE, lookup_state(yyvsp[-1].ystring)); ;
    break;}
case 82:
#line 304 "./otp.y"
{ out_int(OTP_STATE_PUSH, lookup_state(yyvsp[-1].ystring)); ;
    break;}
case 83:
#line 306 "./otp.y"
{ out_int(OTP_STATE_POP, 0); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 308 "./otp.y"

