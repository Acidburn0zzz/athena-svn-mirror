AC_INIT(src)

dnl ===========================================================================

ART_REQUIRED=2.3.10
BONOBO_ACTIVATION_REQUIRED=1.0.0
BONOBO_REQUIRED=2.1.0
BONOBO_UI_REQUIRED=2.0.0
EEL_REQUIRED=2.2.0
ESOUND_REQUIRED=0.2.27
GLIB_REQUIRED=2
GNOME_DESKTOP_REQUIRED=2.1.0
GNOME_REQUIRED=2.1.1
GNOME_UI_REQUIRED=2.1.1
GNOME_VFS_REQUIRED=2.1.5
ORBIT_REQUIRED=2.4.0
PANGO_REQUIRED=1.1.2
GTK_REQUIRED=2.1.1
MEDUSA_REQUIRED=0.5.1
RSVG_REQUIRED=2.0.1
XML_REQUIRED=2.4.7

AC_SUBST(EEL_REQUIRED)
AC_SUBST(GNOME_VFS_REQUIRED)
AC_SUBST(MEDUSA_REQUIRED)
AC_SUBST(RSVG_REQUIRED)
AC_SUBST(XML_REQUIRED)

dnl ===========================================================================

AM_INIT_AUTOMAKE(nautilus, 2.2.0.2)
AM_CONFIG_HEADER(config.h)

AM_SANITY_CHECK
AM_MAINTAINER_MODE

AC_C_BIGENDIAN
AC_C_CONST
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

PKG_CHECK_MODULES(ALL, \
	esound >= $ESOUND_REQUIRED \
	bonobo-activation-2.0 >= $BONOBO_ACTIVATION_REQUIRED \
	eel-2.0 >= $EEL_REQUIRED \
	glib-2.0 >= $GLIB_REQUIRED \
	gnome-desktop-2.0 >= $GNOME_DESKTOP_REQUIRED \
	gnome-vfs-2.0 >= $GNOME_VFS_REQUIRED \
	ORBit-2.0 >= $ORBIT_REQUIRED\
	pango >= $PANGO_REQUIRED \
	gtk+-2.0 >= $GTK_REQUIRED \
	libart-2.0 >= $ART_REQUIRED \
	libbonobo-2.0 >= $BONOBO_REQUIRED \
	libbonoboui-2.0 >= $BONOBO_UI_REQUIRED \
	libgnome-2.0 >= $GNOME_REQUIRED \
	libgnomeui-2.0 >= $GNOME_UI_REQUIRED \
	librsvg-2.0 >= $RSVG_REQUIRED \
	libxml-2.0 >= $XML_REQUIRED)
dnl ==========================================================================

ALL_LINGUAS="am ar az be bg ca cs da de el en_GB es et eu fi fr ga gl he hi hu it ja ko lt lv mk mn ms nl nn no pl pt pt_BR ro ru sk sl sq sv ta tr uk vi zh_CN zh_TW"

GETTEXT_PACKAGE=nautilus
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE")

AM_GLIB_GNU_GETTEXT

AC_PROG_INTLTOOL

dnl ==========================================================================

ENABLE_PROFILER=
AC_ARG_ENABLE(profiler,
[  --enable-profiler		Enable profiler],
ENABLE_PROFILER=1
AC_DEFINE(ENABLE_PROFILER))

profiling_support=off
if test "x$ENABLE_PROFILER" = "x1"
then
	CFLAGS="-g -O -gdwarf-2 -finstrument-functions -D__NO_STRING_INLINES $CFLAGS"
	LDFLAGS="/gnome/GNOME2/lib/libprofiler.so -lpthread $LDFLAGS"
	profiling_support=on
fi

AC_SUBST(ENABLE_PROFILER)
AM_CONDITIONAL(ENABLE_PROFILER, test "x$ENABLE_PROFILER" = "x1")

dnl ==========================================================================

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl ==========================================================================

ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

dnl ==========================================================================

AC_CHECK_FUNCS(setmntent endmntent hasmntopt getmntinfo)
AC_CHECK_HEADERS(mntent.h sys/mnttab.h sys/vfstab.h sys/cdio.h sys/mount.h)

dnl ==========================================================================

AC_CHECK_FUNCS(setenv unsetenv putenv)

dnl ==========================================================================

dnl X

x_libs="`$PKG_CONFIG --libs pangox`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

x_cflags="`$PKG_CONFIG --cflags pangox`"
x_extra_libs=

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA
 
  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  fi

  x_libs="$X_LIBS -lX11 $X_EXTRA_LIBS"
fi  

## Strip the .la files
 
x_libs_for_checks=$x_libs
#for I in $x_libs ; do
#  case $I in 
#    *.la) ;;
#    *) x_libs_for_checks="$x_libs_for_checks $I" ;;
#  esac
#done

AC_CHECK_LIB(X11, XOpenDisplay, :, 
	AC_MSG_ERROR([*** libX11 not found.  Check 'config.log' for more details.]),
	$x_libs_for_checks) 

dnl ==========================================================================

dnl cdda

AM_CONDITIONAL(HAVE_CDDA, false)
AC_CHECK_HEADERS(cdda_interface.h cdda_paranoia.h, [
	CDDA_LIBS="-lcdda_paranoia -lcdda_interface"
	AM_CONDITIONAL(HAVE_CDDA, true)
	])

dnl ==========================================================================

dnl jw (for doc build)

AC_PATH_PROG(JW,jw,no)
if test x$JW = xno; then
  HAVE_JW="no"
else
  HAVE_JW="yes"
fi
AM_CONDITIONAL(HAVE_JW, test "x$HAVE_JW" = "xyes")
AC_SUBST(HAVE_JW)

dnl ==========================================================================

dnl medusa checking

AC_MSG_CHECKING(for Medusa)

PKG_CHECK_MODULES(MEDUSA, medusa-2.0 >= $MEDUSA_REQUIRED, have_medusa=yes, have_medusa=no)
if test "x$have_medusa" = "xyes"; then
  AC_DEFINE(HAVE_MEDUSA,1)
  EXTRA_CORE_MODULES="$EXTRA_CORE_MODULES medusa-2.0"
fi

dnl ==========================================================================

dnl libjpeg

  if test -z "$LIBJPEG"; then
    AC_CHECK_LIB(jpeg, jpeg_start_decompress,
      [AC_CHECK_HEADER(jpeglib.h,
        jpeg_ok=yes,
        jpeg_ok=no)],
      AC_MSG_WARN(*** (jpeg library not found) ***), -lm)
    if test "$jpeg_ok" = yes; then
      JPEG='jpeg'; LIBJPEG='-ljpeg'
      AC_DEFINE(HAVE_LIBJPEG)
    else
     AC_MSG_WARN(*** JPEG loader will not be built (jpeg header file not found) ***)
    fi
  fi

AC_SUBST(LIBJPEG)

dnl ==========================================================================

dnl Turn on the additional warnings last, so -Werror doesn't affect other tests.

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
	is_cvs_version=true
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	AC_MSG_RESULT(yes)
	CFLAGS="\
	-Wall \
	-Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs -Wpointer-arith \
	-Wcast-align -Wsign-compare \
	-Werror \
	$CFLAGS"

	for option in -Wsign-promo -Wno-sign-compare; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$option $CFLAGS"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
else
	AC_MSG_RESULT(no)
fi

dnl ==========================================================================

dnl gimphwrapbox
GIMPHWRAPBOX_MODULES="gtk+-2.0"
GIMPHWRAPBOX_CFLAGS="`$PKG_CONFIG --cflags $GIMPHWRAPBOX_MODULES`"
AC_SUBST(GIMPHWRAPBOX_CFLAGS)

dnl libegg
LIBEGG_MODULES="gtk+-2.0 libgnome-2.0"
LIBEGG_CFLAGS="`$PKG_CONFIG --cflags $LIBEGG_MODULES`"
AC_SUBST(LIBEGG_CFLAGS)

dnl libnautilus (must list bonobo-activation and libbonobo because idldir does not respect "requires")
LIBNAUTILUS_MODULES="eel-2.0 bonobo-activation-2.0 libbonobo-2.0 libbonoboui-2.0"
LIBNAUTILUS_CFLAGS="`$PKG_CONFIG --cflags $LIBNAUTILUS_MODULES`"
AC_SUBST(LIBNAUTILUS_CFLAGS)
LIBNAUTILUS_LIBS="`$PKG_CONFIG --libs $LIBNAUTILUS_MODULES`"
AC_SUBST(LIBNAUTILUS_LIBS)
LIBNAUTILUS_IDL_INCLUDES="`$PKG_CONFIG --variable=idldir $LIBNAUTILUS_MODULES | $srcdir/add-include-prefix`"
AC_SUBST(LIBNAUTILUS_IDL_INCLUDES)

dnl core nautilus (must list bonobo-activation and libbonobo because idldir does not respect "requires")
CORE_MODULES="eel-2.0 librsvg-2.0 bonobo-activation-2.0 libbonobo-2.0 libbonoboui-2.0 esound gnome-desktop-2.0 $EXTRA_CORE_MODULES"
CORE_CFLAGS="`$PKG_CONFIG --cflags $CORE_MODULES` $x_cflags"
AC_SUBST(CORE_CFLAGS)
CORE_LIBS="`$PKG_CONFIG --libs $CORE_MODULES` $CDDA_LIBS $LIBJPEG $x_libs"
AC_SUBST(CORE_LIBS)
CORE_IDL_INCLUDES="`$PKG_CONFIG --variable=idldir $CORE_MODULES | $srcdir/add-include-prefix`"
AC_SUBST(CORE_IDL_INCLUDES)

dnl typical components
COMPONENT_MODULES="eel-2.0 libbonoboui-2.0 gnome-vfs-module-2.0 gnome-desktop-2.0"
COMPONENT_CFLAGS="`$PKG_CONFIG --cflags $COMPONENT_MODULES`"
AC_SUBST(COMPONENT_CFLAGS)
COMPONENT_LIBS="`$PKG_CONFIG --libs $COMPONENT_MODULES`"
AC_SUBST(COMPONENT_LIBS)

dnl emblems component
EMBLEM_COMPONENT_MODULES="$COMPONENT_MODULES librsvg-2.0"
EMBLEM_COMPONENT_CFLAGS="`$PKG_CONFIG --cflags $EMBLEM_COMPONENT_MODULES`"
AC_SUBST(EMBLEM_COMPONENT_CFLAGS)
EMBLEM_COMPONENT_LIBS="`$PKG_CONFIG --libs $EMBLEM_COMPONENT_MODULES`"
AC_SUBST(EMBLEM_COMPONENT_LIBS)

DISABLE_DEPRECATED_CFLAGS=" \
	-DG_DISABLE_DEPRECATED \
	-DGDK_DISABLE_DEPRECATED \
	-DGDK_PIXBUF_DISABLE_DEPRECATED \
	-DGTK_DISABLE_DEPRECATED \
	-DGNOME_DISABLE_DEPRECATED"

dnl FIXME: put this back once the registration_id stuff is cleared up.
dnl	-DBONOBO_DISABLE_DEPRECATED

AC_SUBST(DISABLE_DEPRECATED_CFLAGS)

dnl
dnl disable (broken) hardware view
dnl
hw_view=disabled
AC_ARG_ENABLE(hardware,
[  --enable-hardware		Enable (broken, Linux only) hardware view],
hw_view=enabled)
if test "x`(uname -s) 2>/dev/null`" != "xLinux"; then
	hw_view=disabled
fi
AM_CONDITIONAL(ENABLE_HARDWARE_VIEW, test "$hw_view" = "enabled")


dnl libbackground
PKG_CHECK_MODULES(CAPPLET, "gtk+-2.0 gconf-2.0 libgnomeui-2.0 libbonoboui-2.0")
dnl ==========================================================================

dnl ==============================================
dnl Special GConf section 
dnl ==============================================

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

if test x"$GCONFTOOL" = xno; then
  AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi

AM_GCONF_SOURCE_2

AC_OUTPUT([
Makefile
components/Makefile
components/adapter/Makefile
components/hardware/Makefile
components/hardware/icons/Makefile
components/history/Makefile
components/notes/Makefile
components/text/Makefile
components/text/services/Makefile
components/throbber/Makefile
components/tree/Makefile
components/emblem/Makefile
components/image_properties/Makefile
cut-n-paste-code/Makefile
cut-n-paste-code/libegg/Makefile
cut-n-paste-code/widgets/Makefile
cut-n-paste-code/widgets/gimphwrapbox/Makefile
data/Makefile
data/patterns/Makefile
docs/Makefile
icons/Makefile
icons/crux_eggplant/Makefile
icons/crux_eggplant/throbber/Makefile
icons/crux_teal/Makefile
icons/crux_teal/throbber/Makefile
icons/default/Makefile
icons/gnome/Makefile
icons/gnome/throbber/Makefile
icons/sierra/Makefile
icons/tahoe/Makefile
icons/throbber/Makefile
libbackground/Makefile
libnautilus-adapter/Makefile
libnautilus-private/Makefile
libnautilus/Makefile
libnautilus/libnautilus.pc
nautilus.spec
po/Makefile.in
src/Makefile
src/file-manager/Makefile
test/Makefile
])

dnl ==========================================================================
echo "
nautilus-$VERSION:

	prefix:                 ${prefix}
	source code location:	${srcdir}
	compiler:		${CC}

	hardware view:          ${hw_view}
	profiling support:      ${profiling_support}
"
