/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef eazel_inventory_service_interface_H
#define eazel_inventory_service_interface_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <bonobo/Bonobo.h>
#if !defined(ORBIT_DECL_Trilobite_Eazel_InventoryUploadCallback) && !defined(_Trilobite_Eazel_InventoryUploadCallback_defined)
#define ORBIT_DECL_Trilobite_Eazel_InventoryUploadCallback 1
#define _Trilobite_Eazel_InventoryUploadCallback_defined 1
#define Trilobite_Eazel_InventoryUploadCallback__free CORBA_Object__free
   typedef CORBA_Object Trilobite_Eazel_InventoryUploadCallback;
   extern CORBA_unsigned_long
      Trilobite_Eazel_InventoryUploadCallback__classid;
#if !defined(TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_0)
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_0 'e'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_1 'a'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_2 'z'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_3 'e'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_4 'l'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_5 '_'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_6 'i'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_7 'n'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_8 'v'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_9 'e'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_10 'n'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_11 't'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_12 'o'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_13 'r'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_14 'y'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_15 '_'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_16 's'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_17 'e'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_18 'r'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_19 'v'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_20 'i'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_21 'c'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_22 'e'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_23 '_'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_24 'i'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_25 'n'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_26 't'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_27 'e'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_28 'r'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_29 'f'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_30 'a'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_31 'c'
#define TC_IMPL_TC_Trilobite_Eazel_InventoryUploadCallback_32 'e'
   extern const struct CORBA_TypeCode_struct
      TC_Trilobite_Eazel_InventoryUploadCallback_struct;
#define TC_Trilobite_Eazel_InventoryUploadCallback ((CORBA_TypeCode)&TC_Trilobite_Eazel_InventoryUploadCallback_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Trilobite_Eazel_Inventory) && !defined(_Trilobite_Eazel_Inventory_defined)
#define ORBIT_DECL_Trilobite_Eazel_Inventory 1
#define _Trilobite_Eazel_Inventory_defined 1
#define Trilobite_Eazel_Inventory__free CORBA_Object__free
   typedef CORBA_Object Trilobite_Eazel_Inventory;
   extern CORBA_unsigned_long Trilobite_Eazel_Inventory__classid;
#if !defined(TC_IMPL_TC_Trilobite_Eazel_Inventory_0)
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_0 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_1 'a'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_2 'z'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_3 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_4 'l'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_5 '_'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_6 'i'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_7 'n'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_8 'v'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_9 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_10 'n'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_11 't'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_12 'o'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_13 'r'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_14 'y'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_15 '_'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_16 's'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_17 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_18 'r'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_19 'v'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_20 'i'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_21 'c'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_22 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_23 '_'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_24 'i'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_25 'n'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_26 't'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_27 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_28 'r'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_29 'f'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_30 'a'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_31 'c'
#define TC_IMPL_TC_Trilobite_Eazel_Inventory_32 'e'
   extern const struct CORBA_TypeCode_struct
      TC_Trilobite_Eazel_Inventory_struct;
#define TC_Trilobite_Eazel_Inventory ((CORBA_TypeCode)&TC_Trilobite_Eazel_Inventory_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*done_uploading) (PortableServer_Servant _servant,
			      const CORBA_boolean succeeded,
			      CORBA_Environment * ev);
   }
   POA_Trilobite_Eazel_InventoryUploadCallback__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Trilobite_Eazel_InventoryUploadCallback__epv
	 *Trilobite_Eazel_InventoryUploadCallback_epv;
   }
   POA_Trilobite_Eazel_InventoryUploadCallback__vepv;
   typedef struct
   {
      void *_private;
      POA_Trilobite_Eazel_InventoryUploadCallback__vepv *vepv;
   }
   POA_Trilobite_Eazel_InventoryUploadCallback;
   extern void
      POA_Trilobite_Eazel_InventoryUploadCallback__init(PortableServer_Servant
							servant,
							CORBA_Environment *
							ev);
   extern void
      POA_Trilobite_Eazel_InventoryUploadCallback__fini(PortableServer_Servant
							servant,
							CORBA_Environment *
							ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_boolean(*_get_enabled) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
      void (*_set_enabled) (PortableServer_Servant _servant,
			    const CORBA_boolean value,
			    CORBA_Environment * ev);
      CORBA_char *(*_get_machine_id) (PortableServer_Servant _servant,
				      CORBA_Environment * ev);
      void (*upload) (PortableServer_Servant _servant,
		      const Trilobite_Eazel_InventoryUploadCallback listener,
		      CORBA_Environment * ev);
   }
   POA_Trilobite_Eazel_Inventory__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Trilobite_Eazel_Inventory__epv *Trilobite_Eazel_Inventory_epv;
   }
   POA_Trilobite_Eazel_Inventory__vepv;
   typedef struct
   {
      void *_private;
      POA_Trilobite_Eazel_Inventory__vepv *vepv;
   }
   POA_Trilobite_Eazel_Inventory;
   extern void POA_Trilobite_Eazel_Inventory__init(PortableServer_Servant
						   servant,
						   CORBA_Environment * ev);
   extern void POA_Trilobite_Eazel_Inventory__fini(PortableServer_Servant
						   servant,
						   CORBA_Environment * ev);

/** prototypes **/
#define Trilobite_Eazel_InventoryUploadCallback_ref Bonobo_Unknown_ref
#define Trilobite_Eazel_InventoryUploadCallback_unref Bonobo_Unknown_unref
#define Trilobite_Eazel_InventoryUploadCallback_queryInterface Bonobo_Unknown_queryInterface
   void
      Trilobite_Eazel_InventoryUploadCallback_done_uploading
      (Trilobite_Eazel_InventoryUploadCallback _obj,
       const CORBA_boolean succeeded, CORBA_Environment * ev);
#define Trilobite_Eazel_Inventory_ref Bonobo_Unknown_ref
#define Trilobite_Eazel_Inventory_unref Bonobo_Unknown_unref
#define Trilobite_Eazel_Inventory_queryInterface Bonobo_Unknown_queryInterface
   CORBA_boolean
      Trilobite_Eazel_Inventory__get_enabled(Trilobite_Eazel_Inventory _obj,
					     CORBA_Environment * ev);
   void Trilobite_Eazel_Inventory__set_enabled(Trilobite_Eazel_Inventory _obj,
					       const CORBA_boolean value,
					       CORBA_Environment * ev);
   CORBA_char
      *Trilobite_Eazel_Inventory__get_machine_id(Trilobite_Eazel_Inventory
						 _obj,
						 CORBA_Environment * ev);
   void Trilobite_Eazel_Inventory_upload(Trilobite_Eazel_Inventory _obj,
					 const
					 Trilobite_Eazel_InventoryUploadCallback
					 listener, CORBA_Environment * ev);

   void
      _ORBIT_skel_Trilobite_Eazel_InventoryUploadCallback_done_uploading
      (POA_Trilobite_Eazel_InventoryUploadCallback * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_done_uploading) (PortableServer_Servant _servant,
				     const CORBA_boolean succeeded,
				     CORBA_Environment * ev));
   void
      _ORBIT_skel_Trilobite_Eazel_Inventory__get_enabled
      (POA_Trilobite_Eazel_Inventory * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl__get_enabled) (PortableServer_Servant _servant,
					   CORBA_Environment * ev));
   void
      _ORBIT_skel_Trilobite_Eazel_Inventory__set_enabled
      (POA_Trilobite_Eazel_Inventory * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl__set_enabled) (PortableServer_Servant _servant,
				   const CORBA_boolean value,
				   CORBA_Environment * ev));
   void
      _ORBIT_skel_Trilobite_Eazel_Inventory__get_machine_id
      (POA_Trilobite_Eazel_Inventory * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_char * (*_impl__get_machine_id) (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void
      _ORBIT_skel_Trilobite_Eazel_Inventory_upload
      (POA_Trilobite_Eazel_Inventory * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_upload) (PortableServer_Servant _servant,
			     const Trilobite_Eazel_InventoryUploadCallback
			     listener, CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
