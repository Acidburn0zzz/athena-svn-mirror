/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef nautilus_shell_interface_H
#define nautilus_shell_interface_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <bonobo/Bonobo.h>
#include <libnautilus/nautilus-view-component.h>
#if !defined(ORBIT_DECL_Nautilus_Shell) && !defined(_Nautilus_Shell_defined)
#define ORBIT_DECL_Nautilus_Shell 1
#define _Nautilus_Shell_defined 1
#define Nautilus_Shell__free CORBA_Object__free
   typedef CORBA_Object Nautilus_Shell;
   extern CORBA_unsigned_long Nautilus_Shell__classid;
#if !defined(TC_IMPL_TC_Nautilus_Shell_0)
#define TC_IMPL_TC_Nautilus_Shell_0 'n'
#define TC_IMPL_TC_Nautilus_Shell_1 'a'
#define TC_IMPL_TC_Nautilus_Shell_2 'u'
#define TC_IMPL_TC_Nautilus_Shell_3 't'
#define TC_IMPL_TC_Nautilus_Shell_4 'i'
#define TC_IMPL_TC_Nautilus_Shell_5 'l'
#define TC_IMPL_TC_Nautilus_Shell_6 'u'
#define TC_IMPL_TC_Nautilus_Shell_7 's'
#define TC_IMPL_TC_Nautilus_Shell_8 '_'
#define TC_IMPL_TC_Nautilus_Shell_9 's'
#define TC_IMPL_TC_Nautilus_Shell_10 'h'
#define TC_IMPL_TC_Nautilus_Shell_11 'e'
#define TC_IMPL_TC_Nautilus_Shell_12 'l'
#define TC_IMPL_TC_Nautilus_Shell_13 'l'
#define TC_IMPL_TC_Nautilus_Shell_14 '_'
#define TC_IMPL_TC_Nautilus_Shell_15 'i'
#define TC_IMPL_TC_Nautilus_Shell_16 'n'
#define TC_IMPL_TC_Nautilus_Shell_17 't'
#define TC_IMPL_TC_Nautilus_Shell_18 'e'
#define TC_IMPL_TC_Nautilus_Shell_19 'r'
#define TC_IMPL_TC_Nautilus_Shell_20 'f'
#define TC_IMPL_TC_Nautilus_Shell_21 'a'
#define TC_IMPL_TC_Nautilus_Shell_22 'c'
#define TC_IMPL_TC_Nautilus_Shell_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_Shell_struct;
#define TC_Nautilus_Shell ((CORBA_TypeCode)&TC_Nautilus_Shell_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*open_windows) (PortableServer_Servant _servant,
			    const Nautilus_URIList * uris,
			    const CORBA_char * geometry,
			    CORBA_Environment * ev);
      void (*open_default_window) (PortableServer_Servant _servant,
				   const CORBA_char * geometry,
				   CORBA_Environment * ev);
      void (*start_desktop) (PortableServer_Servant _servant,
			     CORBA_Environment * ev);
      void (*stop_desktop) (PortableServer_Servant _servant,
			    CORBA_Environment * ev);
      void (*quit) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*restart) (PortableServer_Servant _servant,
		       CORBA_Environment * ev);
   }
   POA_Nautilus_Shell__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Nautilus_Shell__epv *Nautilus_Shell_epv;
   }
   POA_Nautilus_Shell__vepv;
   typedef struct
   {
      void *_private;
      POA_Nautilus_Shell__vepv *vepv;
   }
   POA_Nautilus_Shell;
   extern void POA_Nautilus_Shell__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Nautilus_Shell__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);

/** prototypes **/
#define Nautilus_Shell_ref Bonobo_Unknown_ref
#define Nautilus_Shell_unref Bonobo_Unknown_unref
#define Nautilus_Shell_queryInterface Bonobo_Unknown_queryInterface
   void Nautilus_Shell_open_windows(Nautilus_Shell _obj,
				    const Nautilus_URIList * uris,
				    const CORBA_char * geometry,
				    CORBA_Environment * ev);
   void Nautilus_Shell_open_default_window(Nautilus_Shell _obj,
					   const CORBA_char * geometry,
					   CORBA_Environment * ev);
   void Nautilus_Shell_start_desktop(Nautilus_Shell _obj,
				     CORBA_Environment * ev);
   void Nautilus_Shell_stop_desktop(Nautilus_Shell _obj,
				    CORBA_Environment * ev);
   void Nautilus_Shell_quit(Nautilus_Shell _obj, CORBA_Environment * ev);
   void Nautilus_Shell_restart(Nautilus_Shell _obj, CORBA_Environment * ev);

   void _ORBIT_skel_Nautilus_Shell_open_windows(POA_Nautilus_Shell *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_open_windows)
						(PortableServer_Servant
						 _servant,
						 const Nautilus_URIList *
						 uris,
						 const CORBA_char * geometry,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_open_default_window(POA_Nautilus_Shell *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       void
						       (*_impl_open_default_window)
						       (PortableServer_Servant
							_servant,
							const CORBA_char *
							geometry,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Nautilus_Shell_start_desktop(POA_Nautilus_Shell *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_start_desktop)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_stop_desktop(POA_Nautilus_Shell *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_stop_desktop)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_quit(POA_Nautilus_Shell * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					void (*_impl_quit)
					(PortableServer_Servant _servant,
					 CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_restart(POA_Nautilus_Shell *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_restart)
					   (PortableServer_Servant _servant,
					    CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
