<refentry id="gal-e-table-header-utils" revision="12 Jan 2001">
<refmeta>
<refentrytitle>e-table-header-utils</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GAL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>e-table-header-utils</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



int         <link linkend="e-table-header-compute-height">e_table_header_compute_height</link>   (<link linkend="ETableCol">ETableCol</link> *ecol,
                                             <link linkend="GtkStyle">GtkStyle</link> *style,
                                             <link linkend="GdkFont">GdkFont</link> *font);
void        <link linkend="e-table-header-draw-button">e_table_header_draw_button</link>      (<link linkend="GdkDrawable">GdkDrawable</link> *drawable,
                                             <link linkend="ETableCol">ETableCol</link> *ecol,
                                             <link linkend="GtkStyle">GtkStyle</link> *style,
                                             <link linkend="GdkFont">GdkFont</link> *font,
                                             <link linkend="GtkStateType">GtkStateType</link> state,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="GdkGC">GdkGC</link> *gc,
                                             int x,
                                             int y,
                                             int width,
                                             int height,
                                             int button_width,
                                             int button_height,
                                             <link linkend="ETableColArrow">ETableColArrow</link> arrow);
void        <link linkend="e-table-draw-elided-string">e_table_draw_elided_string</link>      (<link linkend="GdkDrawable">GdkDrawable</link> *drawable,
                                             <link linkend="GdkFont">GdkFont</link> *font,
                                             <link linkend="GdkGC">GdkGC</link> *gc,
                                             int x,
                                             int y,
                                             const char *str,
                                             int max_width,
                                             <link linkend="gboolean">gboolean</link> center);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="e-table-header-compute-height">e_table_header_compute_height ()</title>
<programlisting>int         e_table_header_compute_height   (<link linkend="ETableCol">ETableCol</link> *ecol,
                                             <link linkend="GtkStyle">GtkStyle</link> *style,
                                             <link linkend="GdkFont">GdkFont</link> *font);</programlisting>
<para>
Computes the minimum height required for a table header button.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ecol</parameter>&nbsp;:</entry>
<entry> Table column description.
</entry></row>
<row><entry align="right"><parameter>style</parameter>&nbsp;:</entry>
<entry> Style for the button's bevel.
</entry></row>
<row><entry align="right"><parameter>font</parameter>&nbsp;:</entry>
<entry> Font for the button's text, or NULL if no font is available.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The height of the button, in pixels.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="e-table-header-draw-button">e_table_header_draw_button ()</title>
<programlisting>void        e_table_header_draw_button      (<link linkend="GdkDrawable">GdkDrawable</link> *drawable,
                                             <link linkend="ETableCol">ETableCol</link> *ecol,
                                             <link linkend="GtkStyle">GtkStyle</link> *style,
                                             <link linkend="GdkFont">GdkFont</link> *font,
                                             <link linkend="GtkStateType">GtkStateType</link> state,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="GdkGC">GdkGC</link> *gc,
                                             int x,
                                             int y,
                                             int width,
                                             int height,
                                             int button_width,
                                             int button_height,
                                             <link linkend="ETableColArrow">ETableColArrow</link> arrow);</programlisting>
<para>
Draws a button suitable for a table header.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>drawable</parameter>&nbsp;:</entry>
<entry> Destination drawable.
</entry></row>
<row><entry align="right"><parameter>ecol</parameter>&nbsp;:</entry>
<entry> Table column for the header information.
</entry></row>
<row><entry align="right"><parameter>style</parameter>&nbsp;:</entry>
<entry> Style to use for drawing the button.
</entry></row>
<row><entry align="right"><parameter>font</parameter>&nbsp;:</entry>
<entry> Font for the button's text.
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> State of the table widget.
</entry></row>
<row><entry align="right"><parameter>widget</parameter>&nbsp;:</entry>
<entry> The table widget.
</entry></row>
<row><entry align="right"><parameter>gc</parameter>&nbsp;:</entry>
<entry> GC to use for drawing.
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> Leftmost coordinate of the button.
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> Topmost coordinate of the button.
</entry></row>
<row><entry align="right"><parameter>width</parameter>&nbsp;:</entry>
<entry> Width of the region to draw.
</entry></row>
<row><entry align="right"><parameter>height</parameter>&nbsp;:</entry>
<entry> Height of the region to draw.
</entry></row>
<row><entry align="right"><parameter>button_width</parameter>&nbsp;:</entry>
<entry> Width for the complete button.
</entry></row>
<row><entry align="right"><parameter>button_height</parameter>&nbsp;:</entry>
<entry> Height for the complete button.
</entry></row>
<row><entry align="right"><parameter>arrow</parameter>&nbsp;:</entry>
<entry> Arrow type to use as a sort indicator.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="e-table-draw-elided-string">e_table_draw_elided_string ()</title>
<programlisting>void        e_table_draw_elided_string      (<link linkend="GdkDrawable">GdkDrawable</link> *drawable,
                                             <link linkend="GdkFont">GdkFont</link> *font,
                                             <link linkend="GdkGC">GdkGC</link> *gc,
                                             int x,
                                             int y,
                                             const char *str,
                                             int max_width,
                                             <link linkend="gboolean">gboolean</link> center);</programlisting>
<para>
Draws a string, possibly trimming it so that it fits inside the specified
maximum width.  If it does not fit, an elision indicator is drawn after the
last character that does fit.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>drawable</parameter>&nbsp;:</entry>
<entry> Destination drawable.
</entry></row>
<row><entry align="right"><parameter>font</parameter>&nbsp;:</entry>
<entry> Font for the text.
</entry></row>
<row><entry align="right"><parameter>gc</parameter>&nbsp;:</entry>
<entry> GC to use for drawing.
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> X insertion point for the string.
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> Y insertion point for the string's baseline.
</entry></row>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry> String to draw.
</entry></row>
<row><entry align="right"><parameter>max_width</parameter>&nbsp;:</entry>
<entry> Maximum width in which the string must fit.
</entry></row>
<row><entry align="right"><parameter>center</parameter>&nbsp;:</entry>
<entry> Whether to center the string in the available area if it does fit.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
