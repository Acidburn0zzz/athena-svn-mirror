<refentry id="gnome-vfs-gnome-vfs-mime" revision="27 Jan 2001">
<refmeta>
<refentrytitle>gnome-mime</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-mime</refname><refpurpose>Routines to determine the MIME type of a file</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;gnome-vfs-mime.h&gt;


<link linkend="GList">GList</link>*      <link linkend="gnome-uri-list-extract-filenames">gnome_uri_list_extract_filenames</link>
                                            (const <link linkend="gchar">gchar</link> *uri_list);
<link linkend="GList">GList</link>*      <link linkend="gnome-uri-list-extract-uris">gnome_uri_list_extract_uris</link>     (const <link linkend="gchar">gchar</link> *uri_list);
void        <link linkend="gnome-uri-list-free-strings">gnome_uri_list_free_strings</link>     (<link linkend="GList">GList</link> *list);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The routines in gnome-mime provide a way to obtain the MIME (Multipurpose
Internet Mail Extension) type of a given file and some utility functions.
</para>

<para>
There are two different methods for getting the MIME type of a particular file:
Using only the filename to find the corresponding MIME type by matching the
name against a database of known extensions and regular expressions; Or
obtaining the MIME type by peeking at the contents of the file. 
Generally it should be faster using the former method, because the routines
only do in-memory operations, while the latter method needs to do possibly
time-expensive disk operations to obtain the necessary information.
</para>

<para>
The routines that classify a file only by its name, look at the
<filename>*.mime</filename> files in the
<filename>$gnome_prefix/share/mime-info/</filename> directory and in
<filename>~/.gnome/mime-info/</filename> to build the extension
database. This gives the user the possibility to extend and/or override the
system defaults.
</para>

<para>
Applications wanting to make additional MIME types available only need to
install their files in one of these directories.
</para>

<para>
The file <filename>$gnome_prefix/share/mime-info/gnome.mime</filename>
contains the defaults for Gnome and is read first. In addition,
<filename>~/.gnome/mime-info/user.mime</filename> is the last file to be
read and thus makes it possible to set system-wide defaults and still
gives the user a chance to override them. However, there is currently no
determined order in which the other files in these directories will be
read, nor is there any way to override system defaults, yet.
</para>

<para>
The <link linkend="gnome-mime-type-from-magic">gnome_mime_type_from_magic</link>() function looks at the
<filename>$gnome_prefix/etc/mime-magic</filename> file to determine the
MIME type of a given file (This database in usually kept in a
pre-processed, easily readable format in
<filename>$gnome_prefix/etc/mime-magic.dat</filename>).
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-uri-list-extract-filenames">gnome_uri_list_extract_filenames ()</title>
<programlisting><link linkend="GList">GList</link>*      gnome_uri_list_extract_filenames
                                            (const <link linkend="gchar">gchar</link> *uri_list);</programlisting>
<para>
Extract local files from a <parameter>uri</parameter>-list and return a list.  Note
that unlike the <link linkend="gnome-uri-list-extract-uris">gnome_uri_list_extract_uris</link> function, this
will only return local files and not any other urls.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>uri_list</parameter>&nbsp;:</entry>
<entry> an uri-list in the standard format
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a GList containing strings allocated with g_malloc.
You should use <link linkend="gnome-uri-list-free-strings">gnome_uri_list_free_strings</link> to free the
returned list.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-uri-list-extract-uris">gnome_uri_list_extract_uris ()</title>
<programlisting><link linkend="GList">GList</link>*      gnome_uri_list_extract_uris     (const <link linkend="gchar">gchar</link> *uri_list);</programlisting>
<para>
Extract URIs from a <parameter>uri</parameter>-list and return a list</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>uri_list</parameter>&nbsp;:</entry>
<entry> an uri-list in the standard format.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a GList containing strings allocated with g_malloc.
You should use <link linkend="gnome-uri-list-free-strings">gnome_uri_list_free_strings</link> to free the
returned list
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-uri-list-free-strings">gnome_uri_list_free_strings ()</title>
<programlisting>void        gnome_uri_list_free_strings     (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Releases all of the resources allocated by <parameter>list</parameter>.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry> A GList returned by <link linkend="gnome-uri-list-extract-uris">gnome_uri_list_extract_uris</link>() or <link linkend="gnome-uri-list-extract-filenames">gnome_uri_list_extract_filenames</link>()
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
