/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef gnome_vfs_slave_H
#define gnome_vfs_slave_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet) && !defined(_CORBA_sequence_CORBA_octet_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define _CORBA_sequence_CORBA_octet_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_6 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_7 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_8 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_9 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_10 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_11 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_12 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_13 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_14 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_octet;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_6 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_7 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_8 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_9 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_10 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_11 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_12 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_13 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
   extern CORBA_sequence_CORBA_octet *CORBA_sequence_CORBA_octet__alloc(void);
   extern gpointer CORBA_sequence_CORBA_octet__free(gpointer mem,
						    gpointer dat,
						    CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_octet *CORBA_sequence_CORBA_octet_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_GNOME_VFS_Buffer_defined)
#define _GNOME_VFS_Buffer_defined 1
   typedef CORBA_sequence_CORBA_octet GNOME_VFS_Buffer;
#if !defined(TC_IMPL_TC_GNOME_VFS_Buffer_0)
#define TC_IMPL_TC_GNOME_VFS_Buffer_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Buffer_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Buffer_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Buffer_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Buffer_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Buffer_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Buffer_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Buffer_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Buffer_8 's'
#define TC_IMPL_TC_GNOME_VFS_Buffer_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Buffer_10 's'
#define TC_IMPL_TC_GNOME_VFS_Buffer_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Buffer_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Buffer_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Buffer_14 'e'
   extern const struct CORBA_TypeCode_struct TC_GNOME_VFS_Buffer_struct;
#define TC_GNOME_VFS_Buffer ((CORBA_TypeCode)&TC_GNOME_VFS_Buffer_struct)
#endif
   extern GNOME_VFS_Buffer *GNOME_VFS_Buffer__alloc(void);
   extern gpointer GNOME_VFS_Buffer__free(gpointer mem, gpointer dat,
					  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_GNOME_VFS_Result_defined)
#define _GNOME_VFS_Result_defined 1
   typedef CORBA_unsigned_short GNOME_VFS_Result;
#if !defined(TC_IMPL_TC_GNOME_VFS_Result_0)
#define TC_IMPL_TC_GNOME_VFS_Result_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Result_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Result_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Result_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Result_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Result_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Result_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Result_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Result_8 's'
#define TC_IMPL_TC_GNOME_VFS_Result_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Result_10 's'
#define TC_IMPL_TC_GNOME_VFS_Result_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Result_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Result_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Result_14 'e'
   extern const struct CORBA_TypeCode_struct TC_GNOME_VFS_Result_struct;
#define TC_GNOME_VFS_Result ((CORBA_TypeCode)&TC_GNOME_VFS_Result_struct)
#endif
#endif
#if !defined(_GNOME_VFS_OpenMode_defined)
#define _GNOME_VFS_OpenMode_defined 1
   typedef CORBA_unsigned_long GNOME_VFS_OpenMode;
#if !defined(TC_IMPL_TC_GNOME_VFS_OpenMode_0)
#define TC_IMPL_TC_GNOME_VFS_OpenMode_0 'g'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_1 'n'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_2 'o'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_3 'm'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_4 'e'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_5 '_'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_6 'v'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_7 'f'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_8 's'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_9 '_'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_10 's'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_11 'l'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_12 'a'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_13 'v'
#define TC_IMPL_TC_GNOME_VFS_OpenMode_14 'e'
   extern const struct CORBA_TypeCode_struct TC_GNOME_VFS_OpenMode_struct;
#define TC_GNOME_VFS_OpenMode ((CORBA_TypeCode)&TC_GNOME_VFS_OpenMode_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Permission_defined)
#define _GNOME_VFS_Permission_defined 1
   typedef CORBA_unsigned_short GNOME_VFS_Permission;
#if !defined(TC_IMPL_TC_GNOME_VFS_Permission_0)
#define TC_IMPL_TC_GNOME_VFS_Permission_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Permission_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Permission_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Permission_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Permission_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Permission_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Permission_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Permission_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Permission_8 's'
#define TC_IMPL_TC_GNOME_VFS_Permission_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Permission_10 's'
#define TC_IMPL_TC_GNOME_VFS_Permission_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Permission_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Permission_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Permission_14 'e'
   extern const struct CORBA_TypeCode_struct TC_GNOME_VFS_Permission_struct;
#define TC_GNOME_VFS_Permission ((CORBA_TypeCode)&TC_GNOME_VFS_Permission_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Slave_FileInfo_defined)
#define _GNOME_VFS_Slave_FileInfo_defined 1
   typedef struct
   {
      GNOME_VFS_Buffer data;
      CORBA_char *name;
      CORBA_char *symlink_name;
      CORBA_char *mime_type;
   }
   GNOME_VFS_Slave_FileInfo;

#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfo_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_FileInfo_struct;
#define TC_GNOME_VFS_Slave_FileInfo ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_FileInfo_struct)
#endif
   extern GNOME_VFS_Slave_FileInfo *GNOME_VFS_Slave_FileInfo__alloc(void);
   extern gpointer GNOME_VFS_Slave_FileInfo__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_VFS_Slave_FileInfo) && !defined(_CORBA_sequence_GNOME_VFS_Slave_FileInfo_defined)
#define ORBIT_DECL_CORBA_sequence_GNOME_VFS_Slave_FileInfo 1
#define _CORBA_sequence_GNOME_VFS_Slave_FileInfo_defined 1
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_0 'g'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_1 'n'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_2 'o'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_3 'm'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_4 'e'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_5 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_6 'v'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_7 'f'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_8 's'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_9 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_10 's'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_11 'l'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_12 'a'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_13 'v'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_FileInfo_14 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      GNOME_VFS_Slave_FileInfo *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_GNOME_VFS_Slave_FileInfo;
#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_0)
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_0 'g'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_1 'n'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_2 'o'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_3 'm'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_4 'e'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_5 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_6 'v'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_7 'f'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_8 's'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_9 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_10 's'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_11 'l'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_12 'a'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_13 'v'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_struct;
#define TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_VFS_Slave_FileInfo_struct)
#endif
   extern CORBA_sequence_GNOME_VFS_Slave_FileInfo
      *CORBA_sequence_GNOME_VFS_Slave_FileInfo__alloc(void);
   extern gpointer CORBA_sequence_GNOME_VFS_Slave_FileInfo__free(gpointer mem,
								 gpointer dat,
								 CORBA_boolean free_strings);	/* ORBit internal use */
   GNOME_VFS_Slave_FileInfo
      *CORBA_sequence_GNOME_VFS_Slave_FileInfo_allocbuf(CORBA_unsigned_long
							len);
#endif
#if !defined(_GNOME_VFS_Slave_FileInfoList_defined)
#define _GNOME_VFS_Slave_FileInfoList_defined 1
   typedef CORBA_sequence_GNOME_VFS_Slave_FileInfo
      GNOME_VFS_Slave_FileInfoList;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoList_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_FileInfoList_struct;
#define TC_GNOME_VFS_Slave_FileInfoList ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_FileInfoList_struct)
#endif
   extern GNOME_VFS_Slave_FileInfoList
      *GNOME_VFS_Slave_FileInfoList__alloc(void);
   extern gpointer GNOME_VFS_Slave_FileInfoList__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_GNOME_VFS_Slave_FileInfoOptions_defined)
#define _GNOME_VFS_Slave_FileInfoOptions_defined 1
   typedef CORBA_unsigned_long GNOME_VFS_Slave_FileInfoOptions;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileInfoOptions_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_FileInfoOptions_struct;
#define TC_GNOME_VFS_Slave_FileInfoOptions ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_FileInfoOptions_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Slave_DirectoryFilterType_defined)
#define _GNOME_VFS_Slave_DirectoryFilterType_defined 1
   typedef CORBA_unsigned_short GNOME_VFS_Slave_DirectoryFilterType;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterType_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_DirectoryFilterType_struct;
#define TC_GNOME_VFS_Slave_DirectoryFilterType ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_DirectoryFilterType_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Slave_DirectoryFilterOptions_defined)
#define _GNOME_VFS_Slave_DirectoryFilterOptions_defined 1
   typedef CORBA_unsigned_long GNOME_VFS_Slave_DirectoryFilterOptions;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilterOptions_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_DirectoryFilterOptions_struct;
#define TC_GNOME_VFS_Slave_DirectoryFilterOptions ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_DirectoryFilterOptions_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Slave_DirectoryFilter_defined)
#define _GNOME_VFS_Slave_DirectoryFilter_defined 1
   typedef struct
   {
      GNOME_VFS_Slave_DirectoryFilterType type;
      GNOME_VFS_Slave_DirectoryFilterOptions options;
      CORBA_char *pattern;
   }
   GNOME_VFS_Slave_DirectoryFilter;

#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectoryFilter_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_DirectoryFilter_struct;
#define TC_GNOME_VFS_Slave_DirectoryFilter ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_DirectoryFilter_struct)
#endif
   extern GNOME_VFS_Slave_DirectoryFilter
      *GNOME_VFS_Slave_DirectoryFilter__alloc(void);
   extern gpointer GNOME_VFS_Slave_DirectoryFilter__free(gpointer mem,
							 gpointer dat,
							 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_GNOME_VFS_Slave_DirectorySortRule_defined)
#define _GNOME_VFS_Slave_DirectorySortRule_defined 1
   typedef CORBA_unsigned_short GNOME_VFS_Slave_DirectorySortRule;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRule_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_DirectorySortRule_struct;
#define TC_GNOME_VFS_Slave_DirectorySortRule ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_DirectorySortRule_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule) && !defined(_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_defined)
#define ORBIT_DECL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule 1
#define _CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_defined 1
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_0 'g'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_1 'n'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_2 'o'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_3 'm'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_4 'e'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_5 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_6 'v'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_7 'f'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_8 's'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_9 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_10 's'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_11 'l'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_12 'a'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_13 'v'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_14 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      GNOME_VFS_Slave_DirectorySortRule *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule;
#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_0)
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_0 'g'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_1 'n'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_2 'o'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_3 'm'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_4 'e'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_5 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_6 'v'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_7 'f'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_8 's'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_9 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_10 's'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_11 'l'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_12 'a'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_13 'v'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_struct;
#define TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_struct)
#endif
   extern CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule
      *CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule__alloc(void);
   extern gpointer
      CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
   GNOME_VFS_Slave_DirectorySortRule
      *CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule_allocbuf
      (CORBA_unsigned_long len);
#endif
#if !defined(_GNOME_VFS_Slave_DirectorySortRuleList_defined)
#define _GNOME_VFS_Slave_DirectorySortRuleList_defined 1
   typedef CORBA_sequence_GNOME_VFS_Slave_DirectorySortRule
      GNOME_VFS_Slave_DirectorySortRuleList;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_DirectorySortRuleList_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_DirectorySortRuleList_struct;
#define TC_GNOME_VFS_Slave_DirectorySortRuleList ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_DirectorySortRuleList_struct)
#endif
   extern GNOME_VFS_Slave_DirectorySortRuleList
      *GNOME_VFS_Slave_DirectorySortRuleList__alloc(void);
   extern gpointer GNOME_VFS_Slave_DirectorySortRuleList__free(gpointer mem,
							       gpointer dat,
							       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_GNOME_VFS_Slave_XferPhase_defined)
#define _GNOME_VFS_Slave_XferPhase_defined 1
   typedef CORBA_unsigned_short GNOME_VFS_Slave_XferPhase;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferPhase_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_XferPhase_struct;
#define TC_GNOME_VFS_Slave_XferPhase ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_XferPhase_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Slave_XferOptions_defined)
#define _GNOME_VFS_Slave_XferOptions_defined 1
   typedef CORBA_unsigned_long GNOME_VFS_Slave_XferOptions;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOptions_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_XferOptions_struct;
#define TC_GNOME_VFS_Slave_XferOptions ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_XferOptions_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Slave_XferErrorMode_defined)
#define _GNOME_VFS_Slave_XferErrorMode_defined 1
   typedef CORBA_unsigned_short GNOME_VFS_Slave_XferErrorMode;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferErrorMode_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_XferErrorMode_struct;
#define TC_GNOME_VFS_Slave_XferErrorMode ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_XferErrorMode_struct)
#endif
#endif
#if !defined(_GNOME_VFS_Slave_XferOverwriteMode_defined)
#define _GNOME_VFS_Slave_XferOverwriteMode_defined 1
   typedef CORBA_unsigned_short GNOME_VFS_Slave_XferOverwriteMode;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_XferOverwriteMode_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_XferOverwriteMode_struct;
#define TC_GNOME_VFS_Slave_XferOverwriteMode ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_XferOverwriteMode_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_10 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_11 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_12 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_13 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_14 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_10 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_11 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_12 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_13 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_GNOME_VFS_Slave_FileNameList_defined)
#define _GNOME_VFS_Slave_FileNameList_defined 1
   typedef CORBA_sequence_CORBA_string GNOME_VFS_Slave_FileNameList;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileNameList_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_FileNameList_struct;
#define TC_GNOME_VFS_Slave_FileNameList ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_FileNameList_struct)
#endif
   extern GNOME_VFS_Slave_FileNameList
      *GNOME_VFS_Slave_FileNameList__alloc(void);
   extern gpointer GNOME_VFS_Slave_FileNameList__free(gpointer mem,
						      gpointer dat,
						      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_10 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_11 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_12 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_13 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_14 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_10 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_11 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_12 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_13 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_GNOME_VFS_Slave_URIList_defined)
#define _GNOME_VFS_Slave_URIList_defined 1
   typedef CORBA_sequence_CORBA_string GNOME_VFS_Slave_URIList;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_URIList_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_URIList_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_URIList_struct;
#define TC_GNOME_VFS_Slave_URIList ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_URIList_struct)
#endif
   extern GNOME_VFS_Slave_URIList *GNOME_VFS_Slave_URIList__alloc(void);
   extern gpointer GNOME_VFS_Slave_URIList__free(gpointer mem, gpointer dat,
						 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_GNOME_VFS_Slave_GetFileInfoResult_defined)
#define _GNOME_VFS_Slave_GetFileInfoResult_defined 1
   typedef struct
   {
      CORBA_char *uri;
      GNOME_VFS_Result result;
      GNOME_VFS_Slave_FileInfo file_info;
   }
   GNOME_VFS_Slave_GetFileInfoResult;

#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResult_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_GetFileInfoResult_struct;
#define TC_GNOME_VFS_Slave_GetFileInfoResult ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_GetFileInfoResult_struct)
#endif
   extern GNOME_VFS_Slave_GetFileInfoResult
      *GNOME_VFS_Slave_GetFileInfoResult__alloc(void);
   extern gpointer GNOME_VFS_Slave_GetFileInfoResult__free(gpointer mem,
							   gpointer dat,
							   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult) && !defined(_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_defined)
#define ORBIT_DECL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult 1
#define _CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_defined 1
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_0 'g'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_1 'n'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_2 'o'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_3 'm'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_4 'e'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_5 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_6 'v'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_7 'f'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_8 's'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_9 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_10 's'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_11 'l'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_12 'a'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_13 'v'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_14 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      GNOME_VFS_Slave_GetFileInfoResult *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult;
#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_0)
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_0 'g'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_1 'n'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_2 'o'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_3 'm'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_4 'e'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_5 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_6 'v'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_7 'f'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_8 's'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_9 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_10 's'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_11 'l'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_12 'a'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_13 'v'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_struct;
#define TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_struct)
#endif
   extern CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult
      *CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult__alloc(void);
   extern gpointer
      CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
   GNOME_VFS_Slave_GetFileInfoResult
      *CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult_allocbuf
      (CORBA_unsigned_long len);
#endif
#if !defined(_GNOME_VFS_Slave_GetFileInfoResultList_defined)
#define _GNOME_VFS_Slave_GetFileInfoResultList_defined 1
   typedef CORBA_sequence_GNOME_VFS_Slave_GetFileInfoResult
      GNOME_VFS_Slave_GetFileInfoResultList;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_GetFileInfoResultList_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_GetFileInfoResultList_struct;
#define TC_GNOME_VFS_Slave_GetFileInfoResultList ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_GetFileInfoResultList_struct)
#endif
   extern GNOME_VFS_Slave_GetFileInfoResultList
      *GNOME_VFS_Slave_GetFileInfoResultList__alloc(void);
   extern gpointer GNOME_VFS_Slave_GetFileInfoResultList__free(gpointer mem,
							       gpointer dat,
							       CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Slave_FileHandle) && !defined(_GNOME_VFS_Slave_FileHandle_defined)
#define ORBIT_DECL_GNOME_VFS_Slave_FileHandle 1
#define _GNOME_VFS_Slave_FileHandle_defined 1
#define GNOME_VFS_Slave_FileHandle__free CORBA_Object__free
   typedef CORBA_Object GNOME_VFS_Slave_FileHandle;
   extern CORBA_unsigned_long GNOME_VFS_Slave_FileHandle__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_FileHandle_struct;
#define TC_GNOME_VFS_Slave_FileHandle ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_FileHandle_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Slave_Notify) && !defined(_GNOME_VFS_Slave_Notify_defined)
#define ORBIT_DECL_GNOME_VFS_Slave_Notify 1
#define _GNOME_VFS_Slave_Notify_defined 1
#define GNOME_VFS_Slave_Notify__free CORBA_Object__free
   typedef CORBA_Object GNOME_VFS_Slave_Notify;
   extern CORBA_unsigned_long GNOME_VFS_Slave_Notify__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_Notify_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_14 'e'
   extern const struct CORBA_TypeCode_struct TC_GNOME_VFS_Slave_Notify_struct;
#define TC_GNOME_VFS_Slave_Notify ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_Notify_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Slave_Request) && !defined(_GNOME_VFS_Slave_Request_defined)
#define ORBIT_DECL_GNOME_VFS_Slave_Request 1
#define _GNOME_VFS_Slave_Request_defined 1
#define GNOME_VFS_Slave_Request__free CORBA_Object__free
   typedef CORBA_Object GNOME_VFS_Slave_Request;
   extern CORBA_unsigned_long GNOME_VFS_Slave_Request__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_Request_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_Request_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_Request_struct;
#define TC_GNOME_VFS_Slave_Request ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_Request_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Slave_FileHandle) && !defined(_GNOME_VFS_Slave_FileHandle_defined)
#define ORBIT_DECL_GNOME_VFS_Slave_FileHandle 1
#define _GNOME_VFS_Slave_FileHandle_defined 1
#define GNOME_VFS_Slave_FileHandle__free CORBA_Object__free
   typedef CORBA_Object GNOME_VFS_Slave_FileHandle;
   extern CORBA_unsigned_long GNOME_VFS_Slave_FileHandle__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_FileHandle_14 'e'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_Slave_FileHandle_struct;
#define TC_GNOME_VFS_Slave_FileHandle ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_FileHandle_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Slave_Notify) && !defined(_GNOME_VFS_Slave_Notify_defined)
#define ORBIT_DECL_GNOME_VFS_Slave_Notify 1
#define _GNOME_VFS_Slave_Notify_defined 1
#define GNOME_VFS_Slave_Notify__free CORBA_Object__free
   typedef CORBA_Object GNOME_VFS_Slave_Notify;
   extern CORBA_unsigned_long GNOME_VFS_Slave_Notify__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Slave_Notify_0)
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_0 'g'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_1 'n'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_2 'o'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_3 'm'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_4 'e'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_6 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_7 'f'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_8 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_10 's'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_11 'l'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_12 'a'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_13 'v'
#define TC_IMPL_TC_GNOME_VFS_Slave_Notify_14 'e'
   extern const struct CORBA_TypeCode_struct TC_GNOME_VFS_Slave_Notify_struct;
#define TC_GNOME_VFS_Slave_Notify ((CORBA_TypeCode)&TC_GNOME_VFS_Slave_Notify_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*open) (PortableServer_Servant _servant, const CORBA_char * uri,
		    const GNOME_VFS_OpenMode open_mode,
		    CORBA_Environment * ev);
      void (*open_as_channel) (PortableServer_Servant _servant,
			       const CORBA_char * uri,
			       const GNOME_VFS_OpenMode open_mode,
			       const CORBA_unsigned_long advised_block_size,
			       CORBA_Environment * ev);
      void (*create) (PortableServer_Servant _servant, const CORBA_char * uri,
		      const GNOME_VFS_OpenMode open_mode,
		      const CORBA_boolean exclusive,
		      const GNOME_VFS_Permission perm,
		      CORBA_Environment * ev);
      void (*create_as_channel) (PortableServer_Servant _servant,
				 const CORBA_char * uri,
				 const GNOME_VFS_OpenMode open_mode,
				 const CORBA_boolean exclusive,
				 const GNOME_VFS_Permission perm,
				 CORBA_Environment * ev);
      void (*get_file_info) (PortableServer_Servant _servant,
			     const GNOME_VFS_Slave_URIList * uri,
			     const GNOME_VFS_Slave_FileInfoOptions
			     info_options, CORBA_Environment * ev);
      void (*load_directory) (PortableServer_Servant _servant,
			      const CORBA_char * uri,
			      const GNOME_VFS_Slave_FileInfoOptions
			      info_options,
			      const GNOME_VFS_Slave_DirectoryFilter * filter,
			      const GNOME_VFS_Slave_DirectorySortRuleList *
			      sort_rules, const CORBA_boolean reverse_order,
			      const CORBA_unsigned_long
			      items_per_notification, CORBA_Environment * ev);
      void (*xfer) (PortableServer_Servant _servant,
		    const GNOME_VFS_Slave_URIList * source_names,
		    const GNOME_VFS_Slave_URIList * target_names,
		    const GNOME_VFS_Slave_XferOptions options,
		    const GNOME_VFS_Slave_XferOverwriteMode overwrite_mode,
		    CORBA_Environment * ev);
      void (*stop) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*reset) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*die) (PortableServer_Servant _servant, CORBA_Environment * ev);
   }
   POA_GNOME_VFS_Slave_Request__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_VFS_Slave_Request__epv *GNOME_VFS_Slave_Request_epv;
   }
   POA_GNOME_VFS_Slave_Request__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_Slave_Request__vepv *vepv;
   }
   POA_GNOME_VFS_Slave_Request;
   extern void POA_GNOME_VFS_Slave_Request__init(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   extern void POA_GNOME_VFS_Slave_Request__fini(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*read) (PortableServer_Servant _servant,
		    const CORBA_unsigned_long count, CORBA_Environment * ev);
      void (*write) (PortableServer_Servant _servant,
		     const GNOME_VFS_Buffer * buffer, CORBA_Environment * ev);
      void (*close) (PortableServer_Servant _servant, CORBA_Environment * ev);
   }
   POA_GNOME_VFS_Slave_FileHandle__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_VFS_Slave_FileHandle__epv *GNOME_VFS_Slave_FileHandle_epv;
   }
   POA_GNOME_VFS_Slave_FileHandle__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_Slave_FileHandle__vepv *vepv;
   }
   POA_GNOME_VFS_Slave_FileHandle;
   extern void POA_GNOME_VFS_Slave_FileHandle__init(PortableServer_Servant
						    servant,
						    CORBA_Environment * ev);
   extern void POA_GNOME_VFS_Slave_FileHandle__fini(PortableServer_Servant
						    servant,
						    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*open) (PortableServer_Servant _servant,
		    const GNOME_VFS_Result result,
		    const GNOME_VFS_Slave_FileHandle handle,
		    CORBA_Environment * ev);
      void (*open_as_channel) (PortableServer_Servant _servant,
			       const GNOME_VFS_Result result,
			       const CORBA_char * channel_path,
			       CORBA_Environment * ev);
      void (*close) (PortableServer_Servant _servant,
		     const GNOME_VFS_Result result, CORBA_Environment * ev);
      void (*read) (PortableServer_Servant _servant,
		    const GNOME_VFS_Result result,
		    const GNOME_VFS_Buffer * data, CORBA_Environment * ev);
      void (*write) (PortableServer_Servant _servant,
		     const GNOME_VFS_Result result,
		     const CORBA_unsigned_long bytes_written,
		     CORBA_Environment * ev);
      void (*load_directory) (PortableServer_Servant _servant,
			      const GNOME_VFS_Result result,
			      const GNOME_VFS_Slave_FileInfoList * files,
			      CORBA_Environment * ev);
      void (*get_file_info) (PortableServer_Servant _servant,
			     const GNOME_VFS_Slave_GetFileInfoResultList *
			     results, CORBA_Environment * ev);
       CORBA_boolean(*xfer_start) (PortableServer_Servant _servant,
				   const CORBA_unsigned_long files_total,
				   const CORBA_unsigned_long bytes_total,
				   CORBA_Environment * ev);
       CORBA_boolean(*xfer_file_start) (PortableServer_Servant _servant,
					const CORBA_char * source_uri,
					const CORBA_char * target_uri,
					const CORBA_unsigned_long
					bytes_to_copy,
					CORBA_Environment * ev);
       CORBA_boolean(*xfer_file_progress) (PortableServer_Servant _servant,
					   const CORBA_unsigned_long
					   bytes_copied,
					   const CORBA_unsigned_long
					   total_bytes_copied,
					   CORBA_Environment * ev);
       CORBA_boolean(*xfer_file_done) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
      void (*xfer_done) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
      void (*xfer_error) (PortableServer_Servant _servant,
			  const GNOME_VFS_Result result,
			  CORBA_Environment * ev);
       CORBA_unsigned_short(*xfer_query_for_error) (PortableServer_Servant
						    _servant,
						    const GNOME_VFS_Result
						    result,
						    const
						    GNOME_VFS_Slave_XferPhase
						    phase,
						    CORBA_Environment * ev);
       CORBA_unsigned_short(*xfer_query_for_overwrite) (PortableServer_Servant
							_servant,
							const CORBA_char *
							source_uri,
							const CORBA_char *
							target_uri,
							CORBA_Environment *
							ev);
      void (*stop) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*reset) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*dying) (PortableServer_Servant _servant, CORBA_Environment * ev);
   }
   POA_GNOME_VFS_Slave_Notify__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_VFS_Slave_Notify__epv *GNOME_VFS_Slave_Notify_epv;
   }
   POA_GNOME_VFS_Slave_Notify__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_Slave_Notify__vepv *vepv;
   }
   POA_GNOME_VFS_Slave_Notify;
   extern void POA_GNOME_VFS_Slave_Notify__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_GNOME_VFS_Slave_Notify__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);

/** prototypes **/
   void GNOME_VFS_Slave_Request_open(GNOME_VFS_Slave_Request _obj,
				     const CORBA_char * uri,
				     const GNOME_VFS_OpenMode open_mode,
				     CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_open_as_channel(GNOME_VFS_Slave_Request _obj,
						const CORBA_char * uri,
						const GNOME_VFS_OpenMode
						open_mode,
						const CORBA_unsigned_long
						advised_block_size,
						CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_create(GNOME_VFS_Slave_Request _obj,
				       const CORBA_char * uri,
				       const GNOME_VFS_OpenMode open_mode,
				       const CORBA_boolean exclusive,
				       const GNOME_VFS_Permission perm,
				       CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_create_as_channel(GNOME_VFS_Slave_Request
						  _obj,
						  const CORBA_char * uri,
						  const GNOME_VFS_OpenMode
						  open_mode,
						  const CORBA_boolean
						  exclusive,
						  const GNOME_VFS_Permission
						  perm,
						  CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_get_file_info(GNOME_VFS_Slave_Request _obj,
					      const GNOME_VFS_Slave_URIList *
					      uri,
					      const
					      GNOME_VFS_Slave_FileInfoOptions
					      info_options,
					      CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_load_directory(GNOME_VFS_Slave_Request _obj,
					       const CORBA_char * uri,
					       const
					       GNOME_VFS_Slave_FileInfoOptions
					       info_options,
					       const
					       GNOME_VFS_Slave_DirectoryFilter
					       * filter,
					       const
					       GNOME_VFS_Slave_DirectorySortRuleList
					       * sort_rules,
					       const CORBA_boolean
					       reverse_order,
					       const CORBA_unsigned_long
					       items_per_notification,
					       CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_xfer(GNOME_VFS_Slave_Request _obj,
				     const GNOME_VFS_Slave_URIList *
				     source_names,
				     const GNOME_VFS_Slave_URIList *
				     target_names,
				     const GNOME_VFS_Slave_XferOptions
				     options,
				     const GNOME_VFS_Slave_XferOverwriteMode
				     overwrite_mode, CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_stop(GNOME_VFS_Slave_Request _obj,
				     CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_reset(GNOME_VFS_Slave_Request _obj,
				      CORBA_Environment * ev);
   void GNOME_VFS_Slave_Request_die(GNOME_VFS_Slave_Request _obj,
				    CORBA_Environment * ev);
   void GNOME_VFS_Slave_FileHandle_read(GNOME_VFS_Slave_FileHandle _obj,
					const CORBA_unsigned_long count,
					CORBA_Environment * ev);
   void GNOME_VFS_Slave_FileHandle_write(GNOME_VFS_Slave_FileHandle _obj,
					 const GNOME_VFS_Buffer * buffer,
					 CORBA_Environment * ev);
   void GNOME_VFS_Slave_FileHandle_close(GNOME_VFS_Slave_FileHandle _obj,
					 CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_open(GNOME_VFS_Slave_Notify _obj,
				    const GNOME_VFS_Result result,
				    const GNOME_VFS_Slave_FileHandle handle,
				    CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_open_as_channel(GNOME_VFS_Slave_Notify _obj,
					       const GNOME_VFS_Result result,
					       const CORBA_char *
					       channel_path,
					       CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_close(GNOME_VFS_Slave_Notify _obj,
				     const GNOME_VFS_Result result,
				     CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_read(GNOME_VFS_Slave_Notify _obj,
				    const GNOME_VFS_Result result,
				    const GNOME_VFS_Buffer * data,
				    CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_write(GNOME_VFS_Slave_Notify _obj,
				     const GNOME_VFS_Result result,
				     const CORBA_unsigned_long bytes_written,
				     CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_load_directory(GNOME_VFS_Slave_Notify _obj,
					      const GNOME_VFS_Result result,
					      const
					      GNOME_VFS_Slave_FileInfoList *
					      files, CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_get_file_info(GNOME_VFS_Slave_Notify _obj,
					     const
					     GNOME_VFS_Slave_GetFileInfoResultList
					     * results,
					     CORBA_Environment * ev);
   CORBA_boolean GNOME_VFS_Slave_Notify_xfer_start(GNOME_VFS_Slave_Notify
						   _obj,
						   const CORBA_unsigned_long
						   files_total,
						   const CORBA_unsigned_long
						   bytes_total,
						   CORBA_Environment * ev);
   CORBA_boolean GNOME_VFS_Slave_Notify_xfer_file_start(GNOME_VFS_Slave_Notify
							_obj,
							const CORBA_char *
							source_uri,
							const CORBA_char *
							target_uri,
							const
							CORBA_unsigned_long
							bytes_to_copy,
							CORBA_Environment *
							ev);
   CORBA_boolean
      GNOME_VFS_Slave_Notify_xfer_file_progress(GNOME_VFS_Slave_Notify _obj,
						const CORBA_unsigned_long
						bytes_copied,
						const CORBA_unsigned_long
						total_bytes_copied,
						CORBA_Environment * ev);
   CORBA_boolean GNOME_VFS_Slave_Notify_xfer_file_done(GNOME_VFS_Slave_Notify
						       _obj,
						       CORBA_Environment *
						       ev);
   void GNOME_VFS_Slave_Notify_xfer_done(GNOME_VFS_Slave_Notify _obj,
					 CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_xfer_error(GNOME_VFS_Slave_Notify _obj,
					  const GNOME_VFS_Result result,
					  CORBA_Environment * ev);
   CORBA_unsigned_short
      GNOME_VFS_Slave_Notify_xfer_query_for_error(GNOME_VFS_Slave_Notify _obj,
						  const GNOME_VFS_Result
						  result,
						  const
						  GNOME_VFS_Slave_XferPhase
						  phase,
						  CORBA_Environment * ev);
   CORBA_unsigned_short
      GNOME_VFS_Slave_Notify_xfer_query_for_overwrite(GNOME_VFS_Slave_Notify
						      _obj,
						      const CORBA_char *
						      source_uri,
						      const CORBA_char *
						      target_uri,
						      CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_stop(GNOME_VFS_Slave_Notify _obj,
				    CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_reset(GNOME_VFS_Slave_Notify _obj,
				     CORBA_Environment * ev);
   void GNOME_VFS_Slave_Notify_dying(GNOME_VFS_Slave_Notify _obj,
				     CORBA_Environment * ev);

   void _ORBIT_skel_GNOME_VFS_Slave_Request_open(POA_GNOME_VFS_Slave_Request *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_open)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char * uri,
						  const GNOME_VFS_OpenMode
						  open_mode,
						  CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Request_open_as_channel
      (POA_GNOME_VFS_Slave_Request * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_open_as_channel) (PortableServer_Servant _servant,
				      const CORBA_char * uri,
				      const GNOME_VFS_OpenMode open_mode,
				      const CORBA_unsigned_long
				      advised_block_size,
				      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Request_create(POA_GNOME_VFS_Slave_Request
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_create)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_char * uri,
						    const GNOME_VFS_OpenMode
						    open_mode,
						    const CORBA_boolean
						    exclusive,
						    const GNOME_VFS_Permission
						    perm,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Request_create_as_channel
      (POA_GNOME_VFS_Slave_Request * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_create_as_channel) (PortableServer_Servant _servant,
					const CORBA_char * uri,
					const GNOME_VFS_OpenMode open_mode,
					const CORBA_boolean exclusive,
					const GNOME_VFS_Permission perm,
					CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Request_get_file_info
      (POA_GNOME_VFS_Slave_Request * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_get_file_info) (PortableServer_Servant _servant,
				    const GNOME_VFS_Slave_URIList * uri,
				    const GNOME_VFS_Slave_FileInfoOptions
				    info_options, CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Request_load_directory
      (POA_GNOME_VFS_Slave_Request * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_load_directory) (PortableServer_Servant _servant,
				     const CORBA_char * uri,
				     const GNOME_VFS_Slave_FileInfoOptions
				     info_options,
				     const GNOME_VFS_Slave_DirectoryFilter *
				     filter,
				     const
				     GNOME_VFS_Slave_DirectorySortRuleList *
				     sort_rules,
				     const CORBA_boolean reverse_order,
				     const CORBA_unsigned_long
				     items_per_notification,
				     CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Request_xfer(POA_GNOME_VFS_Slave_Request *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_xfer)
						 (PortableServer_Servant
						  _servant,
						  const
						  GNOME_VFS_Slave_URIList *
						  source_names,
						  const
						  GNOME_VFS_Slave_URIList *
						  target_names,
						  const
						  GNOME_VFS_Slave_XferOptions
						  options,
						  const
						  GNOME_VFS_Slave_XferOverwriteMode
						  overwrite_mode,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Request_stop(POA_GNOME_VFS_Slave_Request *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_stop)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Request_reset(POA_GNOME_VFS_Slave_Request
						  * _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_reset)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Request_die(POA_GNOME_VFS_Slave_Request *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_die)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_FileHandle_read
      (POA_GNOME_VFS_Slave_FileHandle * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_read) (PortableServer_Servant _servant,
			   const CORBA_unsigned_long count,
			   CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_FileHandle_write
      (POA_GNOME_VFS_Slave_FileHandle * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_write) (PortableServer_Servant _servant,
			    const GNOME_VFS_Buffer * buffer,
			    CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_FileHandle_close
      (POA_GNOME_VFS_Slave_FileHandle * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_close) (PortableServer_Servant _servant,
			    CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Notify_open(POA_GNOME_VFS_Slave_Notify *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_open)
						(PortableServer_Servant
						 _servant,
						 const GNOME_VFS_Result
						 result,
						 const
						 GNOME_VFS_Slave_FileHandle
						 handle,
						 CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_open_as_channel
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_open_as_channel) (PortableServer_Servant _servant,
				      const GNOME_VFS_Result result,
				      const CORBA_char * channel_path,
				      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Notify_close(POA_GNOME_VFS_Slave_Notify *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_close)
						 (PortableServer_Servant
						  _servant,
						  const GNOME_VFS_Result
						  result,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Notify_read(POA_GNOME_VFS_Slave_Notify *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_read)
						(PortableServer_Servant
						 _servant,
						 const GNOME_VFS_Result
						 result,
						 const GNOME_VFS_Buffer *
						 data,
						 CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Notify_write(POA_GNOME_VFS_Slave_Notify *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_write)
						 (PortableServer_Servant
						  _servant,
						  const GNOME_VFS_Result
						  result,
						  const CORBA_unsigned_long
						  bytes_written,
						  CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_load_directory
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_load_directory) (PortableServer_Servant _servant,
				     const GNOME_VFS_Result result,
				     const GNOME_VFS_Slave_FileInfoList *
				     files, CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_get_file_info
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_get_file_info) (PortableServer_Servant _servant,
				    const
				    GNOME_VFS_Slave_GetFileInfoResultList *
				    results, CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_start(POA_GNOME_VFS_Slave_Notify
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    CORBA_boolean
						    (*_impl_xfer_start)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_unsigned_long
						     files_total,
						     const CORBA_unsigned_long
						     bytes_total,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_file_start
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_xfer_file_start) (PortableServer_Servant _servant,
					      const CORBA_char * source_uri,
					      const CORBA_char * target_uri,
					      const CORBA_unsigned_long
					      bytes_to_copy,
					      CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_file_progress
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_xfer_file_progress) (PortableServer_Servant
						 _servant,
						 const CORBA_unsigned_long
						 bytes_copied,
						 const CORBA_unsigned_long
						 total_bytes_copied,
						 CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_file_done
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_boolean(*_impl_xfer_file_done) (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_done(POA_GNOME_VFS_Slave_Notify
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_xfer_done)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_error(POA_GNOME_VFS_Slave_Notify
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_xfer_error)
						    (PortableServer_Servant
						     _servant,
						     const GNOME_VFS_Result
						     result,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_query_for_error
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_unsigned_short(*_impl_xfer_query_for_error)
       (PortableServer_Servant _servant, const GNOME_VFS_Result result,
	const GNOME_VFS_Slave_XferPhase phase, CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_VFS_Slave_Notify_xfer_query_for_overwrite
      (POA_GNOME_VFS_Slave_Notify * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_unsigned_short(*_impl_xfer_query_for_overwrite)
       (PortableServer_Servant _servant, const CORBA_char * source_uri,
	const CORBA_char * target_uri, CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Notify_stop(POA_GNOME_VFS_Slave_Notify *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_stop)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Notify_reset(POA_GNOME_VFS_Slave_Notify *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_reset)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_VFS_Slave_Notify_dying(POA_GNOME_VFS_Slave_Notify *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_dying)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
