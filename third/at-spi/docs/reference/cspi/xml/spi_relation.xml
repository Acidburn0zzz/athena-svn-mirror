<refentry id="at-spi-cspi-AccessibleRelations-and-RelationSets">
<refmeta>
<refentrytitle>AccessibleRelations and RelationSets</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleRelations and RelationSets</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="AccessibleRelationType">AccessibleRelationType</link>;
void        <link linkend="AccessibleRelation-ref">AccessibleRelation_ref</link>          (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);
void        <link linkend="AccessibleRelation-unref">AccessibleRelation_unref</link>        (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);
int         <link linkend="AccessibleRelation-getNTargets">AccessibleRelation_getNTargets</link>  (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);
<link linkend="Accessible">Accessible</link>* <link linkend="AccessibleRelation-getTarget">AccessibleRelation_getTarget</link>    (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj,
                                             int i);
<link linkend="AccessibleRelationType">AccessibleRelationType</link> <link linkend="AccessibleRelation-getRelationType">AccessibleRelation_getRelationType</link>
                                            (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AccessibleRelationType"/>enum AccessibleRelationType</title>
<programlisting>typedef enum
{
  SPI_RELATION_NULL,
  SPI_RELATION_LABEL_FOR,
  SPI_RELATION_LABELED_BY,
  SPI_RELATION_CONTROLLER_FOR,
  SPI_RELATION_CONTROLLED_BY,
  SPI_RELATION_MEMBER_OF,
  SPI_RELATION_NODE_CHILD_OF,
  SPI_RELATION_EXTENDED,
  SPI_RELATION_FLOWS_TO,
  SPI_RELATION_FLOWS_FROM,
  SPI_RELATION_SUBWINDOW_OF,
  SPI_RELATION_EMBEDS,
  SPI_RELATION_EMBEDDED_BY,
  SPI_RELATION_POPUP_FOR,
  SPI_RELATION_LAST_DEFINED
} AccessibleRelationType;
</programlisting>
<para>
Describes the type of the relation</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>SPI_RELATION_NULL</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_LABEL_FOR</literal></term>
<listitem><simpara> Indicates an object is a label for one or more target objects.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_LABELED_BY</literal></term>
<listitem><simpara> Indicates an object is labelled by one or more target objects.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_CONTROLLER_FOR</literal></term>
<listitem><simpara> Indicates an object is an controller for one or more target objects.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_CONTROLLED_BY</literal></term>
<listitem><simpara> Indicates an object controlled by one or more target objects.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_MEMBER_OF</literal></term>
<listitem><simpara> Indicates an object is a member of a group of one or
more target objects.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_NODE_CHILD_OF</literal></term>
<listitem><simpara> Indicates an object is a cell in a treetable which is displayed because a cell in the same column is expanded and identifies that cell.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_EXTENDED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_FLOWS_TO</literal></term>
<listitem><simpara> Indicates that the object has content that flows logically to another
 AtkObject in a sequential way, (for instance text-flow).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_FLOWS_FROM</literal></term>
<listitem><simpara> Indicates that the object has content that flows logically from
 another AtkObject in a sequential way, (for instance text-flow).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_SUBWINDOW_OF</literal></term>
<listitem><simpara> 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_EMBEDS</literal></term>
<listitem><simpara> Indicates that the object visually embeds
 another object's content, i.e. this object's content flows around
 another's content.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_EMBEDDED_BY</literal></term>
<listitem><simpara> Inverse of <literal>SPI_RELATION_EMBEDS</literal>, indicates that
 this object's content is visualy embedded in another object.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_POPUP_FOR</literal></term>
<listitem><simpara> Indicates that an object is a popup for another objec
t.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_RELATION_LAST_DEFINED</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleRelation-ref"/>AccessibleRelation_ref ()</title>
<programlisting>void        AccessibleRelation_ref          (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleRelation">AccessibleRelation</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleRelation">AccessibleRelation</link> object on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleRelation-unref"/>AccessibleRelation_unref ()</title>
<programlisting>void        AccessibleRelation_unref        (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleRelation">AccessibleRelation</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleRelation">AccessibleRelation</link> object on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleRelation-getNTargets"/>AccessibleRelation_getNTargets ()</title>
<programlisting>int         AccessibleRelation_getNTargets  (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);</programlisting>
<para>
Get the number of objects which this relationship has as its
      target objects (the subject is the <link linkend="Accessible">Accessible</link> from which this
      <link linkend="AccessibleRelation">AccessibleRelation</link> originated).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleRelation">AccessibleRelation</link> object to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a short integer indicating how many target objects which the
      originating <link linkend="Accessible">Accessible</link> object has the <link linkend="AccessibleRelation">AccessibleRelation</link>
      relationship with.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleRelation-getTarget"/>AccessibleRelation_getTarget ()</title>
<programlisting><link linkend="Accessible">Accessible</link>* AccessibleRelation_getTarget    (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj,
                                             int i);</programlisting>
<para>
Get the <parameter>i</parameter>-th target of a specified <link linkend="AccessibleRelation">AccessibleRelation</link> relationship.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleRelation">AccessibleRelation</link> object to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> a (zero-index) integer indicating which (of possibly several) target is requested.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> an <link linkend="Accessible">Accessible</link> which is the <parameter>i</parameter>-th object with which the
     originating <link linkend="Accessible">Accessible</link> has relationship specified in the
     <link linkend="AccessibleRelation">AccessibleRelation</link> object.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleRelation-getRelationType"/>AccessibleRelation_getRelationType ()</title>
<programlisting><link linkend="AccessibleRelationType">AccessibleRelationType</link> AccessibleRelation_getRelationType
                                            (<link linkend="AccessibleRelation">AccessibleRelation</link> *obj);</programlisting>
<para>
Get the type of relationship represented by an <link linkend="AccessibleRelation">AccessibleRelation</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleRelation">AccessibleRelation</link> object to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> an <link linkend="AccessibleRelationType">AccessibleRelationType</link> indicating the type of relation
        encapsulated in this <link linkend="AccessibleRelation">AccessibleRelation</link> object.

</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
