<refentry id="at-spi-cspi-AccessibleText-Interface">
<refmeta>
<refentrytitle>AccessibleText Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleText Interface</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link>;
enum        <link linkend="AccessibleTextClipType">AccessibleTextClipType</link>;
void        <link linkend="AccessibleText-ref">AccessibleText_ref</link>              (<link linkend="AccessibleText">AccessibleText</link> *obj);
void        <link linkend="AccessibleText-unref">AccessibleText_unref</link>            (<link linkend="AccessibleText">AccessibleText</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleText-addSelection">AccessibleText_addSelection</link>     (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);
char*       <link linkend="AccessibleText-getAttributes">AccessibleText_getAttributes</link>    (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);
<link linkend="AccessibleTextRange">AccessibleTextRange</link>** <link linkend="AccessibleText-getBoundedRanges">AccessibleText_getBoundedRanges</link>
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="long-int">long int</link> width,
                                             <link linkend="long-int">long int</link> height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type,
                                             <link linkend="AccessibleTextClipType">AccessibleTextClipType</link> clipTypeX,
                                             <link linkend="AccessibleTextClipType">AccessibleTextClipType</link> clipTypeY);
<link linkend="long">long</link>        <link linkend="AccessibleText-getCaretOffset">AccessibleText_getCaretOffset</link>   (<link linkend="AccessibleText">AccessibleText</link> *obj);
<link linkend="long">long</link>        <link linkend="AccessibleText-getCharacterCount">AccessibleText_getCharacterCount</link>
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj);
void        <link linkend="AccessibleText-getCharacterExtents">AccessibleText_getCharacterExtents</link>
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type);
<link linkend="long">long</link>        <link linkend="AccessibleText-getNSelections">AccessibleText_getNSelections</link>   (<link linkend="AccessibleText">AccessibleText</link> *obj);
<link linkend="long">long</link>        <link linkend="AccessibleText-getOffsetAtPoint">AccessibleText_getOffsetAtPoint</link> (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type);
void        <link linkend="AccessibleText-getRangeExtents">AccessibleText_getRangeExtents</link>  (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type);
void        <link linkend="AccessibleText-getSelection">AccessibleText_getSelection</link>     (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> selectionNum,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);
char*       <link linkend="AccessibleText-getText">AccessibleText_getText</link>          (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);
char*       <link linkend="AccessibleText-getTextBeforeOffset">AccessibleText_getTextBeforeOffset</link>
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> type,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);
char*       <link linkend="AccessibleText-getTextAfterOffset">AccessibleText_getTextAfterOffset</link>
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> type,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);
char*       <link linkend="AccessibleText-getTextAtOffset">AccessibleText_getTextAtOffset</link>  (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> type,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleText-removeSelection">AccessibleText_removeSelection</link>  (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> selectionNum);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleText-setCaretOffset">AccessibleText_setCaretOffset</link>   (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> newOffset);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleText-setSelection">AccessibleText_setSelection</link>     (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> selectionNum,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);
void        <link linkend="AccessibleTextRange-freeRanges">AccessibleTextRange_freeRanges</link>  (<link linkend="AccessibleTextRange">AccessibleTextRange</link> **ranges);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AccessibleTextBoundaryType"/>enum AccessibleTextBoundaryType</title>
<programlisting>typedef enum
{
  SPI_TEXT_BOUNDARY_CHAR,
  SPI_TEXT_BOUNDARY_CURSOR_POS,
  SPI_TEXT_BOUNDARY_WORD_START,
  SPI_TEXT_BOUNDARY_WORD_END,
  SPI_TEXT_BOUNDARY_SENTENCE_START,
  SPI_TEXT_BOUNDARY_SENTENCE_END,
  SPI_TEXT_BOUNDARY_LINE_START,
  SPI_TEXT_BOUNDARY_LINE_END,
  SPI_TEXT_BOUNDARY_ATTRIBUTE_RANGE
} AccessibleTextBoundaryType;
</programlisting>
<para>
Text boundary types used for specifying boundaries for regions of text</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AccessibleTextClipType"/>enum AccessibleTextClipType</title>
<programlisting>typedef enum
{
  SPI_TEXT_CLIP_NONE,
  SPI_TEXT_CLIP_MIN,
  SPI_TEXT_CLIP_MAX,
  SPI_TEXT_CLIP_BOTH
} AccessibleTextClipType;
</programlisting>
<para>
Describes the type of clipping required.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>SPI_TEXT_CLIP_NONE</literal></term>
<listitem><simpara> No clipping to be done
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_TEXT_CLIP_MIN</literal></term>
<listitem><simpara> Text clipped by min coordinate is omitted
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_TEXT_CLIP_MAX</literal></term>
<listitem><simpara> Text clipped by max coordinate is omitted
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SPI_TEXT_CLIP_BOTH</literal></term>
<listitem><simpara> Only text fully within mix/max bound is retained
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-ref"/>AccessibleText_ref ()</title>
<programlisting>void        AccessibleText_ref              (<link linkend="AccessibleText">AccessibleText</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-unref"/>AccessibleText_unref ()</title>
<programlisting>void        AccessibleText_unref            (<link linkend="AccessibleText">AccessibleText</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-addSelection"/>AccessibleText_addSelection ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleText_addSelection     (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);</programlisting>
<para>
Select some text (add a text selection) in an <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> the starting offset of the desired new selection.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> the offset of the first character after the new selection.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <link linkend="TRUE-CAPS">TRUE</link> if successful, <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getAttributes"/>AccessibleText_getAttributes ()</title>
<programlisting>char*       AccessibleText_getAttributes    (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);</programlisting>
<para>
Get the attributes applied to a range of text from an <link linkend="AccessibleText">AccessibleText</link>
         object, and the bounds of the range.
         The text attributes correspond to CSS attributes where possible,
         keys and values are delimited from one another via ":", and
         the delimiter between key/value pairs is ";". Thus 
         "font-size:10;foreground-color:0,0,0" would be a valid
         return string.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> a long integer indicating the offset from which the attribute
       search is based.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="long">long</link> indicating the start of the desired text range.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="long">long</link> indicating the first character past the desired range.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a text string describing the attributes occurring within the
         attribute run containing <parameter>offset</parameter>, encoded as UTF-8.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getBoundedRanges"/>AccessibleText_getBoundedRanges ()</title>
<programlisting><link linkend="AccessibleTextRange">AccessibleTextRange</link>** AccessibleText_getBoundedRanges
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="long-int">long int</link> width,
                                             <link linkend="long-int">long int</link> height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type,
                                             <link linkend="AccessibleTextClipType">AccessibleTextClipType</link> clipTypeX,
                                             <link linkend="AccessibleTextClipType">AccessibleTextClipType</link> clipTypeY);</programlisting>
<para>
Get the ranges of text from an <link linkend="AccessibleText">AccessibleText</link> object which lie within the
         bounds defined by (<parameter>x</parameter>, <parameter>y</parameter>) and (<parameter>x</parameter>+<parameter>width</parameter>, <parameter>y</parameter>+<parameter>height</parameter>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> the 'starting' x coordinate of the bounding box.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> the 'starting' y coordinate of the bounding box.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> the x extent of the bounding box.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> the y extent of the bounding box.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleCoordType">AccessibleCoordType</link> indicating the coordinate system to use
       for the returned values.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>clipTypeX</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleTextClipType">AccessibleTextClipType</link> indicating how to treat characters that
       intersect the bounding box's x extents.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>clipTypeY</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleTextClipType">AccessibleTextClipType</link> indicating how to treat characters that
       intersect the bounding box's y extents.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a null-terminated list of pointers to AccessibleTextRange structs 
         detailing the bounded text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getCaretOffset"/>AccessibleText_getCaretOffset ()</title>
<programlisting><link linkend="long">long</link>        AccessibleText_getCaretOffset   (<link linkend="AccessibleText">AccessibleText</link> *obj);</programlisting>
<para>
Get the current offset of the text caret in an <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a long integer indicating the current position of the text caret.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getCharacterCount"/>AccessibleText_getCharacterCount ()</title>
<programlisting><link linkend="long">long</link>        AccessibleText_getCharacterCount
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj);</programlisting>
<para>
Get the character count of an <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a long integer indicating the total number of
             characters in the <link linkend="AccessibleText">AccessibleText</link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getCharacterExtents"/>AccessibleText_getCharacterExtents ()</title>
<programlisting>void        AccessibleText_getCharacterExtents
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type);</programlisting>
<para>
Get the bounding box containing the glyph representing
       the character at a particular text offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> an integer indicating the offset of the text character for
       whom boundary information is requested.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer into which the nominal x coordinate
    of the corresponding glyph will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara>a pointer to a long integer into which the nominal y coordinate
    of the corresponding glyph will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara>a pointer to a long integer into which the width
    of the corresponding glyph will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer into which the height
    of the corresponding glyph will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleCoordType">AccessibleCoordType</link> indicating the coordinate system to use
       for the returned values.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getNSelections"/>AccessibleText_getNSelections ()</title>
<programlisting><link linkend="long">long</link>        AccessibleText_getNSelections   (<link linkend="AccessibleText">AccessibleText</link> *obj);</programlisting>
<para>
Get the number of active non-contiguous selections for an
         <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a long integer indicating the current
         number of non-contiguous text selections active
         within an <link linkend="AccessibleText">AccessibleText</link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getOffsetAtPoint"/>AccessibleText_getOffsetAtPoint ()</title>
<programlisting><link linkend="long">long</link>        AccessibleText_getOffsetAtPoint (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type);</programlisting>
<para>
Get the bounding box for a glyph at a certain <link linkend="AccessibleText">AccessibleText</link> offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> the x coordinate of the point to be queried.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> the y coordinate of the point to be queried.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleCoordType">AccessibleCoordType</link> indicating the coordinate system in which
      the values should be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the offset (as a long integer) at the point (<parameter>x</parameter>, <parameter>y</parameter>)
      in the specified coordinate system.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getRangeExtents"/>AccessibleText_getRangeExtents ()</title>
<programlisting>void        AccessibleText_getRangeExtents  (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> type);</programlisting>
<para>
Get the bounding box for text within a range in an  <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> an integer indicating the offset of the first text character for
       whom boundary information is requested.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> an integer indicating the offset of the text character 
       after the last character for whom boundary information is requested.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer into which the nominal x coordinate
    of the corresponding bounding box will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara>a pointer to a long integer into which the nominal y coordinate
    of the corresponding bounding box will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara>a pointer to a long integer into which the width
    of the corresponding bounding box will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer into which the height
    of the corresponding bounding box will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleCoordType">AccessibleCoordType</link> indicating the coordinate system to use
       for the returned values.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getSelection"/>AccessibleText_getSelection ()</title>
<programlisting>void        AccessibleText_getSelection     (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> selectionNum,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);</programlisting>
<para>
Get the bounds of the <parameter>selectionNum</parameter>-th active text selection for an
        <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selectionNum</parameter>&nbsp;:</term>
<listitem><simpara> an integer indicating which selection to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer into which the start offset
          of the selection will be returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer into which the start offset
          of the selection will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getText"/>AccessibleText_getText ()</title>
<programlisting>char*       AccessibleText_getText          (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);</programlisting>
<para>
Get a range of text from an <link linkend="AccessibleText">AccessibleText</link> object.  The number of bytes
         in the returned string may exceed endOffset-startOffset, since
         UTF-8 is a variable-width encoding.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object to query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="long">long</link> indicating the start of the desired text range.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="long">long</link> indicating the first character past the desired range.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a text string containing characters from <parameter>startOffset</parameter>
         to <parameter>endOffset</parameter>-1, inclusive, encoded as UTF-8.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getTextBeforeOffset"/>AccessibleText_getTextBeforeOffset ()</title>
<programlisting>char*       AccessibleText_getTextBeforeOffset
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> type,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);</programlisting>
<para>
Get delimited text from an <link linkend="AccessibleText">AccessibleText</link> object which precedes a given
         text offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> a long integer indicating the offset from which the delimiter
       search is based.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> indicating whether the desired
      text string is a word, sentence, line, or attribute run.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer which is assigned the
      starting offset of the returned string, relative to the
      original <link linkend="AccessibleText">AccessibleText</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer which is assigned the
      ending offset of the returned string, relative to the original
      <link linkend="AccessibleText">AccessibleText</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a UTF-8 string representing the delimited text, both of whose
         delimiting boundaries are before the current offset, or
         an empty string if no such text exists.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getTextAfterOffset"/>AccessibleText_getTextAfterOffset ()</title>
<programlisting>char*       AccessibleText_getTextAfterOffset
                                            (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> type,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);</programlisting>
<para>
Get delimited text from an <link linkend="AccessibleText">AccessibleText</link> object which follows a given
         text offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> a long integer indicating the offset from which the delimiter
       search is based.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> indicating whether the desired
      text string is a word, sentence, line, or attribute run.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer which is assigned the
      starting offset of the returned string, relative to the
      original <link linkend="AccessibleText">AccessibleText</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer which is assigned the
      ending offset of the returned string, relative to the original
      <link linkend="AccessibleText">AccessibleText</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a UTF-8 string representing the delimited text, both of whose
         delimiting boundaries are after or inclusive of the current
         offset, or an empty string if no such text exists.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-getTextAtOffset"/>AccessibleText_getTextAtOffset ()</title>
<programlisting>char*       AccessibleText_getTextAtOffset  (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> offset,
                                             <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> type,
                                             <link linkend="long-int">long int</link> *startOffset,
                                             <link linkend="long-int">long int</link> *endOffset);</programlisting>
<para>
Get delimited text from an <link linkend="AccessibleText">AccessibleText</link> object which includes a given
         text offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> a long integer indicating the offset from which the delimiter
       search is based.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AccessibleTextBoundaryType">AccessibleTextBoundaryType</link> indicating whether the desired
      text string is a word, sentence, line, or attribute run.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer which is assigned the
      starting offset of the returned string, relative to the
      original <link linkend="AccessibleText">AccessibleText</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a long integer which is assigned the
      ending offset of the returned string, relative to the original
      <link linkend="AccessibleText">AccessibleText</link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a UTF-8 string representing the delimited text, whose
         delimiting boundaries bracket the current offset, or
         an empty string if no such text exists.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-removeSelection"/>AccessibleText_removeSelection ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleText_removeSelection  (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> selectionNum);</programlisting>
<para>
De-select a text selection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selectionNum</parameter>&nbsp;:</term>
<listitem><simpara> an integer indicating which (possibly of several)
        text selection to remove.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <link linkend="TRUE-CAPS">TRUE</link> if successful, <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-setCaretOffset"/>AccessibleText_setCaretOffset ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleText_setCaretOffset   (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> newOffset);</programlisting>
<para>
Set the text caret position for an <link linkend="AccessibleText">AccessibleText</link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>newOffset</parameter>&nbsp;:</term>
<listitem><simpara> the offset to which the text caret is to be moved.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <link linkend="TRUE-CAPS">TRUE</link> if successful, <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleText-setSelection"/>AccessibleText_setSelection ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleText_setSelection     (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> selectionNum,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);</programlisting>
<para>
Change the bounds of an existing <link linkend="AccessibleText">AccessibleText</link> text selection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleText">AccessibleText</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selectionNum</parameter>&nbsp;:</term>
<listitem><simpara> a zero-offset index indicating which text selection to modify.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>startOffset</parameter>&nbsp;:</term>
<listitem><simpara> a long int, the new starting offset for the selection.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>endOffset</parameter>&nbsp;:</term>
<listitem><simpara> a long int, the desired new offset of the first character
            after the selection.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <link linkend="TRUE-CAPS">TRUE</link> if successful, <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleTextRange-freeRanges"/>AccessibleTextRange_freeRanges ()</title>
<programlisting>void        AccessibleTextRange_freeRanges  (<link linkend="AccessibleTextRange">AccessibleTextRange</link> **ranges);</programlisting>
<para>
Free the memory used by a list of AccessibleTextRange structs.
The argument passed in should be an array of pointers 
AccessibleTextRange structs.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ranges</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to an array of AccessibleTextRange structs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
