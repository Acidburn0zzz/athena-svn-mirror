<refentry id="at-spi-cspi-Event-Listener-Support">
<refmeta>
<refentrytitle>Event Listener Support</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Event Listener Support</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="AccessibleEvent">AccessibleEvent</link>;
void        (<link linkend="AccessibleEventListenerCB">*AccessibleEventListenerCB</link>)    (const <link linkend="AccessibleEvent">AccessibleEvent</link> *event,
                                             void *user_data);
<link linkend="AccessibleEventListener">AccessibleEventListener</link>* <link linkend="SPI-createAccessibleEventListener">SPI_createAccessibleEventListener</link>
                                            (<link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> callback,
                                             void *user_data);
void        <link linkend="AccessibleEventListener-unref">AccessibleEventListener_unref</link>   (<link linkend="AccessibleEventListener">AccessibleEventListener</link> *listener);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEventListener-addCallback">AccessibleEventListener_addCallback</link>
                                            (<link linkend="AccessibleEventListener">AccessibleEventListener</link> *listener,
                                             <link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> callback,
                                             void *user_data);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEventListener-removeCallback">AccessibleEventListener_removeCallback</link>
                                            (<link linkend="AccessibleEventListener">AccessibleEventListener</link> *listener,
                                             <link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> callback);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AccessibleEvent">AccessibleEvent</title>
<programlisting>typedef struct {
  const char  *type;
  Accessible  *source;
  long         detail1;
  long         detail2;
} AccessibleEvent;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AccessibleEventListenerCB">AccessibleEventListenerCB ()</title>
<programlisting>void        (*AccessibleEventListenerCB)    (const <link linkend="AccessibleEvent">AccessibleEvent</link> *event,
                                             void *user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>event</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="SPI-createAccessibleEventListener">SPI_createAccessibleEventListener ()</title>
<programlisting><link linkend="AccessibleEventListener">AccessibleEventListener</link>* SPI_createAccessibleEventListener
                                            (<link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> callback,
                                             void *user_data);</programlisting>
<para>
Create a new <link linkend="AccessibleEventListener">AccessibleEventListener</link> with a specified (in-process) callback function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>callback</parameter>&nbsp;:</entry>
<entry> an <link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> callback function, or NULL.
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> a pointer to data which will be passed to the callback when invoked.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to a newly-created <link linkend="AccessibleEventListener">AccessibleEventListener</link>.

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEventListener-unref">AccessibleEventListener_unref ()</title>
<programlisting>void        AccessibleEventListener_unref   (<link linkend="AccessibleEventListener">AccessibleEventListener</link> *listener);</programlisting>
<para>
Decrements an <link linkend="AccessibleEventListener">AccessibleEventListener</link>'s reference count.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEventListener">AccessibleEventListener</link> being operated on.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEventListener-addCallback">AccessibleEventListener_addCallback ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEventListener_addCallback
                                            (<link linkend="AccessibleEventListener">AccessibleEventListener</link> *listener,
                                             <link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> callback,
                                             void *user_data);</programlisting>
<para>
Add an in-process callback function to an existing AccessibleEventListener.
Note that the callback function must live in the same address
space as the AccessibleEventListener implementation code, thus one should not
use this function to attach callbacks to a 'remote' event listener
(that is, one that was not created by a client call to
<link linkend="createAccessibleEventListener">createAccessibleEventListener</link>();</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry> the <link linkend="AccessibleEventListener">AccessibleEventListener</link> instance to modify.
</entry></row>
<row><entry align="right"><parameter>callback</parameter>&nbsp;:</entry>
<entry> an <link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> function pointer.
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> a pointer to data which will be passed to the callback when invoked.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEventListener-removeCallback">AccessibleEventListener_removeCallback ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEventListener_removeCallback
                                            (<link linkend="AccessibleEventListener">AccessibleEventListener</link> *listener,
                                             <link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> callback);</programlisting>
<para>
Remove an in-process callback function from an existing AccessibleEventListener.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry> the <link linkend="AccessibleEventListener">AccessibleEventListener</link> instance to modify.
</entry></row>
<row><entry align="right"><parameter>callback</parameter>&nbsp;:</entry>
<entry> an <link linkend="AccessibleEventListenerCB">AccessibleEventListenerCB</link> function pointer.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.

</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
