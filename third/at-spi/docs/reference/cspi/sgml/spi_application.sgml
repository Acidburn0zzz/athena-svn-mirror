<refentry id="at-spi-cspi-AccessibleApplication-API">
<refmeta>
<refentrytitle>AccessibleApplication API</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleApplication API</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



void        <link linkend="AccessibleApplication-ref">AccessibleApplication_ref</link>       (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);
void        <link linkend="AccessibleApplication-unref">AccessibleApplication_unref</link>     (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);
char*       <link linkend="AccessibleApplication-getToolkitName">AccessibleApplication_getToolkitName</link>
                                            (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);
char*       <link linkend="AccessibleApplication-getVersion">AccessibleApplication_getVersion</link>
                                            (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);
<link linkend="long">long</link>        <link linkend="AccessibleApplication-getID">AccessibleApplication_getID</link>     (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleApplication-pause">AccessibleApplication_pause</link>     (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleApplication-resume">AccessibleApplication_resume</link>    (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AccessibleApplication-ref">AccessibleApplication_ref ()</title>
<programlisting>void        AccessibleApplication_ref       (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleApplication">AccessibleApplication</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleApplication">AccessibleApplication</link> on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleApplication-unref">AccessibleApplication_unref ()</title>
<programlisting>void        AccessibleApplication_unref     (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleApplication">AccessibleApplication</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleApplication">AccessibleApplication</link> object on which to operate.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleApplication-getToolkitName">AccessibleApplication_getToolkitName ()</title>
<programlisting>char*       AccessibleApplication_getToolkitName
                                            (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);</programlisting>
<para>
Get the name of the UI toolkit used by an <link linkend="AccessibleApplication">AccessibleApplication</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleApplication">AccessibleApplication</link> to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a UTF-8 string indicating which UI toolkit is
         used by an application.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleApplication-getVersion">AccessibleApplication_getVersion ()</title>
<programlisting>char*       AccessibleApplication_getVersion
                                            (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);</programlisting>
<para>
Get the version of the at-spi bridge exported by an
     <link linkend="AccessibleApplication">AccessibleApplication</link> instance.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleApplication">AccessibleApplication</link> being queried.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a UTF-8 string indicating the application's
         at-spi version.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleApplication-getID">AccessibleApplication_getID ()</title>
<programlisting><link linkend="long">long</link>        AccessibleApplication_getID     (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);</programlisting>
<para>
Get the unique ID assigned by the Registry to an
     <link linkend="AccessibleApplication">AccessibleApplication</link> instance.
(Not Yet Implemented by the registry).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="AccessibleApplication">AccessibleApplication</link> being queried.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a unique <link linkend="long">long</link> integer associated with the application
         by the Registry, or 0 if the application is not registered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleApplication-pause">AccessibleApplication_pause ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleApplication_pause     (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);</programlisting>
<para>
Attempt to pause the application (used when client event queue is
 over-full).
Not Yet Implemented.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <link linkend="TRUE-CAPS">TRUE</link> if the application was paused successfully, <link linkend="FALSE-CAPS">FALSE</link> otherwise.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AccessibleApplication-resume">AccessibleApplication_resume ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleApplication_resume    (<link linkend="AccessibleApplication">AccessibleApplication</link> *obj);</programlisting>
<para>
Attempt to resume the application (used after <link linkend="AccessibleApplication-pause">AccessibleApplication_pause</link>).
Not Yet Implemented.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <link linkend="TRUE-CAPS">TRUE</link> if application processing resumed successfully, <link linkend="FALSE-CAPS">FALSE</link> otherwise.

</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
