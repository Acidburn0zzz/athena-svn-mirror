<refentry id="at-spi-cspi-Accessible-Objects">
<refmeta>
<refentrytitle>Accessible Objects</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Accessible Objects</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="Accessible">Accessible</link>;
void        <link linkend="Accessible-ref">Accessible_ref</link>                  (<link linkend="Accessible">Accessible</link> *obj);
void        <link linkend="Accessible-unref">Accessible_unref</link>                (<link linkend="Accessible">Accessible</link> *obj);
char*       <link linkend="Accessible-getName">Accessible_getName</link>              (<link linkend="Accessible">Accessible</link> *obj);
char*       <link linkend="Accessible-getDescription">Accessible_getDescription</link>       (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="Accessible">Accessible</link>* <link linkend="Accessible-getParent">Accessible_getParent</link>            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="long">long</link>        <link linkend="Accessible-getChildCount">Accessible_getChildCount</link>        (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="Accessible">Accessible</link>* <link linkend="Accessible-getChildAtIndex">Accessible_getChildAtIndex</link>      (<link linkend="Accessible">Accessible</link> *obj,
                                             <link linkend="long-int">long int</link> childIndex);
<link linkend="long">long</link>        <link linkend="Accessible-getIndexInParent">Accessible_getIndexInParent</link>     (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleRelation">AccessibleRelation</link>** <link linkend="Accessible-getRelationSet">Accessible_getRelationSet</link>
                                            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleRole">AccessibleRole</link> <link linkend="Accessible-getRole">Accessible_getRole</link>           (<link linkend="Accessible">Accessible</link> *obj);
char*       <link linkend="Accessible-getRoleName">Accessible_getRoleName</link>          (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleStateSet">AccessibleStateSet</link>* <link linkend="Accessible-getStateSet">Accessible_getStateSet</link>  (<link linkend="Accessible">Accessible</link> *obj);

<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isAction">Accessible_isAction</link>             (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isApplication">Accessible_isApplication</link>        (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isComponent">Accessible_isComponent</link>          (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isEditableText">Accessible_isEditableText</link>       (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isHypertext">Accessible_isHypertext</link>          (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isImage">Accessible_isImage</link>              (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isSelection">Accessible_isSelection</link>          (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isStreamableContent">Accessible_isStreamableContent</link>  (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isTable">Accessible_isTable</link>              (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isText">Accessible_isText</link>               (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="Accessible-isValue">Accessible_isValue</link>              (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleAction">AccessibleAction</link>* <link linkend="Accessible-getAction">Accessible_getAction</link>      (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleApplication">AccessibleApplication</link>* <link linkend="Accessible-getApplication">Accessible_getApplication</link>
                                            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleComponent">AccessibleComponent</link>* <link linkend="Accessible-getComponent">Accessible_getComponent</link>
                                            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleEditableText">AccessibleEditableText</link>* <link linkend="Accessible-getEditableText">Accessible_getEditableText</link>
                                            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleHypertext">AccessibleHypertext</link>* <link linkend="Accessible-getHypertext">Accessible_getHypertext</link>
                                            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleImage">AccessibleImage</link>* <link linkend="Accessible-getImage">Accessible_getImage</link>        (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleSelection">AccessibleSelection</link>* <link linkend="Accessible-getSelection">Accessible_getSelection</link>
                                            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleStreamableContent">AccessibleStreamableContent</link>* <link linkend="Accessible-getStreamableContent">Accessible_getStreamableContent</link>
                                            (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleTable">AccessibleTable</link>* <link linkend="Accessible-getTable">Accessible_getTable</link>        (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleText">AccessibleText</link>* <link linkend="Accessible-getText">Accessible_getText</link>          (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleValue">AccessibleValue</link>* <link linkend="Accessible-getValue">Accessible_getValue</link>        (<link linkend="Accessible">Accessible</link> *obj);
<link linkend="AccessibleUnknown">AccessibleUnknown</link>* <link linkend="Accessible-queryInterface">Accessible_queryInterface</link>
                                            (<link linkend="Accessible">Accessible</link> *obj,
                                             const char *interface_name);

enum        <link linkend="AccessibleRole">AccessibleRole</link>;
char*       <link linkend="AccessibleRole-getName">AccessibleRole_getName</link>          (<link linkend="AccessibleRole">AccessibleRole</link> role);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="Accessible">struct Accessible</title>
<programlisting>struct Accessible {
	CORBA_Object objref;
	/* And some other bits */
	guint        on_loan : 1;
	guint        ref_count : 30;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="Accessible-ref">Accessible_ref ()</title>
<programlisting>void        Accessible_ref                  (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="Accessible">Accessible</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-unref">Accessible_unref ()</title>
<programlisting>void        Accessible_unref                (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="Accessible">Accessible</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getName">Accessible_getName ()</title>
<programlisting>char*       Accessible_getName              (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the name of an <link linkend="Accessible">Accessible</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a UTF-8 string indicating the name of the <link linkend="Accessible">Accessible</link> object.
or NULL on exception
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getDescription">Accessible_getDescription ()</title>
<programlisting>char*       Accessible_getDescription       (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the description of an <link linkend="Accessible">Accessible</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a UTF-8 string describing the <link linkend="Accessible">Accessible</link> object.
or NULL on exception
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getParent">Accessible_getParent ()</title>
<programlisting><link linkend="Accessible">Accessible</link>* Accessible_getParent            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get an <link linkend="Accessible">Accessible</link> object's parent container.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer tothe <link linkend="Accessible">Accessible</link> object which contains the given
         <link linkend="Accessible">Accessible</link> instance, or NULL if the <parameter>obj</parameter> has no parent container.

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getChildCount">Accessible_getChildCount ()</title>
<programlisting><link linkend="long">long</link>        Accessible_getChildCount        (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the number of children contained by an <link linkend="Accessible">Accessible</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a <link linkend="long">long</link> indicating the number of <link linkend="Accessible">Accessible</link> children
         contained by an <link linkend="Accessible">Accessible</link> object. or -1 on exception

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getChildAtIndex">Accessible_getChildAtIndex ()</title>
<programlisting><link linkend="Accessible">Accessible</link>* Accessible_getChildAtIndex      (<link linkend="Accessible">Accessible</link> *obj,
                                             <link linkend="long-int">long int</link> childIndex);</programlisting>
<para>
Get the <link linkend="Accessible">Accessible</link> child of an <link linkend="Accessible">Accessible</link> object at a given index.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><parameter>childIndex</parameter>&nbsp;:</entry>
<entry> a <link linkend="long">long</link> indicating which child is specified.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to the <link linkend="Accessible">Accessible</link> child object at index
         <parameter>childIndex</parameter>. or NULL on exception
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getIndexInParent">Accessible_getIndexInParent ()</title>
<programlisting><link linkend="long">long</link>        Accessible_getIndexInParent     (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the index of an <link linkend="Accessible">Accessible</link> object in its containing <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a <link linkend="long">long</link> indicating the index of the <link linkend="Accessible">Accessible</link> object
         in its parent (i.e. containing) <link linkend="Accessible">Accessible</link> instance,
         or -1 if <parameter>obj</parameter> has no containing parent or on exception.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getRelationSet">Accessible_getRelationSet ()</title>
<programlisting><link linkend="AccessibleRelation">AccessibleRelation</link>** Accessible_getRelationSet
                                            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the set of <link linkend="AccessibleRelation">AccessibleRelation</link> objects which describe this <link linkend="Accessible">Accessible</link> object's
      relationships with other <link linkend="Accessible">Accessible</link> objects.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an array of <link linkend="AccessibleRelation">AccessibleRelation</link> pointers. or NULL on exception
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getRole">Accessible_getRole ()</title>
<programlisting><link linkend="AccessibleRole">AccessibleRole</link> Accessible_getRole           (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the UI role of an <link linkend="Accessible">Accessible</link> object.
A UTF-8 string describing this role can be obtained via <link linkend="Accessible-getRoleName">Accessible_getRoleName</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the <link linkend="AccessibleRole">AccessibleRole</link> of the object.

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getRoleName">Accessible_getRoleName ()</title>
<programlisting>char*       Accessible_getRoleName          (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get a UTF-8 string describing the role this object plays in the UI.
This method will return useful values for roles that fall outside the
enumeration used in <link linkend="Accessible-getRole">Accessible_getRole</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a UTF-8 string specifying the role of this <link linkend="Accessible">Accessible</link> object.

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getStateSet">Accessible_getStateSet ()</title>
<programlisting><link linkend="AccessibleStateSet">AccessibleStateSet</link>* Accessible_getStateSet  (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Not Yet Implemented.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleStateSet">AccessibleStateSet</link> representing the object's current state.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isAction">Accessible_isAction ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isAction             (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleAction">AccessibleAction</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleAction">AccessibleAction</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isApplication">Accessible_isApplication ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isApplication        (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleApplication">AccessibleApplication</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleApplication">AccessibleApplication</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isComponent">Accessible_isComponent ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isComponent          (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleComponent">AccessibleComponent</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isEditableText">Accessible_isEditableText ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isEditableText       (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleEditableText">AccessibleEditableText</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleEditableText">AccessibleEditableText</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isHypertext">Accessible_isHypertext ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isHypertext          (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleHypertext">AccessibleHypertext</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleHypertext">AccessibleHypertext</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isImage">Accessible_isImage ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isImage              (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleImage">AccessibleImage</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleImage">AccessibleImage</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isSelection">Accessible_isSelection ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isSelection          (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleSelection">AccessibleSelection</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleSelection">AccessibleSelection</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isStreamableContent">Accessible_isStreamableContent ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isStreamableContent  (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements
         <link linkend="AccessibleStreamableContent">AccessibleStreamableContent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleStreamableContent">AccessibleStreamableContent</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isTable">Accessible_isTable ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isTable              (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleTable">AccessibleTable</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleTable">AccessibleTable</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isText">Accessible_isText ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isText               (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleText">AccessibleText</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleText">AccessibleText</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-isValue">Accessible_isValue ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  Accessible_isValue              (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Query whether the specified <link linkend="Accessible">Accessible</link> implements <link linkend="AccessibleValue">AccessibleValue</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if <parameter>obj</parameter> implements the <link linkend="AccessibleValue">AccessibleValue</link> interface,
         <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getAction">Accessible_getAction ()</title>
<programlisting><link linkend="AccessibleAction">AccessibleAction</link>* Accessible_getAction      (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleAction">AccessibleAction</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleAction">AccessibleAction</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleAction">AccessibleAction</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getApplication">Accessible_getApplication ()</title>
<programlisting><link linkend="AccessibleApplication">AccessibleApplication</link>* Accessible_getApplication
                                            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleApplication">AccessibleApplication</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleApplication">AccessibleApplication</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleApplication">AccessibleApplication</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getComponent">Accessible_getComponent ()</title>
<programlisting><link linkend="AccessibleComponent">AccessibleComponent</link>* Accessible_getComponent
                                            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleComponent">AccessibleComponent</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleComponent">AccessibleComponent</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleComponent">AccessibleComponent</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getEditableText">Accessible_getEditableText ()</title>
<programlisting><link linkend="AccessibleEditableText">AccessibleEditableText</link>* Accessible_getEditableText
                                            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleEditableText">AccessibleEditableText</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleEditableText">AccessibleEditableText</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleEditableText">AccessibleEditableText</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getHypertext">Accessible_getHypertext ()</title>
<programlisting><link linkend="AccessibleHypertext">AccessibleHypertext</link>* Accessible_getHypertext
                                            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleHypertext">AccessibleHypertext</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleHypertext">AccessibleHypertext</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleHypertext">AccessibleHypertext</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getImage">Accessible_getImage ()</title>
<programlisting><link linkend="AccessibleImage">AccessibleImage</link>* Accessible_getImage        (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleImage">AccessibleImage</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleImage">AccessibleImage</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleImage">AccessibleImage</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getSelection">Accessible_getSelection ()</title>
<programlisting><link linkend="AccessibleSelection">AccessibleSelection</link>* Accessible_getSelection
                                            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleSelection">AccessibleSelection</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleSelection">AccessibleSelection</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleSelection">AccessibleSelection</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getStreamableContent">Accessible_getStreamableContent ()</title>
<programlisting><link linkend="AccessibleStreamableContent">AccessibleStreamableContent</link>* Accessible_getStreamableContent
                                            (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleStreamableContent">AccessibleStreamableContent</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleStreamableContent">AccessibleStreamableContent</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleStreamableContent">AccessibleStreamableContent</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getTable">Accessible_getTable ()</title>
<programlisting><link linkend="AccessibleTable">AccessibleTable</link>* Accessible_getTable        (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleTable">AccessibleTable</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleTable">AccessibleTable</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleTable">AccessibleTable</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getText">Accessible_getText ()</title>
<programlisting><link linkend="AccessibleText">AccessibleText</link>* Accessible_getText          (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleText">AccessibleText</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleText">AccessibleText</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleText">AccessibleText</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-getValue">Accessible_getValue ()</title>
<programlisting><link linkend="AccessibleValue">AccessibleValue</link>* Accessible_getValue        (<link linkend="Accessible">Accessible</link> *obj);</programlisting>
<para>
Get the <link linkend="AccessibleValue">AccessibleValue</link> interface for an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="AccessibleValue">AccessibleValue</link> interface instance, or
         NULL if <parameter>obj</parameter> does not implement <link linkend="AccessibleValue">AccessibleValue</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="Accessible-queryInterface">Accessible_queryInterface ()</title>
<programlisting><link linkend="AccessibleUnknown">AccessibleUnknown</link>* Accessible_queryInterface
                                            (<link linkend="Accessible">Accessible</link> *obj,
                                             const char *interface_name);</programlisting>
<para>
Query an <link linkend="Accessible">Accessible</link> object to for a named interface.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="Accessible">Accessible</link> instance to query.
</entry></row>
<row><entry align="right"><parameter>interface_name</parameter>&nbsp;:</entry>
<entry> a UTF-8 character string specifiying the requested interface.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an instance of the named interface object, if it is implemented
         by <parameter>obj</parameter>, or NULL otherwise.

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleRole">enum AccessibleRole</title>
<programlisting>typedef enum
{
  SPI_ROLE_INVALID,
  SPI_ROLE_ACCEL_LABEL,
  SPI_ROLE_ALERT,
  SPI_ROLE_ANIMATION,
  SPI_ROLE_ARROW,
  SPI_ROLE_CALENDAR,
  SPI_ROLE_CANVAS,
  SPI_ROLE_CHECK_BOX,
  SPI_ROLE_CHECK_MENU_ITEM,
  SPI_ROLE_COLOR_CHOOSER,
  SPI_ROLE_COLUMN_HEADER,
  SPI_ROLE_COMBO_BOX,
  SPI_ROLE_DATE_EDITOR,
  SPI_ROLE_DESKTOP_ICON,
  SPI_ROLE_DESKTOP_FRAME,
  SPI_ROLE_DIAL,
  SPI_ROLE_DIALOG,
  SPI_ROLE_DIRECTORY_PANE,
  SPI_ROLE_DRAWING_AREA,
  SPI_ROLE_FILE_CHOOSER,
  SPI_ROLE_FILLER,
  SPI_ROLE_FONT_CHOOSER,
  SPI_ROLE_FRAME,
  SPI_ROLE_GLASS_PANE,
  SPI_ROLE_HTML_CONTAINER,
  SPI_ROLE_ICON,
  SPI_ROLE_IMAGE,
  SPI_ROLE_INTERNAL_FRAME,
  SPI_ROLE_LABEL,
  SPI_ROLE_LAYERED_PANE,
  SPI_ROLE_LIST,
  SPI_ROLE_LIST_ITEM,
  SPI_ROLE_MENU,
  SPI_ROLE_MENU_BAR,
  SPI_ROLE_MENU_ITEM,
  SPI_ROLE_OPTION_PANE,
  SPI_ROLE_PAGE_TAB,
  SPI_ROLE_PAGE_TAB_LIST,
  SPI_ROLE_PANEL,
  SPI_ROLE_PASSWORD_TEXT,
  SPI_ROLE_POPUP_MENU,
  SPI_ROLE_PROGRESS_BAR,
  SPI_ROLE_PUSH_BUTTON,
  SPI_ROLE_RADIO_BUTTON,
  SPI_ROLE_RADIO_MENU_ITEM,
  SPI_ROLE_ROOT_PANE,
  SPI_ROLE_ROW_HEADER,
  SPI_ROLE_SCROLL_BAR,
  SPI_ROLE_SCROLL_PANE,
  SPI_ROLE_SEPARATOR,
  SPI_ROLE_SLIDER,
  SPI_ROLE_SPIN_BUTTON,
  SPI_ROLE_SPLIT_PANE,
  SPI_ROLE_STATUS_BAR,
  SPI_ROLE_TABLE,
  SPI_ROLE_TABLE_CELL,
  SPI_ROLE_TABLE_COLUMN_HEADER,
  SPI_ROLE_TABLE_ROW_HEADER,
  SPI_ROLE_TEAROFF_MENU_ITEM,
  SPI_ROLE_TERMINAL,
  SPI_ROLE_TEXT,
  SPI_ROLE_TOGGLE_BUTTON,
  SPI_ROLE_TOOL_BAR,
  SPI_ROLE_TOOL_TIP,
  SPI_ROLE_TREE,
  SPI_ROLE_TREE_TABLE,
  SPI_ROLE_UNKNOWN,
  SPI_ROLE_VIEWPORT,
  SPI_ROLE_WINDOW,
  SPI_ROLE_EXTENDED,
  SPI_ROLE_LAST_DEFINED
} AccessibleRole;
</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>SPI_ROLE_INVALID</literal></entry>
<entry> role is not legal, something is wrong with this object
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_ACCEL_LABEL</literal></entry>
<entry> object is a label indicating keyboard
                             accelerators for the parent
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_ALERT</literal></entry>
<entry> Object is used to alert the user about something
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_ANIMATION</literal></entry>
<entry> Object contains a dynamic or moving image
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_ARROW</literal></entry>
<entry> Object is a 2d directional indicator
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_CALENDAR</literal></entry>
<entry> Object contains one or more dates, usually arranged into
                    a 2d list
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_CANVAS</literal></entry>
<entry> Object that can be drawn into and is used to trap events
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_CHECK_BOX</literal></entry>
<entry> Object representd a choice that can be checked or unchecked
                   and provides a separate indicator for the current state.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_CHECK_MENU_ITEM</literal></entry>
<entry> Object is a menu item that behaves like a CHECK_BOX
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_COLOR_CHOOSER</literal></entry>
<entry> A specialized dialog that lets the user choose a color.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_COLUMN_HEADER</literal></entry>
<entry> The header for a column of data 
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_COMBO_BOX</literal></entry>
<entry> A list of choices the user can select from
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_DATE_EDITOR</literal></entry>
<entry> Allows entry of a date
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_DESKTOP_ICON</literal></entry>
<entry> An inconifed internal frame within a DESKTOP_PANE
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_DESKTOP_FRAME</literal></entry>
<entry> A pane that supports internal frames and
             iconified versions of those internal frames.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_DIAL</literal></entry>
<entry> A rotating/rotatable valuator
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_DIALOG</literal></entry>
<entry> A top level window with title bar and a border
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_DIRECTORY_PANE</literal></entry>
<entry> A pane that allows the user to navigate
             through and select the contents of a directory.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_DRAWING_AREA</literal></entry>
<entry> An object used for drawing custom user interface elements
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_FILE_CHOOSER</literal></entry>
<entry> A specialized dialog that displays the files in the
              directory and lets the user select a file, browse a different
 	 directory, or specify a filename.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_FILLER</literal></entry>
<entry> A object that fills up space in a user interface
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_FONT_CHOOSER</literal></entry>
<entry> Allows selection of a display font
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_FRAME</literal></entry>
<entry> A top level window with a title bar, border, menubar, etc.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_GLASS_PANE</literal></entry>
<entry> A pane that is guaranteed to be painted on top of all
              panes beneath it
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_HTML_CONTAINER</literal></entry>
<entry> A document container for HTML, whose children
              represent the document content.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_ICON</literal></entry>
<entry> A small fixed size picture, typically used to decorate components.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_IMAGE</literal></entry>
<entry> An image, typically static
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_INTERNAL_FRAME</literal></entry>
<entry> A frame-like object that is clipped by a desktop pane.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_LABEL</literal></entry>
<entry> An object used to present an icon or short string in an interface
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_LAYERED_PANE</literal></entry>
<entry> A specialized pane that allows its children to be drawn in layers
                        providing a  form of stacking order.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_LIST</literal></entry>
<entry> An object that presents a list of objects to the user and allows the
                        user to select one or more of them.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_LIST_ITEM</literal></entry>
<entry> An object that represents an element of a list.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_MENU</literal></entry>
<entry> An object usually found inside a menu bar that contains a list of
                actions the user can choose from.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_MENU_BAR</literal></entry>
<entry> An object usually drawn at the top of the primary dialog box of an
                application that contains a list of menus the user can choose from.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_MENU_ITEM</literal></entry>
<entry> An object usually contained in a menu that presents an
           action the user can choose.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_OPTION_PANE</literal></entry>
<entry> A specialized pane whose primary use is inside a DIALOG 
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_PAGE_TAB</literal></entry>
<entry> An object that is a child of a page tab list
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_PAGE_TAB_LIST</literal></entry>
<entry> An object that presents a series of panels (or page tabs),
  one at a time, through some mechanism provided by the object.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_PANEL</literal></entry>
<entry> A generic container that is often used to group objects.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_PASSWORD_TEXT</literal></entry>
<entry> A text object uses for passwords, or other places where
       the text content is not shown visibly to the user.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_POPUP_MENU</literal></entry>
<entry> A temporary window that is usually used to offer the user a
       list of choices, and then hides when the user selects one of those choices.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_PROGRESS_BAR</literal></entry>
<entry> An object used to indicate how much of a task has been completed.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_PUSH_BUTTON</literal></entry>
<entry> A specialized object which the user can interact with to tell
       the application to do something.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_RADIO_BUTTON</literal></entry>
<entry> A specialized check box that will cause other radio buttons in the
       same group to become uncghecked when this one is checked.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_RADIO_MENU_ITEM</literal></entry>
<entry> A specialized menu item that behaves like a 
       radio button.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_ROOT_PANE</literal></entry>
<entry> A specialized pane that has a glass pane and a layered pane as its
       children.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_ROW_HEADER</literal></entry>
<entry> The header for a row of data
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_SCROLL_BAR</literal></entry>
<entry> An object usually used to allow a user to incrementally
       view a large amount of data.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_SCROLL_PANE</literal></entry>
<entry> An object that allows a user to incrementally view a large amount
        of information.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_SEPARATOR</literal></entry>
<entry> An object usually contained in a menu to provide a visible and
       logical separation of the contents in a menu.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_SLIDER</literal></entry>
<entry> An object that allows the user to select from a bounded range.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_SPIN_BUTTON</literal></entry>
<entry> An object which allows selection from a set of choices and
                       displays the current choice.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_SPLIT_PANE</literal></entry>
<entry> A specialized panel that presents two other panels at the same time.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_STATUS_BAR</literal></entry>
<entry> An object the display qualitative status information. c.f. PROGRESS_BAR
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TABLE</literal></entry>
<entry> An object used to rpesent information in terms of rows and columns.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TABLE_CELL</literal></entry>
<entry> An object which is a descendant of a table,
       with a row/column location.  A cell may span multiple rows and columns.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TABLE_COLUMN_HEADER</literal></entry>
<entry> An object which serves to describe a column in a table.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TABLE_ROW_HEADER</literal></entry>
<entry> An object which serves to label or describe a row in a table.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TEAROFF_MENU_ITEM</literal></entry>
<entry> A menu item which allows the menu to be removed from
                             a menubar and placed in its own window
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TERMINAL</literal></entry>
<entry> An object that emulates a teletype or terminal
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TEXT</literal></entry>
<entry> An object that presents text to the user
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TOGGLE_BUTTON</literal></entry>
<entry> A specialized push button that can be checked or unchecked,
  but does not provide a separate indicator for the current state.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TOOL_BAR</literal></entry>
<entry> A bar or palette usually composed of push buttons or toggle buttons
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TOOL_TIP</literal></entry>
<entry> An object that provides information about another object
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TREE</literal></entry>
<entry> An object used to represent hierarchical information to the user
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_TREE_TABLE</literal></entry>
<entry> An object which represents both hierarchical and tabular information
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_UNKNOWN</literal></entry>
<entry> The object contains some SpiAccessible information, but its role is
                   not known.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_VIEWPORT</literal></entry>
<entry> An object usually used in a scroll pane, which restricts the visual
                   area into which its contents are presented.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_WINDOW</literal></entry>
<entry> A top level window with no title or border.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_EXTENDED</literal></entry>
<entry> This object's role is not included in the standard role list and
                    should be queried by name.
</entry>
</row>
<row>
<entry><literal>SPI_ROLE_LAST_DEFINED</literal></entry>
<entry> Used to determine the end of the role enumeration.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleRole-getName">AccessibleRole_getName ()</title>
<programlisting>char*       AccessibleRole_getName          (<link linkend="AccessibleRole">AccessibleRole</link> role);</programlisting>
<para>
Get a localizeable string that indicates the name of an <link linkend="AccessibleRole">AccessibleRole</link>.
&lt;em&gt;DEPRECATED.&lt;/em&gt;</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>role</parameter>&nbsp;:</entry>
<entry> an <link linkend="AccessibleRole">AccessibleRole</link> object to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a localizable string name for an <link linkend="AccessibleRole">AccessibleRole</link> enumerated type.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
