<refentry id="at-spi-cspi-AccessibleComponent-Interface">
<refmeta>
<refentrytitle>AccessibleComponent Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleComponent Interface</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="AccessibleCoordType">AccessibleCoordType</link>;
enum        <link linkend="AccessibleComponentLayer">AccessibleComponentLayer</link>;
void        <link linkend="AccessibleComponent-ref">AccessibleComponent_ref</link>         (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
void        <link linkend="AccessibleComponent-unref">AccessibleComponent_unref</link>       (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleComponent-contains">AccessibleComponent_contains</link>    (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
<link linkend="Accessible">Accessible</link>* <link linkend="AccessibleComponent-getAccessibleAtPoint">AccessibleComponent_getAccessibleAtPoint</link>
                                            (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
void        <link linkend="AccessibleComponent-getExtents">AccessibleComponent_getExtents</link>  (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
void        <link linkend="AccessibleComponent-getPosition">AccessibleComponent_getPosition</link> (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);
void        <link linkend="AccessibleComponent-getSize">AccessibleComponent_getSize</link>     (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height);
<link linkend="AccessibleComponentLayer">AccessibleComponentLayer</link> <link linkend="AccessibleComponent-getLayer">AccessibleComponent_getLayer</link>
                                            (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="short">short</link>       <link linkend="AccessibleComponent-getMDIZOrder">AccessibleComponent_getMDIZOrder</link>
                                            (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleComponent-grabFocus">AccessibleComponent_grabFocus</link>   (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AccessibleCoordType">enum AccessibleCoordType</title>
<programlisting>typedef enum {
  SPI_COORD_TYPE_SCREEN,
  SPI_COORD_TYPE_WINDOW
} AccessibleCoordType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AccessibleComponentLayer">enum AccessibleComponentLayer</title>
<programlisting>typedef enum {
    SPI_LAYER_INVALID,
    SPI_LAYER_BACKGROUND,
    SPI_LAYER_CANVAS,
    SPI_LAYER_WIDGET,
    SPI_LAYER_MDI,
    SPI_LAYER_POPUP,
    SPI_LAYER_OVERLAY,
    SPI_LAYER_LAST_DEFINED	
} AccessibleComponentLayer;
</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>SPI_LAYER_INVALID</literal></entry>
<entry> The layer cannot be determined or is somehow undefined.
</entry>
</row>
<row>
<entry><literal>SPI_LAYER_BACKGROUND</literal></entry>
<entry> Component belongs to the destop background.
</entry>
</row>
<row>
<entry><literal>SPI_LAYER_CANVAS</literal></entry>
<entry> Component is a canvas backdrop or drawing area.
</entry>
</row>
<row>
<entry><literal>SPI_LAYER_WIDGET</literal></entry>
<entry> Component is a 'normal' widget.
</entry>
</row>
<row>
<entry><literal>SPI_LAYER_MDI</literal></entry>
<entry> Component is drawn in the MDI layer and may have valid
                         Z-information relative to other MDI-layer components.
</entry>
</row>
<row>
<entry><literal>SPI_LAYER_POPUP</literal></entry>
<entry> Component is in the popup layer, above other widgets and
                         MDI components.
</entry>
</row>
<row>
<entry><literal>SPI_LAYER_OVERLAY</literal></entry>
<entry> Component is in the overlay plane - this value is reserved
                         for future use.
</entry>
</row>
<row>
<entry><literal>SPI_LAYER_LAST_DEFINED</literal></entry>
<entry> Used to determine the last valid value in the enum,
                         should not be encountered.	
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-ref">AccessibleComponent_ref ()</title>
<programlisting>void        AccessibleComponent_ref         (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to an object implementing <link linkend="AccessibleComponent">AccessibleComponent</link> on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-unref">AccessibleComponent_unref ()</title>
<programlisting>void        AccessibleComponent_unref       (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the object implementing <link linkend="AccessibleComponent">AccessibleComponent</link> on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-contains">AccessibleComponent_contains ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleComponent_contains    (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Query whether a given <link linkend="AccessibleComponent">AccessibleComponent</link> contains a particular point.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> to query.
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> a <link linkend="long">long</link> specifying the x coordinate in question.
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> a <link linkend="long">long</link> specifying the y coordinate in question.
</entry></row>
<row><entry align="right"><parameter>ctype</parameter>&nbsp;:</entry>
<entry> the desired coordinate system of the point (<parameter>x</parameter>, <parameter>y</parameter>)
        (e.g. CSPI_COORD_TYPE_WINDOW, CSPI_COORD_TYPE_SCREEN).
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a <link linkend="TRUE-CAPS">TRUE</link> if the specified component contains the point (<parameter>x</parameter>, <parameter>y</parameter>),
         otherwise <link linkend="FALSE-CAPS">FALSE</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-getAccessibleAtPoint">AccessibleComponent_getAccessibleAtPoint ()</title>
<programlisting><link linkend="Accessible">Accessible</link>* AccessibleComponent_getAccessibleAtPoint
                                            (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> x,
                                             <link linkend="long-int">long int</link> y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Get the accessible child at a given coordinate within an <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> to query.
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> a <link linkend="long">long</link> specifying the x coordinate of the point in question.
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> a <link linkend="long">long</link> specifying the y coordinate of the point in question.
</entry></row>
<row><entry align="right"><parameter>ctype</parameter>&nbsp;:</entry>
<entry> the coordinate system of the point (<parameter>x</parameter>, <parameter>y</parameter>)
        (e.g. CSPI_COORD_TYPE_WINDOW, CSPI_COORD_TYPE_SCREEN).
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a pointer to an <link linkend="Accessible">Accessible</link> child of the specified component which
         contains the point (<parameter>x</parameter>, <parameter>y</parameter>), or NULL of no child contains the point.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-getExtents">AccessibleComponent_getExtents ()</title>
<programlisting>void        AccessibleComponent_getExtents  (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Get the bounding box of the specified <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> to query.
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the minimum x coordinate will be returned.
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the minimum y coordinate will be returned.
</entry></row>
<row><entry align="right"><parameter>width</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the x extents (width) will be returned.
</entry></row>
<row><entry align="right"><parameter>height</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the y extents (height) will be returned.
</entry></row>
<row><entry align="right"><parameter>ctype</parameter>&nbsp;:</entry>
<entry> the desired coordinate system into which to return the results,
        (e.g. CSPI_COORD_TYPE_WINDOW, CSPI_COORD_TYPE_SCREEN).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-getPosition">AccessibleComponent_getPosition ()</title>
<programlisting>void        AccessibleComponent_getPosition (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> *x,
                                             <link linkend="long-int">long int</link> *y,
                                             <link linkend="AccessibleCoordType">AccessibleCoordType</link> ctype);</programlisting>
<para>
Get the minimum x and y coordinates of the specified <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> to query.
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the minimum x coordinate will be returned.
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the minimum y coordinate will be returned.
</entry></row>
<row><entry align="right"><parameter>ctype</parameter>&nbsp;:</entry>
<entry> the desired coordinate system into which to return the results,
        (e.g. CSPI_COORD_TYPE_WINDOW, CSPI_COORD_TYPE_SCREEN).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-getSize">AccessibleComponent_getSize ()</title>
<programlisting>void        AccessibleComponent_getSize     (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj,
                                             <link linkend="long-int">long int</link> *width,
                                             <link linkend="long-int">long int</link> *height);</programlisting>
<para>
Get the size of the specified <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> to query.
</entry></row>
<row><entry align="right"><parameter>width</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the x extents (width) will be returned.
</entry></row>
<row><entry align="right"><parameter>height</parameter>&nbsp;:</entry>
<entry> a pointer to a <link linkend="long">long</link> into which the y extents (height) will be returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-getLayer">AccessibleComponent_getLayer ()</title>
<programlisting><link linkend="AccessibleComponentLayer">AccessibleComponentLayer</link> AccessibleComponent_getLayer
                                            (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Query which layer the component is painted into, to help determine its 
     visibility in terms of stacking order.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the <link linkend="AccessibleComponentLayer">AccessibleComponentLayer</link> into which this component is painted.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-getMDIZOrder">AccessibleComponent_getMDIZOrder ()</title>
<programlisting><link linkend="short">short</link>       AccessibleComponent_getMDIZOrder
                                            (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Query the z stacking order of a component which is in the MDI layer.
      (Bigger z-order numbers mean nearer the top)</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a short integer indicating the stacking order of the component 
      in the MDI layer, or -1 if the component is not in the MDI layer.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleComponent-grabFocus">AccessibleComponent_grabFocus ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleComponent_grabFocus   (<link linkend="AccessibleComponent">AccessibleComponent</link> *obj);</programlisting>
<para>
Attempt to set the keyboard input focus to the specified
        <link linkend="AccessibleComponent">AccessibleComponent</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleComponent">AccessibleComponent</link> on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if successful, <link linkend="FALSE-CAPS">FALSE</link> otherwise.

</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
