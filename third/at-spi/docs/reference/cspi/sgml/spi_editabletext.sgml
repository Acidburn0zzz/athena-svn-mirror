<refentry id="at-spi-cspi-AccessibleEditableText-Interface">
<refmeta>
<refentrytitle>AccessibleEditableText Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleEditableText Interface</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



void        <link linkend="AccessibleEditableText-ref">AccessibleEditableText_ref</link>      (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj);
void        <link linkend="AccessibleEditableText-unref">AccessibleEditableText_unref</link>    (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEditableText-copyText">AccessibleEditableText_copyText</link> (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startPos,
                                             <link linkend="long-int">long int</link> endPos);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEditableText-deleteText">AccessibleEditableText_deleteText</link>
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> startPos,
                                             <link linkend="long-int">long int</link> endPos);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEditableText-insertText">AccessibleEditableText_insertText</link>
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> position,
                                             const char *text,
                                             <link linkend="long-int">long int</link> length);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEditableText-cutText">AccessibleEditableText_cutText</link>  (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> startPos,
                                             <link linkend="long-int">long int</link> endPos);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEditableText-pasteText">AccessibleEditableText_pasteText</link>
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> position);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEditableText-setTextContents">AccessibleEditableText_setTextContents</link>
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             const char *newContents);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleEditableText-setAttributes">AccessibleEditableText_setAttributes</link>
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             const char *attributes,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AccessibleEditableText-ref">AccessibleEditableText_ref ()</title>
<programlisting>void        AccessibleEditableText_ref      (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleEditableText">AccessibleEditableText</link> object.
      Since AccessibleEditableText is derived from AccessibleText,
      this is the same as <link linkend="AccessibleText-ref">AccessibleText_ref</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-unref">AccessibleEditableText_unref ()</title>
<programlisting>void        AccessibleEditableText_unref    (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleEdiitableText">AccessibleEdiitableText</link> object.
      Since AccessibleEditableText is derived from AccessibleText,
      this is the same as <link linkend="AccessibleText-unref">AccessibleText_unref</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-copyText">AccessibleEditableText_copyText ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEditableText_copyText (<link linkend="AccessibleText">AccessibleText</link> *obj,
                                             <link linkend="long-int">long int</link> startPos,
                                             <link linkend="long-int">long int</link> endPos);</programlisting>
<para>
Copy text from an <link linkend="AccessibleEditableText">AccessibleEditableText</link> object into the clipboard.
</para>
<para>
<parameter>see</parameter>: AccessibleEditableText_pasteText</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object to modify.
</entry></row>
<row><entry align="right"><parameter>startPos</parameter>&nbsp;:</entry>
<entry> an integer indicating the starting character offset
      of the text to copy.
</entry></row>
<row><entry align="right"><parameter>endPos</parameter>&nbsp;:</entry>
<entry> an integer indicating the offset of the first character
      past the end of the text section to be copied.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if the operation was successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-deleteText">AccessibleEditableText_deleteText ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEditableText_deleteText
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> startPos,
                                             <link linkend="long-int">long int</link> endPos);</programlisting>
<para>
Delete text from an <link linkend="AccessibleEditableText">AccessibleEditableText</link> object, without copying the
      excised portion into the clipboard.
</para>
<para>
<parameter>see</parameter>: AccessibleEditableText_cutText</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object to modify.
</entry></row>
<row><entry align="right"><parameter>startPos</parameter>&nbsp;:</entry>
<entry> an integer indicating the starting character offset
      of the text to delete.
</entry></row>
<row><entry align="right"><parameter>endPos</parameter>&nbsp;:</entry>
<entry> an integer indicating the offset of the first character
      past the end of the text section to be deleted.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if the operation was successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-insertText">AccessibleEditableText_insertText ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEditableText_insertText
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> position,
                                             const char *text,
                                             <link linkend="long-int">long int</link> length);</programlisting>
<para>
Insert text into an <link linkend="AccessibleEditableText">AccessibleEditableText</link> object.
As with all character offsets, the specified <parameter>position</parameter> may not be the
      same as the resulting byte offset, since the text is in a
      variable-width encoding.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object to modify.
</entry></row>
<row><entry align="right"><parameter>position</parameter>&nbsp;:</entry>
<entry> an integer indicating the character offset at which to insert
      the new text.  
</entry></row>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> a char* pointer to the text to insert, in UTF-8 encoding.
</entry></row>
<row><entry align="right"><parameter>length</parameter>&nbsp;:</entry>
<entry> (frankly I'm not sure this parameter should be here)
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if the operation was successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-cutText">AccessibleEditableText_cutText ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEditableText_cutText  (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> startPos,
                                             <link linkend="long-int">long int</link> endPos);</programlisting>
<para>
Delete text from an <link linkend="AccessibleEditableText">AccessibleEditableText</link> object, copying the
      excised portion into the clipboard.
</para>
<para>
<parameter>see</parameter>: AccessibleEditableText_pasteText</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object to modify.
</entry></row>
<row><entry align="right"><parameter>startPos</parameter>&nbsp;:</entry>
<entry> an integer indicating the starting character offset
      of the text to cut.
</entry></row>
<row><entry align="right"><parameter>endPos</parameter>&nbsp;:</entry>
<entry> an integer indicating the offset of the first character
      past the end of the text section to be cut.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if operation was successful, <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-pasteText">AccessibleEditableText_pasteText ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEditableText_pasteText
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             <link linkend="long-int">long int</link> position);</programlisting>
<para>
Insert text from the clipboard into an <link linkend="AccessibleEditableText">AccessibleEditableText</link> object.
As with all character offsets, the specified <parameter>position</parameter> may not be the
      same as the resulting byte offset, since the text is in a
      variable-width encoding.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object to modify.
</entry></row>
<row><entry align="right"><parameter>position</parameter>&nbsp;:</entry>
<entry> an integer indicating the character offset at which to insert
      the new text.  
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if the operation was successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-setTextContents">AccessibleEditableText_setTextContents ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEditableText_setTextContents
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             const char *newContents);</programlisting>
<para>
Replace the entire text contents of an <link linkend="AccessibleEditableText">AccessibleEditableText</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object to modify.
</entry></row>
<row><entry align="right"><parameter>newContents</parameter>&nbsp;:</entry>
<entry> a character string, encoded in UTF-8, which is to
     become the new text contents of the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if the operation was successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleEditableText-setAttributes">AccessibleEditableText_setAttributes ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleEditableText_setAttributes
                                            (<link linkend="AccessibleEditableText">AccessibleEditableText</link> *obj,
                                             const char *attributes,
                                             <link linkend="long-int">long int</link> startOffset,
                                             <link linkend="long-int">long int</link> endOffset);</programlisting>
<para>
Set the attributes applied to a range of text from an <link linkend="AccessibleEditableText">AccessibleEditableText</link>
         object, and the bounds of the range.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleEditableText">AccessibleEditableText</link> object to modify.
</entry></row>
<row><entry align="right"><parameter>attributes</parameter>&nbsp;:</entry>
<entry> a character string indicating the attributes to apply to the range,
       delimited by ':'.
</entry></row>
<row><entry align="right"><parameter>startOffset</parameter>&nbsp;:</entry>
<entry> a <link linkend="long">long</link> indicating the start of the desired text range.
</entry></row>
<row><entry align="right"><parameter>endOffset</parameter>&nbsp;:</entry>
<entry> a <link linkend="long">long</link> indicating the first character past the desired range.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> if the operation was successful, otherwise <link linkend="FALSE-CAPS">FALSE</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
