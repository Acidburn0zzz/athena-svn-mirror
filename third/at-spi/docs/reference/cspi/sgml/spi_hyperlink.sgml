<refentry id="at-spi-cspi-AccessibleHyperlink-Interface">
<refmeta>
<refentrytitle>AccessibleHyperlink Interface</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>AT-SPI-CSPI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AccessibleHyperlink Interface</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



void        <link linkend="AccessibleHyperlink-ref">AccessibleHyperlink_ref</link>         (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
void        <link linkend="AccessibleHyperlink-unref">AccessibleHyperlink_unref</link>       (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
<link linkend="long">long</link>        <link linkend="AccessibleHyperlink-getNAnchors">AccessibleHyperlink_getNAnchors</link> (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
void        <link linkend="AccessibleHyperlink-getIndexRange">AccessibleHyperlink_getIndexRange</link>
                                            (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                             <link linkend="long-int">long int</link> *startIndex,
                                             <link linkend="long-int">long int</link> *endIndex);
<link linkend="Accessible">Accessible</link>* <link linkend="AccessibleHyperlink-getObject">AccessibleHyperlink_getObject</link>   (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                             <link linkend="long-int">long int</link> i);
char*       <link linkend="AccessibleHyperlink-getURI">AccessibleHyperlink_getURI</link>      (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                             <link linkend="long-int">long int</link> i);
<link linkend="SPIBoolean">SPIBoolean</link>  <link linkend="AccessibleHyperlink-isValid">AccessibleHyperlink_isValid</link>     (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AccessibleHyperlink-ref">AccessibleHyperlink_ref ()</title>
<programlisting>void        AccessibleHyperlink_ref         (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Increment the reference count for an <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> object on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleHyperlink-unref">AccessibleHyperlink_unref ()</title>
<programlisting>void        AccessibleHyperlink_unref       (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Decrement the reference count for an <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> object on which to operate.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleHyperlink-getNAnchors">AccessibleHyperlink_getNAnchors ()</title>
<programlisting><link linkend="long">long</link>        AccessibleHyperlink_getNAnchors (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Get the total number of anchors which an <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> implementor has.
      Though typical hyperlinks have only one anchor, client-side image maps and
      other hypertext objects may potentially activate or refer to multiple
      URIs.  For each anchor there is a corresponding URI and object.
<parameter>see</parameter> <link linkend="AccessibleHyperlink-getURI">AccessibleHyperlink_getURI</link>() and <link linkend="AccessibleHyperlink-getObject">AccessibleHyperlink_getObject</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> object on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a <link linkend="long">long</link> indicating the number of anchors in this hyperlink.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleHyperlink-getIndexRange">AccessibleHyperlink_getIndexRange ()</title>
<programlisting>void        AccessibleHyperlink_getIndexRange
                                            (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                             <link linkend="long-int">long int</link> *startIndex,
                                             <link linkend="long-int">long int</link> *endIndex);</programlisting>
<para>
Get the starting and ending character offsets of the text range associated with
      a <link linkend="AccessibleHyperlink">AccessibleHyperlink</link>, in its originating <link linkend="AccessibleHypertext">AccessibleHypertext</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> implementor on which to operate.
</entry></row>
<row><entry align="right"><parameter>startIndex</parameter>&nbsp;:</entry>
<entry> a pointer to a long integer into which the starting
      offset of the text associated with this <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> is returned.
</entry></row>
<row><entry align="right"><parameter>endIndex</parameter>&nbsp;:</entry>
<entry> a pointer to a long integer into which the offset of the first character
      after the text associated with this <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleHyperlink-getObject">AccessibleHyperlink_getObject ()</title>
<programlisting><link linkend="Accessible">Accessible</link>* AccessibleHyperlink_getObject   (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                             <link linkend="long-int">long int</link> i);</programlisting>
<para>
Get the object associated with a particular hyperlink anchor, as an <link linkend="Accessible">Accessible</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> implementor on which to operate.
</entry></row>
<row><entry align="right"><parameter>i</parameter>&nbsp;:</entry>
<entry> a (zero-index) long integer indicating which hyperlink anchor to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="Accessible">Accessible</link> that represents the object associated with the <parameter>ith</parameter> anchor
       of the specified <link linkend="AccessibleHyperlink">AccessibleHyperlink</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleHyperlink-getURI">AccessibleHyperlink_getURI ()</title>
<programlisting>char*       AccessibleHyperlink_getURI      (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj,
                                             <link linkend="long-int">long int</link> i);</programlisting>
<para>
Get the URI associated with a particular hyperlink anchor.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> implementor on which to operate.
</entry></row>
<row><entry align="right"><parameter>i</parameter>&nbsp;:</entry>
<entry> a (zero-index) long integer indicating which hyperlink anchor to query.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a UTF-8 string giving the URI of the <parameter>ith</parameter> hyperlink anchor.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AccessibleHyperlink-isValid">AccessibleHyperlink_isValid ()</title>
<programlisting><link linkend="SPIBoolean">SPIBoolean</link>  AccessibleHyperlink_isValid     (<link linkend="AccessibleHyperlink">AccessibleHyperlink</link> *obj);</programlisting>
<para>
Tell whether an <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> object is still valid with respect to its
         originating hypertext object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>obj</parameter>&nbsp;:</entry>
<entry> a pointer to the <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> on which to operate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <link linkend="TRUE-CAPS">TRUE</link> of the specified <link linkend="AccessibleHyperlink">AccessibleHyperlink</link> is still valid with respect
         to its originating <link linkend="AccessibleHypertext">AccessibleHypertext</link> object, <link linkend="FALSE-CAPS">FALSE</link> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
