<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libwnck-WnckTasklist">
<refmeta>
<refentrytitle>WnckTasklist</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBWNCK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>WnckTasklist</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="WnckTasklistPrivate">WnckTasklistPrivate</link>;
enum        <link linkend="WnckTasklistGroupingType">WnckTasklistGroupingType</link>;
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="wnck-tasklist-new">wnck_tasklist_new</link>               (<link linkend="WnckScreen">WnckScreen</link> *screen);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-screen">wnck_tasklist_set_screen</link>        (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="WnckScreen">WnckScreen</link> *screen);
const <link linkend="int">int</link>*  <link linkend="wnck-tasklist-get-size-hint-list">wnck_tasklist_get_size_hint_list</link>
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="int">int</link> *n_elements);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-grouping">wnck_tasklist_set_grouping</link>      (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="WnckTasklistGroupingType">WnckTasklistGroupingType</link> grouping);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-switch-workspace-on-unminimize">wnck_tasklist_set_switch_workspace_on_unminimize</link>
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gboolean">gboolean</link> switch_workspace_on_unminimize);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-grouping-limit">wnck_tasklist_set_grouping_limit</link>
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gint">gint</link> limit);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-include-all-workspaces">wnck_tasklist_set_include_all_workspaces</link>
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gboolean">gboolean</link> include_all_workspaces);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-minimum-width">wnck_tasklist_set_minimum_width</link> (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gint">gint</link> size);
<link linkend="gint">gint</link>        <link linkend="wnck-tasklist-get-minimum-width">wnck_tasklist_get_minimum_width</link> (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-minimum-height">wnck_tasklist_set_minimum_height</link>
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gint">gint</link> size);
<link linkend="gint">gint</link>        <link linkend="wnck-tasklist-get-minimum-height">wnck_tasklist_get_minimum_height</link>
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  (<link linkend="WnckLoadIconFunction">*WnckLoadIconFunction</link>)         (const <link linkend="char">char</link> *icon_name,
                                             <link linkend="int">int</link> size,
                                             unsigned <link linkend="int">int</link> flags,
                                             <link linkend="void">void</link> *data);
<link linkend="void">void</link>        <link linkend="wnck-tasklist-set-icon-loader">wnck_tasklist_set_icon_loader</link>   (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="WnckLoadIconFunction">WnckLoadIconFunction</link> load_icon_func,
                                             <link linkend="void">void</link> *data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> free_data_func);

</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="WnckTasklistPrivate"/>struct WnckTasklistPrivate</title>
<indexterm><primary>WnckTasklistPrivate</primary></indexterm><programlisting>struct WnckTasklistPrivate;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="WnckTasklistGroupingType"/>enum WnckTasklistGroupingType</title>
<indexterm><primary>WnckTasklistGroupingType</primary></indexterm><programlisting>typedef enum {
  WNCK_TASKLIST_NEVER_GROUP,
  WNCK_TASKLIST_AUTO_GROUP,
  WNCK_TASKLIST_ALWAYS_GROUP
} WnckTasklistGroupingType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-new"/>wnck_tasklist_new ()</title>
<indexterm><primary>wnck_tasklist_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*  wnck_tasklist_new               (<link linkend="WnckScreen">WnckScreen</link> *screen);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>screen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-screen"/>wnck_tasklist_set_screen ()</title>
<indexterm><primary>wnck_tasklist_set_screen</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_screen        (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="WnckScreen">WnckScreen</link> *screen);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>screen</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-get-size-hint-list"/>wnck_tasklist_get_size_hint_list ()</title>
<indexterm><primary>wnck_tasklist_get_size_hint_list</primary></indexterm><programlisting>const <link linkend="int">int</link>*  wnck_tasklist_get_size_hint_list
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="int">int</link> *n_elements);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_elements</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-grouping"/>wnck_tasklist_set_grouping ()</title>
<indexterm><primary>wnck_tasklist_set_grouping</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_grouping      (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="WnckTasklistGroupingType">WnckTasklistGroupingType</link> grouping);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>grouping</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-switch-workspace-on-unminimize"/>wnck_tasklist_set_switch_workspace_on_unminimize ()</title>
<indexterm><primary>wnck_tasklist_set_switch_workspace_on_unminimize</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_switch_workspace_on_unminimize
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gboolean">gboolean</link> switch_workspace_on_unminimize);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>switch_workspace_on_unminimize</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-grouping-limit"/>wnck_tasklist_set_grouping_limit ()</title>
<indexterm><primary>wnck_tasklist_set_grouping_limit</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_grouping_limit
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gint">gint</link> limit);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>limit</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-include-all-workspaces"/>wnck_tasklist_set_include_all_workspaces ()</title>
<indexterm><primary>wnck_tasklist_set_include_all_workspaces</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_include_all_workspaces
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gboolean">gboolean</link> include_all_workspaces);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>include_all_workspaces</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-minimum-width"/>wnck_tasklist_set_minimum_width ()</title>
<indexterm><primary>wnck_tasklist_set_minimum_width</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_minimum_width (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gint">gint</link> size);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-get-minimum-width"/>wnck_tasklist_get_minimum_width ()</title>
<indexterm><primary>wnck_tasklist_get_minimum_width</primary></indexterm><programlisting><link linkend="gint">gint</link>        wnck_tasklist_get_minimum_width (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-minimum-height"/>wnck_tasklist_set_minimum_height ()</title>
<indexterm><primary>wnck_tasklist_set_minimum_height</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_minimum_height
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="gint">gint</link> size);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-get-minimum-height"/>wnck_tasklist_get_minimum_height ()</title>
<indexterm><primary>wnck_tasklist_get_minimum_height</primary></indexterm><programlisting><link linkend="gint">gint</link>        wnck_tasklist_get_minimum_height
                                            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="WnckLoadIconFunction"/>WnckLoadIconFunction ()</title>
<indexterm><primary>WnckLoadIconFunction</primary></indexterm><programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  (*WnckLoadIconFunction)         (const <link linkend="char">char</link> *icon_name,
                                             <link linkend="int">int</link> size,
                                             unsigned <link linkend="int">int</link> flags,
                                             <link linkend="void">void</link> *data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>icon_name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-tasklist-set-icon-loader"/>wnck_tasklist_set_icon_loader ()</title>
<indexterm><primary>wnck_tasklist_set_icon_loader</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_tasklist_set_icon_loader   (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                             <link linkend="WnckLoadIconFunction">WnckLoadIconFunction</link> load_icon_func,
                                             <link linkend="void">void</link> *data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> free_data_func);</programlisting>
<para>
Sets a function to be used for loading icons. The icon
loader function takes an icon name as in the Icon field
in a .desktop file. The "flags" field for the function
is not defined to do anything yet.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckTasklist"><type>WnckTasklist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>load_icon_func</parameter>&nbsp;:</term>
<listitem><simpara> icon loader function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> data for icon loader function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free_data_func</parameter>&nbsp;:</term>
<listitem><simpara> function to free the data
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
