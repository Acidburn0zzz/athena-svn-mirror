<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libwnck-WnckWindow">
<refmeta>
<refentrytitle>WnckWindow</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBWNCK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>WnckWindow</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="WnckWindowState">WnckWindowState</link>;
enum        <link linkend="WnckWindowActions">WnckWindowActions</link>;
enum        <link linkend="WnckWindowType">WnckWindowType</link>;
struct      <link linkend="WnckWindowPrivate">WnckWindowPrivate</link>;
<link linkend="WnckWindow">WnckWindow</link>* <link linkend="wnck-window-get">wnck_window_get</link>                 (<link linkend="gulong">gulong</link> xwindow);
<link linkend="WnckScreen">WnckScreen</link>* <link linkend="wnck-window-get-screen">wnck_window_get_screen</link>          (<link linkend="WnckWindow">WnckWindow</link> *window);
const <link linkend="char">char</link>* <link linkend="wnck-window-get-name">wnck_window_get_name</link>            (<link linkend="WnckWindow">WnckWindow</link> *window);
const <link linkend="char">char</link>* <link linkend="wnck-window-get-icon-name">wnck_window_get_icon_name</link>       (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="WnckApplication">WnckApplication</link>* <link linkend="wnck-window-get-application">wnck_window_get_application</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gulong">gulong</link>      <link linkend="wnck-window-get-group-leader">wnck_window_get_group_leader</link>    (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gulong">gulong</link>      <link linkend="wnck-window-get-xid">wnck_window_get_xid</link>             (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="WnckClassGroup">WnckClassGroup</link>* <link linkend="wnck-window-get-class-group">wnck_window_get_class_group</link> (<link linkend="WnckWindow">WnckWindow</link> *window);
const <link linkend="char">char</link>* <link linkend="wnck-window-get-session-id">wnck_window_get_session_id</link>      (<link linkend="WnckWindow">WnckWindow</link> *window);
const <link linkend="char">char</link>* <link linkend="wnck-window-get-session-id-utf8">wnck_window_get_session_id_utf8</link> (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="int">int</link>         <link linkend="wnck-window-get-pid">wnck_window_get_pid</link>             (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="WnckWindowType">WnckWindowType</link> <link linkend="wnck-window-get-window-type">wnck_window_get_window_type</link>  (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-minimized">wnck_window_is_minimized</link>        (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-maximized-horizontally">wnck_window_is_maximized_horizontally</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-maximized-vertically">wnck_window_is_maximized_vertically</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-maximized">wnck_window_is_maximized</link>        (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-shaded">wnck_window_is_shaded</link>           (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-skip-pager">wnck_window_is_skip_pager</link>       (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-skip-tasklist">wnck_window_is_skip_tasklist</link>    (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-sticky">wnck_window_is_sticky</link>           (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-demands-attention">wnck_window_demands_attention</link>   (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-set-skip-pager">wnck_window_set_skip_pager</link>      (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skip);
<link linkend="void">void</link>        <link linkend="wnck-window-set-skip-tasklist">wnck_window_set_skip_tasklist</link>   (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skip);
<link linkend="void">void</link>        <link linkend="wnck-window-close">wnck_window_close</link>               (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="guint32">guint32</link> timestamp);
<link linkend="void">void</link>        <link linkend="wnck-window-minimize">wnck_window_minimize</link>            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-unminimize">wnck_window_unminimize</link>          (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-maximize">wnck_window_maximize</link>            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-unmaximize">wnck_window_unmaximize</link>          (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-maximize-horizontally">wnck_window_maximize_horizontally</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-unmaximize-horizontally">wnck_window_unmaximize_horizontally</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-maximize-vertically">wnck_window_maximize_vertically</link> (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-unmaximize-vertically">wnck_window_unmaximize_vertically</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-shade">wnck_window_shade</link>               (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-unshade">wnck_window_unshade</link>             (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-stick">wnck_window_stick</link>               (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-unstick">wnck_window_unstick</link>             (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-keyboard-move">wnck_window_keyboard_move</link>       (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-keyboard-size">wnck_window_keyboard_size</link>       (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="WnckWorkspace">WnckWorkspace</link>* <link linkend="wnck-window-get-workspace">wnck_window_get_workspace</link>    (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-move-to-workspace">wnck_window_move_to_workspace</link>   (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *space);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-pinned">wnck_window_is_pinned</link>           (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-pin">wnck_window_pin</link>                 (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-unpin">wnck_window_unpin</link>               (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-activate">wnck_window_activate</link>            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-active">wnck_window_is_active</link>           (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-most-recently-activated">wnck_window_is_most_recently_activated</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-activate-transient">wnck_window_activate_transient</link>  (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  <link linkend="wnck-window-get-icon">wnck_window_get_icon</link>            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  <link linkend="wnck-window-get-mini-icon">wnck_window_get_mini_icon</link>       (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-get-icon-is-fallback">wnck_window_get_icon_is_fallback</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-set-icon-geometry">wnck_window_set_icon_geometry</link>   (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="int">int</link> x,
                                             <link linkend="int">int</link> y,
                                             <link linkend="int">int</link> width,
                                             <link linkend="int">int</link> height);
<link linkend="WnckWindowActions">WnckWindowActions</link> <link linkend="wnck-window-get-actions">wnck_window_get_actions</link>   (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="WnckWindowState">WnckWindowState</link> <link linkend="wnck-window-get-state">wnck_window_get_state</link>       (<link linkend="WnckWindow">WnckWindow</link> *window);
<link linkend="void">void</link>        <link linkend="wnck-window-get-geometry">wnck_window_get_geometry</link>        (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="int">int</link> *xp,
                                             <link linkend="int">int</link> *yp,
                                             <link linkend="int">int</link> *widthp,
                                             <link linkend="int">int</link> *heightp);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-visible-on-workspace">wnck_window_is_visible_on_workspace</link>
                                            (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *workspace);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-on-workspace">wnck_window_is_on_workspace</link>     (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *workspace);
<link linkend="gboolean">gboolean</link>    <link linkend="wnck-window-is-in-viewport">wnck_window_is_in_viewport</link>      (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *workspace);

</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="WnckWindowState"/>enum WnckWindowState</title>
<indexterm><primary>WnckWindowState</primary></indexterm><programlisting>typedef enum
{
  WNCK_WINDOW_STATE_MINIMIZED              = 1 &lt;&lt; 0,
  WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY = 1 &lt;&lt; 1,
  WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY   = 1 &lt;&lt; 2,
  WNCK_WINDOW_STATE_SHADED                 = 1 &lt;&lt; 3,
  WNCK_WINDOW_STATE_SKIP_PAGER             = 1 &lt;&lt; 4,
  WNCK_WINDOW_STATE_SKIP_TASKLIST          = 1 &lt;&lt; 5,
  WNCK_WINDOW_STATE_STICKY                 = 1 &lt;&lt; 6,
  WNCK_WINDOW_STATE_HIDDEN                 = 1 &lt;&lt; 7,
  WNCK_WINDOW_STATE_FULLSCREEN             = 1 &lt;&lt; 8,
  WNCK_WINDOW_STATE_DEMANDS_ATTENTION      = 1 &lt;&lt; 9
} WnckWindowState;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="WnckWindowActions"/>enum WnckWindowActions</title>
<indexterm><primary>WnckWindowActions</primary></indexterm><programlisting>typedef enum
{
  WNCK_WINDOW_ACTION_MOVE                    = 1 &lt;&lt; 0,
  WNCK_WINDOW_ACTION_RESIZE                  = 1 &lt;&lt; 1,
  WNCK_WINDOW_ACTION_SHADE                   = 1 &lt;&lt; 2,
  WNCK_WINDOW_ACTION_STICK                   = 1 &lt;&lt; 3,
  WNCK_WINDOW_ACTION_MAXIMIZE_HORIZONTALLY   = 1 &lt;&lt; 4,
  WNCK_WINDOW_ACTION_MAXIMIZE_VERTICALLY     = 1 &lt;&lt; 5,
  WNCK_WINDOW_ACTION_CHANGE_WORKSPACE        = 1 &lt;&lt; 6, /* includes pin/unpin */
  WNCK_WINDOW_ACTION_CLOSE                   = 1 &lt;&lt; 7,
  WNCK_WINDOW_ACTION_UNMAXIMIZE_HORIZONTALLY = 1 &lt;&lt; 8,
  WNCK_WINDOW_ACTION_UNMAXIMIZE_VERTICALLY   = 1 &lt;&lt; 9,
  WNCK_WINDOW_ACTION_UNSHADE                 = 1 &lt;&lt; 10,
  WNCK_WINDOW_ACTION_UNSTICK                 = 1 &lt;&lt; 11,
  WNCK_WINDOW_ACTION_MINIMIZE                = 1 &lt;&lt; 12,
  WNCK_WINDOW_ACTION_UNMINIMIZE              = 1 &lt;&lt; 13,
  WNCK_WINDOW_ACTION_MAXIMIZE                = 1 &lt;&lt; 14,
  WNCK_WINDOW_ACTION_UNMAXIMIZE              = 1 &lt;&lt; 15,
  WNCK_WINDOW_ACTION_FULLSCREEN              = 1 &lt;&lt; 16
} WnckWindowActions;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="WnckWindowType"/>enum WnckWindowType</title>
<indexterm><primary>WnckWindowType</primary></indexterm><programlisting>typedef enum
{
  WNCK_WINDOW_NORMAL,       /* document/app window */
  WNCK_WINDOW_DESKTOP,      /* desktop background */
  WNCK_WINDOW_DOCK,         /* panel */
  WNCK_WINDOW_DIALOG,       /* dialog */
  WNCK_WINDOW_MODAL_DIALOG, /* modal dialog */
  WNCK_WINDOW_TOOLBAR,      /* tearoff toolbar */
  WNCK_WINDOW_MENU,         /* tearoff menu */
  WNCK_WINDOW_UTILITY,      /* palette/toolbox window */
  WNCK_WINDOW_SPLASHSCREEN  /* splash screen */
} WnckWindowType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="WnckWindowPrivate"/>struct WnckWindowPrivate</title>
<indexterm><primary>WnckWindowPrivate</primary></indexterm><programlisting>struct WnckWindowPrivate;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="wnck-window-get"/>wnck_window_get ()</title>
<indexterm><primary>wnck_window_get</primary></indexterm><programlisting><link linkend="WnckWindow">WnckWindow</link>* wnck_window_get                 (<link linkend="gulong">gulong</link> xwindow);</programlisting>
<para>
Gets a preexisting <link linkend="WnckWindow"><type>WnckWindow</type></link> for the X window <parameter>xwindow</parameter>.
Will not create a <link linkend="WnckWindow"><type>WnckWindow</type></link> if none exists. Robust
against bogus window IDs.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xwindow</parameter>&nbsp;:</term>
<listitem><simpara> an Xlib window ID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the <link linkend="WnckWindow"><type>WnckWindow</type></link> for this X window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-screen"/>wnck_window_get_screen ()</title>
<indexterm><primary>wnck_window_get_screen</primary></indexterm><programlisting><link linkend="WnckScreen">WnckScreen</link>* wnck_window_get_screen          (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the screen this window is on.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="WnckScreen"><type>WnckScreen</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-name"/>wnck_window_get_name ()</title>
<indexterm><primary>wnck_window_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>* wnck_window_get_name            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the name of the window, as it should be displayed in a pager
or tasklist. Always returns some value, even if the window
hasn't set a name.
</para>
<para>
For icons titles, use <link linkend="wnck-window-get-icon-name"><function>wnck_window_get_icon_name()</function></link> instead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> name of the window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-icon-name"/>wnck_window_get_icon_name ()</title>
<indexterm><primary>wnck_window_get_icon_name</primary></indexterm><programlisting>const <link linkend="char">char</link>* wnck_window_get_icon_name       (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the name of the window, as it should be displayed for an
icon. Always returns some value, even if the window hasn't set a
name. Contrast with <link linkend="wnck-window-get-name"><function>wnck_window_get_name()</function></link>, which returns the
window title, not the icon title.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> name of the window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-application"/>wnck_window_get_application ()</title>
<indexterm><primary>wnck_window_get_application</primary></indexterm><programlisting><link linkend="WnckApplication">WnckApplication</link>* wnck_window_get_application
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-group-leader"/>wnck_window_get_group_leader ()</title>
<indexterm><primary>wnck_window_get_group_leader</primary></indexterm><programlisting><link linkend="gulong">gulong</link>      wnck_window_get_group_leader    (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-xid"/>wnck_window_get_xid ()</title>
<indexterm><primary>wnck_window_get_xid</primary></indexterm><programlisting><link linkend="gulong">gulong</link>      wnck_window_get_xid             (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-class-group"/>wnck_window_get_class_group ()</title>
<indexterm><primary>wnck_window_get_class_group</primary></indexterm><programlisting><link linkend="WnckClassGroup">WnckClassGroup</link>* wnck_window_get_class_group (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-session-id"/>wnck_window_get_session_id ()</title>
<indexterm><primary>wnck_window_get_session_id</primary></indexterm><programlisting>const <link linkend="char">char</link>* wnck_window_get_session_id      (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the session ID for <parameter>window</parameter> in Latin-1 encoding.
NOTE: this is invalid UTF-8. You can't display this
string in a GTK widget without converting to UTF-8.
See <link linkend="wnck-window-get-session-id-utf8"><function>wnck_window_get_session_id_utf8()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> session ID in Latin-1
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-session-id-utf8"/>wnck_window_get_session_id_utf8 ()</title>
<indexterm><primary>wnck_window_get_session_id_utf8</primary></indexterm><programlisting>const <link linkend="char">char</link>* wnck_window_get_session_id_utf8 (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-pid"/>wnck_window_get_pid ()</title>
<indexterm><primary>wnck_window_get_pid</primary></indexterm><programlisting><link linkend="int">int</link>         wnck_window_get_pid             (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the process ID of <parameter>window</parameter>, if available.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> PID of <parameter>window</parameter>, or 0 if none available
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-window-type"/>wnck_window_get_window_type ()</title>
<indexterm><primary>wnck_window_get_window_type</primary></indexterm><programlisting><link linkend="WnckWindowType">WnckWindowType</link> wnck_window_get_window_type  (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Retrieves the semantic type of the window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> semantic type
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-minimized"/>wnck_window_is_minimized ()</title>
<indexterm><primary>wnck_window_is_minimized</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_minimized        (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
If the window is minimized returns <literal>TRUE</literal>. Minimization state
may change anytime a state_changed signal gets emitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if window is minimized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-maximized-horizontally"/>wnck_window_is_maximized_horizontally ()</title>
<indexterm><primary>wnck_window_is_maximized_horizontally</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_maximized_horizontally
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-maximized-vertically"/>wnck_window_is_maximized_vertically ()</title>
<indexterm><primary>wnck_window_is_maximized_vertically</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_maximized_vertically
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-maximized"/>wnck_window_is_maximized ()</title>
<indexterm><primary>wnck_window_is_maximized</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_maximized        (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
As for GDK, "maximized" means both vertically and horizontally.
If only one, then the window isn't considered maximized.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the window is maximized in both directions
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-shaded"/>wnck_window_is_shaded ()</title>
<indexterm><primary>wnck_window_is_shaded</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_shaded           (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-skip-pager"/>wnck_window_is_skip_pager ()</title>
<indexterm><primary>wnck_window_is_skip_pager</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_skip_pager       (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-skip-tasklist"/>wnck_window_is_skip_tasklist ()</title>
<indexterm><primary>wnck_window_is_skip_tasklist</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_skip_tasklist    (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-sticky"/>wnck_window_is_sticky ()</title>
<indexterm><primary>wnck_window_is_sticky</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_sticky           (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Sticky here means "stuck to the glass," i.e. does not scroll with
the viewport. In GDK/GTK,
e.g. <link linkend="gdk-window-stick"><function>gdk_window_stick()</function></link>/<link linkend="gtk-window-stick"><function>gtk_window_stick()</function></link>, sticky means stuck to
the glass and _also_ that the window is on all workspaces.
But here it only means the viewport aspect of it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the window is "stuck to the glass"
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-demands-attention"/>wnck_window_demands_attention ()</title>
<indexterm><primary>wnck_window_demands_attention</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_demands_attention   (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
If the window is has the demands attention state set returns
<literal>TRUE</literal>. This state may change anytime a state_changed signal gets
emitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if window is minimized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-set-skip-pager"/>wnck_window_set_skip_pager ()</title>
<indexterm><primary>wnck_window_set_skip_pager</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_set_skip_pager      (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skip);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>skip</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-set-skip-tasklist"/>wnck_window_set_skip_tasklist ()</title>
<indexterm><primary>wnck_window_set_skip_tasklist</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_set_skip_tasklist   (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="gboolean">gboolean</link> skip);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>skip</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-close"/>wnck_window_close ()</title>
<indexterm><primary>wnck_window_close</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_close               (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="guint32">guint32</link> timestamp);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timestamp</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-minimize"/>wnck_window_minimize ()</title>
<indexterm><primary>wnck_window_minimize</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_minimize            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-unminimize"/>wnck_window_unminimize ()</title>
<indexterm><primary>wnck_window_unminimize</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_unminimize          (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-maximize"/>wnck_window_maximize ()</title>
<indexterm><primary>wnck_window_maximize</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_maximize            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-unmaximize"/>wnck_window_unmaximize ()</title>
<indexterm><primary>wnck_window_unmaximize</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_unmaximize          (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-maximize-horizontally"/>wnck_window_maximize_horizontally ()</title>
<indexterm><primary>wnck_window_maximize_horizontally</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_maximize_horizontally
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-unmaximize-horizontally"/>wnck_window_unmaximize_horizontally ()</title>
<indexterm><primary>wnck_window_unmaximize_horizontally</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_unmaximize_horizontally
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-maximize-vertically"/>wnck_window_maximize_vertically ()</title>
<indexterm><primary>wnck_window_maximize_vertically</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_maximize_vertically (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-unmaximize-vertically"/>wnck_window_unmaximize_vertically ()</title>
<indexterm><primary>wnck_window_unmaximize_vertically</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_unmaximize_vertically
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-shade"/>wnck_window_shade ()</title>
<indexterm><primary>wnck_window_shade</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_shade               (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-unshade"/>wnck_window_unshade ()</title>
<indexterm><primary>wnck_window_unshade</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_unshade             (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-stick"/>wnck_window_stick ()</title>
<indexterm><primary>wnck_window_stick</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_stick               (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-unstick"/>wnck_window_unstick ()</title>
<indexterm><primary>wnck_window_unstick</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_unstick             (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-keyboard-move"/>wnck_window_keyboard_move ()</title>
<indexterm><primary>wnck_window_keyboard_move</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_keyboard_move       (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-keyboard-size"/>wnck_window_keyboard_size ()</title>
<indexterm><primary>wnck_window_keyboard_size</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_keyboard_size       (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-workspace"/>wnck_window_get_workspace ()</title>
<indexterm><primary>wnck_window_get_workspace</primary></indexterm><programlisting><link linkend="WnckWorkspace">WnckWorkspace</link>* wnck_window_get_workspace    (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the window's current workspace. If the window is
pinned (on all workspaces), or not on any workspaces,
<literal>NULL</literal> may be returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> single current workspace or <literal>NULL</literal>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-move-to-workspace"/>wnck_window_move_to_workspace ()</title>
<indexterm><primary>wnck_window_move_to_workspace</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_move_to_workspace   (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *space);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>space</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-pinned"/>wnck_window_is_pinned ()</title>
<indexterm><primary>wnck_window_is_pinned</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_pinned           (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
<literal>TRUE</literal> if the window is on all workspaces. Note that if this
changes, it's signalled by a workspace_changed signal,
not state_changed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if on all workspaces
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-pin"/>wnck_window_pin ()</title>
<indexterm><primary>wnck_window_pin</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_pin                 (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-unpin"/>wnck_window_unpin ()</title>
<indexterm><primary>wnck_window_unpin</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_unpin               (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Sets <parameter>window</parameter>'s workspace to only the currently active workspace,
if the window was previously pinned. If the window wasn't pinned,
doesn't change the window's workspace. If the active workspace
isn't known for some reason (shouldn't happen much), sets the
window's workspace to 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-activate"/>wnck_window_activate ()</title>
<indexterm><primary>wnck_window_activate</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_activate            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Ask the window manager to make <parameter>window</parameter> the active window.  The
window manager may choose to raise <parameter>window</parameter> along with focusing it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-active"/>wnck_window_is_active ()</title>
<indexterm><primary>wnck_window_is_active</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_active           (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the window is the active window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-most-recently-activated"/>wnck_window_is_most_recently_activated ()</title>
<indexterm><primary>wnck_window_is_most_recently_activated</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_most_recently_activated
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Determines whether <parameter>window</parameter> is the most recently activated window.
The most recently activated window is identical to the active
window for click and sloppy focus methods (since a window is always
active in those cases) but differs slightly for mouse focus since
we often have no window active.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if window was the most recently activated window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-activate-transient"/>wnck_window_activate_transient ()</title>
<indexterm><primary>wnck_window_activate_transient</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_activate_transient  (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
If <parameter>window</parameter> has transients, activates the most likely transient
instead of the window itself. Otherwise activates <parameter>window</parameter>.
</para>
<para>
FIXME the ideal behavior of this function is probably to activate
the most recently active window among <parameter>window</parameter> and its transients.
This is probably best implemented on the window manager side.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-icon"/>wnck_window_get_icon ()</title>
<indexterm><primary>wnck_window_get_icon</primary></indexterm><programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  wnck_window_get_icon            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-mini-icon"/>wnck_window_get_mini_icon ()</title>
<indexterm><primary>wnck_window_get_mini_icon</primary></indexterm><programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  wnck_window_get_mini_icon       (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-icon-is-fallback"/>wnck_window_get_icon_is_fallback ()</title>
<indexterm><primary>wnck_window_get_icon_is_fallback</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_get_icon_is_fallback
                                            (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Checks if we are using a default fallback icon because
none was set on the window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if icon is a fallback
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-set-icon-geometry"/>wnck_window_set_icon_geometry ()</title>
<indexterm><primary>wnck_window_set_icon_geometry</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_set_icon_geometry   (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="int">int</link> x,
                                             <link linkend="int">int</link> y,
                                             <link linkend="int">int</link> width,
                                             <link linkend="int">int</link> height);</programlisting>
<para>
Set the icon geometry for a WnckWindow.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> x coordinate in pixels
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> y coordinate in pixels
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> width in pixels
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> height in pixels
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-actions"/>wnck_window_get_actions ()</title>
<indexterm><primary>wnck_window_get_actions</primary></indexterm><programlisting><link linkend="WnckWindowActions">WnckWindowActions</link> wnck_window_get_actions   (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the window operations that should be sensitive for <parameter>window</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> bitmask of actions the window supports
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-state"/>wnck_window_get_state ()</title>
<indexterm><primary>wnck_window_get_state</primary></indexterm><programlisting><link linkend="WnckWindowState">WnckWindowState</link> wnck_window_get_state       (<link linkend="WnckWindow">WnckWindow</link> *window);</programlisting>
<para>
Gets the state of a window as a bitmask.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> bitmask of active state flags.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-get-geometry"/>wnck_window_get_geometry ()</title>
<indexterm><primary>wnck_window_get_geometry</primary></indexterm><programlisting><link linkend="void">void</link>        wnck_window_get_geometry        (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="int">int</link> *xp,
                                             <link linkend="int">int</link> *yp,
                                             <link linkend="int">int</link> *widthp,
                                             <link linkend="int">int</link> *heightp);</programlisting>
<para>
Gets the size and position of the window, as last received
in a configure notify (i.e. this call does not round-trip
to the server, just gets the last size we were notified of).
The X and Y coordinates are relative to the root window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xp</parameter>&nbsp;:</term>
<listitem><simpara> return location for X coordinate of window 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>yp</parameter>&nbsp;:</term>
<listitem><simpara> return location for Y coordinate of window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widthp</parameter>&nbsp;:</term>
<listitem><simpara> return location for width of window
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>heightp</parameter>&nbsp;:</term>
<listitem><simpara> return location for height of window
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-visible-on-workspace"/>wnck_window_is_visible_on_workspace ()</title>
<indexterm><primary>wnck_window_is_visible_on_workspace</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_visible_on_workspace
                                            (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *workspace);</programlisting>
<para>
Like <link linkend="wnck-window-is-on-workspace"><function>wnck_window_is_on_workspace()</function></link>, but also checks that
the window is in a visible state (i.e. not minimized or shaded).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>workspace</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if <parameter>window</parameter> appears on <parameter>workspace</parameter> in normal state
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-on-workspace"/>wnck_window_is_on_workspace ()</title>
<indexterm><primary>wnck_window_is_on_workspace</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_on_workspace     (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *workspace);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>workspace</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if <parameter>window</parameter> appears on <parameter>workspace</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="wnck-window-is-in-viewport"/>wnck_window_is_in_viewport ()</title>
<indexterm><primary>wnck_window_is_in_viewport</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    wnck_window_is_in_viewport      (<link linkend="WnckWindow">WnckWindow</link> *window,
                                             <link linkend="WnckWorkspace">WnckWorkspace</link> *workspace);</programlisting>
<para>
Returns <link linkend="TRUE-CAPS"><type>TRUE</type></link> if the window is inside the current viewport
of the given workspace.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWindow"><type>WnckWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>workspace</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if <parameter>window</parameter> appears in current viewport
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
