/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef oaf_H
#define oaf_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <liboaf/oaf-factory.h>
#include <liboaf/oaf-factory-suppress.h>
#define ex_OAF_GeneralError "IDL:OAF/GeneralError:1.0"
   void _ORBIT_OAF_GeneralError_demarshal(GIOPRecvBuffer * _ORBIT_recv_buffer,
					  CORBA_Environment * ev);
   void _ORBIT_OAF_GeneralError_marshal(GIOPSendBuffer * _ORBIT_send_buffer,
					CORBA_Environment * ev);
#if !defined(_OAF_GeneralError_defined)
#define _OAF_GeneralError_defined 1
   typedef struct
   {
      CORBA_char *description;
   }
   OAF_GeneralError;

#if !defined(TC_IMPL_TC_OAF_GeneralError_0)
#define TC_IMPL_TC_OAF_GeneralError_0 'o'
#define TC_IMPL_TC_OAF_GeneralError_1 'a'
#define TC_IMPL_TC_OAF_GeneralError_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_GeneralError_struct;
#define TC_OAF_GeneralError ((CORBA_TypeCode)&TC_OAF_GeneralError_struct)
#endif
   extern OAF_GeneralError *OAF_GeneralError__alloc(void);
   extern gpointer OAF_GeneralError__free(gpointer mem, gpointer dat,
					  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_OAF_ImplementationID_defined)
#define _OAF_ImplementationID_defined 1
   typedef CORBA_char *OAF_ImplementationID;
#if !defined(TC_IMPL_TC_OAF_ImplementationID_0)
#define TC_IMPL_TC_OAF_ImplementationID_0 'o'
#define TC_IMPL_TC_OAF_ImplementationID_1 'a'
#define TC_IMPL_TC_OAF_ImplementationID_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ImplementationID_struct;
#define TC_OAF_ImplementationID ((CORBA_TypeCode)&TC_OAF_ImplementationID_struct)
#endif
#define OAF_ImplementationID__free CORBA_string__free
#endif
#if !defined(_OAF_ActivationID_defined)
#define _OAF_ActivationID_defined 1
   typedef CORBA_char *OAF_ActivationID;
#if !defined(TC_IMPL_TC_OAF_ActivationID_0)
#define TC_IMPL_TC_OAF_ActivationID_0 'o'
#define TC_IMPL_TC_OAF_ActivationID_1 'a'
#define TC_IMPL_TC_OAF_ActivationID_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ActivationID_struct;
#define TC_OAF_ActivationID ((CORBA_TypeCode)&TC_OAF_ActivationID_struct)
#endif
#define OAF_ActivationID__free CORBA_string__free
#endif
#if !defined(ORBIT_DECL_OAF_ActivationContext) && !defined(_OAF_ActivationContext_defined)
#define ORBIT_DECL_OAF_ActivationContext 1
#define _OAF_ActivationContext_defined 1
#define OAF_ActivationContext__free CORBA_Object__free
   typedef CORBA_Object OAF_ActivationContext;
   extern CORBA_unsigned_long OAF_ActivationContext__classid;
#if !defined(TC_IMPL_TC_OAF_ActivationContext_0)
#define TC_IMPL_TC_OAF_ActivationContext_0 'o'
#define TC_IMPL_TC_OAF_ActivationContext_1 'a'
#define TC_IMPL_TC_OAF_ActivationContext_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ActivationContext_struct;
#define TC_OAF_ActivationContext ((CORBA_TypeCode)&TC_OAF_ActivationContext_struct)
#endif
#endif
#if !defined(_OAF_ActivationFlags_defined)
#define _OAF_ActivationFlags_defined 1
   typedef CORBA_long OAF_ActivationFlags;
#if !defined(TC_IMPL_TC_OAF_ActivationFlags_0)
#define TC_IMPL_TC_OAF_ActivationFlags_0 'o'
#define TC_IMPL_TC_OAF_ActivationFlags_1 'a'
#define TC_IMPL_TC_OAF_ActivationFlags_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ActivationFlags_struct;
#define TC_OAF_ActivationFlags ((CORBA_TypeCode)&TC_OAF_ActivationFlags_struct)
#endif
#endif
#ifndef OAF_FLAG_NO_LOCAL
#define OAF_FLAG_NO_LOCAL 1
#endif				/* !OAF_FLAG_NO_LOCAL */

#ifndef OAF_FLAG_PRIVATE
#define OAF_FLAG_PRIVATE 2
#endif				/* !OAF_FLAG_PRIVATE */

#ifndef OAF_FLAG_EXISTING_ONLY
#define OAF_FLAG_EXISTING_ONLY 4
#endif				/* !OAF_FLAG_EXISTING_ONLY */

#if !defined(_OAF_ActivationResultType_defined)
#define _OAF_ActivationResultType_defined 1
   typedef enum
   {
      OAF_RESULT_OBJECT,
      OAF_RESULT_SHLIB,
      OAF_RESULT_NONE
   }
   OAF_ActivationResultType;
#if !defined(TC_IMPL_TC_OAF_ActivationResultType_0)
#define TC_IMPL_TC_OAF_ActivationResultType_0 'o'
#define TC_IMPL_TC_OAF_ActivationResultType_1 'a'
#define TC_IMPL_TC_OAF_ActivationResultType_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ActivationResultType_struct;
#define TC_OAF_ActivationResultType ((CORBA_TypeCode)&TC_OAF_ActivationResultType_struct)
#endif
#endif
#if !defined(_OAF_ActivationResultData_defined)
#define _OAF_ActivationResultData_defined 1
   typedef struct
   {
      OAF_ActivationResultType _d;
      union
      {
	 CORBA_Object res_object;
	 GNOME_stringlist res_shlib;
      }
      _u;
   }
   OAF_ActivationResultData;
#if !defined(TC_IMPL_TC_OAF_ActivationResultData_0)
#define TC_IMPL_TC_OAF_ActivationResultData_0 'o'
#define TC_IMPL_TC_OAF_ActivationResultData_1 'a'
#define TC_IMPL_TC_OAF_ActivationResultData_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ActivationResultData_struct;
#define TC_OAF_ActivationResultData ((CORBA_TypeCode)&TC_OAF_ActivationResultData_struct)
#endif
   extern OAF_ActivationResultData *OAF_ActivationResultData__alloc(void);
   extern gpointer OAF_ActivationResultData__free(gpointer mem, gpointer dat,
						  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_OAF_ActivationResult_defined)
#define _OAF_ActivationResult_defined 1
   typedef struct
   {
      CORBA_char *aid;
      OAF_ActivationResultData res;
   }
   OAF_ActivationResult;

#if !defined(TC_IMPL_TC_OAF_ActivationResult_0)
#define TC_IMPL_TC_OAF_ActivationResult_0 'o'
#define TC_IMPL_TC_OAF_ActivationResult_1 'a'
#define TC_IMPL_TC_OAF_ActivationResult_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ActivationResult_struct;
#define TC_OAF_ActivationResult ((CORBA_TypeCode)&TC_OAF_ActivationResult_struct)
#endif
   extern OAF_ActivationResult *OAF_ActivationResult__alloc(void);
   extern gpointer OAF_ActivationResult__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_OAF_PropertyType_defined)
#define _OAF_PropertyType_defined 1
   typedef enum
   {
      OAF_P_STRING,
      OAF_P_NUMBER,
      OAF_P_BOOLEAN,
      OAF_P_STRINGV
   }
   OAF_PropertyType;
#if !defined(TC_IMPL_TC_OAF_PropertyType_0)
#define TC_IMPL_TC_OAF_PropertyType_0 'o'
#define TC_IMPL_TC_OAF_PropertyType_1 'a'
#define TC_IMPL_TC_OAF_PropertyType_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_PropertyType_struct;
#define TC_OAF_PropertyType ((CORBA_TypeCode)&TC_OAF_PropertyType_struct)
#endif
#endif
#if !defined(_OAF_PropertyValue_defined)
#define _OAF_PropertyValue_defined 1
   typedef struct
   {
      OAF_PropertyType _d;
      union
      {
	 CORBA_char *value_string;
	 CORBA_double value_number;
	 CORBA_boolean value_boolean;
	 GNOME_stringlist value_stringv;
      }
      _u;
   }
   OAF_PropertyValue;
#if !defined(TC_IMPL_TC_OAF_PropertyValue_0)
#define TC_IMPL_TC_OAF_PropertyValue_0 'o'
#define TC_IMPL_TC_OAF_PropertyValue_1 'a'
#define TC_IMPL_TC_OAF_PropertyValue_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_PropertyValue_struct;
#define TC_OAF_PropertyValue ((CORBA_TypeCode)&TC_OAF_PropertyValue_struct)
#endif
   extern OAF_PropertyValue *OAF_PropertyValue__alloc(void);
   extern gpointer OAF_PropertyValue__free(gpointer mem, gpointer dat,
					   CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_OAF_Property_defined)
#define _OAF_Property_defined 1
   typedef struct
   {
      CORBA_char *name;
      OAF_PropertyValue v;
   }
   OAF_Property;

#if !defined(TC_IMPL_TC_OAF_Property_0)
#define TC_IMPL_TC_OAF_Property_0 'o'
#define TC_IMPL_TC_OAF_Property_1 'a'
#define TC_IMPL_TC_OAF_Property_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_Property_struct;
#define TC_OAF_Property ((CORBA_TypeCode)&TC_OAF_Property_struct)
#endif
   extern OAF_Property *OAF_Property__alloc(void);
   extern gpointer OAF_Property__free(gpointer mem, gpointer dat,
				      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_OAF_Property) && !defined(_CORBA_sequence_OAF_Property_defined)
#define ORBIT_DECL_CORBA_sequence_OAF_Property 1
#define _CORBA_sequence_OAF_Property_defined 1
#define ORBIT_IMPL_CORBA_sequence_OAF_Property_0 'o'
#define ORBIT_IMPL_CORBA_sequence_OAF_Property_1 'a'
#define ORBIT_IMPL_CORBA_sequence_OAF_Property_2 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      OAF_Property *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_OAF_Property;
#if !defined(TC_IMPL_TC_CORBA_sequence_OAF_Property_0)
#define TC_IMPL_TC_CORBA_sequence_OAF_Property_0 'o'
#define TC_IMPL_TC_CORBA_sequence_OAF_Property_1 'a'
#define TC_IMPL_TC_CORBA_sequence_OAF_Property_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_OAF_Property_struct;
#define TC_CORBA_sequence_OAF_Property ((CORBA_TypeCode)&TC_CORBA_sequence_OAF_Property_struct)
#endif
   extern CORBA_sequence_OAF_Property
      *CORBA_sequence_OAF_Property__alloc(void);
   extern gpointer CORBA_sequence_OAF_Property__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   OAF_Property *CORBA_sequence_OAF_Property_allocbuf(CORBA_unsigned_long
						      len);
#endif
#if !defined(_OAF_ServerInfo_defined)
#define _OAF_ServerInfo_defined 1
   typedef struct
   {
      OAF_ImplementationID iid;
      CORBA_char *server_type;
      CORBA_char *location_info;
      CORBA_char *username;
      CORBA_char *hostname;
      CORBA_char *domain;
      CORBA_sequence_OAF_Property props;
   }
   OAF_ServerInfo;

#if !defined(TC_IMPL_TC_OAF_ServerInfo_0)
#define TC_IMPL_TC_OAF_ServerInfo_0 'o'
#define TC_IMPL_TC_OAF_ServerInfo_1 'a'
#define TC_IMPL_TC_OAF_ServerInfo_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ServerInfo_struct;
#define TC_OAF_ServerInfo ((CORBA_TypeCode)&TC_OAF_ServerInfo_struct)
#endif
   extern OAF_ServerInfo *OAF_ServerInfo__alloc(void);
   extern gpointer OAF_ServerInfo__free(gpointer mem, gpointer dat,
					CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_OAF_ServerInfo) && !defined(_CORBA_sequence_OAF_ServerInfo_defined)
#define ORBIT_DECL_CORBA_sequence_OAF_ServerInfo 1
#define _CORBA_sequence_OAF_ServerInfo_defined 1
#define ORBIT_IMPL_CORBA_sequence_OAF_ServerInfo_0 'o'
#define ORBIT_IMPL_CORBA_sequence_OAF_ServerInfo_1 'a'
#define ORBIT_IMPL_CORBA_sequence_OAF_ServerInfo_2 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      OAF_ServerInfo *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_OAF_ServerInfo;
#if !defined(TC_IMPL_TC_CORBA_sequence_OAF_ServerInfo_0)
#define TC_IMPL_TC_CORBA_sequence_OAF_ServerInfo_0 'o'
#define TC_IMPL_TC_CORBA_sequence_OAF_ServerInfo_1 'a'
#define TC_IMPL_TC_CORBA_sequence_OAF_ServerInfo_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_OAF_ServerInfo_struct;
#define TC_CORBA_sequence_OAF_ServerInfo ((CORBA_TypeCode)&TC_CORBA_sequence_OAF_ServerInfo_struct)
#endif
   extern CORBA_sequence_OAF_ServerInfo
      *CORBA_sequence_OAF_ServerInfo__alloc(void);
   extern gpointer CORBA_sequence_OAF_ServerInfo__free(gpointer mem,
						       gpointer dat,
						       CORBA_boolean free_strings);	/* ORBit internal use */
   OAF_ServerInfo *CORBA_sequence_OAF_ServerInfo_allocbuf(CORBA_unsigned_long
							  len);
#endif
#if !defined(_OAF_ServerInfoList_defined)
#define _OAF_ServerInfoList_defined 1
   typedef CORBA_sequence_OAF_ServerInfo OAF_ServerInfoList;
#if !defined(TC_IMPL_TC_OAF_ServerInfoList_0)
#define TC_IMPL_TC_OAF_ServerInfoList_0 'o'
#define TC_IMPL_TC_OAF_ServerInfoList_1 'a'
#define TC_IMPL_TC_OAF_ServerInfoList_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ServerInfoList_struct;
#define TC_OAF_ServerInfoList ((CORBA_TypeCode)&TC_OAF_ServerInfoList_struct)
#endif
   extern OAF_ServerInfoList *OAF_ServerInfoList__alloc(void);
   extern gpointer OAF_ServerInfoList__free(gpointer mem, gpointer dat,
					    CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_OAF_CacheTime_defined)
#define _OAF_CacheTime_defined 1
   typedef CORBA_long_long OAF_CacheTime;
#if !defined(TC_IMPL_TC_OAF_CacheTime_0)
#define TC_IMPL_TC_OAF_CacheTime_0 'o'
#define TC_IMPL_TC_OAF_CacheTime_1 'a'
#define TC_IMPL_TC_OAF_CacheTime_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_CacheTime_struct;
#define TC_OAF_CacheTime ((CORBA_TypeCode)&TC_OAF_CacheTime_struct)
#endif
#endif
#if !defined(_OAF_ServerInfoListCache_defined)
#define _OAF_ServerInfoListCache_defined 1
   typedef struct
   {
      CORBA_boolean _d;
      union
      {
	 OAF_ServerInfoList server_list;
      }
      _u;
   }
   OAF_ServerInfoListCache;
#if !defined(TC_IMPL_TC_OAF_ServerInfoListCache_0)
#define TC_IMPL_TC_OAF_ServerInfoListCache_0 'o'
#define TC_IMPL_TC_OAF_ServerInfoListCache_1 'a'
#define TC_IMPL_TC_OAF_ServerInfoListCache_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ServerInfoListCache_struct;
#define TC_OAF_ServerInfoListCache ((CORBA_TypeCode)&TC_OAF_ServerInfoListCache_struct)
#endif
   extern OAF_ServerInfoListCache *OAF_ServerInfoListCache__alloc(void);
   extern gpointer OAF_ServerInfoListCache__free(gpointer mem, gpointer dat,
						 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_OAF_ImplementationID) && !defined(_CORBA_sequence_OAF_ImplementationID_defined)
#define ORBIT_DECL_CORBA_sequence_OAF_ImplementationID 1
#define _CORBA_sequence_OAF_ImplementationID_defined 1
#define ORBIT_IMPL_CORBA_sequence_OAF_ImplementationID_0 'o'
#define ORBIT_IMPL_CORBA_sequence_OAF_ImplementationID_1 'a'
#define ORBIT_IMPL_CORBA_sequence_OAF_ImplementationID_2 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      OAF_ImplementationID *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_OAF_ImplementationID;
#if !defined(TC_IMPL_TC_CORBA_sequence_OAF_ImplementationID_0)
#define TC_IMPL_TC_CORBA_sequence_OAF_ImplementationID_0 'o'
#define TC_IMPL_TC_CORBA_sequence_OAF_ImplementationID_1 'a'
#define TC_IMPL_TC_CORBA_sequence_OAF_ImplementationID_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_OAF_ImplementationID_struct;
#define TC_CORBA_sequence_OAF_ImplementationID ((CORBA_TypeCode)&TC_CORBA_sequence_OAF_ImplementationID_struct)
#endif
   extern CORBA_sequence_OAF_ImplementationID
      *CORBA_sequence_OAF_ImplementationID__alloc(void);
   extern gpointer CORBA_sequence_OAF_ImplementationID__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
   OAF_ImplementationID
      *CORBA_sequence_OAF_ImplementationID_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_OAF_ServerStateCache_defined)
#define _OAF_ServerStateCache_defined 1
   typedef struct
   {
      CORBA_boolean _d;
      union
      {
	 CORBA_sequence_OAF_ImplementationID active_servers;
      }
      _u;
   }
   OAF_ServerStateCache;
#if !defined(TC_IMPL_TC_OAF_ServerStateCache_0)
#define TC_IMPL_TC_OAF_ServerStateCache_0 'o'
#define TC_IMPL_TC_OAF_ServerStateCache_1 'a'
#define TC_IMPL_TC_OAF_ServerStateCache_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ServerStateCache_struct;
#define TC_OAF_ServerStateCache ((CORBA_TypeCode)&TC_OAF_ServerStateCache_struct)
#endif
   extern OAF_ServerStateCache *OAF_ServerStateCache__alloc(void);
   extern gpointer OAF_ServerStateCache__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_OAF_RegistrationResult_defined)
#define _OAF_RegistrationResult_defined 1
   typedef enum
   {
      OAF_REG_SUCCESS,
      OAF_REG_NOT_LISTED,
      OAF_REG_ALREADY_ACTIVE,
      OAF_REG_ERROR
   }
   OAF_RegistrationResult;
#if !defined(TC_IMPL_TC_OAF_RegistrationResult_0)
#define TC_IMPL_TC_OAF_RegistrationResult_0 'o'
#define TC_IMPL_TC_OAF_RegistrationResult_1 'a'
#define TC_IMPL_TC_OAF_RegistrationResult_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_RegistrationResult_struct;
#define TC_OAF_RegistrationResult ((CORBA_TypeCode)&TC_OAF_RegistrationResult_struct)
#endif
#endif
#if !defined(ORBIT_DECL_OAF_ActivationCallback) && !defined(_OAF_ActivationCallback_defined)
#define ORBIT_DECL_OAF_ActivationCallback 1
#define _OAF_ActivationCallback_defined 1
#define OAF_ActivationCallback__free CORBA_Object__free
   typedef CORBA_Object OAF_ActivationCallback;
   extern CORBA_unsigned_long OAF_ActivationCallback__classid;
#if !defined(TC_IMPL_TC_OAF_ActivationCallback_0)
#define TC_IMPL_TC_OAF_ActivationCallback_0 'o'
#define TC_IMPL_TC_OAF_ActivationCallback_1 'a'
#define TC_IMPL_TC_OAF_ActivationCallback_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ActivationCallback_struct;
#define TC_OAF_ActivationCallback ((CORBA_TypeCode)&TC_OAF_ActivationCallback_struct)
#endif
#endif
#if !defined(ORBIT_DECL_OAF_ObjectDirectory) && !defined(_OAF_ObjectDirectory_defined)
#define ORBIT_DECL_OAF_ObjectDirectory 1
#define _OAF_ObjectDirectory_defined 1
#define OAF_ObjectDirectory__free CORBA_Object__free
   typedef CORBA_Object OAF_ObjectDirectory;
   extern CORBA_unsigned_long OAF_ObjectDirectory__classid;
#if !defined(TC_IMPL_TC_OAF_ObjectDirectory_0)
#define TC_IMPL_TC_OAF_ObjectDirectory_0 'o'
#define TC_IMPL_TC_OAF_ObjectDirectory_1 'a'
#define TC_IMPL_TC_OAF_ObjectDirectory_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ObjectDirectory_struct;
#define TC_OAF_ObjectDirectory ((CORBA_TypeCode)&TC_OAF_ObjectDirectory_struct)
#endif
#endif
#if !defined(_OAF_ObjectDirectory_UnregisterType_defined)
#define _OAF_ObjectDirectory_UnregisterType_defined 1
   typedef enum
   {
      OAF_ObjectDirectory_UNREGISTER_NORMAL,
      OAF_ObjectDirectory_UNREGISTER_NOTIFY_UNUSED
   }
   OAF_ObjectDirectory_UnregisterType;
#if !defined(TC_IMPL_TC_OAF_ObjectDirectory_UnregisterType_0)
#define TC_IMPL_TC_OAF_ObjectDirectory_UnregisterType_0 'o'
#define TC_IMPL_TC_OAF_ObjectDirectory_UnregisterType_1 'a'
#define TC_IMPL_TC_OAF_ObjectDirectory_UnregisterType_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ObjectDirectory_UnregisterType_struct;
#define TC_OAF_ObjectDirectory_UnregisterType ((CORBA_TypeCode)&TC_OAF_ObjectDirectory_UnregisterType_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_OAF_ObjectDirectory) && !defined(_CORBA_sequence_OAF_ObjectDirectory_defined)
#define ORBIT_DECL_CORBA_sequence_OAF_ObjectDirectory 1
#define _CORBA_sequence_OAF_ObjectDirectory_defined 1
#define ORBIT_IMPL_CORBA_sequence_OAF_ObjectDirectory_0 'o'
#define ORBIT_IMPL_CORBA_sequence_OAF_ObjectDirectory_1 'a'
#define ORBIT_IMPL_CORBA_sequence_OAF_ObjectDirectory_2 'f'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      OAF_ObjectDirectory *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_OAF_ObjectDirectory;
#if !defined(TC_IMPL_TC_CORBA_sequence_OAF_ObjectDirectory_0)
#define TC_IMPL_TC_CORBA_sequence_OAF_ObjectDirectory_0 'o'
#define TC_IMPL_TC_CORBA_sequence_OAF_ObjectDirectory_1 'a'
#define TC_IMPL_TC_CORBA_sequence_OAF_ObjectDirectory_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_OAF_ObjectDirectory_struct;
#define TC_CORBA_sequence_OAF_ObjectDirectory ((CORBA_TypeCode)&TC_CORBA_sequence_OAF_ObjectDirectory_struct)
#endif
   extern CORBA_sequence_OAF_ObjectDirectory
      *CORBA_sequence_OAF_ObjectDirectory__alloc(void);
   extern gpointer CORBA_sequence_OAF_ObjectDirectory__free(gpointer mem,
							    gpointer dat,
							    CORBA_boolean free_strings);	/* ORBit internal use */
   OAF_ObjectDirectory
      *CORBA_sequence_OAF_ObjectDirectory_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_OAF_ObjectDirectoryList_defined)
#define _OAF_ObjectDirectoryList_defined 1
   typedef CORBA_sequence_OAF_ObjectDirectory OAF_ObjectDirectoryList;
#if !defined(TC_IMPL_TC_OAF_ObjectDirectoryList_0)
#define TC_IMPL_TC_OAF_ObjectDirectoryList_0 'o'
#define TC_IMPL_TC_OAF_ObjectDirectoryList_1 'a'
#define TC_IMPL_TC_OAF_ObjectDirectoryList_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ObjectDirectoryList_struct;
#define TC_OAF_ObjectDirectoryList ((CORBA_TypeCode)&TC_OAF_ObjectDirectoryList_struct)
#endif
   extern OAF_ObjectDirectoryList *OAF_ObjectDirectoryList__alloc(void);
   extern gpointer OAF_ObjectDirectoryList__free(gpointer mem, gpointer dat,
						 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_OAF_ActivationContext) && !defined(_OAF_ActivationContext_defined)
#define ORBIT_DECL_OAF_ActivationContext 1
#define _OAF_ActivationContext_defined 1
#define OAF_ActivationContext__free CORBA_Object__free
   typedef CORBA_Object OAF_ActivationContext;
   extern CORBA_unsigned_long OAF_ActivationContext__classid;
#if !defined(TC_IMPL_TC_OAF_ActivationContext_0)
#define TC_IMPL_TC_OAF_ActivationContext_0 'o'
#define TC_IMPL_TC_OAF_ActivationContext_1 'a'
#define TC_IMPL_TC_OAF_ActivationContext_2 'f'
   extern const struct CORBA_TypeCode_struct TC_OAF_ActivationContext_struct;
#define TC_OAF_ActivationContext ((CORBA_TypeCode)&TC_OAF_ActivationContext_struct)
#endif
#endif
#define ex_OAF_ActivationContext_NotListed "IDL:OAF/ActivationContext/NotListed:1.0"
   void _ORBIT_OAF_ActivationContext_NotListed_demarshal(GIOPRecvBuffer *
							 _ORBIT_recv_buffer,
							 CORBA_Environment *
							 ev);
   void _ORBIT_OAF_ActivationContext_NotListed_marshal(GIOPSendBuffer *
						       _ORBIT_send_buffer,
						       CORBA_Environment *
						       ev);
#if !defined(_OAF_ActivationContext_NotListed_defined)
#define _OAF_ActivationContext_NotListed_defined 1
   typedef struct
   {
      int dummy;
   }
   OAF_ActivationContext_NotListed;

#if !defined(TC_IMPL_TC_OAF_ActivationContext_NotListed_0)
#define TC_IMPL_TC_OAF_ActivationContext_NotListed_0 'o'
#define TC_IMPL_TC_OAF_ActivationContext_NotListed_1 'a'
#define TC_IMPL_TC_OAF_ActivationContext_NotListed_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ActivationContext_NotListed_struct;
#define TC_OAF_ActivationContext_NotListed ((CORBA_TypeCode)&TC_OAF_ActivationContext_NotListed_struct)
#endif
#define OAF_ActivationContext_NotListed__alloc() NULL
   extern gpointer OAF_ActivationContext_NotListed__free(gpointer mem,
							 gpointer dat,
							 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_OAF_ActivationContext_AlreadyListed "IDL:OAF/ActivationContext/AlreadyListed:1.0"
   void _ORBIT_OAF_ActivationContext_AlreadyListed_demarshal(GIOPRecvBuffer *
							     _ORBIT_recv_buffer,
							     CORBA_Environment
							     * ev);
   void _ORBIT_OAF_ActivationContext_AlreadyListed_marshal(GIOPSendBuffer *
							   _ORBIT_send_buffer,
							   CORBA_Environment *
							   ev);
#if !defined(_OAF_ActivationContext_AlreadyListed_defined)
#define _OAF_ActivationContext_AlreadyListed_defined 1
   typedef struct
   {
      int dummy;
   }
   OAF_ActivationContext_AlreadyListed;

#if !defined(TC_IMPL_TC_OAF_ActivationContext_AlreadyListed_0)
#define TC_IMPL_TC_OAF_ActivationContext_AlreadyListed_0 'o'
#define TC_IMPL_TC_OAF_ActivationContext_AlreadyListed_1 'a'
#define TC_IMPL_TC_OAF_ActivationContext_AlreadyListed_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ActivationContext_AlreadyListed_struct;
#define TC_OAF_ActivationContext_AlreadyListed ((CORBA_TypeCode)&TC_OAF_ActivationContext_AlreadyListed_struct)
#endif
#define OAF_ActivationContext_AlreadyListed__alloc() NULL
   extern gpointer OAF_ActivationContext_AlreadyListed__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_OAF_ActivationContext_IncompleteContext "IDL:OAF/ActivationContext/IncompleteContext:1.0"
   void
      _ORBIT_OAF_ActivationContext_IncompleteContext_demarshal(GIOPRecvBuffer
							       *
							       _ORBIT_recv_buffer,
							       CORBA_Environment
							       * ev);
   void _ORBIT_OAF_ActivationContext_IncompleteContext_marshal(GIOPSendBuffer
							       *
							       _ORBIT_send_buffer,
							       CORBA_Environment
							       * ev);
#if !defined(_OAF_ActivationContext_IncompleteContext_defined)
#define _OAF_ActivationContext_IncompleteContext_defined 1
   typedef struct
   {
      int dummy;
   }
   OAF_ActivationContext_IncompleteContext;

#if !defined(TC_IMPL_TC_OAF_ActivationContext_IncompleteContext_0)
#define TC_IMPL_TC_OAF_ActivationContext_IncompleteContext_0 'o'
#define TC_IMPL_TC_OAF_ActivationContext_IncompleteContext_1 'a'
#define TC_IMPL_TC_OAF_ActivationContext_IncompleteContext_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ActivationContext_IncompleteContext_struct;
#define TC_OAF_ActivationContext_IncompleteContext ((CORBA_TypeCode)&TC_OAF_ActivationContext_IncompleteContext_struct)
#endif
#define OAF_ActivationContext_IncompleteContext__alloc() NULL
   extern gpointer OAF_ActivationContext_IncompleteContext__free(gpointer mem,
								 gpointer dat,
								 CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#define ex_OAF_ActivationContext_ParseFailed "IDL:OAF/ActivationContext/ParseFailed:1.0"
   void _ORBIT_OAF_ActivationContext_ParseFailed_demarshal(GIOPRecvBuffer *
							   _ORBIT_recv_buffer,
							   CORBA_Environment *
							   ev);
   void _ORBIT_OAF_ActivationContext_ParseFailed_marshal(GIOPSendBuffer *
							 _ORBIT_send_buffer,
							 CORBA_Environment *
							 ev);
#if !defined(_OAF_ActivationContext_ParseFailed_defined)
#define _OAF_ActivationContext_ParseFailed_defined 1
   typedef struct
   {
      CORBA_char *description;
   }
   OAF_ActivationContext_ParseFailed;

#if !defined(TC_IMPL_TC_OAF_ActivationContext_ParseFailed_0)
#define TC_IMPL_TC_OAF_ActivationContext_ParseFailed_0 'o'
#define TC_IMPL_TC_OAF_ActivationContext_ParseFailed_1 'a'
#define TC_IMPL_TC_OAF_ActivationContext_ParseFailed_2 'f'
   extern const struct CORBA_TypeCode_struct
      TC_OAF_ActivationContext_ParseFailed_struct;
#define TC_OAF_ActivationContext_ParseFailed ((CORBA_TypeCode)&TC_OAF_ActivationContext_ParseFailed_struct)
#endif
   extern OAF_ActivationContext_ParseFailed
      *OAF_ActivationContext_ParseFailed__alloc(void);
   extern gpointer OAF_ActivationContext_ParseFailed__free(gpointer mem,
							   gpointer dat,
							   CORBA_boolean free_strings);	/* ORBit internal use */
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*report_activation_failed) (PortableServer_Servant _servant,
					const CORBA_char * reason,
					CORBA_Environment * ev);
      void (*report_activation_succeeded) (PortableServer_Servant _servant,
					   const OAF_ActivationResult *
					   result, CORBA_Environment * ev);
   }
   POA_OAF_ActivationCallback__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_OAF_ActivationCallback__epv *OAF_ActivationCallback_epv;
   }
   POA_OAF_ActivationCallback__vepv;
   typedef struct
   {
      void *_private;
      POA_OAF_ActivationCallback__vepv *vepv;
   }
   POA_OAF_ActivationCallback;
   extern void POA_OAF_ActivationCallback__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_OAF_ActivationCallback__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      OAF_ServerInfoListCache *(*get_servers) (PortableServer_Servant
					       _servant,
					       const OAF_CacheTime
					       only_if_newer,
					       CORBA_Environment * ev);
      OAF_ServerStateCache *(*get_active_servers) (PortableServer_Servant
						   _servant,
						   const OAF_CacheTime
						   only_if_newer,
						   CORBA_Environment * ev);
      CORBA_char *(*_get_username) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
      CORBA_char *(*_get_hostname) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
      CORBA_char *(*_get_domain) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
       CORBA_Object(*activate) (PortableServer_Servant _servant,
				const OAF_ImplementationID iid,
				const OAF_ActivationContext ac,
				const OAF_ActivationFlags flags,
				CORBA_Context _ctx, CORBA_Environment * ev);
      void (*lock) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unlock) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
       OAF_RegistrationResult(*register_new) (PortableServer_Servant _servant,
					      const OAF_ImplementationID iid,
					      const CORBA_Object obj,
					      CORBA_Environment * ev);
      void (*unregister) (PortableServer_Servant _servant,
			  const OAF_ImplementationID iid,
			  const CORBA_Object obj,
			  const OAF_ObjectDirectory_UnregisterType notify,
			  CORBA_Environment * ev);
   }
   POA_OAF_ObjectDirectory__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_OAF_ObjectDirectory__epv *OAF_ObjectDirectory_epv;
   }
   POA_OAF_ObjectDirectory__vepv;
   typedef struct
   {
      void *_private;
      POA_OAF_ObjectDirectory__vepv *vepv;
   }
   POA_OAF_ObjectDirectory;
   extern void POA_OAF_ObjectDirectory__init(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   extern void POA_OAF_ObjectDirectory__fini(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      OAF_ObjectDirectoryList *(*_get_directories) (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev);
      void (*add_directory) (PortableServer_Servant _servant,
			     const OAF_ObjectDirectory dir,
			     CORBA_Environment * ev);
      void (*remove_directory) (PortableServer_Servant _servant,
				const OAF_ObjectDirectory dir,
				CORBA_Environment * ev);
      OAF_ActivationResult *(*activate) (PortableServer_Servant _servant,
					 const CORBA_char * requirements,
					 const GNOME_stringlist *
					 selection_order,
					 const OAF_ActivationFlags flags,
					 CORBA_Context _ctx,
					 CORBA_Environment * ev);
      void (*activate_async) (PortableServer_Servant _servant,
			      const CORBA_char * requirements,
			      const GNOME_stringlist * selection_order,
			      const OAF_ActivationFlags flags,
			      const OAF_ActivationCallback callback_object,
			      CORBA_Context _ctx, CORBA_Environment * ev);
      OAF_ServerInfoList *(*_get_servers) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
      OAF_ServerInfoList *(*query) (PortableServer_Servant _servant,
				    const CORBA_char * requirements,
				    const GNOME_stringlist * selection_order,
				    CORBA_Context _ctx,
				    CORBA_Environment * ev);
      OAF_ActivationResult *(*activate_from_id) (PortableServer_Servant
						 _servant,
						 const OAF_ActivationID aid,
						 const OAF_ActivationFlags
						 flags, CORBA_Context _ctx,
						 CORBA_Environment * ev);
      void (*activate_from_id_async) (PortableServer_Servant _servant,
				      const OAF_ActivationID aid,
				      const OAF_ActivationFlags flags,
				      const OAF_ActivationCallback
				      callback_object, CORBA_Context _ctx,
				      CORBA_Environment * ev);
   }
   POA_OAF_ActivationContext__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_OAF_ActivationContext__epv *OAF_ActivationContext_epv;
   }
   POA_OAF_ActivationContext__vepv;
   typedef struct
   {
      void *_private;
      POA_OAF_ActivationContext__vepv *vepv;
   }
   POA_OAF_ActivationContext;
   extern void POA_OAF_ActivationContext__init(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   extern void POA_OAF_ActivationContext__fini(PortableServer_Servant servant,
					       CORBA_Environment * ev);

/** prototypes **/
   void OAF_ActivationCallback_report_activation_failed(OAF_ActivationCallback
							_obj,
							const CORBA_char *
							reason,
							CORBA_Environment *
							ev);
   void
      OAF_ActivationCallback_report_activation_succeeded
      (OAF_ActivationCallback _obj, const OAF_ActivationResult * result,
       CORBA_Environment * ev);
   OAF_ServerInfoListCache
      *OAF_ObjectDirectory_get_servers(OAF_ObjectDirectory _obj,
				       const OAF_CacheTime only_if_newer,
				       CORBA_Environment * ev);
   OAF_ServerStateCache
      *OAF_ObjectDirectory_get_active_servers(OAF_ObjectDirectory _obj,
					      const OAF_CacheTime
					      only_if_newer,
					      CORBA_Environment * ev);
   CORBA_char *OAF_ObjectDirectory__get_username(OAF_ObjectDirectory _obj,
						 CORBA_Environment * ev);
   CORBA_char *OAF_ObjectDirectory__get_hostname(OAF_ObjectDirectory _obj,
						 CORBA_Environment * ev);
   CORBA_char *OAF_ObjectDirectory__get_domain(OAF_ObjectDirectory _obj,
					       CORBA_Environment * ev);
   CORBA_Object OAF_ObjectDirectory_activate(OAF_ObjectDirectory _obj,
					     const OAF_ImplementationID iid,
					     const OAF_ActivationContext ac,
					     const OAF_ActivationFlags flags,
					     CORBA_Context _ctx,
					     CORBA_Environment * ev);
   void OAF_ObjectDirectory_lock(OAF_ObjectDirectory _obj,
				 CORBA_Environment * ev);
   void OAF_ObjectDirectory_unlock(OAF_ObjectDirectory _obj,
				   CORBA_Environment * ev);
   OAF_RegistrationResult OAF_ObjectDirectory_register_new(OAF_ObjectDirectory
							   _obj,
							   const
							   OAF_ImplementationID
							   iid,
							   const CORBA_Object
							   obj,
							   CORBA_Environment *
							   ev);
   void OAF_ObjectDirectory_unregister(OAF_ObjectDirectory _obj,
				       const OAF_ImplementationID iid,
				       const CORBA_Object obj,
				       const
				       OAF_ObjectDirectory_UnregisterType
				       notify, CORBA_Environment * ev);
   OAF_ObjectDirectoryList
      *OAF_ActivationContext__get_directories(OAF_ActivationContext _obj,
					      CORBA_Environment * ev);
   void OAF_ActivationContext_add_directory(OAF_ActivationContext _obj,
					    const OAF_ObjectDirectory dir,
					    CORBA_Environment * ev);
   void OAF_ActivationContext_remove_directory(OAF_ActivationContext _obj,
					       const OAF_ObjectDirectory dir,
					       CORBA_Environment * ev);
   OAF_ActivationResult *OAF_ActivationContext_activate(OAF_ActivationContext
							_obj,
							const CORBA_char *
							requirements,
							const GNOME_stringlist
							* selection_order,
							const
							OAF_ActivationFlags
							flags,
							CORBA_Context _ctx,
							CORBA_Environment *
							ev);
   void OAF_ActivationContext_activate_async(OAF_ActivationContext _obj,
					     const CORBA_char * requirements,
					     const GNOME_stringlist *
					     selection_order,
					     const OAF_ActivationFlags flags,
					     const OAF_ActivationCallback
					     callback_object,
					     CORBA_Context _ctx,
					     CORBA_Environment * ev);
   OAF_ServerInfoList
      *OAF_ActivationContext__get_servers(OAF_ActivationContext _obj,
					  CORBA_Environment * ev);
   OAF_ServerInfoList *OAF_ActivationContext_query(OAF_ActivationContext _obj,
						   const CORBA_char *
						   requirements,
						   const GNOME_stringlist *
						   selection_order,
						   CORBA_Context _ctx,
						   CORBA_Environment * ev);
   OAF_ActivationResult
      *OAF_ActivationContext_activate_from_id(OAF_ActivationContext _obj,
					      const OAF_ActivationID aid,
					      const OAF_ActivationFlags flags,
					      CORBA_Context _ctx,
					      CORBA_Environment * ev);
   void OAF_ActivationContext_activate_from_id_async(OAF_ActivationContext
						     _obj,
						     const OAF_ActivationID
						     aid,
						     const OAF_ActivationFlags
						     flags,
						     const
						     OAF_ActivationCallback
						     callback_object,
						     CORBA_Context _ctx,
						     CORBA_Environment * ev);

   void
      _ORBIT_skel_OAF_ActivationCallback_report_activation_failed
      (POA_OAF_ActivationCallback * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_activation_failed) (PortableServer_Servant
					       _servant,
					       const CORBA_char * reason,
					       CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationCallback_report_activation_succeeded
      (POA_OAF_ActivationCallback * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_activation_succeeded) (PortableServer_Servant
						  _servant,
						  const OAF_ActivationResult *
						  result,
						  CORBA_Environment * ev));
   void _ORBIT_skel_OAF_ObjectDirectory_get_servers(POA_OAF_ObjectDirectory *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    OAF_ServerInfoListCache *
						    (*_impl_get_servers)
						    (PortableServer_Servant
						     _servant,
						     const OAF_CacheTime
						     only_if_newer,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ObjectDirectory_get_active_servers
      (POA_OAF_ObjectDirectory * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       OAF_ServerStateCache *
       (*_impl_get_active_servers) (PortableServer_Servant _servant,
				    const OAF_CacheTime only_if_newer,
				    CORBA_Environment * ev));
   void _ORBIT_skel_OAF_ObjectDirectory__get_username(POA_OAF_ObjectDirectory
						      * _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_char *
						      (*_impl__get_username)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_OAF_ObjectDirectory__get_hostname(POA_OAF_ObjectDirectory
						      * _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_char *
						      (*_impl__get_hostname)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_OAF_ObjectDirectory__get_domain(POA_OAF_ObjectDirectory *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    CORBA_char *
						    (*_impl__get_domain)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_OAF_ObjectDirectory_activate(POA_OAF_ObjectDirectory *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 CORBA_Object(*_impl_activate)
						 (PortableServer_Servant
						  _servant,
						  const OAF_ImplementationID
						  iid,
						  const OAF_ActivationContext
						  ac,
						  const OAF_ActivationFlags
						  flags, CORBA_Context _ctx,
						  CORBA_Environment * ev));
   void _ORBIT_skel_OAF_ObjectDirectory_lock(POA_OAF_ObjectDirectory *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_lock)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void _ORBIT_skel_OAF_ObjectDirectory_unlock(POA_OAF_ObjectDirectory *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_unlock)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_OAF_ObjectDirectory_register_new(POA_OAF_ObjectDirectory *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     OAF_RegistrationResult
						     (*_impl_register_new)
						     (PortableServer_Servant
						      _servant,
						      const
						      OAF_ImplementationID
						      iid,
						      const CORBA_Object obj,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_OAF_ObjectDirectory_unregister(POA_OAF_ObjectDirectory *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_unregister)
						   (PortableServer_Servant
						    _servant,
						    const OAF_ImplementationID
						    iid,
						    const CORBA_Object obj,
						    const
						    OAF_ObjectDirectory_UnregisterType
						    notify,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationContext__get_directories
      (POA_OAF_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       OAF_ObjectDirectoryList *
       (*_impl__get_directories) (PortableServer_Servant _servant,
				  CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationContext_add_directory
      (POA_OAF_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_add_directory) (PortableServer_Servant _servant,
				    const OAF_ObjectDirectory dir,
				    CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationContext_remove_directory
      (POA_OAF_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_remove_directory) (PortableServer_Servant _servant,
				       const OAF_ObjectDirectory dir,
				       CORBA_Environment * ev));
   void _ORBIT_skel_OAF_ActivationContext_activate(POA_OAF_ActivationContext *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   OAF_ActivationResult *
						   (*_impl_activate)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_char *
						    requirements,
						    const GNOME_stringlist *
						    selection_order,
						    const OAF_ActivationFlags
						    flags, CORBA_Context _ctx,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationContext_activate_async
      (POA_OAF_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_activate_async) (PortableServer_Servant _servant,
				     const CORBA_char * requirements,
				     const GNOME_stringlist * selection_order,
				     const OAF_ActivationFlags flags,
				     const OAF_ActivationCallback
				     callback_object, CORBA_Context _ctx,
				     CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationContext__get_servers(POA_OAF_ActivationContext
						     * _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     OAF_ServerInfoList *
						     (*_impl__get_servers)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_OAF_ActivationContext_query(POA_OAF_ActivationContext *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						OAF_ServerInfoList *
						(*_impl_query)
						(PortableServer_Servant
						 _servant,
						 const CORBA_char *
						 requirements,
						 const GNOME_stringlist *
						 selection_order,
						 CORBA_Context _ctx,
						 CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationContext_activate_from_id
      (POA_OAF_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       OAF_ActivationResult *
       (*_impl_activate_from_id) (PortableServer_Servant _servant,
				  const OAF_ActivationID aid,
				  const OAF_ActivationFlags flags,
				  CORBA_Context _ctx,
				  CORBA_Environment * ev));
   void
      _ORBIT_skel_OAF_ActivationContext_activate_from_id_async
      (POA_OAF_ActivationContext * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_activate_from_id_async) (PortableServer_Servant _servant,
					     const OAF_ActivationID aid,
					     const OAF_ActivationFlags flags,
					     const OAF_ActivationCallback
					     callback_object,
					     CORBA_Context _ctx,
					     CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
