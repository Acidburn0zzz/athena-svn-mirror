<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-soup-dns">
<refmeta>
<refentrytitle>soup-dns</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>soup-dns</refname><refpurpose>Low-level DNS routines</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="SoupDNSEntry">SoupDNSEntry</link>* <link linkend="soup-dns-entry-from-name">soup_dns_entry_from_name</link>      (const <link linkend="char">char</link> *name);
<link linkend="SoupDNSEntry">SoupDNSEntry</link>* <link linkend="soup-dns-entry-from-addr">soup_dns_entry_from_addr</link>      (<link linkend="gconstpointer">gconstpointer</link> addr,
                                             <link linkend="int">int</link> family);
<link linkend="gboolean">gboolean</link>    <link linkend="soup-dns-entry-check-lookup">soup_dns_entry_check_lookup</link>     (<link linkend="SoupDNSEntry">SoupDNSEntry</link> *entry);
<link linkend="void">void</link>        <link linkend="soup-dns-entry-cancel-lookup">soup_dns_entry_cancel_lookup</link>    (<link linkend="SoupDNSEntry">SoupDNSEntry</link> *entry);
<link linkend="void">void</link>        <link linkend="soup-dns-free-hostent">soup_dns_free_hostent</link>           (struct <link linkend="hostent">hostent</link> *h);
<link linkend="char">char</link>*       <link linkend="soup-dns-ntop">soup_dns_ntop</link>                   (<link linkend="gconstpointer">gconstpointer</link> addr,
                                             <link linkend="int">int</link> family);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="soup-dns-entry-from-name"/>soup_dns_entry_from_name ()</title>
<indexterm><primary>soup_dns_entry_from_name</primary></indexterm><programlisting><link linkend="SoupDNSEntry">SoupDNSEntry</link>* soup_dns_entry_from_name      (const <link linkend="char">char</link> *name);</programlisting>
<para>
Begins asynchronous resolution of <parameter>name</parameter>. The caller should
periodically call <link linkend="soup-dns-entry-check-lookup"><function>soup_dns_entry_check_lookup()</function></link> to see if it is
done, and call <link linkend="soup-dns-entry-get-hostent"><function>soup_dns_entry_get_hostent()</function></link> when
<link linkend="soup-dns-entry-check-lookup"><function>soup_dns_entry_check_lookup()</function></link> returns <literal>TRUE</literal>.
</para>
<para>
Currently, this routine forks and does the lookup, which can cause
some problems. In general, this will work ok for most programs most
of the time. It will be slow or even fail when using operating
systems that copy the entire process when forking.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a nice name (eg, mofo.eecs.umich.edu) or a dotted decimal name
  (eg, 141.213.8.59).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="SoupDNSEntry"><type>SoupDNSEntry</type></link>, which will be freed when you call
<link linkend="soup-dns-entry-get-hostent"><function>soup_dns_entry_get_hostent()</function></link> or <link linkend="soup-dns-entry-cancel-lookup"><function>soup_dns_entry_cancel_lookup()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-dns-entry-from-addr"/>soup_dns_entry_from_addr ()</title>
<indexterm><primary>soup_dns_entry_from_addr</primary></indexterm><programlisting><link linkend="SoupDNSEntry">SoupDNSEntry</link>* soup_dns_entry_from_addr      (<link linkend="gconstpointer">gconstpointer</link> addr,
                                             <link linkend="int">int</link> family);</programlisting>
<para>
Begins asynchronous resolution of <parameter>addr</parameter>. The caller should
periodically call <link linkend="soup-dns-entry-check-lookup"><function>soup_dns_entry_check_lookup()</function></link> to see if it is
done, and call <link linkend="soup-dns-entry-get-hostent"><function>soup_dns_entry_get_hostent()</function></link> when
<link linkend="soup-dns-entry-check-lookup"><function>soup_dns_entry_check_lookup()</function></link> returns <literal>TRUE</literal>.
</para>
<para>
Currently, this routine forks and does the lookup, which can cause
some problems. In general, this will work ok for most programs most
of the time. It will be slow or even fail when using operating
systems that copy the entire process when forking.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> pointer to address data (eg, an <link linkend="in-addr-t"><type>in_addr_t</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> address family of <parameter>addr</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="SoupDNSEntry"><type>SoupDNSEntry</type></link>, which will be freed when you call
<link linkend="soup-dns-entry-get-hostent"><function>soup_dns_entry_get_hostent()</function></link> or <link linkend="soup-dns-entry-cancel-lookup"><function>soup_dns_entry_cancel_lookup()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-dns-entry-check-lookup"/>soup_dns_entry_check_lookup ()</title>
<indexterm><primary>soup_dns_entry_check_lookup</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    soup_dns_entry_check_lookup     (<link linkend="SoupDNSEntry">SoupDNSEntry</link> *entry);</programlisting>
<para>
Checks if <parameter>entry</parameter> has finished resolving</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>entry</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupDNSEntry"><type>SoupDNSEntry</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if <parameter>entry</parameter> has finished resolving (either
successfully or not)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-dns-entry-cancel-lookup"/>soup_dns_entry_cancel_lookup ()</title>
<indexterm><primary>soup_dns_entry_cancel_lookup</primary></indexterm><programlisting><link linkend="void">void</link>        soup_dns_entry_cancel_lookup    (<link linkend="SoupDNSEntry">SoupDNSEntry</link> *entry);</programlisting>
<para>
Cancels the lookup for <parameter>entry</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>entry</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupDNSEntry"><type>SoupDNSEntry</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-dns-free-hostent"/>soup_dns_free_hostent ()</title>
<indexterm><primary>soup_dns_free_hostent</primary></indexterm><programlisting><link linkend="void">void</link>        soup_dns_free_hostent           (struct <link linkend="hostent">hostent</link> *h);</programlisting>
<para>
Frees <parameter>h</parameter>. Use this to free the return value from
<link linkend="soup-dns-entry-get-hostent"><function>soup_dns_entry_get_hostent()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>h</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="hostent"><type>hostent</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-dns-ntop"/>soup_dns_ntop ()</title>
<indexterm><primary>soup_dns_ntop</primary></indexterm><programlisting><link linkend="char">char</link>*       soup_dns_ntop                   (<link linkend="gconstpointer">gconstpointer</link> addr,
                                             <link linkend="int">int</link> family);</programlisting>
<para>
Converts <parameter>addr</parameter> into textual form (eg, "141.213.8.59"), like the
standard library function <link linkend="inet-ntop"><function>inet_ntop()</function></link>, except that the returned
string must be freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> pointer to address data (eg, an <link linkend="in-addr-t"><type>in_addr_t</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> address family of <parameter>addr</parameter> 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the text form or <parameter>addr</parameter>, which must be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
