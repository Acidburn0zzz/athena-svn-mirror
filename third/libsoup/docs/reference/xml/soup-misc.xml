<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-soup-misc">
<refmeta>
<refentrytitle>soup-misc</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>soup-misc</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="char">char</link>*       <link linkend="soup-base64-encode">soup_base64_encode</link>              (const <link linkend="char">char</link> *text,
                                             <link linkend="int">int</link> len);
<link linkend="int">int</link>         <link linkend="soup-base64-encode-close">soup_base64_encode_close</link>        (const <link linkend="guchar">guchar</link> *in,
                                             <link linkend="int">int</link> inlen,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guchar">guchar</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="int">int</link> *save);
<link linkend="int">int</link>         <link linkend="soup-base64-encode-step">soup_base64_encode_step</link>         (const <link linkend="guchar">guchar</link> *in,
                                             <link linkend="int">int</link> len,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guchar">guchar</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="int">int</link> *save);
<link linkend="char">char</link>*       <link linkend="soup-base64-decode">soup_base64_decode</link>              (const <link linkend="gchar">gchar</link> *text,
                                             <link linkend="int">int</link> *out_len);
<link linkend="int">int</link>         <link linkend="soup-base64-decode-step">soup_base64_decode_step</link>         (const <link linkend="guchar">guchar</link> *in,
                                             <link linkend="int">int</link> len,
                                             <link linkend="guchar">guchar</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="guint">guint</link> *save);
<link linkend="guint">guint</link>       <link linkend="soup-signal-connect-once">soup_signal_connect_once</link>        (<link linkend="gpointer">gpointer</link> instance,
                                             const <link linkend="char">char</link> *detailed_signal,
                                             <link linkend="GCallback">GCallback</link> c_handler,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="guint">guint</link>       <link linkend="soup-str-case-hash">soup_str_case_hash</link>              (<link linkend="gconstpointer">gconstpointer</link> key);
<link linkend="gboolean">gboolean</link>    <link linkend="soup-str-case-equal">soup_str_case_equal</link>             (<link linkend="gconstpointer">gconstpointer</link> v1,
                                             <link linkend="gconstpointer">gconstpointer</link> v2);
extern      gboolean <link linkend="soup-ssl-supported">soup_ssl_supported</link>;
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="soup-base64-encode"/>soup_base64_encode ()</title>
<indexterm><primary>soup_base64_encode</primary></indexterm><programlisting><link linkend="char">char</link>*       soup_base64_encode              (const <link linkend="char">char</link> *text,
                                             <link linkend="int">int</link> len);</programlisting>
<para>
Encode a sequence of binary data into it's Base-64 stringified
representation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> the binary data to encode.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> the length of <parameter>text</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The Base-64 encoded string representing <parameter>text</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-base64-encode-close"/>soup_base64_encode_close ()</title>
<indexterm><primary>soup_base64_encode_close</primary></indexterm><programlisting><link linkend="int">int</link>         soup_base64_encode_close        (const <link linkend="guchar">guchar</link> *in,
                                             <link linkend="int">int</link> inlen,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guchar">guchar</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="int">int</link> *save);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>break_lines</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-base64-encode-step"/>soup_base64_encode_step ()</title>
<indexterm><primary>soup_base64_encode_step</primary></indexterm><programlisting><link linkend="int">int</link>         soup_base64_encode_step         (const <link linkend="guchar">guchar</link> *in,
                                             <link linkend="int">int</link> len,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guchar">guchar</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="int">int</link> *save);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>break_lines</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-base64-decode"/>soup_base64_decode ()</title>
<indexterm><primary>soup_base64_decode</primary></indexterm><programlisting><link linkend="char">char</link>*       soup_base64_decode              (const <link linkend="gchar">gchar</link> *text,
                                             <link linkend="int">int</link> *out_len);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-base64-decode-step"/>soup_base64_decode_step ()</title>
<indexterm><primary>soup_base64_decode_step</primary></indexterm><programlisting><link linkend="int">int</link>         soup_base64_decode_step         (const <link linkend="guchar">guchar</link> *in,
                                             <link linkend="int">int</link> len,
                                             <link linkend="guchar">guchar</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="guint">guint</link> *save);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-signal-connect-once"/>soup_signal_connect_once ()</title>
<indexterm><primary>soup_signal_connect_once</primary></indexterm><programlisting><link linkend="guint">guint</link>       soup_signal_connect_once        (<link linkend="gpointer">gpointer</link> instance,
                                             const <link linkend="char">char</link> *detailed_signal,
                                             <link linkend="GCallback">GCallback</link> c_handler,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Connects a <link linkend="GCallback"><type>GCallback</type></link> function to a signal as with
<link linkend="g-signal-connect"><function>g_signal_connect()</function></link>, but automatically removes the signal handler
after its first invocation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>instance</parameter>&nbsp;:</term>
<listitem><simpara> an object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>detailed_signal</parameter>&nbsp;:</term>
<listitem><simpara> "signal-name" or "signal-name::detail" to connect to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c_handler</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GCallback"><type>GCallback</type></link> to connect
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>c_handler</parameter> calls
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the signal handler id
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-str-case-hash"/>soup_str_case_hash ()</title>
<indexterm><primary>soup_str_case_hash</primary></indexterm><programlisting><link linkend="guint">guint</link>       soup_str_case_hash              (<link linkend="gconstpointer">gconstpointer</link> key);</programlisting>
<para>
Hashes <parameter>key</parameter> in a case-insensitive manner.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> ASCII string to hash
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the hash code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-str-case-equal"/>soup_str_case_equal ()</title>
<indexterm><primary>soup_str_case_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    soup_str_case_equal             (<link linkend="gconstpointer">gconstpointer</link> v1,
                                             <link linkend="gconstpointer">gconstpointer</link> v2);</programlisting>
<para>
Compares <parameter>v1</parameter> and <parameter>v2</parameter> in a case-insensitive manner</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>v1</parameter>&nbsp;:</term>
<listitem><simpara> an ASCII string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v2</parameter>&nbsp;:</term>
<listitem><simpara> another ASCII string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if they are equal (modulo case)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-ssl-supported"/>soup_ssl_supported</title>
<indexterm><primary>soup_ssl_supported</primary></indexterm><programlisting>extern gboolean soup_ssl_supported;
</programlisting>
<para>

</para></refsect2>

</refsect1>




</refentry>
