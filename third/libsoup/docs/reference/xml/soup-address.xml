<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-SoupAddress">
<refmeta>
<refentrytitle>SoupAddress</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupAddress</refname><refpurpose>Higher-level IP address object</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="SoupAddressFamily">SoupAddressFamily</link>;
#define     <link linkend="SOUP-ADDRESS-ANY-PORT-CAPS">SOUP_ADDRESS_ANY_PORT</link>
<link linkend="SoupAddress">SoupAddress</link>* <link linkend="soup-address-new">soup_address_new</link>               (const <link linkend="char">char</link> *name,
                                             <link linkend="guint">guint</link> port);
<link linkend="SoupAddress">SoupAddress</link>* <link linkend="soup-address-new-from-sockaddr">soup_address_new_from_sockaddr</link> (struct <link linkend="sockaddr">sockaddr</link> *sa,
                                             <link linkend="int">int</link> len);
<link linkend="SoupAddress">SoupAddress</link>* <link linkend="soup-address-new-any">soup_address_new_any</link>           (<link linkend="SoupAddressFamily">SoupAddressFamily</link> family,
                                             <link linkend="guint">guint</link> port);
<link linkend="void">void</link>        (<link linkend="SoupAddressCallback">*SoupAddressCallback</link>)          (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                             <link linkend="guint">guint</link> status,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>        <link linkend="soup-address-resolve-async">soup_address_resolve_async</link>      (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                             <link linkend="SoupAddressCallback">SoupAddressCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="guint">guint</link>       <link linkend="soup-address-resolve-sync">soup_address_resolve_sync</link>       (<link linkend="SoupAddress">SoupAddress</link> *addr);
const <link linkend="char">char</link>* <link linkend="soup-address-get-name">soup_address_get_name</link>           (<link linkend="SoupAddress">SoupAddress</link> *addr);
const <link linkend="char">char</link>* <link linkend="soup-address-get-physical">soup_address_get_physical</link>       (<link linkend="SoupAddress">SoupAddress</link> *addr);
<link linkend="guint">guint</link>       <link linkend="soup-address-get-port">soup_address_get_port</link>           (<link linkend="SoupAddress">SoupAddress</link> *addr);

</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
<link linkend="SoupAddress"><type>SoupAddress</type></link> represents the address of a TCP connection endpoint; both
the IP address and the port. (It is somewhat like an object-oriented
version of struct <link linkend="sockaddr"><type>sockaddr</type></link>.)
</para>

<para>
If libsoup was built with IPv6 support, <link linkend="SoupAddress"><type>SoupAddress</type></link> will allow both
IPv4 and IPv6 addresses.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="SoupAddressFamily"/>enum SoupAddressFamily</title>
<indexterm><primary>SoupAddressFamily</primary></indexterm><programlisting>typedef enum {
	SOUP_ADDRESS_FAMILY_IPV4 = AF_INET,
	SOUP_ADDRESS_FAMILY_IPV6 = AF_INET6
} SoupAddressFamily;
</programlisting>
<para>
The supported address families. Note that the
<literal>SOUP_ADDRESS_FAMILY_IPV6</literal> constant is available even if libsoup was
built without IPv6 support, but attempting to create an IPv6 address
will fail in that case.
</para><variablelist role="enum">
<varlistentry>
<term><literal>SOUP_ADDRESS_FAMILY_IPV4</literal></term>
<listitem><simpara>an IPv4 address
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SOUP_ADDRESS_FAMILY_IPV6</literal></term>
<listitem><simpara>an IPv6 address

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SOUP-ADDRESS-ANY-PORT-CAPS"/>SOUP_ADDRESS_ANY_PORT</title>
<indexterm><primary>SOUP_ADDRESS_ANY_PORT</primary></indexterm><programlisting>#define SOUP_ADDRESS_ANY_PORT 0
</programlisting>
<para>
This can be passed to any <link linkend="SoupAddress"><type>SoupAddress</type></link> method that expects a port to
indicate that you don't care what port is used.
</para></refsect2>
<refsect2>
<title><anchor id="soup-address-new"/>soup_address_new ()</title>
<indexterm><primary>soup_address_new</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>* soup_address_new               (const <link linkend="char">char</link> *name,
                                             <link linkend="guint">guint</link> port);</programlisting>
<para>
Creates a <link linkend="SoupAddress"><type>SoupAddress</type></link> from <parameter>name</parameter> and <parameter>port</parameter>. The <link linkend="SoupAddress"><type>SoupAddress</type></link>'s IP
address may not be available right away; the caller can call
<link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link> or <link linkend="soup-address-resolve-sync"><function>soup_address_resolve_sync()</function></link> to
force a DNS resolution.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a hostname or physical address
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> a port number
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-new-from-sockaddr"/>soup_address_new_from_sockaddr ()</title>
<indexterm><primary>soup_address_new_from_sockaddr</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>* soup_address_new_from_sockaddr (struct <link linkend="sockaddr">sockaddr</link> *sa,
                                             <link linkend="int">int</link> len);</programlisting>
<para>
Returns a <link linkend="SoupAddress"><type>SoupAddress</type></link> equivalent to <parameter>sa</parameter> (or <literal>NULL</literal> if <parameter>sa</parameter>'s
address family isn't supported)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sa</parameter>&nbsp;:</term>
<listitem><simpara> a pointer to a sockaddr
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> size of <parameter>sa</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-new-any"/>soup_address_new_any ()</title>
<indexterm><primary>soup_address_new_any</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>* soup_address_new_any           (<link linkend="SoupAddressFamily">SoupAddressFamily</link> family,
                                             <link linkend="guint">guint</link> port);</programlisting>
<para>
Returns a <link linkend="SoupAddress"><type>SoupAddress</type></link> corresponding to the "any" address
for <parameter>family</parameter> (or <literal>NULL</literal> if <parameter>family</parameter> isn't supported), suitable for
passing to <link linkend="soup-socket-server-new"><function>soup_socket_server_new()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>family</parameter>&nbsp;:</term>
<listitem><simpara> the address family
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> the port number (usually <literal>SOUP_ADDRESS_ANY_PORT</literal>)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupAddressCallback"/>SoupAddressCallback ()</title>
<indexterm><primary>SoupAddressCallback</primary></indexterm><programlisting><link linkend="void">void</link>        (*SoupAddressCallback)          (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                             <link linkend="guint">guint</link> status,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
The callback function passed to <link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara>the <link linkend="SoupAddress"><type>SoupAddress</type></link> that was resolved
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara><literal>SOUP_STATUS_OK</literal> or <literal>SOUP_STATUS_CANT_RESOLVE</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>the user data that was passed to <link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-resolve-async"/>soup_address_resolve_async ()</title>
<indexterm><primary>soup_address_resolve_async</primary></indexterm><programlisting><link linkend="void">void</link>        soup_address_resolve_async      (<link linkend="SoupAddress">SoupAddress</link> *addr,
                                             <link linkend="SoupAddressCallback">SoupAddressCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Asynchronously resolves the missing half of <parameter>addr</parameter>. (Its IP address
if it was created with <link linkend="soup-address-new"><function>soup_address_new()</function></link>, or its hostname if it
was created with <link linkend="soup-address-new-from-sockaddr"><function>soup_address_new_from_sockaddr()</function></link> or
<link linkend="soup-address-new-any"><function>soup_address_new_any()</function></link>.) <parameter>callback</parameter> will be called when the
resolution finishes (successfully or not).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> callback to call with the result
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data for <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-resolve-sync"/>soup_address_resolve_sync ()</title>
<indexterm><primary>soup_address_resolve_sync</primary></indexterm><programlisting><link linkend="guint">guint</link>       soup_address_resolve_sync       (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Synchronously resolves the missing half of <parameter>addr</parameter>, as with
<link linkend="soup-address-resolve-async"><function>soup_address_resolve_async()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>SOUP_STATUS_OK</literal> or <literal>SOUP_STATUS_CANT_RESOLVE</literal>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-get-name"/>soup_address_get_name ()</title>
<indexterm><primary>soup_address_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>* soup_address_get_name           (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Returns the hostname associated with <parameter>addr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the hostname, or <literal>NULL</literal> if it is not known.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-get-physical"/>soup_address_get_physical ()</title>
<indexterm><primary>soup_address_get_physical</primary></indexterm><programlisting>const <link linkend="char">char</link>* soup_address_get_physical       (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Returns the physical address associated with <parameter>addr</parameter> as a string.
(Eg, "127.0.0.1"). If the address is not yet known, returns <literal>NULL</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the physical address, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-address-get-port"/>soup_address_get_port ()</title>
<indexterm><primary>soup_address_get_port</primary></indexterm><programlisting><link linkend="guint">guint</link>       soup_address_get_port           (<link linkend="SoupAddress">SoupAddress</link> *addr);</programlisting>
<para>
Returns the port associated with <parameter>addr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>addr</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the port
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
