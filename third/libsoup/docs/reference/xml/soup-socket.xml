<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-SoupSocket">
<refmeta>
<refentrytitle>SoupSocket</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupSocket</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="SOUP-SOCKET-FLAG-NONBLOCKING-CAPS">SOUP_SOCKET_FLAG_NONBLOCKING</link>
#define     <link linkend="SOUP-SOCKET-FLAG-NODELAY-CAPS">SOUP_SOCKET_FLAG_NODELAY</link>
#define     <link linkend="SOUP-SOCKET-FLAG-REUSEADDR-CAPS">SOUP_SOCKET_FLAG_REUSEADDR</link>
#define     <link linkend="SOUP-SOCKET-IS-SERVER-CAPS">SOUP_SOCKET_IS_SERVER</link>
#define     <link linkend="SOUP-SOCKET-SSL-CREDENTIALS-CAPS">SOUP_SOCKET_SSL_CREDENTIALS</link>
<link linkend="SoupSocket">SoupSocket</link>* <link linkend="soup-socket-new">soup_socket_new</link>                 (const <link linkend="char">char</link> *optname1,
                                             ...);
<link linkend="guint">guint</link>       <link linkend="soup-socket-connect">soup_socket_connect</link>             (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupAddress">SoupAddress</link> *remote_addr);
<link linkend="gboolean">gboolean</link>    <link linkend="soup-socket-listen">soup_socket_listen</link>              (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupAddress">SoupAddress</link> *local_addr);
<link linkend="gboolean">gboolean</link>    <link linkend="soup-socket-start-ssl">soup_socket_start_ssl</link>           (<link linkend="SoupSocket">SoupSocket</link> *sock);
<link linkend="void">void</link>        <link linkend="soup-socket-disconnect">soup_socket_disconnect</link>          (<link linkend="SoupSocket">SoupSocket</link> *sock);
<link linkend="gboolean">gboolean</link>    <link linkend="soup-socket-is-connected">soup_socket_is_connected</link>        (<link linkend="SoupSocket">SoupSocket</link> *sock);
<link linkend="void">void</link>        (<link linkend="SoupSocketCallback">*SoupSocketCallback</link>)           (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="guint">guint</link> status,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>        (<link linkend="SoupSocketListenerCallback">*SoupSocketListenerCallback</link>)   (<link linkend="SoupSocket">SoupSocket</link> *listener,
                                             <link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="SoupSocket">SoupSocket</link>* <link linkend="soup-socket-client-new-async">soup_socket_client_new_async</link>    (const <link linkend="char">char</link> *hostname,
                                             <link linkend="guint">guint</link> port,
                                             <link linkend="gpointer">gpointer</link> ssl_creds,
                                             <link linkend="SoupSocketCallback">SoupSocketCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="SoupSocket">SoupSocket</link>* <link linkend="soup-socket-client-new-sync">soup_socket_client_new_sync</link>     (const <link linkend="char">char</link> *hostname,
                                             <link linkend="guint">guint</link> port,
                                             <link linkend="gpointer">gpointer</link> ssl_creds,
                                             <link linkend="guint">guint</link> *status_ret);
<link linkend="SoupSocket">SoupSocket</link>* <link linkend="soup-socket-server-new">soup_socket_server_new</link>          (<link linkend="SoupAddress">SoupAddress</link> *local_addr,
                                             <link linkend="gpointer">gpointer</link> ssl_creds,
                                             <link linkend="SoupSocketListenerCallback">SoupSocketListenerCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="SoupAddress">SoupAddress</link>* <link linkend="soup-socket-get-local-address">soup_socket_get_local_address</link>  (<link linkend="SoupSocket">SoupSocket</link> *sock);
<link linkend="SoupAddress">SoupAddress</link>* <link linkend="soup-socket-get-remote-address">soup_socket_get_remote_address</link> (<link linkend="SoupSocket">SoupSocket</link> *sock);
enum        <link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>;
<link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link> <link linkend="soup-socket-read">soup_socket_read</link>         (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gpointer">gpointer</link> buffer,
                                             <link linkend="gsize">gsize</link> len,
                                             <link linkend="gsize">gsize</link> *nread);
<link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link> <link linkend="soup-socket-read-until">soup_socket_read_until</link>   (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gpointer">gpointer</link> buffer,
                                             <link linkend="gsize">gsize</link> len,
                                             <link linkend="gconstpointer">gconstpointer</link> boundary,
                                             <link linkend="gsize">gsize</link> boundary_len,
                                             <link linkend="gsize">gsize</link> *nread,
                                             <link linkend="gboolean">gboolean</link> *got_boundary);
<link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link> <link linkend="soup-socket-write">soup_socket_write</link>        (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gconstpointer">gconstpointer</link> buffer,
                                             <link linkend="gsize">gsize</link> len,
                                             <link linkend="gsize">gsize</link> *nwrote);

</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="SOUP-SOCKET-FLAG-NONBLOCKING-CAPS"/>SOUP_SOCKET_FLAG_NONBLOCKING</title>
<indexterm><primary>SOUP_SOCKET_FLAG_NONBLOCKING</primary></indexterm><programlisting>#define SOUP_SOCKET_FLAG_NONBLOCKING "non-blocking"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SOCKET-FLAG-NODELAY-CAPS"/>SOUP_SOCKET_FLAG_NODELAY</title>
<indexterm><primary>SOUP_SOCKET_FLAG_NODELAY</primary></indexterm><programlisting>#define SOUP_SOCKET_FLAG_NODELAY     "nodelay"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SOCKET-FLAG-REUSEADDR-CAPS"/>SOUP_SOCKET_FLAG_REUSEADDR</title>
<indexterm><primary>SOUP_SOCKET_FLAG_REUSEADDR</primary></indexterm><programlisting>#define SOUP_SOCKET_FLAG_REUSEADDR   "reuseaddr"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SOCKET-IS-SERVER-CAPS"/>SOUP_SOCKET_IS_SERVER</title>
<indexterm><primary>SOUP_SOCKET_IS_SERVER</primary></indexterm><programlisting>#define SOUP_SOCKET_IS_SERVER        "is-server"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SOCKET-SSL-CREDENTIALS-CAPS"/>SOUP_SOCKET_SSL_CREDENTIALS</title>
<indexterm><primary>SOUP_SOCKET_SSL_CREDENTIALS</primary></indexterm><programlisting>#define SOUP_SOCKET_SSL_CREDENTIALS  "ssl-creds"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="soup-socket-new"/>soup_socket_new ()</title>
<indexterm><primary>soup_socket_new</primary></indexterm><programlisting><link linkend="SoupSocket">SoupSocket</link>* soup_socket_new                 (const <link linkend="char">char</link> *optname1,
                                             ...);</programlisting>
<para>
Creates a new (disconnected) socket</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>optname1</parameter>&nbsp;:</term>
<listitem><simpara> name of first property to set (or <literal>NULL</literal>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> value of <parameter>optname1</parameter>, followed by additional property/value pairs
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new socket
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-connect"/>soup_socket_connect ()</title>
<indexterm><primary>soup_socket_connect</primary></indexterm><programlisting><link linkend="guint">guint</link>       soup_socket_connect             (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupAddress">SoupAddress</link> *remote_addr);</programlisting>
<para>
If <literal>SOUP_SOCKET_FLAG_NONBLOCKING</literal> has been set on the socket, this
begins asynchronously connecting to the given address. The socket
will emit <literal>connect_result</literal> when it succeeds or fails (but not before
returning from this function).
</para>
<para>
If <literal>SOUP_SOCKET_FLAG_NONBLOCKING</literal> has not been set, this will
attempt to synchronously connect.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> a client <link linkend="SoupSocket"><type>SoupSocket</type></link> (which must not already be connected)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remote_addr</parameter>&nbsp;:</term>
<listitem><simpara> address to connect to
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>SOUP_STATUS_CONTINUE</literal> if connecting asynchronously,
otherwise a success or failure code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-listen"/>soup_socket_listen ()</title>
<indexterm><primary>soup_socket_listen</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    soup_socket_listen              (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupAddress">SoupAddress</link> *local_addr);</programlisting>
<para>
Makes <parameter>sock</parameter> start listening on the given interface and port. When
connections come in, <parameter>sock</parameter> will emit <literal>new_connection</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> a server <link linkend="SoupSocket"><type>SoupSocket</type></link> (which must not already be connected or
listening)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>local_addr</parameter>&nbsp;:</term>
<listitem><simpara> Local address to bind to.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> whether or not <parameter>sock</parameter> is now listening.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-start-ssl"/>soup_socket_start_ssl ()</title>
<indexterm><primary>soup_socket_start_ssl</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    soup_socket_start_ssl           (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Starts using SSL on <parameter>socket</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> success or failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-disconnect"/>soup_socket_disconnect ()</title>
<indexterm><primary>soup_socket_disconnect</primary></indexterm><programlisting><link linkend="void">void</link>        soup_socket_disconnect          (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Disconnects <parameter>sock</parameter>. Any further read or write attempts on it will
fail.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-is-connected"/>soup_socket_is_connected ()</title>
<indexterm><primary>soup_socket_is_connected</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    soup_socket_is_connected        (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Tests if <parameter>sock</parameter> is connected to another host</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> or <literal>FALSE</literal>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupSocketCallback"/>SoupSocketCallback ()</title>
<indexterm><primary>SoupSocketCallback</primary></indexterm><programlisting><link linkend="void">void</link>        (*SoupSocketCallback)           (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="guint">guint</link> status,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The callback function passed to <link linkend="soup-socket-client-new-async"><function>soup_socket_client_new_async()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara>the <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara>an HTTP status code indicating success or failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupSocketListenerCallback"/>SoupSocketListenerCallback ()</title>
<indexterm><primary>SoupSocketListenerCallback</primary></indexterm><programlisting><link linkend="void">void</link>        (*SoupSocketListenerCallback)   (<link linkend="SoupSocket">SoupSocket</link> *listener,
                                             <link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The callback function passed to <link linkend="soup-socket-server-new"><function>soup_socket_server_new()</function></link>, which
receives new connections.
</para><variablelist role="params">
<varlistentry><term><parameter>listener</parameter>&nbsp;:</term>
<listitem><simpara>the listening <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara>the newly-received <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>the data passed to <link linkend="soup-socket-server-new"><function>soup_socket_server_new()</function></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-client-new-async"/>soup_socket_client_new_async ()</title>
<indexterm><primary>soup_socket_client_new_async</primary></indexterm><programlisting><link linkend="SoupSocket">SoupSocket</link>* soup_socket_client_new_async    (const <link linkend="char">char</link> *hostname,
                                             <link linkend="guint">guint</link> port,
                                             <link linkend="gpointer">gpointer</link> ssl_creds,
                                             <link linkend="SoupSocketCallback">SoupSocketCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Creates a connection to <parameter>hostname</parameter> and <parameter>port</parameter>. <parameter>callback</parameter> will be
called when the connection completes (or fails).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hostname</parameter>&nbsp;:</term>
<listitem><simpara> remote machine to connect to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> remote port to connect to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ssl_creds</parameter>&nbsp;:</term>
<listitem><simpara> SSL credentials structure, or <literal>NULL</literal> if not SSL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> callback to call when the socket is connected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data for <parameter>callback</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new socket (not yet ready for use).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-client-new-sync"/>soup_socket_client_new_sync ()</title>
<indexterm><primary>soup_socket_client_new_sync</primary></indexterm><programlisting><link linkend="SoupSocket">SoupSocket</link>* soup_socket_client_new_sync     (const <link linkend="char">char</link> *hostname,
                                             <link linkend="guint">guint</link> port,
                                             <link linkend="gpointer">gpointer</link> ssl_creds,
                                             <link linkend="guint">guint</link> *status_ret);</programlisting>
<para>
Creates a connection to <parameter>hostname</parameter> and <parameter>port</parameter>. If <parameter>status_ret</parameter> is not
<literal>NULL</literal>, it will contain a status code on return.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hostname</parameter>&nbsp;:</term>
<listitem><simpara> remote machine to connect to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara> remote port to connect to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ssl_creds</parameter>&nbsp;:</term>
<listitem><simpara> SSL credentials structure, or <literal>NULL</literal> if not SSL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_ret</parameter>&nbsp;:</term>
<listitem><simpara> pointer to return the soup status in
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the new socket, or <literal>NULL</literal> if it could not connect.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-server-new"/>soup_socket_server_new ()</title>
<indexterm><primary>soup_socket_server_new</primary></indexterm><programlisting><link linkend="SoupSocket">SoupSocket</link>* soup_socket_server_new          (<link linkend="SoupAddress">SoupAddress</link> *local_addr,
                                             <link linkend="gpointer">gpointer</link> ssl_creds,
                                             <link linkend="SoupSocketListenerCallback">SoupSocketListenerCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Create and open a new <link linkend="SoupSocket"><type>SoupSocket</type></link> listening on the specified
address. <parameter>callback</parameter> will be called each time a client connects,
with a new <link linkend="SoupSocket"><type>SoupSocket</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>local_addr</parameter>&nbsp;:</term>
<listitem><simpara> Local address to bind to. (Use <link linkend="soup-address-any-new"><function>soup_address_any_new()</function></link> to
accept connections on any local address)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ssl_creds</parameter>&nbsp;:</term>
<listitem><simpara> SSL credentials, or <literal>NULL</literal> if this is not an SSL server
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> Callback to call when a client connects
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new <link linkend="SoupSocket"><type>SoupSocket</type></link>, or NULL if there was a failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-get-local-address"/>soup_socket_get_local_address ()</title>
<indexterm><primary>soup_socket_get_local_address</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>* soup_socket_get_local_address  (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Returns the <link linkend="SoupAddress"><type>SoupAddress</type></link> corresponding to the local end of <parameter>sock</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-get-remote-address"/>soup_socket_get_remote_address ()</title>
<indexterm><primary>soup_socket_get_remote_address</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>* soup_socket_get_remote_address (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Returns the <link linkend="SoupAddress"><type>SoupAddress</type></link> corresponding to the remote end of <parameter>sock</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupSocketIOStatus"/>enum SoupSocketIOStatus</title>
<indexterm><primary>SoupSocketIOStatus</primary></indexterm><programlisting>typedef enum {
	SOUP_SOCKET_OK,
	SOUP_SOCKET_WOULD_BLOCK,
	SOUP_SOCKET_EOF,
	SOUP_SOCKET_ERROR
} SoupSocketIOStatus;
</programlisting>
<para>
Return value from the <link linkend="SoupSocket"><type>SoupSocket</type></link> IO methods.
</para><variablelist role="enum">
<varlistentry>
<term><literal>SOUP_SOCKET_OK</literal></term>
<listitem><simpara>Success
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SOUP_SOCKET_WOULD_BLOCK</literal></term>
<listitem><simpara>Cannot read/write any more at this time
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SOUP_SOCKET_EOF</literal></term>
<listitem><simpara>End of file
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>SOUP_SOCKET_ERROR</literal></term>
<listitem><simpara>Other error

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-read"/>soup_socket_read ()</title>
<indexterm><primary>soup_socket_read</primary></indexterm><programlisting><link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link> soup_socket_read         (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gpointer">gpointer</link> buffer,
                                             <link linkend="gsize">gsize</link> len,
                                             <link linkend="gsize">gsize</link> *nread);</programlisting>
<para>
Attempts to read up to <parameter>len</parameter> bytes from <parameter>sock</parameter> into <parameter>buffer</parameter>. If some
data is successfully read, <link linkend="soup-socket-read"><function>soup_socket_read()</function></link> will return
<literal>SOUP_SOCKET_OK</literal>, and *<parameter>nread</parameter> will contain the number of bytes
actually read.
</para>
<para>
If <parameter>sock</parameter> is non-blocking, and no data is available, the return
value will be <literal>SOUP_SOCKET_WOULD_BLOCK</literal>. In this case, the caller
can connect to the <literal>readable</literal> signal to know when there is more data
to read. (NB: You MUST read all available data off the socket
first. The <literal>readable</literal> signal will only be emitted after
<link linkend="soup-socket-read"><function>soup_socket_read()</function></link> has returned <literal>SOUP_SOCKET_WOULD_BLOCK</literal>.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to read into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> size of <parameter>buffer</parameter> in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nread</parameter>&nbsp;:</term>
<listitem><simpara> on return, the number of bytes read into <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="SoupSocketIOStatus"><type>SoupSocketIOStatus</type></link>, as described above (or
<literal>SOUP_SOCKET_EOF</literal> if the socket is no longer connected, or
<literal>SOUP_SOCKET_ERROR</literal> on any other error).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-read-until"/>soup_socket_read_until ()</title>
<indexterm><primary>soup_socket_read_until</primary></indexterm><programlisting><link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link> soup_socket_read_until   (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gpointer">gpointer</link> buffer,
                                             <link linkend="gsize">gsize</link> len,
                                             <link linkend="gconstpointer">gconstpointer</link> boundary,
                                             <link linkend="gsize">gsize</link> boundary_len,
                                             <link linkend="gsize">gsize</link> *nread,
                                             <link linkend="gboolean">gboolean</link> *got_boundary);</programlisting>
<para>
Like <link linkend="soup-socket-read"><function>soup_socket_read()</function></link>, but reads no further than the first
occurrence of <parameter>boundary</parameter>. (If the boundary is found, it will be
included in the returned data, and *<parameter>got_boundary</parameter> will be set to
<literal>TRUE</literal>.) Any data after the boundary will returned in future reads.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer to read into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> size of <parameter>buffer</parameter> in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>boundary</parameter>&nbsp;:</term>
<listitem><simpara> boundary to read until
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>boundary_len</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>boundary</parameter> in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nread</parameter>&nbsp;:</term>
<listitem><simpara> on return, the number of bytes read into <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>got_boundary</parameter>&nbsp;:</term>
<listitem><simpara> on return, whether or not the data in <parameter>buffer</parameter>
ends with the boundary string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> as for <link linkend="soup-socket-read"><function>soup_socket_read()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-socket-write"/>soup_socket_write ()</title>
<indexterm><primary>soup_socket_write</primary></indexterm><programlisting><link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link> soup_socket_write        (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="gconstpointer">gconstpointer</link> buffer,
                                             <link linkend="gsize">gsize</link> len,
                                             <link linkend="gsize">gsize</link> *nwrote);</programlisting>
<para>
Attempts to write <parameter>len</parameter> bytes from <parameter>buffer</parameter> to <parameter>sock</parameter>. If some data is
successfully written, the resturn status will be
<literal>SOUP_SOCKET_SUCCESS</literal>, and *<parameter>nwrote</parameter> will contain the number of bytes
actually written.
</para>
<para>
If <parameter>sock</parameter> is non-blocking, and no data could be written right away,
the return value will be <literal>SOUP_SOCKET_WOULD_BLOCK</literal>. In this case,
the caller can connect to the <literal>writable</literal> signal to know when more
data can be written. (NB: <literal>writable</literal> is only emitted after a
<literal>SOUP_SOCKET_WOULD_BLOCK</literal>.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> data to write
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> size of <parameter>buffer</parameter>, in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nwrote</parameter>&nbsp;:</term>
<listitem><simpara> on return, number of bytes written
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a <link linkend="SoupSocketIOStatus"><type>SoupSocketIOStatus</type></link>, as described above (or
<literal>SOUP_SOCKET_EOF</literal> or <literal>SOUP_SOCKET_ERROR</literal>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
