<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-soup-message-private">
<refmeta>
<refentrytitle>soup-message-private</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>soup-message-private</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="void">void</link>        <link linkend="soup-message-run-handlers">soup_message_run_handlers</link>       (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase);
<link linkend="void">void</link>        <link linkend="soup-message-cleanup-response">soup_message_cleanup_response</link>   (<link linkend="SoupMessage">SoupMessage</link> *req);
<link linkend="void">void</link>        (<link linkend="SoupMessageGetHeadersFn">*SoupMessageGetHeadersFn</link>)      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="GString">GString</link> *headers,
                                             <link linkend="SoupTransferEncoding">SoupTransferEncoding</link> *encoding,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="guint">guint</link>       (<link linkend="SoupMessageParseHeadersFn">*SoupMessageParseHeadersFn</link>)    (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="char">char</link> *headers,
                                             <link linkend="guint">guint</link> header_len,
                                             <link linkend="SoupTransferEncoding">SoupTransferEncoding</link> *encoding,
                                             <link linkend="guint">guint</link> *content_len,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>        <link linkend="soup-message-io-client">soup_message_io_client</link>          (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupMessageGetHeadersFn">SoupMessageGetHeadersFn</link> get_headers_cb,
                                             <link linkend="SoupMessageParseHeadersFn">SoupMessageParseHeadersFn</link> parse_headers_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>        <link linkend="soup-message-io-server">soup_message_io_server</link>          (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupMessageGetHeadersFn">SoupMessageGetHeadersFn</link> get_headers_cb,
                                             <link linkend="SoupMessageParseHeadersFn">SoupMessageParseHeadersFn</link> parse_headers_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="soup-message-run-handlers"/>soup_message_run_handlers ()</title>
<indexterm><primary>soup_message_run_handlers</primary></indexterm><programlisting><link linkend="void">void</link>        soup_message_run_handlers       (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="SoupHandlerPhase">SoupHandlerPhase</link> phase);</programlisting>
<para>
Run each <parameter>invoke_phase</parameter> handler on <parameter>msg</parameter>. If a handler requeues the
message, we stop processing at that point.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>phase</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-cleanup-response"/>soup_message_cleanup_response ()</title>
<indexterm><primary>soup_message_cleanup_response</primary></indexterm><programlisting><link linkend="void">void</link>        soup_message_cleanup_response   (<link linkend="SoupMessage">SoupMessage</link> *req);</programlisting>
<para>
Cleans up all response data on <parameter>req</parameter>, so that the request can be sent
again and receive a new response. (Eg, as a result of a redirect or
authorization request.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>req</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupMessageGetHeadersFn"/>SoupMessageGetHeadersFn ()</title>
<indexterm><primary>SoupMessageGetHeadersFn</primary></indexterm><programlisting><link linkend="void">void</link>        (*SoupMessageGetHeadersFn)      (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="GString">GString</link> *headers,
                                             <link linkend="SoupTransferEncoding">SoupTransferEncoding</link> *encoding,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>headers</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>encoding</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupMessageParseHeadersFn"/>SoupMessageParseHeadersFn ()</title>
<indexterm><primary>SoupMessageParseHeadersFn</primary></indexterm><programlisting><link linkend="guint">guint</link>       (*SoupMessageParseHeadersFn)    (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="char">char</link> *headers,
                                             <link linkend="guint">guint</link> header_len,
                                             <link linkend="SoupTransferEncoding">SoupTransferEncoding</link> *encoding,
                                             <link linkend="guint">guint</link> *content_len,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>headers</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>header_len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>encoding</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content_len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-io-client"/>soup_message_io_client ()</title>
<indexterm><primary>soup_message_io_client</primary></indexterm><programlisting><link linkend="void">void</link>        soup_message_io_client          (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupMessageGetHeadersFn">SoupMessageGetHeadersFn</link> get_headers_cb,
                                             <link linkend="SoupMessageParseHeadersFn">SoupMessageParseHeadersFn</link> parse_headers_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Begins the process of sending <parameter>msg</parameter> across <parameter>sock</parameter>.
</para>
<para>
Don't call this. Use <link linkend="soup-message-send-request"><function>soup_message_send_request()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> socket to send <parameter>msg</parameter> across
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>get_headers_cb</parameter>&nbsp;:</term>
<listitem><simpara> callback function to generate request headers
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parse_headers_cb</parameter>&nbsp;:</term>
<listitem><simpara> callback function to parse response headers
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to the callbacks
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-message-io-server"/>soup_message_io_server ()</title>
<indexterm><primary>soup_message_io_server</primary></indexterm><programlisting><link linkend="void">void</link>        soup_message_io_server          (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                             <link linkend="SoupSocket">SoupSocket</link> *sock,
                                             <link linkend="SoupMessageGetHeadersFn">SoupMessageGetHeadersFn</link> get_headers_cb,
                                             <link linkend="SoupMessageParseHeadersFn">SoupMessageParseHeadersFn</link> parse_headers_cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Begins the process of receiving a request from <parameter>sock</parameter> into <parameter>msg</parameter>.
</para>
<para>
Don't use this. Use <link linkend="soup-message-receive-request"><function>soup_message_receive_request()</function></link> instead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> an empty <link linkend="SoupServerMessage"><type>SoupServerMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sock</parameter>&nbsp;:</term>
<listitem><simpara> socket to receive a request on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>get_headers_cb</parameter>&nbsp;:</term>
<listitem><simpara> callback function to generate response headers
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parse_headers_cb</parameter>&nbsp;:</term>
<listitem><simpara> callback function to parse request headers
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to the callbacks
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
