/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef GNOME_Yelp_H
#define GNOME_Yelp_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <bonobo/Bonobo.h>
#if !defined(ORBIT_DECL_GNOME_Yelp) && !defined(_GNOME_Yelp_defined)
#define ORBIT_DECL_GNOME_Yelp 1
#define _GNOME_Yelp_defined 1
#define GNOME_Yelp__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_Yelp;
   extern CORBA_unsigned_long GNOME_Yelp__classid;
#if !defined(TC_IMPL_TC_GNOME_Yelp_0)
#define TC_IMPL_TC_GNOME_Yelp_0 'G'
#define TC_IMPL_TC_GNOME_Yelp_1 'N'
#define TC_IMPL_TC_GNOME_Yelp_2 'O'
#define TC_IMPL_TC_GNOME_Yelp_3 'M'
#define TC_IMPL_TC_GNOME_Yelp_4 'E'
#define TC_IMPL_TC_GNOME_Yelp_5 '_'
#define TC_IMPL_TC_GNOME_Yelp_6 'Y'
#define TC_IMPL_TC_GNOME_Yelp_7 'e'
#define TC_IMPL_TC_GNOME_Yelp_8 'l'
#define TC_IMPL_TC_GNOME_Yelp_9 'p'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Yelp
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Yelp_struct;
#define TC_GNOME_Yelp ((CORBA_TypeCode)&TC_GNOME_Yelp_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'N'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'O'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'E'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'Y'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 'p'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_string *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'N'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'O'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'E'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'Y'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 'p'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Yelp
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_GNOME_Yelp_WindowList_defined)
#define _GNOME_Yelp_WindowList_defined 1
   typedef CORBA_sequence_CORBA_string GNOME_Yelp_WindowList;
#define GNOME_Yelp_WindowList_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define GNOME_Yelp_WindowList_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_Yelp_WindowList_0)
#define TC_IMPL_TC_GNOME_Yelp_WindowList_0 'G'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_1 'N'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_2 'O'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_3 'M'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_4 'E'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_5 '_'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_6 'Y'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_7 'e'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_8 'l'
#define TC_IMPL_TC_GNOME_Yelp_WindowList_9 'p'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Yelp
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Yelp_WindowList_struct;
#define TC_GNOME_Yelp_WindowList ((CORBA_TypeCode)&TC_GNOME_Yelp_WindowList_struct)
#endif
#define GNOME_Yelp_WindowList__alloc() ((GNOME_Yelp_WindowList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define GNOME_Yelp_WindowList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define GNOME_Yelp_WindowList_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif

/** POA structures **/
#ifndef _defined_POA_GNOME_Yelp
#define _defined_POA_GNOME_Yelp 1
   typedef struct
   {
      void *_private;
      void (*newWindow) (PortableServer_Servant _servant,
			 const CORBA_char * url, CORBA_Environment * ev);
      GNOME_Yelp_WindowList *(*getWindows) (PortableServer_Servant _servant,
					    CORBA_Environment * ev);
   } POA_GNOME_Yelp__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_Yelp__epv *GNOME_Yelp_epv;
   } POA_GNOME_Yelp__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_Yelp__vepv *vepv;
   } POA_GNOME_Yelp;
   extern void POA_GNOME_Yelp__init(PortableServer_Servant servant,
				    CORBA_Environment * ev);
   extern void POA_GNOME_Yelp__fini(PortableServer_Servant servant,
				    CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_Yelp */

/** skel prototypes **/
   void _ORBIT_skel_small_GNOME_Yelp_newWindow(POA_GNOME_Yelp *
					       _ORBIT_servant,
					       gpointer _ORBIT_retval,
					       gpointer * _ORBIT_args,
					       CORBA_Context ctx,
					       CORBA_Environment * ev,
					       void (*_impl_newWindow)
					       (PortableServer_Servant
						_servant,
						const CORBA_char * url,
						CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Yelp_getWindows(POA_GNOME_Yelp *
						_ORBIT_servant,
						gpointer _ORBIT_retval,
						gpointer * _ORBIT_args,
						CORBA_Context ctx,
						CORBA_Environment * ev,
						GNOME_Yelp_WindowList *
						(*_impl_getWindows)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));

/** stub prototypes **/
#define GNOME_Yelp_ref Bonobo_Unknown_ref
#define GNOME_Yelp_unref Bonobo_Unknown_unref
#define GNOME_Yelp_queryInterface Bonobo_Unknown_queryInterface
   void GNOME_Yelp_newWindow(GNOME_Yelp _obj, const CORBA_char * url,
			     CORBA_Environment * ev);
   GNOME_Yelp_WindowList *GNOME_Yelp_getWindows(GNOME_Yelp _obj,
						CORBA_Environment * ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_GNOME_Yelp
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_Yelp__iinterface;
#define GNOME_Yelp_IMETHODS_LEN 2
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Yelp
   static
#else
   extern
#endif
   ORBit_IMethod GNOME_Yelp__imethods[GNOME_Yelp_IMETHODS_LEN];
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif				/* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
