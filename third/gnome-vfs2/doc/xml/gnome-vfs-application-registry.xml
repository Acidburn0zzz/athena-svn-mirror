<refentry id="gnome-vfs-20-gnome-vfs-application-registry">
<refmeta>
<refentrytitle>Application Registry</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS-2.0 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Application Registry</refname><refpurpose>
stores supported MIME types and URIs of various applications</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="GNOME-VFS-APPLICATION-REGISTRY-COMMAND-CAPS">GNOME_VFS_APPLICATION_REGISTRY_COMMAND</link>
#define     <link linkend="GNOME-VFS-APPLICATION-REGISTRY-NAME-CAPS">GNOME_VFS_APPLICATION_REGISTRY_NAME</link>
#define     <link linkend="GNOME-VFS-APPLICATION-REGISTRY-CAN-OPEN-MULTIPLE-FILES-CAPS">GNOME_VFS_APPLICATION_REGISTRY_CAN_OPEN_MULTIPLE_FILES</link>
#define     <link linkend="GNOME-VFS-APPLICATION-REGISTRY-REQUIRES-TERMINAL-CAPS">GNOME_VFS_APPLICATION_REGISTRY_REQUIRES_TERMINAL</link>
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-application-registry-exists">gnome_vfs_application_registry_exists</link>
                                            (const <link linkend="char">char</link> *app_id);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-application-registry-get-keys">gnome_vfs_application_registry_get_keys</link>
                                            (const <link linkend="char">char</link> *app_id);
const <link linkend="char">char</link>* <link linkend="gnome-vfs-application-registry-peek-value">gnome_vfs_application_registry_peek_value</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-application-registry-get-bool-value">gnome_vfs_application_registry_get_bool_value</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key,
                                             <link linkend="gboolean">gboolean</link> *got_key);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-remove-application">gnome_vfs_application_registry_remove_application</link>
                                            (const <link linkend="char">char</link> *app_id);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-set-value">gnome_vfs_application_registry_set_value</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key,
                                             const <link linkend="char">char</link> *value);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-set-bool-value">gnome_vfs_application_registry_set_bool_value</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key,
                                             <link linkend="gboolean">gboolean</link> value);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-unset-key">gnome_vfs_application_registry_unset_key</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-application-registry-get-applications">gnome_vfs_application_registry_get_applications</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-application-registry-get-mime-types">gnome_vfs_application_registry_get_mime_types</link>
                                            (const <link linkend="char">char</link> *app_id);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-application-registry-supports-mime-type">gnome_vfs_application_registry_supports_mime_type</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *mime_type);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-application-registry-supports-uri-scheme">gnome_vfs_application_registry_supports_uri_scheme</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *uri_scheme);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-application-is-user-owned-application">gnome_vfs_application_is_user_owned_application</link>
                                            (const <link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-clear-mime-types">gnome_vfs_application_registry_clear_mime_types</link>
                                            (const <link linkend="char">char</link> *app_id);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-add-mime-type">gnome_vfs_application_registry_add_mime_type</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *mime_type);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-remove-mime-type">gnome_vfs_application_registry_remove_mime_type</link>
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *mime_type);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-application-registry-sync">gnome_vfs_application_registry_sync</link>
                                            (void);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-shutdown">gnome_vfs_application_registry_shutdown</link>
                                            (void);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-reload">gnome_vfs_application_registry_reload</link>
                                            (void);
<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* <link linkend="gnome-vfs-application-registry-get-mime-application">gnome_vfs_application_registry_get_mime_application</link>
                                            (const <link linkend="char">char</link> *app_id);
<link linkend="void">void</link>        <link linkend="gnome-vfs-application-registry-save-mime-application">gnome_vfs_application_registry_save_mime_application</link>
                                            (const <link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GNOME-VFS-APPLICATION-REGISTRY-COMMAND-CAPS"/>GNOME_VFS_APPLICATION_REGISTRY_COMMAND</title>
<indexterm><primary>GNOME_VFS_APPLICATION_REGISTRY_COMMAND</primary></indexterm><programlisting>#define GNOME_VFS_APPLICATION_REGISTRY_COMMAND "command"
</programlisting>
<para>
Application registry key for fetching the command to execute
an application.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-APPLICATION-REGISTRY-NAME-CAPS"/>GNOME_VFS_APPLICATION_REGISTRY_NAME</title>
<indexterm><primary>GNOME_VFS_APPLICATION_REGISTRY_NAME</primary></indexterm><programlisting>#define GNOME_VFS_APPLICATION_REGISTRY_NAME "name"
</programlisting>
<para>
Application registry key for fetching the name of an application.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-APPLICATION-REGISTRY-CAN-OPEN-MULTIPLE-FILES-CAPS"/>GNOME_VFS_APPLICATION_REGISTRY_CAN_OPEN_MULTIPLE_FILES</title>
<indexterm><primary>GNOME_VFS_APPLICATION_REGISTRY_CAN_OPEN_MULTIPLE_FILES</primary></indexterm><programlisting>#define GNOME_VFS_APPLICATION_REGISTRY_CAN_OPEN_MULTIPLE_FILES "can_open_multiple_files"
</programlisting>
<para>
Application registry key for determining if an application 
can open multiple files in the same invocation.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-APPLICATION-REGISTRY-REQUIRES-TERMINAL-CAPS"/>GNOME_VFS_APPLICATION_REGISTRY_REQUIRES_TERMINAL</title>
<indexterm><primary>GNOME_VFS_APPLICATION_REGISTRY_REQUIRES_TERMINAL</primary></indexterm><programlisting>#define GNOME_VFS_APPLICATION_REGISTRY_REQUIRES_TERMINAL "requires_terminal"
</programlisting>
<para>
Application registry key for determining if an application
needs to run from within a terminal (for example, mpg123)</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-exists"/>gnome_vfs_application_registry_exists ()</title>
<indexterm><primary>gnome_vfs_application_registry_exists</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_application_registry_exists
                                            (const <link linkend="char">char</link> *app_id);</programlisting>
<para>
This function will return TRUE if there is an entry for <parameter>app_id</parameter> in
the registry, otherwise FALSE.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> an application ID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if the application is in the registry, FALSE if not 

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-get-keys"/>gnome_vfs_application_registry_get_keys ()</title>
<indexterm><primary>gnome_vfs_application_registry_get_keys</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_application_registry_get_keys
                                            (const <link linkend="char">char</link> *app_id);</programlisting>
<para>
This function wil return a list of strings which is the list of
keys set for <parameter>app_id</parameter> in the application registry.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> the application ID for which to get keys
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A list of the keys set for <parameter>app_id</parameter>

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-peek-value"/>gnome_vfs_application_registry_peek_value ()</title>
<indexterm><primary>gnome_vfs_application_registry_peek_value</primary></indexterm><programlisting>const <link linkend="char">char</link>* gnome_vfs_application_registry_peek_value
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key);</programlisting>
<para>
This will return the value associated with <parameter>key</parameter> for <parameter>app_id</parameter> in the
application registry. There is no need to free the return value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> the application ID for which to look up a value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> the key to look up
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the value associated with the key, or NULL if there is no
associated value

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-get-bool-value"/>gnome_vfs_application_registry_get_bool_value ()</title>
<indexterm><primary>gnome_vfs_application_registry_get_bool_value</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_application_registry_get_bool_value
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key,
                                             <link linkend="gboolean">gboolean</link> *got_key);</programlisting>
<para>
This will look up a key in the structure pointed to by app_id and return the
boolean value of that key.  It will return false if there are no
applications associated with the app_id.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara>  registry id of the application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> key to look up
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>got_key</parameter>&nbsp;:</term>
<listitem><simpara> TRUE if a setting was dound, otherwise FALSE
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if <parameter>key</parameter> is set to "true" or "yes" for <parameter>app_id</parameter>, otherwise FALSE

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-remove-application"/>gnome_vfs_application_registry_remove_application ()</title>
<indexterm><primary>gnome_vfs_application_registry_remove_application</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_remove_application
                                            (const <link linkend="char">char</link> *app_id);</programlisting>
<para>
Given the registry id this function will remove all applications that has
been set by the user.  You will need to call
gnome_vfs_application_registry_sync to save the changes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara>  registry id of the application
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-set-value"/>gnome_vfs_application_registry_set_value ()</title>
<indexterm><primary>gnome_vfs_application_registry_set_value</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_set_value
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key,
                                             const <link linkend="char">char</link> *value);</programlisting>
<para>
This function will set values pertaining to registry entry pointed to by
app_id.  You will need to call gnome_vfs_application_registry_sync to
realize the changes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara>  registry id of the application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> target key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> value to set the target key to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-set-bool-value"/>gnome_vfs_application_registry_set_bool_value ()</title>
<indexterm><primary>gnome_vfs_application_registry_set_bool_value</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_set_bool_value
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key,
                                             <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
This function will modify those registry values that are of type boolean to
a value specified by the user.  You will need to call
gnome_vfs_application_registry_sync to save your changes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara>  registry id of the application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> target key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> value you want to set the target key to
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-unset-key"/>gnome_vfs_application_registry_unset_key ()</title>
<indexterm><primary>gnome_vfs_application_registry_unset_key</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_unset_key
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *key);</programlisting>
<para>
This function given the application and the target will wipe the current
value that the key contains.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> registry id of the application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> search key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-get-applications"/>gnome_vfs_application_registry_get_applications ()</title>
<indexterm><primary>gnome_vfs_application_registry_get_applications</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_application_registry_get_applications
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
This will return all applications from the registry that are associated with
the given mime type string, if NULL it returns all applications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>  mime type string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a list of the application IDs for all applications which
support the given mime type.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-get-mime-types"/>gnome_vfs_application_registry_get_mime_types ()</title>
<indexterm><primary>gnome_vfs_application_registry_get_mime_types</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_application_registry_get_mime_types
                                            (const <link linkend="char">char</link> *app_id);</programlisting>
<para>
This function returns a list of strings that represent the mime
types that can be handled by an application.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> registry id of application
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a list of the mime types supported

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-supports-mime-type"/>gnome_vfs_application_registry_supports_mime_type ()</title>
<indexterm><primary>gnome_vfs_application_registry_supports_mime_type</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_application_registry_supports_mime_type
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Use this function to see if there is an application associated with a given
mime type.  The function will return true or false.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> registry id of application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> mime type string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if <parameter>app_id</parameter> supports <parameter>mime_type</parameter>, otherwise FALSE.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-supports-uri-scheme"/>gnome_vfs_application_registry_supports_uri_scheme ()</title>
<indexterm><primary>gnome_vfs_application_registry_supports_uri_scheme</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_application_registry_supports_uri_scheme
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *uri_scheme);</programlisting>
<para>
Given the id of the application this function will determine if the
uri scheme will given is supported.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> registry id of application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri_scheme</parameter>&nbsp;:</term>
<listitem><simpara> uri schme string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if <parameter>app_id</parameter> supports <parameter>uri_scheme</parameter>, otherwise FALSE

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-is-user-owned-application"/>gnome_vfs_application_is_user_owned_application ()</title>
<indexterm><primary>gnome_vfs_application_is_user_owned_application</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_application_is_user_owned_application
                                            (const <link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);</programlisting>
<para>
This function will determine if a mime application is user owned or not.  By
user ownered this means that the application is not a system application
located in the prerequisite /usr area but rather in the user's area.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>application</parameter>&nbsp;:</term>
<listitem><simpara>  data structure of the mime application
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> gboolean
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-clear-mime-types"/>gnome_vfs_application_registry_clear_mime_types ()</title>
<indexterm><primary>gnome_vfs_application_registry_clear_mime_types</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_clear_mime_types
                                            (const <link linkend="char">char</link> *app_id);</programlisting>
<para>
This function will remove the mime types associated with the application.
Changes are not realized until the  gnome_vfs_application_registry_sync
function is called to save the changes to the file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> Application id
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-add-mime-type"/>gnome_vfs_application_registry_add_mime_type ()</title>
<indexterm><primary>gnome_vfs_application_registry_add_mime_type</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_add_mime_type
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
This function will associate a mime type with an application given the   
application registry id and the mime type.  Changes are not realized until
the gnome_vfs_application_registry_sync function is called to save the
changes to the file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> registry id of application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> mime type string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-remove-mime-type"/>gnome_vfs_application_registry_remove_mime_type ()</title>
<indexterm><primary>gnome_vfs_application_registry_remove_mime_type</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_remove_mime_type
                                            (const <link linkend="char">char</link> *app_id,
                                             const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
This function will de-associate a mime type from an application registry.  
Given the application registry id and the mime type.  Changes are not
realized until the gnome_vfs_application_registry_sync function is called to
save the changes to the file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara> registry id of the application
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> mime type string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-sync"/>gnome_vfs_application_registry_sync ()</title>
<indexterm><primary>gnome_vfs_application_registry_sync</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_application_registry_sync
                                            (void);</programlisting>
<para>
This function will sync the registry.  Typically you would use this function
after a modification of the registry.  When you modify the registry a dirty
flag is set.  Calling this function will save your modifications to disk and
reset the flag.
</para>
<para>
If successful, will return GNOME_VFS_OK</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GnomeVFSResult

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-shutdown"/>gnome_vfs_application_registry_shutdown ()</title>
<indexterm><primary>gnome_vfs_application_registry_shutdown</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_shutdown
                                            (void);</programlisting>
<para>
Synchronize gnome-vfs application registry data to disk, and free
resources.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-reload"/>gnome_vfs_application_registry_reload ()</title>
<indexterm><primary>gnome_vfs_application_registry_reload</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_reload
                                            (void);</programlisting>
<para>
If this function is called for the first time it will initialize the
registry.  Subsequent calls to the function will clear out the current
registry contents and load registry contents from the save file.  Make
certain that you've saved your registry before calling this function.  It
will destroy unsaved changes.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-get-mime-application"/>gnome_vfs_application_registry_get_mime_application ()</title>
<indexterm><primary>gnome_vfs_application_registry_get_mime_application</primary></indexterm><programlisting><link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* gnome_vfs_application_registry_get_mime_application
                                            (const <link linkend="char">char</link> *app_id);</programlisting>
<para>
Returns a structure that contains the application that handles
the mime type associated by the application referred by app_id.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_id</parameter>&nbsp;:</term>
<listitem><simpara>  registry id of the application
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GnomeVFSMimeApplication

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-application-registry-save-mime-application"/>gnome_vfs_application_registry_save_mime_application ()</title>
<indexterm><primary>gnome_vfs_application_registry_save_mime_application</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_application_registry_save_mime_application
                                            (const <link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);</programlisting>
<para>
This will save to the registry the application that will be associated with
a defined mime type.  The defined mime type is located within the
GnomeVFSMimeApplication structure.  Changes are not realized until the
gnome_vfs_application_registry_sync function is called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>application</parameter>&nbsp;:</term>
<listitem><simpara> application associated with the mime type
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
