<refentry id="gnome-vfs-gnome-vfs-result">
<refmeta>
<refentrytitle>
GnomeVFSResult</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>
GnomeVFSResult</refname><refpurpose>
Result of I/O operations, the equivalent of errno</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="GnomeVFSResult">GnomeVFSResult</link>;
const char* <link linkend="gnome-vfs-result-to-string">gnome_vfs_result_to_string</link>      (<link linkend="GnomeVFSResult">GnomeVFSResult</link> result);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-result-from-errno-code">gnome_vfs_result_from_errno_code</link>
                                            (int errno_code);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-result-from-errno">gnome_vfs_result_from_errno</link>  (void);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-result-from-h-errno">gnome_vfs_result_from_h_errno</link>
                                            (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeVFSResult"/>enum GnomeVFSResult</title>
<programlisting>typedef enum {
	GNOME_VFS_OK,
	GNOME_VFS_ERROR_NOT_FOUND,
	GNOME_VFS_ERROR_GENERIC,
	GNOME_VFS_ERROR_INTERNAL,
	GNOME_VFS_ERROR_BAD_PARAMETERS,
	GNOME_VFS_ERROR_NOT_SUPPORTED,
	GNOME_VFS_ERROR_IO,
	GNOME_VFS_ERROR_CORRUPTED_DATA,
	GNOME_VFS_ERROR_WRONG_FORMAT,
	GNOME_VFS_ERROR_BAD_FILE,
	GNOME_VFS_ERROR_TOO_BIG,
	GNOME_VFS_ERROR_NO_SPACE,
	GNOME_VFS_ERROR_READ_ONLY,
	GNOME_VFS_ERROR_INVALID_URI,
	GNOME_VFS_ERROR_NOT_OPEN,
	GNOME_VFS_ERROR_INVALID_OPEN_MODE,
	GNOME_VFS_ERROR_ACCESS_DENIED,
	GNOME_VFS_ERROR_TOO_MANY_OPEN_FILES,
	GNOME_VFS_ERROR_EOF,
	GNOME_VFS_ERROR_NOT_A_DIRECTORY,
	GNOME_VFS_ERROR_IN_PROGRESS,
	GNOME_VFS_ERROR_INTERRUPTED,
	GNOME_VFS_ERROR_FILE_EXISTS,
	GNOME_VFS_ERROR_LOOP,
	GNOME_VFS_ERROR_NOT_PERMITTED,
	GNOME_VFS_ERROR_IS_DIRECTORY,
	GNOME_VFS_ERROR_NO_MEMORY,
	GNOME_VFS_ERROR_HOST_NOT_FOUND,
	GNOME_VFS_ERROR_INVALID_HOST_NAME,
	GNOME_VFS_ERROR_HOST_HAS_NO_ADDRESS,
	GNOME_VFS_ERROR_LOGIN_FAILED,
	GNOME_VFS_ERROR_CANCELLED,
	GNOME_VFS_ERROR_DIRECTORY_BUSY,
	GNOME_VFS_ERROR_DIRECTORY_NOT_EMPTY,
	GNOME_VFS_ERROR_TOO_MANY_LINKS,
	GNOME_VFS_ERROR_READ_ONLY_FILE_SYSTEM,
	GNOME_VFS_ERROR_NOT_SAME_FILE_SYSTEM,
	GNOME_VFS_ERROR_NAME_TOO_LONG,
	GNOME_VFS_ERROR_SERVICE_NOT_AVAILABLE,
	GNOME_VFS_ERROR_SERVICE_OBSOLETE,
	GNOME_VFS_ERROR_PROTOCOL_ERROR,
	GNOME_VFS_ERROR_NO_MASTER_BROWSER,
	GNOME_VFS_NUM_ERRORS
} GnomeVFSResult;
</programlisting>
<para>
 
</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-result-to-string"/>gnome_vfs_result_to_string ()</title>
<programlisting>const char* gnome_vfs_result_to_string      (<link linkend="GnomeVFSResult">GnomeVFSResult</link> result);</programlisting>
<para>
Returns a string representation of <parameter>result</parameter>, useful for debugging
purposes, but probably not appropriate for passing to the user.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara> the result to convert to a string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a string representing <parameter>result</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-result-from-errno-code"/>gnome_vfs_result_from_errno_code ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_result_from_errno_code
                                            (int errno_code);</programlisting>
<para>
Converts a system errno value to a GnomeVFSResult.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>errno_code</parameter>&nbsp;:</term>
<listitem><simpara> integer of the same type as the system "errno"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a GnomeVFSResult equivalent to <parameter>errno_code</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-result-from-errno"/>gnome_vfs_result_from_errno ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_result_from_errno  (void);</programlisting>
<para>
Converts the system errno to a GnomeVFSResult.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a GnomeVFSResult equivalent to the current system errno
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-result-from-h-errno"/>gnome_vfs_result_from_h_errno ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_result_from_h_errno
                                            (void);</programlisting>
<para>
Converts the system "h_errno" to a GnomeVFSResult (h_errno represents errors
accessing and finding internet hosts)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a GnomeVFSResult equivalent to the current system "h_errno"
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
