<refentry id="gnome-vfs-gnome-vfs-context">
<refmeta>
<refentrytitle>
GnomeVFSContext</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>
GnomeVFSContext</refname><refpurpose>
contexts allows modules to track thread usage and cancellation properly</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="GnomeVFSContext">GnomeVFSContext</link>* <link linkend="gnome-vfs-context-new">gnome_vfs_context_new</link>      (void);
void        <link linkend="gnome-vfs-context-free">gnome_vfs_context_free</link>          (<link linkend="GnomeVFSContext">GnomeVFSContext</link> *ctx);
<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link>* <link linkend="gnome-vfs-context-get-cancellation">gnome_vfs_context_get_cancellation</link>
                                            (const <link linkend="GnomeVFSContext">GnomeVFSContext</link> *ctx);
#define     <link linkend="gnome-vfs-context-check-cancellation">gnome_vfs_context_check_cancellation</link>(x)
const <link linkend="GnomeVFSContext">GnomeVFSContext</link>* <link linkend="gnome-vfs-context-peek-current">gnome_vfs_context_peek_current</link>
                                            (void);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-context-check-cancellation-current">gnome_vfs_context_check_cancellation_current</link>
                                            (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-vfs-context-new"/>gnome_vfs_context_new ()</title>
<programlisting><link linkend="GnomeVFSContext">GnomeVFSContext</link>* gnome_vfs_context_new      (void);</programlisting>
<para>
Creates a new context and cancellation object. Must be called
from the main glib event loop.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated <link linkend="GnomeVFSContext">GnomeVFSContext</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-context-free"/>gnome_vfs_context_free ()</title>
<programlisting>void        gnome_vfs_context_free          (<link linkend="GnomeVFSContext">GnomeVFSContext</link> *ctx);</programlisting>
<para>
Free <parameter>ctx</parameter> and destroy the associated <link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> context to be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-context-get-cancellation"/>gnome_vfs_context_get_cancellation ()</title>
<programlisting><link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link>* gnome_vfs_context_get_cancellation
                                            (const <link linkend="GnomeVFSContext">GnomeVFSContext</link> *ctx);</programlisting>
<para>
Retrieve the <link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> associated with <parameter>ctx</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> context to get the <link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <parameter>ctx</parameter> 's <link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-context-check-cancellation"/>gnome_vfs_context_check_cancellation()</title>
<programlisting>#define     gnome_vfs_context_check_cancellation(x)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-context-peek-current"/>gnome_vfs_context_peek_current ()</title>
<programlisting>const <link linkend="GnomeVFSContext">GnomeVFSContext</link>* gnome_vfs_context_peek_current
                                            (void);</programlisting>
<para>
Get the currently active context. It shouldn't be
manipulated but can be compared to context's the module
holds to determine whether they are active.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the currently active <link linkend="GnomeVFSContext">GnomeVFSContext</link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-context-check-cancellation-current"/>gnome_vfs_context_check_cancellation_current ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_context_check_cancellation_current
                                            (void);</programlisting>
<para>
Check to see if the currently active context has been cancelled.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the currently active context has been cancelled, otherwise <literal>FALSE</literal>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
