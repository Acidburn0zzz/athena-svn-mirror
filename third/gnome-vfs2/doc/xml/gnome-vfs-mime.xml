<refentry id="gnome-vfs-gnome-vfs-mime">
<refmeta>
<refentrytitle>
MIME typing</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>
MIME typing</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



void        <link linkend="gnome-vfs-mime-shutdown">gnome_vfs_mime_shutdown</link>         (void);
const char* <link linkend="gnome-vfs-mime-type-from-name">gnome_vfs_mime_type_from_name</link>   (const char *filename);
const char* <link linkend="gnome-vfs-mime-type-from-name-or-default">gnome_vfs_mime_type_from_name_or_default</link>
                                            (const char *filename,
                                             const char *defaultv);
const char* <link linkend="gnome-vfs-get-mime-type-common">gnome_vfs_get_mime_type_common</link>  (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);
const char* <link linkend="gnome-vfs-get-mime-type-from-uri">gnome_vfs_get_mime_type_from_uri</link>
                                            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);
const char* <link linkend="gnome-vfs-get-mime-type-from-file-data">gnome_vfs_get_mime_type_from_file_data</link>
                                            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);
const char* <link linkend="gnome-vfs-get-file-mime-type">gnome_vfs_get_file_mime_type</link>    (const char *path,
                                             const struct <link linkend="stat">stat</link> *optional_stat_info,
                                             <link linkend="gboolean">gboolean</link> suffix_only);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-mime-type-is-supertype">gnome_vfs_mime_type_is_supertype</link>
                                            (const char *mime_type);
char*       <link linkend="gnome-vfs-get-supertype-from-mime-type">gnome_vfs_get_supertype_from_mime_type</link>
                                            (const char *mime_type);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-vfs-mime-shutdown"/>gnome_vfs_mime_shutdown ()</title>
<programlisting>void        gnome_vfs_mime_shutdown         (void);</programlisting>
<para>
Unload the MIME database from memory.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-type-from-name"/>gnome_vfs_mime_type_from_name ()</title>
<programlisting>const char* gnome_vfs_mime_type_from_name   (const char *filename);</programlisting>
<para>
Determined the mime type for <parameter>filename</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> A filename (the file does not necessarily exist).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the mime-type for this filename.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-type-from-name-or-default"/>gnome_vfs_mime_type_from_name_or_default ()</title>
<programlisting>const char* gnome_vfs_mime_type_from_name_or_default
                                            (const char *filename,
                                             const char *defaultv);</programlisting>
<para>
This routine tries to determine the mime-type of the filename
only by looking at the filename from the GNOME database of mime-types.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> A filename (the file does not necesarily exist).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>defaultv</parameter>&nbsp;:</term>
<listitem><simpara> A default value to be returned if no match is found
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the mime-type of the <parameter>filename</parameter>.  If no value could be
determined, it will return <parameter>defaultv</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-mime-type-common"/>gnome_vfs_get_mime_type_common ()</title>
<programlisting>const char* gnome_vfs_get_mime_type_common  (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);</programlisting>
<para>
Tries to guess the mime type of the file represented by <parameter>uir</parameter>.
Favors using the file data to the <parameter>uri</parameter> extension.
Handles passing <parameter>uri</parameter> of a non-existent file by falling back
on returning a type based on the extension.
</para>
<para>
FIXME: This function will not necessarily return the same mime type as doing a
get file info on the text uri.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> a real file or a non-existent uri.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the mime-type for this uri.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-mime-type-from-uri"/>gnome_vfs_get_mime_type_from_uri ()</title>
<programlisting>const char* gnome_vfs_get_mime_type_from_uri
                                            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);</programlisting>
<para>
Tries to guess the mime type of the file <parameter>uri</parameter> by
checking the file name extension. Works on non-existent
files.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> A file uri.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the mime-type for this filename.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-mime-type-from-file-data"/>gnome_vfs_get_mime_type_from_file_data ()</title>
<programlisting>const char* gnome_vfs_get_mime_type_from_file_data
                                            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);</programlisting>
<para>
Tries to guess the mime type of the file <parameter>uri</parameter> by
checking the file data using the magic patterns. Does not handle text files properly</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> A file uri.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the mime-type for this filename.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-file-mime-type"/>gnome_vfs_get_file_mime_type ()</title>
<programlisting>const char* gnome_vfs_get_file_mime_type    (const char *path,
                                             const struct <link linkend="stat">stat</link> *optional_stat_info,
                                             <link linkend="gboolean">gboolean</link> suffix_only);</programlisting>
<para>
Tries to guess the mime type of the file represented by <parameter>path</parameter>.
If <parameter>suffix_only</parameter> is false, uses the mime-magic based lookup first.
Handles passing <parameter>path</parameter> of a non-existent file by falling back
on returning a type based on the extension.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> a path of a file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>optional_stat_info</parameter>&nbsp;:</term>
<listitem><simpara> optional stat buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>suffix_only</parameter>&nbsp;:</term>
<listitem><simpara> whether or not to do a magic-based lookup.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the mime-type for this path
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-type-is-supertype"/>gnome_vfs_mime_type_is_supertype ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_mime_type_is_supertype
                                            (const char *mime_type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-supertype-from-mime-type"/>gnome_vfs_get_supertype_from_mime_type ()</title>
<programlisting>char*       gnome_vfs_get_supertype_from_mime_type
                                            (const char *mime_type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
