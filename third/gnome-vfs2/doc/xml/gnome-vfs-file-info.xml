<refentry id="gnome-vfs-20-gnome-vfs-file-info">
<refmeta>
<refentrytitle>GnomeVFSFileInfo</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS-2.0 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GnomeVFSFileInfo</refname><refpurpose>
stores information about files, GnomeVFS equivalent of stat</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="GnomeVFSFileFlags">GnomeVFSFileFlags</link>;
enum        <link linkend="GnomeVFSFileType">GnomeVFSFileType</link>;
enum        <link linkend="GnomeVFSFileInfoFields">GnomeVFSFileInfoFields</link>;
enum        <link linkend="GnomeVFSFilePermissions">GnomeVFSFilePermissions</link>;
enum        <link linkend="GnomeVFSFileInfoOptions">GnomeVFSFileInfoOptions</link>;
enum        <link linkend="GnomeVFSSetFileInfoMask">GnomeVFSSetFileInfoMask</link>;
struct      <link linkend="GnomeVFSGetFileInfoResult">GnomeVFSGetFileInfoResult</link>;
typedef     <link linkend="GnomeVFSInodeNumber">GnomeVFSInodeNumber</link>;
struct      <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link>;
#define     <link linkend="GNOME-VFS-FILE-INFO-SYMLINK-CAPS">GNOME_VFS_FILE_INFO_SYMLINK</link>     (info)
#define     <link linkend="GNOME-VFS-FILE-INFO-SET-SYMLINK-CAPS">GNOME_VFS_FILE_INFO_SET_SYMLINK</link> (info, value)
#define     <link linkend="GNOME-VFS-FILE-INFO-LOCAL-CAPS">GNOME_VFS_FILE_INFO_LOCAL</link>       (info)
#define     <link linkend="GNOME-VFS-FILE-INFO-SET-LOCAL-CAPS">GNOME_VFS_FILE_INFO_SET_LOCAL</link>   (info, value)
#define     <link linkend="GNOME-VFS-FILE-INFO-SUID-CAPS">GNOME_VFS_FILE_INFO_SUID</link>        (info)
#define     <link linkend="GNOME-VFS-FILE-INFO-SGID-CAPS">GNOME_VFS_FILE_INFO_SGID</link>        (info)
#define     <link linkend="GNOME-VFS-FILE-INFO-STICKY-CAPS">GNOME_VFS_FILE_INFO_STICKY</link>      (info)
#define     <link linkend="GNOME-VFS-FILE-INFO-SET-SUID-CAPS">GNOME_VFS_FILE_INFO_SET_SUID</link>    (info, value)
#define     <link linkend="GNOME-VFS-FILE-INFO-SET-SGID-CAPS">GNOME_VFS_FILE_INFO_SET_SGID</link>    (info, value)
#define     <link linkend="GNOME-VFS-FILE-INFO-SET-STICKY-CAPS">GNOME_VFS_FILE_INFO_SET_STICKY</link>  (info, value)
<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link>* <link linkend="gnome-vfs-file-info-new">gnome_vfs_file_info_new</link>   (void);
<link linkend="void">void</link>        <link linkend="gnome-vfs-file-info-unref">gnome_vfs_file_info_unref</link>       (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);
<link linkend="void">void</link>        <link linkend="gnome-vfs-file-info-ref">gnome_vfs_file_info_ref</link>         (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);
<link linkend="void">void</link>        <link linkend="gnome-vfs-file-info-clear">gnome_vfs_file_info_clear</link>       (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);
const <link linkend="char">char</link>* <link linkend="gnome-vfs-file-info-get-mime-type">gnome_vfs_file_info_get_mime_type</link>
                                            (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);
<link linkend="void">void</link>        <link linkend="gnome-vfs-file-info-copy">gnome_vfs_file_info_copy</link>        (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *dest,
                                             const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *src);
<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link>* <link linkend="gnome-vfs-file-info-dup">gnome_vfs_file_info_dup</link>   (const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *orig);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-file-info-matches">gnome_vfs_file_info_matches</link>     (const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *a,
                                             const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *b);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-file-info-list-ref">gnome_vfs_file_info_list_ref</link>    (<link linkend="GList">GList</link> *list);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-file-info-list-unref">gnome_vfs_file_info_list_unref</link>  (<link linkend="GList">GList</link> *list);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-file-info-list-copy">gnome_vfs_file_info_list_copy</link>   (<link linkend="GList">GList</link> *list);
<link linkend="void">void</link>        <link linkend="gnome-vfs-file-info-list-free">gnome_vfs_file_info_list_free</link>   (<link linkend="GList">GList</link> *list);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeVFSFileFlags"/>enum GnomeVFSFileFlags</title>
<indexterm><primary>GnomeVFSFileFlags</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_FILE_FLAGS_NONE = 0,
	GNOME_VFS_FILE_FLAGS_SYMLINK = 1 &lt;&lt; 0,
	GNOME_VFS_FILE_FLAGS_LOCAL = 1 &lt;&lt; 1
} GnomeVFSFileFlags;
</programlisting>
<para>
Packed boolean bitfield representing special
flags a <link linkend="GnomeVFSFileInfo"><type>GnomeVFSFileInfo</type></link> struct can have.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>GNOME_VFS_FILE_FLAGS_NONE</literal></term>
<listitem><simpara> no flags
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_FLAGS_SYMLINK</literal></term>
<listitem><simpara> whether the file is a symlink.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_FLAGS_LOCAL</literal></term>
<listitem><simpara> whether the file is on a local filesystem
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GnomeVFSFileType"/>enum GnomeVFSFileType</title>
<indexterm><primary>GnomeVFSFileType</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_FILE_TYPE_UNKNOWN,
	GNOME_VFS_FILE_TYPE_REGULAR,
	GNOME_VFS_FILE_TYPE_DIRECTORY,
	GNOME_VFS_FILE_TYPE_FIFO,
	GNOME_VFS_FILE_TYPE_SOCKET,
	GNOME_VFS_FILE_TYPE_CHARACTER_DEVICE,
	GNOME_VFS_FILE_TYPE_BLOCK_DEVICE,
	GNOME_VFS_FILE_TYPE_SYMBOLIC_LINK
} GnomeVFSFileType;
</programlisting>
<para>
Identifies the kind of file represented by a <link linkend="GnomeVFSFileInfo"><type>GnomeVFSFileInfo</type></link> struct.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeVFSFileInfoFields"/>enum GnomeVFSFileInfoFields</title>
<indexterm><primary>GnomeVFSFileInfoFields</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_FILE_INFO_FIELDS_NONE = 0,
	GNOME_VFS_FILE_INFO_FIELDS_TYPE = 1 &lt;&lt; 0,
	GNOME_VFS_FILE_INFO_FIELDS_PERMISSIONS = 1 &lt;&lt; 1,
	GNOME_VFS_FILE_INFO_FIELDS_FLAGS = 1 &lt;&lt; 2,
	GNOME_VFS_FILE_INFO_FIELDS_DEVICE = 1 &lt;&lt; 3,
	GNOME_VFS_FILE_INFO_FIELDS_INODE = 1 &lt;&lt; 4,
	GNOME_VFS_FILE_INFO_FIELDS_LINK_COUNT = 1 &lt;&lt; 5,
	GNOME_VFS_FILE_INFO_FIELDS_SIZE = 1 &lt;&lt; 6,
	GNOME_VFS_FILE_INFO_FIELDS_BLOCK_COUNT = 1 &lt;&lt; 7,
	GNOME_VFS_FILE_INFO_FIELDS_IO_BLOCK_SIZE = 1 &lt;&lt; 8,
	GNOME_VFS_FILE_INFO_FIELDS_ATIME = 1 &lt;&lt; 9,
	GNOME_VFS_FILE_INFO_FIELDS_MTIME = 1 &lt;&lt; 10,
	GNOME_VFS_FILE_INFO_FIELDS_CTIME = 1 &lt;&lt; 11,
	GNOME_VFS_FILE_INFO_FIELDS_SYMLINK_NAME = 1 &lt;&lt; 12,
	GNOME_VFS_FILE_INFO_FIELDS_MIME_TYPE = 1 &lt;&lt; 13,
	GNOME_VFS_FILE_INFO_FIELDS_ACCESS = 1 &lt;&lt; 14
} GnomeVFSFileInfoFields;
</programlisting>
<para>
Flags indicating what fields in a GnomeVFSFileInfo struct are valid. 
Name is always assumed valid (how else would you have gotten a
FileInfo struct otherwise?)</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_NONE</literal></term>
<listitem><simpara> No fields are valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_TYPE</literal></term>
<listitem><simpara> Type field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_PERMISSIONS</literal></term>
<listitem><simpara> Permissions field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_FLAGS</literal></term>
<listitem><simpara> Flags field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_DEVICE</literal></term>
<listitem><simpara> Device field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_INODE</literal></term>
<listitem><simpara> Inode field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_LINK_COUNT</literal></term>
<listitem><simpara> Link count field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_SIZE</literal></term>
<listitem><simpara> Size field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_BLOCK_COUNT</literal></term>
<listitem><simpara> Block count field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_IO_BLOCK_SIZE</literal></term>
<listitem><simpara> I/O Block Size field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_ATIME</literal></term>
<listitem><simpara> Access time field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_MTIME</literal></term>
<listitem><simpara> Modification time field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_CTIME</literal></term>
<listitem><simpara> Creating time field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_SYMLINK_NAME</literal></term>
<listitem><simpara> Symlink name field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_MIME_TYPE</literal></term>
<listitem><simpara> Mime type field is valid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FIELDS_ACCESS</literal></term>
<listitem><simpara> Access bits of the permissions
bitfield are valid
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GnomeVFSFilePermissions"/>enum GnomeVFSFilePermissions</title>
<indexterm><primary>GnomeVFSFilePermissions</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_PERM_SUID = S_ISUID,
	GNOME_VFS_PERM_SGID = S_ISGID,	
	GNOME_VFS_PERM_STICKY = 01000,	/* S_ISVTX not defined on all systems */
	GNOME_VFS_PERM_USER_READ = S_IRUSR,
	GNOME_VFS_PERM_USER_WRITE = S_IWUSR,
	GNOME_VFS_PERM_USER_EXEC = S_IXUSR,
	GNOME_VFS_PERM_USER_ALL = S_IRUSR | S_IWUSR | S_IXUSR,
	GNOME_VFS_PERM_GROUP_READ = S_IRGRP,
	GNOME_VFS_PERM_GROUP_WRITE = S_IWGRP,
	GNOME_VFS_PERM_GROUP_EXEC = S_IXGRP,
	GNOME_VFS_PERM_GROUP_ALL = S_IRGRP | S_IWGRP | S_IXGRP,
	GNOME_VFS_PERM_OTHER_READ = S_IROTH,
	GNOME_VFS_PERM_OTHER_WRITE = S_IWOTH,
	GNOME_VFS_PERM_OTHER_EXEC = S_IXOTH,
	GNOME_VFS_PERM_OTHER_ALL = S_IROTH | S_IWOTH | S_IXOTH,
	GNOME_VFS_PERM_ACCESS_READABLE   = 1 &lt;&lt; 16,
	GNOME_VFS_PERM_ACCESS_WRITABLE   = 1 &lt;&lt; 17,
	GNOME_VFS_PERM_ACCESS_EXECUTABLE = 1 &lt;&lt; 18
} GnomeVFSFilePermissions;
</programlisting>
<para>
File permissions. These are the same as the Unix ones, but we wrap them
into a nicer VFS-like enum.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>GNOME_VFS_PERM_SUID</literal></term>
<listitem><simpara> UID bit
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_SGID</literal></term>
<listitem><simpara> GID bit
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_STICKY</literal></term>
<listitem><simpara> Sticky bit.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_USER_READ</literal></term>
<listitem><simpara> Owner has read permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_USER_WRITE</literal></term>
<listitem><simpara> Owner has write permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_USER_EXEC</literal></term>
<listitem><simpara> Owner has execution permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_USER_ALL</literal></term>
<listitem><simpara> Owner has all permissions
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_GROUP_READ</literal></term>
<listitem><simpara> Group has read permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_GROUP_WRITE</literal></term>
<listitem><simpara> Group has write permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_GROUP_EXEC</literal></term>
<listitem><simpara> Group has execution permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_GROUP_ALL</literal></term>
<listitem><simpara> Group has all permissions
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_OTHER_READ</literal></term>
<listitem><simpara> Others have read permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_OTHER_WRITE</literal></term>
<listitem><simpara> Others have write permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_OTHER_EXEC</literal></term>
<listitem><simpara> Others have execution permission
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_OTHER_ALL</literal></term>
<listitem><simpara> Others have all permissions
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_ACCESS_READABLE</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_ACCESS_WRITABLE</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_PERM_ACCESS_EXECUTABLE</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GnomeVFSFileInfoOptions"/>enum GnomeVFSFileInfoOptions</title>
<indexterm><primary>GnomeVFSFileInfoOptions</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_FILE_INFO_DEFAULT = 0,
	GNOME_VFS_FILE_INFO_GET_MIME_TYPE = 1 &lt;&lt; 0,
	GNOME_VFS_FILE_INFO_FORCE_FAST_MIME_TYPE = 1 &lt;&lt; 1,
	GNOME_VFS_FILE_INFO_FORCE_SLOW_MIME_TYPE = 1 &lt;&lt; 2,
	GNOME_VFS_FILE_INFO_FOLLOW_LINKS = 1 &lt;&lt; 3,
	GNOME_VFS_FILE_INFO_GET_ACCESS_RIGHTS = 1 &lt;&lt; 4
} GnomeVFSFileInfoOptions;
</programlisting>
<para>
Packed boolean bitfield representing options that can
be passed into a <link linkend="gnome-vfs-get-file-info"><function>gnome_vfs_get_file_info()</function></link> call (or other
related calls that return file info) and affect the operation
of get_file_info.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_DEFAULT</literal></term>
<listitem><simpara> default flags
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_GET_MIME_TYPE</literal></term>
<listitem><simpara> detect the MIME type
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FORCE_FAST_MIME_TYPE</literal></term>
<listitem><simpara> only use fast MIME type 
detection (extensions)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FORCE_SLOW_MIME_TYPE</literal></term>
<listitem><simpara> force slow MIME type 
detection where available (sniffing, algorithmic detection, etc)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_FOLLOW_LINKS</literal></term>
<listitem><simpara> automatically follow symbolic 
links and retrieve the properties of their target (recommended)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_FILE_INFO_GET_ACCESS_RIGHTS</literal></term>
<listitem><simpara> tries to get data similar 
to what would return access(2) on a local file system (ie is the 
file readable, writable and/or executable). Can be really slow on 
remote file systems
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GnomeVFSSetFileInfoMask"/>enum GnomeVFSSetFileInfoMask</title>
<indexterm><primary>GnomeVFSSetFileInfoMask</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_SET_FILE_INFO_NONE = 0,
	GNOME_VFS_SET_FILE_INFO_NAME = 1 &lt;&lt; 0,
	GNOME_VFS_SET_FILE_INFO_PERMISSIONS = 1 &lt;&lt; 1,
	GNOME_VFS_SET_FILE_INFO_OWNER = 1 &lt;&lt; 2,
	GNOME_VFS_SET_FILE_INFO_TIME = 1 &lt;&lt; 3
} GnomeVFSSetFileInfoMask;
</programlisting>
<para>
Packed boolean bitfield representing the aspects of the file
to be changed in a <link linkend="gnome-vfs-set-file-info"><function>gnome_vfs_set_file_info()</function></link> call.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>GNOME_VFS_SET_FILE_INFO_NONE</literal></term>
<listitem><simpara> don't set any file info fields
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_SET_FILE_INFO_NAME</literal></term>
<listitem><simpara> change the name
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_SET_FILE_INFO_PERMISSIONS</literal></term>
<listitem><simpara> change the permissions
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_SET_FILE_INFO_OWNER</literal></term>
<listitem><simpara> change the file's owner
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GNOME_VFS_SET_FILE_INFO_TIME</literal></term>
<listitem><simpara> change the file's time stamp(s)
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GnomeVFSGetFileInfoResult"/>struct GnomeVFSGetFileInfoResult</title>
<indexterm><primary>GnomeVFSGetFileInfoResult</primary></indexterm><programlisting>struct GnomeVFSGetFileInfoResult {

	GnomeVFSURI *uri;
	GnomeVFSResult result;
	GnomeVFSFileInfo *file_info;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeVFSInodeNumber"/>GnomeVFSInodeNumber</title>
<indexterm><primary>GnomeVFSInodeNumber</primary></indexterm><programlisting>typedef GnomeVFSFileSize GnomeVFSInodeNumber;
</programlisting>
<para>
Represents the i-node of a file, this is a low level data structure
that the operating system uses to hold information about a file.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeVFSFileInfo"/>struct GnomeVFSFileInfo</title>
<indexterm><primary>GnomeVFSFileInfo</primary></indexterm><programlisting>struct GnomeVFSFileInfo {

	/* Base name of the file (no path).  */
	char *name;

	/* Fields which are actually valid in this structure. */
	GnomeVFSFileInfoFields valid_fields;

	/* File type (i.e. regular, directory, block device...).  */
	GnomeVFSFileType type;

	/* File permissions.  */
	GnomeVFSFilePermissions permissions;

	/* Flags for this file.  */
	GnomeVFSFileFlags flags;

	/* These are only valid if `is_local' is TRUE (see below).  */
	dev_t device;
	GnomeVFSInodeNumber inode;

	/* Link count.  */
	guint link_count;

	/* UID, GID.  */
	guint uid;
	guint gid;

	/* Size in bytes.  */
	GnomeVFSFileSize size;

	/* Size measured in units of 512-byte blocks.  */
	GnomeVFSFileSize block_count;

	/* Optimal buffer size for reading/writing the file.  */
	guint io_block_size;

	/* Access, modification and change times.  */
	time_t atime;
	time_t mtime;
	time_t ctime;

	/* If the file is a symlink (see `flags'), this specifies the file the
           link points to.  */
	char *symlink_name;

	/* MIME type.  -- ascii string */
	char *mime_type;

	guint refcount;

	/* Reserved for future expansions to GnomeVFSFileInfo without having
	   to break ABI compatibility */
	void *reserved1;
	void *reserved2;
	void *reserved3;
	void *reserved4;
	void *reserved5;
};
</programlisting>
<para>
The GnomeVFSFileInfo structure contains information about a file.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SYMLINK-CAPS"/>GNOME_VFS_FILE_INFO_SYMLINK()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SYMLINK</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SYMLINK(info)</programlisting>
<para>
Determines whether a file is a symbolic link given <parameter>info</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SET-SYMLINK-CAPS"/>GNOME_VFS_FILE_INFO_SET_SYMLINK()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SET_SYMLINK</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SET_SYMLINK(info, value)</programlisting>
<para>
Set the symbolic link field in <parameter>info</parameter> to <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, <parameter>info</parameter> is set to indicate the file is a symbolic link
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-LOCAL-CAPS"/>GNOME_VFS_FILE_INFO_LOCAL()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_LOCAL</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_LOCAL(info)</programlisting>
<para>
Determines whether a file is local given <parameter>info</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SET-LOCAL-CAPS"/>GNOME_VFS_FILE_INFO_SET_LOCAL()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SET_LOCAL</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SET_LOCAL(info, value)</programlisting>
<para>
Set the "local file" field in <parameter>info</parameter> to <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, <parameter>info</parameter> is set to indicate the file is local
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SUID-CAPS"/>GNOME_VFS_FILE_INFO_SUID()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SUID</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SUID(info)</programlisting>
<para>
Determines whether a file belongs to the super user.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SGID-CAPS"/>GNOME_VFS_FILE_INFO_SGID()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SGID</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SGID(info)</programlisting>
<para>
Determines whether a file belongs to the super user's group.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-STICKY-CAPS"/>GNOME_VFS_FILE_INFO_STICKY()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_STICKY</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_STICKY(info)</programlisting>
<para>
Determines whether a file has the sticky bit set, given <parameter>info</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SET-SUID-CAPS"/>GNOME_VFS_FILE_INFO_SET_SUID()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SET_SUID</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SET_SUID(info, value)</programlisting>
<para>
Set the SUID field in <parameter>info</parameter> to <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, <parameter>info</parameter> is set to indicate the file belongs to the super user
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SET-SGID-CAPS"/>GNOME_VFS_FILE_INFO_SET_SGID()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SET_SGID</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SET_SGID(info, value)</programlisting>
<para>
Set the SGID field in <parameter>info</parameter> to <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, <parameter>info</parameter> is set to indicate the file belongs to the super user's group
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-FILE-INFO-SET-STICKY-CAPS"/>GNOME_VFS_FILE_INFO_SET_STICKY()</title>
<indexterm><primary>GNOME_VFS_FILE_INFO_SET_STICKY</primary></indexterm><programlisting>#define     GNOME_VFS_FILE_INFO_SET_STICKY(info, value)</programlisting>
<para>
Set the sticky bit in <parameter>info</parameter> to <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> GnomeVFSFileInfo struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, <parameter>info</parameter> is set to indicate the file has the sticky bit set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-new"/>gnome_vfs_file_info_new ()</title>
<indexterm><primary>gnome_vfs_file_info_new</primary></indexterm><programlisting><link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link>* gnome_vfs_file_info_new   (void);</programlisting>
<para>
Allocate and initialize a new file information struct.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A pointer to the new file information struct.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-unref"/>gnome_vfs_file_info_unref ()</title>
<indexterm><primary>gnome_vfs_file_info_unref</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_file_info_unref       (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);</programlisting>
<para>
Destroy <parameter>info</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a file information struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-ref"/>gnome_vfs_file_info_ref ()</title>
<indexterm><primary>gnome_vfs_file_info_ref</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_file_info_ref         (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);</programlisting>
<para>
Increment reference count</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a file information struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-clear"/>gnome_vfs_file_info_clear ()</title>
<indexterm><primary>gnome_vfs_file_info_clear</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_file_info_clear       (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);</programlisting>
<para>
Clear <parameter>info</parameter> so that it's ready to accept new data. This is
supposed to be used when <parameter>info</parameter> already contains meaningful information which
we want to replace.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a file information struct
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-get-mime-type"/>gnome_vfs_file_info_get_mime_type ()</title>
<indexterm><primary>gnome_vfs_file_info_get_mime_type</primary></indexterm><programlisting>const <link linkend="char">char</link>* gnome_vfs_file_info_get_mime_type
                                            (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info);</programlisting>
<para>
Retrieve MIME type from <parameter>info</parameter>. There is no need to free the return
value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a file information struct
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A pointer to a string representing the MIME type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-copy"/>gnome_vfs_file_info_copy ()</title>
<indexterm><primary>gnome_vfs_file_info_copy</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_file_info_copy        (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *dest,
                                             const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *src);</programlisting>
<para>
Copy information from <parameter>src</parameter> into <parameter>dest</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a struct to copy <parameter>src</parameter>'s information into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to the information to be copied into <parameter>dest</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-dup"/>gnome_vfs_file_info_dup ()</title>
<indexterm><primary>gnome_vfs_file_info_dup</primary></indexterm><programlisting><link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link>* gnome_vfs_file_info_dup   (const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *orig);</programlisting>
<para>
Duplicates <parameter>orig</parameter> and returns it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>orig</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a file information structure to duplicate
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new file information struct that duplicates the information in <parameter>orig</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-matches"/>gnome_vfs_file_info_matches ()</title>
<indexterm><primary>gnome_vfs_file_info_matches</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_file_info_matches     (const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *a,
                                             const <link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *b);</programlisting>
<para>
Compare the two file info structs, return TRUE if they match exactly
the same file data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> first GnomeVFSFileInfo struct to compare
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> second GnomeVFSFileInfo struct to compare
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if the two GnomeVFSFileInfos match, otherwise return FALSE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-list-ref"/>gnome_vfs_file_info_list_ref ()</title>
<indexterm><primary>gnome_vfs_file_info_list_ref</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_file_info_list_ref    (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Increments the reference count of the items in <parameter>list</parameter> by one.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> list of GnomeVFSFileInfo elements
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <parameter>list</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-list-unref"/>gnome_vfs_file_info_list_unref ()</title>
<indexterm><primary>gnome_vfs_file_info_list_unref</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_file_info_list_unref  (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Decrements the reference count of the items in <parameter>list</parameter> by one.
Note that the list is *not freed* even if each member of the list
is freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> list of GnomeVFSFileInfo elements
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <parameter>list</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-list-copy"/>gnome_vfs_file_info_list_copy ()</title>
<indexterm><primary>gnome_vfs_file_info_list_copy</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_file_info_list_copy   (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Creates a duplicate of <parameter>list</parameter>, and references each member of
that list.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> list of GnomeVFSFileInfo elements
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly referenced duplicate of <parameter>list</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-file-info-list-free"/>gnome_vfs_file_info_list_free ()</title>
<indexterm><primary>gnome_vfs_file_info_list_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_file_info_list_free   (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Decrements the reference count of each member of <parameter>list</parameter> by one,
and frees the list itself.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> list of GnomeVFSFileInfo elements
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
