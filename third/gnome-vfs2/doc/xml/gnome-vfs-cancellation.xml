<refentry id="gnome-vfs-gnome-vfs-cancellation">
<refmeta>
<refentrytitle>
Cancellation</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>
Cancellation</refname><refpurpose>
halt in-progress operations</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link>* <link linkend="gnome-vfs-cancellation-new">gnome_vfs_cancellation_new</link>
                                            (void);
void        <link linkend="gnome-vfs-cancellation-destroy">gnome_vfs_cancellation_destroy</link>  (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);
void        <link linkend="gnome-vfs-cancellation-cancel">gnome_vfs_cancellation_cancel</link>   (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-cancellation-check">gnome_vfs_cancellation_check</link>    (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);
void        <link linkend="gnome-vfs-cancellation-ack">gnome_vfs_cancellation_ack</link>      (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);
<link linkend="gint">gint</link>        <link linkend="gnome-vfs-cancellation-get-fd">gnome_vfs_cancellation_get_fd</link>   (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-vfs-cancellation-new"/>gnome_vfs_cancellation_new ()</title>
<programlisting><link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link>* gnome_vfs_cancellation_new
                                            (void);</programlisting>
<para>
Create a new GnomeVFSCancellation object for reporting cancellation to a
GNOME VFS module.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A pointer to the new GnomeVFSCancellation object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-cancellation-destroy"/>gnome_vfs_cancellation_destroy ()</title>
<programlisting>void        gnome_vfs_cancellation_destroy  (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);</programlisting>
<para>
Destroy <parameter>cancellation</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cancellation</parameter>&nbsp;:</term>
<listitem><simpara> A GnomeVFSCancellation object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-cancellation-cancel"/>gnome_vfs_cancellation_cancel ()</title>
<programlisting>void        gnome_vfs_cancellation_cancel   (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);</programlisting>
<para>
Send a cancellation request through <parameter>cancellation</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cancellation</parameter>&nbsp;:</term>
<listitem><simpara> A GnomeVFSCancellation object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-cancellation-check"/>gnome_vfs_cancellation_check ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_cancellation_check    (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);</programlisting>
<para>
Check for pending cancellation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cancellation</parameter>&nbsp;:</term>
<listitem><simpara> A GnomeVFSCancellation object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the operation should be interrupted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-cancellation-ack"/>gnome_vfs_cancellation_ack ()</title>
<programlisting>void        gnome_vfs_cancellation_ack      (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);</programlisting>
<para>
Acknowledge a cancellation.  This should be called if
`<link linkend="gnome-vfs-cancellation-check">gnome_vfs_cancellation_check</link>()' returns <literal>TRUE</literal> or if `<link linkend="select">select</link>()' reports that
input is available on the file descriptor returned by
`<link linkend="gnome-vfs-cancellation-get-fd">gnome_vfs_cancellation_get_fd</link>()'.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cancellation</parameter>&nbsp;:</term>
<listitem><simpara> A GnomeVFSCancellation object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-cancellation-get-fd"/>gnome_vfs_cancellation_get_fd ()</title>
<programlisting><link linkend="gint">gint</link>        gnome_vfs_cancellation_get_fd   (<link linkend="GnomeVFSCancellation">GnomeVFSCancellation</link> *cancellation);</programlisting>
<para>
Get a file descriptor -based notificator for <parameter>cancellation</parameter>.  When
<parameter>cancellation</parameter> receives a cancellation request, a character will be made
available on the returned file descriptor for input.
</para>
<para>
This is very useful for detecting cancellation during I/O operations: you
can use the `<link linkend="select">select</link>()' call to check for available input/output on the file
you are reading/writing, and on the notificator's file descriptor at the
same time.  If a data is available on the notificator's file descriptor, you
know you have to cancel the read/write operation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cancellation</parameter>&nbsp;:</term>
<listitem><simpara> A GnomeVFSCancellation object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the notificator's file descriptor, or -1 if starved of
              file descriptors.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
