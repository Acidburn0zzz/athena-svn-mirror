<refentry id="gnome-vfs-gnome-vfs-file-basic-ops">
<refmeta>
<refentrytitle>Basic File Operations</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Basic File Operations</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link>;
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-create">gnome_vfs_create</link>             (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             const <link linkend="gchar">gchar</link> *text_uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode,
                                             <link linkend="gboolean">gboolean</link> exclusive,
                                             <link linkend="guint">guint</link> perm);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-create-uri">gnome_vfs_create_uri</link>         (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode,
                                             <link linkend="gboolean">gboolean</link> exclusive,
                                             <link linkend="guint">guint</link> perm);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-open">gnome_vfs_open</link>               (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             const <link linkend="gchar">gchar</link> *text_uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-open-uri">gnome_vfs_open_uri</link>           (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-close">gnome_vfs_close</link>              (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> *handle);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-unlink">gnome_vfs_unlink</link>             (const <link linkend="gchar">gchar</link> *text_uri);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-unlink-from-uri">gnome_vfs_unlink_from_uri</link>    (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-move-uri">gnome_vfs_move_uri</link>           (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *old_uri,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *new_uri,
                                             <link linkend="gboolean">gboolean</link> force_replace);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-move">gnome_vfs_move</link>               (const <link linkend="gchar">gchar</link> *old_text_uri,
                                             const <link linkend="gchar">gchar</link> *new_text_uri,
                                             <link linkend="gboolean">gboolean</link> force_replace);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-check-same-fs-uris">gnome_vfs_check_same_fs_uris</link> (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *source_uri,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *target_uri,
                                             <link linkend="gboolean">gboolean</link> *same_fs_return);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-check-same-fs">gnome_vfs_check_same_fs</link>      (const <link linkend="gchar">gchar</link> *source,
                                             const <link linkend="gchar">gchar</link> *target,
                                             <link linkend="gboolean">gboolean</link> *same_fs_return);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-uri-exists">gnome_vfs_uri_exists</link>            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-create-symbolic-link">gnome_vfs_create_symbolic_link</link>
                                            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri,
                                             const <link linkend="gchar">gchar</link> *target_reference);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GnomeVFSOpenMode"/>enum GnomeVFSOpenMode</title>
<programlisting>typedef enum {
        GNOME_VFS_OPEN_NONE = 0,
        GNOME_VFS_OPEN_READ = 1 &lt;&lt; 0,
        GNOME_VFS_OPEN_WRITE = 1 &lt;&lt; 1,
        GNOME_VFS_OPEN_RANDOM = 1 &lt;&lt; 2
} GnomeVFSOpenMode;
</programlisting>
<para>
Mode in which files are opened. If GNOME_VFS_OPEN_RANDOM is not used, the
file will be have to be accessed sequentially.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-create"/>gnome_vfs_create ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_create             (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             const <link linkend="gchar">gchar</link> *text_uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode,
                                             <link linkend="gboolean">gboolean</link> exclusive,
                                             <link linkend="guint">guint</link> perm);</programlisting>
<para>
Create <parameter>uri</parameter> according to mode <parameter>open_mode</parameter>.  On return, <parameter>handle</parameter> will then
contain a pointer to a handle for the open file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a pointer to a GnomeVFSHandle object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text_uri</parameter>&nbsp;:</term>
<listitem><simpara> String representing the URI to create
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>open_mode</parameter>&nbsp;:</term>
<listitem><simpara> mode to leave the file opened in after creation (or <literal>GNOME_VFS_OPEN_MODE_NONE</literal>
to leave the file closed after creation)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exclusive</parameter>&nbsp;:</term>
<listitem><simpara> Whether the file should be created in "exclusive" mode:
i.e. if this flag is nonzero, operation will fail if a file with the
same name already exists.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>perm</parameter>&nbsp;:</term>
<listitem><simpara> Bitmap representing the permissions for the newly created file
(Unix style).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-create-uri"/>gnome_vfs_create_uri ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_create_uri         (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode,
                                             <link linkend="gboolean">gboolean</link> exclusive,
                                             <link linkend="guint">guint</link> perm);</programlisting>
<para>
Create <parameter>uri</parameter> according to mode <parameter>open_mode</parameter>.  On return, <parameter>handle</parameter> will then
contain a pointer to a handle for the open file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a pointer to a GnomeVFSHandle object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> URI for the file to create
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>open_mode</parameter>&nbsp;:</term>
<listitem><simpara> Open mode
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exclusive</parameter>&nbsp;:</term>
<listitem><simpara> Whether the file should be created in "exclusive" mode:
i.e. if this flag is nonzero, operation will fail if a file with the
same name already exists.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>perm</parameter>&nbsp;:</term>
<listitem><simpara> Bitmap representing the permissions for the newly created file
(Unix style).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-open"/>gnome_vfs_open ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_open               (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             const <link linkend="gchar">gchar</link> *text_uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode);</programlisting>
<para>
Open <parameter>text_uri</parameter> according to mode <parameter>open_mode</parameter>.  On return, <parameter>handle</parameter> will then
contain a pointer to a handle for the open file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a pointer to a GnomeVFSHandle object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text_uri</parameter>&nbsp;:</term>
<listitem><simpara> String representing the URI to open
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>open_mode</parameter>&nbsp;:</term>
<listitem><simpara> Open mode
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-open-uri"/>gnome_vfs_open_uri ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_open_uri           (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> **handle,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri,
                                             <link linkend="GnomeVFSOpenMode">GnomeVFSOpenMode</link> open_mode);</programlisting>
<para>
Open <parameter>uri</parameter> according to mode <parameter>open_mode</parameter>.  On return, <parameter>handle</parameter> will then
contain a pointer to a handle for the open file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a pointer to a GnomeVFSHandle object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> URI to open
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>open_mode</parameter>&nbsp;:</term>
<listitem><simpara> Open mode
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-close"/>gnome_vfs_close ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_close              (<link linkend="GnomeVFSHandle">GnomeVFSHandle</link> *handle);</programlisting>
<para>
Close file associated with <parameter>handle</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a GnomeVFSHandle object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-unlink"/>gnome_vfs_unlink ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_unlink             (const <link linkend="gchar">gchar</link> *text_uri);</programlisting>
<para>
Unlink <parameter>text_uri</parameter> (i.e. delete the file).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text_uri</parameter>&nbsp;:</term>
<listitem><simpara> URI of the file to be unlinked
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-unlink-from-uri"/>gnome_vfs_unlink_from_uri ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_unlink_from_uri    (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);</programlisting>
<para>
Unlink <parameter>uri</parameter> (i.e. delete the file).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> URI of the file to be unlinked
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-move-uri"/>gnome_vfs_move_uri ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_move_uri           (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *old_uri,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *new_uri,
                                             <link linkend="gboolean">gboolean</link> force_replace);</programlisting>
<para>
Move a file from URI <parameter>old_uri</parameter> to <parameter>new_uri</parameter>.  This will only work if <parameter>old_uri</parameter> 
and <parameter>new_uri</parameter> are on the same file system.  Otherwise, it is necessary 
to use the more general %<link linkend="gnome-vfs-xfer-uri">gnome_vfs_xfer_uri</link>() function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>old_uri</parameter>&nbsp;:</term>
<listitem><simpara> Source URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_uri</parameter>&nbsp;:</term>
<listitem><simpara> Destination URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>force_replace</parameter>&nbsp;:</term>
<listitem><simpara> If <literal>TRUE</literal>, move target to <parameter>new_uri</parameter> even if there 
is already a file at <parameter>new_uri</parameter>. If there is a file, it will be discarded.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-move"/>gnome_vfs_move ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_move               (const <link linkend="gchar">gchar</link> *old_text_uri,
                                             const <link linkend="gchar">gchar</link> *new_text_uri,
                                             <link linkend="gboolean">gboolean</link> force_replace);</programlisting>
<para>
Move a file from URI <parameter>old_text_uri</parameter> to <parameter>new_text_uri</parameter>.  This will only work 
if <parameter>old_text_uri</parameter> and <parameter>new_text_uri</parameter> are on the same file system.  Otherwise,
it is necessary to use the more general %<link linkend="gnome-vfs-xfer-uri">gnome_vfs_xfer_uri</link>() function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>old_text_uri</parameter>&nbsp;:</term>
<listitem><simpara> Source URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_text_uri</parameter>&nbsp;:</term>
<listitem><simpara> Destination URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>force_replace</parameter>&nbsp;:</term>
<listitem><simpara> if <literal>TRUE</literal>, perform the operation even if it unlinks an existing
file at <parameter>new_text_uri</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-check-same-fs-uris"/>gnome_vfs_check_same_fs_uris ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_check_same_fs_uris (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *source_uri,
                                             <link linkend="GnomeVFSURI">GnomeVFSURI</link> *target_uri,
                                             <link linkend="gboolean">gboolean</link> *same_fs_return);</programlisting>
<para>
Check if <parameter>source_uri</parameter> and <parameter>target_uri</parameter> are on the same file system.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>source_uri</parameter>&nbsp;:</term>
<listitem><simpara> A URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>target_uri</parameter>&nbsp;:</term>
<listitem><simpara> Another URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>same_fs_return</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a boolean variable which will be set to <literal>TRUE</literal>
if <parameter>source_uri</parameter> and <parameter>target_uri</parameter> are on the same file system on return.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-check-same-fs"/>gnome_vfs_check_same_fs ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_check_same_fs      (const <link linkend="gchar">gchar</link> *source,
                                             const <link linkend="gchar">gchar</link> *target,
                                             <link linkend="gboolean">gboolean</link> *same_fs_return);</programlisting>
<para>
Return <literal>TRUE</literal> if <parameter>source</parameter> and <parameter>target</parameter> are on the same file system.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>source</parameter>&nbsp;:</term>
<listitem><simpara> A URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>target</parameter>&nbsp;:</term>
<listitem><simpara> Another URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>same_fs_return</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a boolean variable which will be set to <literal>TRUE</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-uri-exists"/>gnome_vfs_uri_exists ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_uri_exists            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);</programlisting>
<para>
Check if the URI points to an existing entity.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> A URI
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if URI exists.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-create-symbolic-link"/>gnome_vfs_create_symbolic_link ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_create_symbolic_link
                                            (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri,
                                             const <link linkend="gchar">gchar</link> *target_reference);</programlisting>
<para>
Creates a symbolic link, or eventually, a URI link (as necessary) 
at <parameter>uri</parameter> pointing to <parameter>target_reference</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> URI to create a link at
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>target_reference</parameter>&nbsp;:</term>
<listitem><simpara> URI "reference" to point the link to (URI or relative path)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
