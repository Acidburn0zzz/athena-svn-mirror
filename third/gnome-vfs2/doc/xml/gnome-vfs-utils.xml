<refentry id="gnome-vfs-gnome-vfs-utils">
<refmeta>
<refentrytitle>gnome-vfs-utils</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-vfs-utils</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



char*       <link linkend="gnome-vfs-format-file-size-for-display">gnome_vfs_format_file_size_for_display</link>
                                            (<link linkend="GnomeVFSFileSize">GnomeVFSFileSize</link> size);
char*       <link linkend="gnome-vfs-escape-string">gnome_vfs_escape_string</link>         (const char *string);
char*       <link linkend="gnome-vfs-escape-path-string">gnome_vfs_escape_path_string</link>    (const char *path);
char*       <link linkend="gnome-vfs-escape-host-and-path-string">gnome_vfs_escape_host_and_path_string</link>
                                            (const char *path);
char*       <link linkend="gnome-vfs-escape-slashes">gnome_vfs_escape_slashes</link>        (const char *string);
char*       <link linkend="gnome-vfs-escape-set">gnome_vfs_escape_set</link>            (const char *string,
                                             const char *match_set);
char*       <link linkend="gnome-vfs-unescape-string">gnome_vfs_unescape_string</link>       (const char *escaped_string,
                                             const char *illegal_characters);
char*       <link linkend="gnome-vfs-make-uri-canonical">gnome_vfs_make_uri_canonical</link>    (const char *uri);
char*       <link linkend="gnome-vfs-make-path-name-canonical">gnome_vfs_make_path_name_canonical</link>
                                            (const char *path);
char*       <link linkend="gnome-vfs-expand-initial-tilde">gnome_vfs_expand_initial_tilde</link>  (const char *path);
char*       <link linkend="gnome-vfs-unescape-string-for-display">gnome_vfs_unescape_string_for_display</link>
                                            (const char *escaped);
char*       <link linkend="gnome-vfs-get-local-path-from-uri">gnome_vfs_get_local_path_from_uri</link>
                                            (const char *uri);
char*       <link linkend="gnome-vfs-get-uri-from-local-path">gnome_vfs_get_uri_from_local_path</link>
                                            (const char *local_full_path);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-is-executable-command-string">gnome_vfs_is_executable_command_string</link>
                                            (const char *command_string);
void        <link linkend="gnome-vfs-list-deep-free">gnome_vfs_list_deep_free</link>        (<link linkend="GList">GList</link> *list);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-get-volume-free-space">gnome_vfs_get_volume_free_space</link>
                                            (const <link linkend="GnomeVFSURI">GnomeVFSURI</link> *vfs_uri,
                                             <link linkend="GnomeVFSFileSize">GnomeVFSFileSize</link> *size);
char*       <link linkend="gnome-vfs-icon-path-from-filename">gnome_vfs_icon_path_from_filename</link>
                                            (const char *filename);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-is-primary-thread">gnome_vfs_is_primary_thread</link>     (void);
char*       <link linkend="gnome-vfs-get-uri-scheme">gnome_vfs_get_uri_scheme</link>        (const char *uri);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-uris-match">gnome_vfs_uris_match</link>            (const char *uri_1,
                                             const char *uri_2);
#define     <link linkend="GNOME-VFS-ASSERT-PRIMARY-THREAD-CAPS">GNOME_VFS_ASSERT_PRIMARY_THREAD</link>
#define     <link linkend="GNOME-VFS-ASSERT-SECONDARY-THREAD-CAPS">GNOME_VFS_ASSERT_SECONDARY_THREAD</link>
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-read-entire-file">gnome_vfs_read_entire_file</link>   (const char *uri,
                                             int *file_size,
                                             char **file_contents);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-vfs-format-file-size-for-display"/>gnome_vfs_format_file_size_for_display ()</title>
<programlisting>char*       gnome_vfs_format_file_size_for_display
                                            (<link linkend="GnomeVFSFileSize">GnomeVFSFileSize</link> size);</programlisting>
<para>
Formats the file size passed in <parameter>bytes</parameter> in a way that is easy for
the user to read. Gives the size in bytes, kilobytes, megabytes or
gigabytes, choosing whatever is appropriate.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string with the size ready to be shown.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-escape-string"/>gnome_vfs_escape_string ()</title>
<programlisting>char*       gnome_vfs_escape_string         (const char *string);</programlisting>
<para>
Escapes <parameter>string</parameter>, replacing any and all special characters 
with equivalent escape sequences.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara> string to be escaped
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string equivalent to <parameter>string</parameter>
but with all special characters escaped
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-escape-path-string"/>gnome_vfs_escape_path_string ()</title>
<programlisting>char*       gnome_vfs_escape_path_string    (const char *path);</programlisting>
<para>
Escapes <parameter>path</parameter>, replacing only special characters that would not
be found in paths (so '/', '&amp;', '=', and '?' will not be escaped by
this function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> string to be escaped
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string equivalent to <parameter>path</parameter> but
with non-path characters escaped
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-escape-host-and-path-string"/>gnome_vfs_escape_host_and_path_string ()</title>
<programlisting>char*       gnome_vfs_escape_host_and_path_string
                                            (const char *path);</programlisting>
<para>
Escapes <parameter>path</parameter>, replacing only special characters that would not
be found in paths or host name (so '/', '&amp;', '=', ':', '@' 
and '?' will not be escaped by this function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> string to be escaped
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string equivalent to <parameter>path</parameter> but
with non-path/host characters escaped
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-escape-slashes"/>gnome_vfs_escape_slashes ()</title>
<programlisting>char*       gnome_vfs_escape_slashes        (const char *string);</programlisting>
<para>
Escapes only '/' and '%' characters in <parameter>string</parameter>, replacing
them with their escape sequence equivalents.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara> string to be escaped
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string equivalent to <parameter>string</parameter>,
but with no unescaped '/' or '%' characters
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-escape-set"/>gnome_vfs_escape_set ()</title>
<programlisting>char*       gnome_vfs_escape_set            (const char *string,
                                             const char *match_set);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>match_set</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-unescape-string"/>gnome_vfs_unescape_string ()</title>
<programlisting>char*       gnome_vfs_unescape_string       (const char *escaped_string,
                                             const char *illegal_characters);</programlisting>
<para>
Decodes escaped characters (i.e. PERCENTxx sequences) in <parameter>escaped_string</parameter>.
Characters are encoded in PERCENTxy form, where xy is the ASCII hex code 
for character 16x+y.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>escaped_string</parameter>&nbsp;:</term>
<listitem><simpara> an escaped URI, path, or other string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>illegal_characters</parameter>&nbsp;:</term>
<listitem><simpara> a string containing a sequence of characters
considered "illegal", '\0' is automatically in this list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string with the unescaped equivalents, 
or <literal>NULL</literal> if <parameter>escaped_string</parameter> contained one of the characters 
in <parameter>illegal_characters</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-make-uri-canonical"/>gnome_vfs_make_uri_canonical ()</title>
<programlisting>char*       gnome_vfs_make_uri_canonical    (const char *uri);</programlisting>
<para>
Standarizes the format of the uri being passed, so that it can be used
later in other functions that expect a canonical URI.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> and absolute or relative URI, it might have scheme.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string that contains the canonical 
representation of <parameter>uri</parameter>.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-make-path-name-canonical"/>gnome_vfs_make_path_name_canonical ()</title>
<programlisting>char*       gnome_vfs_make_path_name_canonical
                                            (const char *path);</programlisting>
<para>
Calls _gnome_vfs_canonicalize_pathname, allocating storage for the 
result and providing for a cleaner memory management.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> a file path, relative or absolute
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a canonical version of <parameter>path</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-expand-initial-tilde"/>gnome_vfs_expand_initial_tilde ()</title>
<programlisting>char*       gnome_vfs_expand_initial_tilde  (const char *path);</programlisting>
<para>
If <parameter>path</parameter> starts with a ~, representing the user's home
directory, expand it to the actual path location.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> a local file path which may start with a '~'
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a newly allocated string with the initial
tilde (if there was one) converted to an actual path
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-unescape-string-for-display"/>gnome_vfs_unescape_string_for_display ()</title>
<programlisting>char*       gnome_vfs_unescape_string_for_display
                                            (const char *escaped);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>escaped</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-local-path-from-uri"/>gnome_vfs_get_local_path_from_uri ()</title>
<programlisting>char*       gnome_vfs_get_local_path_from_uri
                                            (const char *uri);</programlisting>
<para>
Create a local path for a file:/// URI. Do not use with URIs
of other methods.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> URI to convert to a local path
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the local path 
NULL is returned on error or if the uri isn't a file: URI
without a fragment identifier (or chained URI).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-uri-from-local-path"/>gnome_vfs_get_uri_from_local_path ()</title>
<programlisting>char*       gnome_vfs_get_uri_from_local_path
                                            (const char *local_full_path);</programlisting>
<para>
Returns a file:/// URI for the local path <parameter>local_full_path</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>local_full_path</parameter>&nbsp;:</term>
<listitem><simpara> a full local filesystem path (i.e. not relative)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the URI corresponding to <parameter>local_full_path</parameter> 
(NULL for some bad errors).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-is-executable-command-string"/>gnome_vfs_is_executable_command_string ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_is_executable_command_string
                                            (const char *command_string);</programlisting>
<para>
Checks if <parameter>command_string</parameter> starts with the full path of an executable file
or an executable in $PATH.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>command_string</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if command_string started with and executable file, 
FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-list-deep-free"/>gnome_vfs_list_deep_free ()</title>
<programlisting>void        gnome_vfs_list_deep_free        (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Free <parameter>list</parameter>, and call <link linkend="g-free">g_free</link>() on all data members.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> list to be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-volume-free-space"/>gnome_vfs_get_volume_free_space ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_get_volume_free_space
                                            (const <link linkend="GnomeVFSURI">GnomeVFSURI</link> *vfs_uri,
                                             <link linkend="GnomeVFSFileSize">GnomeVFSFileSize</link> *size);</programlisting>
<para>
Stores in <parameter>size</parameter> the amount of free space on a volume.
This only works for local file systems with the file: scheme.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>vfs_uri</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GNOME_VFS_OK on success, otherwise an error code
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-icon-path-from-filename"/>gnome_vfs_icon_path_from_filename ()</title>
<programlisting>char*       gnome_vfs_icon_path_from_filename
                                            (const char *filename);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-is-primary-thread"/>gnome_vfs_is_primary_thread ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_is_primary_thread     (void);</programlisting>
<para>
Check if the current thread is the thread with the main glib event loop.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the current thread is the thread with the 
main glib event loop
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-uri-scheme"/>gnome_vfs_get_uri_scheme ()</title>
<programlisting>char*       gnome_vfs_get_uri_scheme        (const char *uri);</programlisting>
<para>
Retrieve the scheme used in <parameter>uri</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> a stringified URI
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A string containing the scheme

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-uris-match"/>gnome_vfs_uris_match ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_uris_match            (const char *uri_1,
                                             const char *uri_2);</programlisting>
<para>
Compare two URIs.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri_1</parameter>&nbsp;:</term>
<listitem><simpara> stringified URI to compare with <parameter>uri_2</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri_2</parameter>&nbsp;:</term>
<listitem><simpara> stringified URI to compare with <parameter>uri_1</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if they are the same, FALSE otherwise.

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-ASSERT-PRIMARY-THREAD-CAPS"/>GNOME_VFS_ASSERT_PRIMARY_THREAD</title>
<programlisting>#define GNOME_VFS_ASSERT_PRIMARY_THREAD g_assert (gnome_vfs_is_primary_thread())
</programlisting>
<para>
Asserts that the current thread is the thread with 
the main glib event loop</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNOME-VFS-ASSERT-SECONDARY-THREAD-CAPS"/>GNOME_VFS_ASSERT_SECONDARY_THREAD</title>
<programlisting>#define GNOME_VFS_ASSERT_SECONDARY_THREAD g_assert (!gnome_vfs_is_primary_thread())
</programlisting>
<para>
Asserts that the current thread is NOT the thread with
the main glib event loop</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-read-entire-file"/>gnome_vfs_read_entire_file ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_read_entire_file   (const char *uri,
                                             int *file_size,
                                             char **file_contents);</programlisting>
<para>
Reads an entire file into memory for convenience. Beware accidentally
loading large files into memory with this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> URI of the file to read
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_size</parameter>&nbsp;:</term>
<listitem><simpara> after reading the file, contains the size of the file read
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_contents</parameter>&nbsp;:</term>
<listitem><simpara> contains the file_size bytes, the contents of the file at <parameter>uri</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An integer representing the result of the operation

</simpara></listitem></varlistentry>
</variablelist><para>Since  2.2
</para></refsect2>

</refsect1>




</refentry>
