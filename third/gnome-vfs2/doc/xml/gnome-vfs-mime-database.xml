<refentry id="gnome-vfs-20-gnome-vfs-mime-database">
<refmeta>
<refentrytitle>File Types</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS-2.0 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>File Types</refname><refpurpose>
functions for getting information about files based on their MIME type</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="GNOME-VFS-MIME-TYPE-UNKNOWN-CAPS">GNOME_VFS_MIME_TYPE_UNKNOWN</link>
const <link linkend="char">char</link>* <link linkend="gnome-vfs-get-mime-type-for-data">gnome_vfs_get_mime_type_for_data</link>
                                            (<link linkend="gconstpointer">gconstpointer</link> data,
                                             <link linkend="int">int</link> data_size);
<link linkend="char">char</link>*       <link linkend="gnome-vfs-get-mime-type">gnome_vfs_get_mime_type</link>         (const <link linkend="char">char</link> *text_uri);
enum        <link linkend="GnomeVFSMimeActionType">GnomeVFSMimeActionType</link>;
enum        <link linkend="GnomeVFSMimeApplicationArgumentType">GnomeVFSMimeApplicationArgumentType</link>;
struct      <link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>;
struct      <link linkend="GnomeVFSMimeAction">GnomeVFSMimeAction</link>;
<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* <link linkend="gnome-vfs-mime-application-copy">gnome_vfs_mime_application_copy</link>
                                            (<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);
<link linkend="GnomeVFSMimeActionType">GnomeVFSMimeActionType</link> <link linkend="gnome-vfs-mime-get-default-action-type">gnome_vfs_mime_get_default_action_type</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GnomeVFSMimeAction">GnomeVFSMimeAction</link>* <link linkend="gnome-vfs-mime-get-default-action">gnome_vfs_mime_get_default_action</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* <link linkend="gnome-vfs-mime-get-default-application">gnome_vfs_mime_get_default_application</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="Bonobo-ServerInfo">Bonobo_ServerInfo</link>* <link linkend="gnome-vfs-mime-get-default-component">gnome_vfs_mime_get_default_component</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-get-short-list-applications">gnome_vfs_mime_get_short_list_applications</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-get-short-list-components">gnome_vfs_mime_get_short_list_components</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-get-all-applications">gnome_vfs_mime_get_all_applications</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-get-all-components">gnome_vfs_mime_get_all_components</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-default-action-type">gnome_vfs_mime_set_default_action_type</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GnomeVFSMimeActionType">GnomeVFSMimeActionType</link> action_type);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-default-application">gnome_vfs_mime_set_default_application</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *application_id);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-default-component">gnome_vfs_mime_set_default_component</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *component_iid);
const <link linkend="char">char</link>* <link linkend="gnome-vfs-mime-get-icon">gnome_vfs_mime_get_icon</link>         (const <link linkend="char">char</link> *mime_type);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-icon">gnome_vfs_mime_set_icon</link>      (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *filename);
const <link linkend="char">char</link>* <link linkend="gnome-vfs-mime-get-description">gnome_vfs_mime_get_description</link>  (const <link linkend="char">char</link> *mime_type);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-description">gnome_vfs_mime_set_description</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *description);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-mime-can-be-executable">gnome_vfs_mime_can_be_executable</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-can-be-executable">gnome_vfs_mime_set_can_be_executable</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="gboolean">gboolean</link> new_value);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-short-list-applications">gnome_vfs_mime_set_short_list_applications</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *application_ids);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-short-list-components">gnome_vfs_mime_set_short_list_components</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *component_iids);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-add-application-to-short-list">gnome_vfs_mime_add_application_to_short_list</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *application_id);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-remove-application-from-short-list">gnome_vfs_mime_remove_application_from_short_list</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *application_id);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-add-component-to-short-list">gnome_vfs_mime_add_component_to_short_list</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *iid);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-remove-component-from-short-list">gnome_vfs_mime_remove_component_from_short_list</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *iid);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-add-extension">gnome_vfs_mime_add_extension</link> (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *extension);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-remove-extension">gnome_vfs_mime_remove_extension</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *extension);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-extend-all-applications">gnome_vfs_mime_extend_all_applications</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *application_ids);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-remove-from-all-applications">gnome_vfs_mime_remove_from_all_applications</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *application_ids);
<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* <link linkend="gnome-vfs-mime-application-new-from-id">gnome_vfs_mime_application_new_from_id</link>
                                            (const <link linkend="char">char</link> *id);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-application-free">gnome_vfs_mime_application_free</link> (<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-action-free">gnome_vfs_mime_action_free</link>      (<link linkend="GnomeVFSMimeAction">GnomeVFSMimeAction</link> *action);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-application-list-free">gnome_vfs_mime_application_list_free</link>
                                            (<link linkend="GList">GList</link> *list);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-component-list-free">gnome_vfs_mime_component_list_free</link>
                                            (<link linkend="GList">GList</link> *list);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-mime-id-in-application-list">gnome_vfs_mime_id_in_application_list</link>
                                            (const <link linkend="char">char</link> *id,
                                             <link linkend="GList">GList</link> *applications);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-mime-id-in-component-list">gnome_vfs_mime_id_in_component_list</link>
                                            (const <link linkend="char">char</link> *iid,
                                             <link linkend="GList">GList</link> *components);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-remove-application-from-list">gnome_vfs_mime_remove_application_from_list</link>
                                            (<link linkend="GList">GList</link> *applications,
                                             const <link linkend="char">char</link> *application_id,
                                             <link linkend="gboolean">gboolean</link> *did_remove);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-remove-component-from-list">gnome_vfs_mime_remove_component_from_list</link>
                                            (<link linkend="GList">GList</link> *components,
                                             const <link linkend="char">char</link> *iid,
                                             <link linkend="gboolean">gboolean</link> *did_remove);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-id-list-from-component-list">gnome_vfs_mime_id_list_from_component_list</link>
                                            (<link linkend="GList">GList</link> *components);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-id-list-from-application-list">gnome_vfs_mime_id_list_from_application_list</link>
                                            (<link linkend="GList">GList</link> *applications);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-freeze">gnome_vfs_mime_freeze</link>           (void);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-thaw">gnome_vfs_mime_thaw</link>             (void);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-info-reload">gnome_vfs_mime_info_reload</link>      (void);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-vfs-mime-type-is-known">gnome_vfs_mime_type_is_known</link>    (const <link linkend="char">char</link> *mime_type);
const <link linkend="char">char</link>* <link linkend="gnome-vfs-mime-get-value">gnome_vfs_mime_get_value</link>        (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *key);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-value">gnome_vfs_mime_set_value</link>     (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *key,
                                             const <link linkend="char">char</link> *value);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-get-key-list">gnome_vfs_mime_get_key_list</link>     (const <link linkend="char">char</link> *mime_type);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-keys-list-free">gnome_vfs_mime_keys_list_free</link>   (<link linkend="GList">GList</link> *mime_type_list);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-mime-get-extensions-list">gnome_vfs_mime_get_extensions_list</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-extensions-list-free">gnome_vfs_mime_extensions_list_free</link>
                                            (<link linkend="GList">GList</link> *list);
<link linkend="char">char</link>*       <link linkend="gnome-vfs-mime-get-extensions-string">gnome_vfs_mime_get_extensions_string</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="char">char</link>*       <link linkend="gnome-vfs-mime-get-extensions-pretty-string">gnome_vfs_mime_get_extensions_pretty_string</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="GList">GList</link>*      <link linkend="gnome-vfs-get-registered-mime-types">gnome_vfs_get_registered_mime_types</link>
                                            (void);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-registered-mime-type-list-free">gnome_vfs_mime_registered_mime_type_list_free</link>
                                            (<link linkend="GList">GList</link> *list);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-registered-type-key">gnome_vfs_mime_set_registered_type_key</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *key,
                                             const <link linkend="char">char</link> *data);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-mime-set-extensions-list">gnome_vfs_mime_set_extensions_list</link>
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *extensions_list);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-registered-mime-type-delete">gnome_vfs_mime_registered_mime_type_delete</link>
                                            (const <link linkend="char">char</link> *mime_type);
<link linkend="void">void</link>        <link linkend="gnome-vfs-mime-reset">gnome_vfs_mime_reset</link>            (void);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GNOME-VFS-MIME-TYPE-UNKNOWN-CAPS"/>GNOME_VFS_MIME_TYPE_UNKNOWN</title>
<indexterm><primary>GNOME_VFS_MIME_TYPE_UNKNOWN</primary></indexterm><programlisting>#define GNOME_VFS_MIME_TYPE_UNKNOWN "application/octet-stream"
</programlisting>
<para>
The value returned for the MIME type when a file did
not match any entries in the MIME database. May be
treated as a file of an unknown type.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-mime-type-for-data"/>gnome_vfs_get_mime_type_for_data ()</title>
<indexterm><primary>gnome_vfs_get_mime_type_for_data</primary></indexterm><programlisting>const <link linkend="char">char</link>* gnome_vfs_get_mime_type_for_data
                                            (<link linkend="gconstpointer">gconstpointer</link> data,
                                             <link linkend="int">int</link> data_size);</programlisting>
<para>
Tries to guess the mime type of the data in <parameter>data</parameter>
using the magic patterns.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to data in memory.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&nbsp;:</term>
<listitem><simpara> Size of the data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the mime-type for this filename.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-mime-type"/>gnome_vfs_get_mime_type ()</title>
<indexterm><primary>gnome_vfs_get_mime_type</primary></indexterm><programlisting><link linkend="char">char</link>*       gnome_vfs_get_mime_type         (const <link linkend="char">char</link> *text_uri);</programlisting>
<para>
Determine the mime type of <parameter>text_uri</parameter>. The mime type is determined
in the same way as by <link linkend="gnome-vfs-get-file-info"><function>gnome_vfs_get_file_info()</function></link>. This is meant as
a convenience function for times when you only want the mime type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text_uri</parameter>&nbsp;:</term>
<listitem><simpara> URI of the file for which to get the mime type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The mime type, or NULL if there is an error reading 
the file.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GnomeVFSMimeActionType"/>enum GnomeVFSMimeActionType</title>
<indexterm><primary>GnomeVFSMimeActionType</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_MIME_ACTION_TYPE_NONE,
	GNOME_VFS_MIME_ACTION_TYPE_APPLICATION,
	GNOME_VFS_MIME_ACTION_TYPE_COMPONENT
} GnomeVFSMimeActionType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeVFSMimeApplicationArgumentType"/>enum GnomeVFSMimeApplicationArgumentType</title>
<indexterm><primary>GnomeVFSMimeApplicationArgumentType</primary></indexterm><programlisting>typedef enum {
	GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS,
	GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_PATHS,
	GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS_FOR_NON_FILES
} GnomeVFSMimeApplicationArgumentType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeVFSMimeApplication"/>struct GnomeVFSMimeApplication</title>
<indexterm><primary>GnomeVFSMimeApplication</primary></indexterm><programlisting>struct GnomeVFSMimeApplication {

	char *id;
	char *name;
	char *command;
	gboolean can_open_multiple_files;
	GnomeVFSMimeApplicationArgumentType expects_uris;
	GList *supported_uri_schemes;
	gboolean requires_terminal;

	/* Padded to avoid future breaks in ABI compatibility */
	void *reserved1;
	void *reserved2;

};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeVFSMimeAction"/>struct GnomeVFSMimeAction</title>
<indexterm><primary>GnomeVFSMimeAction</primary></indexterm><programlisting>struct GnomeVFSMimeAction {

	GnomeVFSMimeActionType action_type;
	union {
		Bonobo_ServerInfo *component;
		void *dummy_component;
		GnomeVFSMimeApplication *application;
	} action;
</programlisting>
<para>
This data structure describes an action that can be done 
on a file.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-application-copy"/>gnome_vfs_mime_application_copy ()</title>
<indexterm><primary>gnome_vfs_mime_application_copy</primary></indexterm><programlisting><link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* gnome_vfs_mime_application_copy
                                            (<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);</programlisting>
<para>
Creates a newly referenced copy of a GnomeVFSMimeApplication object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>application</parameter>&nbsp;:</term>
<listitem><simpara> The GnomeVFSMimeApplication to be duplicated.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A copy of <parameter>application</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-default-action-type"/>gnome_vfs_mime_get_default_action_type ()</title>
<indexterm><primary>gnome_vfs_mime_get_default_action_type</primary></indexterm><programlisting><link linkend="GnomeVFSMimeActionType">GnomeVFSMimeActionType</link> gnome_vfs_mime_get_default_action_type
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Query the MIME database for the type of action to be performed on a particular MIME type by default.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The type of action to be performed on a file of 
MIME type, <parameter>mime_type</parameter> by default.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-default-action"/>gnome_vfs_mime_get_default_action ()</title>
<indexterm><primary>gnome_vfs_mime_get_default_action</primary></indexterm><programlisting><link linkend="GnomeVFSMimeAction">GnomeVFSMimeAction</link>* gnome_vfs_mime_get_default_action
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Query the MIME database for default action associated with a particular MIME type <parameter>mime_type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSMimeAction representing the default action to perform upon
file of type <parameter>mime_type</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-default-application"/>gnome_vfs_mime_get_default_application ()</title>
<indexterm><primary>gnome_vfs_mime_get_default_application</primary></indexterm><programlisting><link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* gnome_vfs_mime_get_default_application
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Query the MIME database for the application to be executed on files of MIME type
<parameter>mime_type</parameter> by default.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "image/png"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSMimeApplication representing the default handler of <parameter>mime_type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-default-component"/>gnome_vfs_mime_get_default_component ()</title>
<indexterm><primary>gnome_vfs_mime_get_default_component</primary></indexterm><programlisting><link linkend="Bonobo-ServerInfo">Bonobo_ServerInfo</link>* gnome_vfs_mime_get_default_component
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Query the MIME database for the default Bonobo component to be activated to 
view files of MIME type <parameter>mime_type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "image/png"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> An Bonobo_ServerInfo * representing the OAF server to be activated
to get a reference to the proper component.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-short-list-applications"/>gnome_vfs_mime_get_short_list_applications ()</title>
<indexterm><primary>gnome_vfs_mime_get_short_list_applications</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_get_short_list_applications
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Return an alphabetically sorted list of GnomeVFSMimeApplication data
structures for the requested mime type. GnomeVFS no longer supports the
concept of a "short list" of applications that the user might be interested
in.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "image/png"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GList * where the elements are GnomeVFSMimeApplication *
representing various applications to display in the short list for <parameter>mime_type</parameter>.

<parameter>Deprecated</parameter>: Use <link linkend="gnome-vfs-mime-get-all-applications"><function>gnome_vfs_mime_get_all_applications()</function></link> instead.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-short-list-components"/>gnome_vfs_mime_get_short_list_components ()</title>
<indexterm><primary>gnome_vfs_mime_get_short_list_components</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_get_short_list_components
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Return an unsorted sorted list of Bonobo_ServerInfo * data structures for the
requested mime type.  GnomeVFS no longer supports the concept of a "short
list" of applications that the user might be interested in.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "image/png"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GList * where the elements are Bonobo_ServerInfo *
representing various components to display in the short list for <parameter>mime_type</parameter>.

<parameter>Deprecated</parameter>: Use <link linkend="gnome-vfs-mime-get-all-components"><function>gnome_vfs_mime_get_all_components()</function></link> instead.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-all-applications"/>gnome_vfs_mime_get_all_applications ()</title>
<indexterm><primary>gnome_vfs_mime_get_all_applications</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_get_all_applications
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Return an alphabetically sorted list of GnomeVFSMimeApplication
data structures representing all applications in the MIME database registered
to handle files of MIME type <parameter>mime_type</parameter> (and supertypes).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "image/png"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GList * where the elements are GnomeVFSMimeApplication *
representing applications that handle MIME type <parameter>mime_type</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-all-components"/>gnome_vfs_mime_get_all_components ()</title>
<indexterm><primary>gnome_vfs_mime_get_all_components</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_get_all_components
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Return an alphabetically sorted list of Bonobo_ServerInfo
data structures representing all Bonobo components registered
to handle files of MIME type <parameter>mime_type</parameter> (and supertypes).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "image/png"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GList * where the elements are Bonobo_ServerInfo *
representing components that can handle MIME type <parameter>mime_type</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-default-action-type"/>gnome_vfs_mime_set_default_action_type ()</title>
<indexterm><primary>gnome_vfs_mime_set_default_action_type</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_default_action_type
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GnomeVFSMimeActionType">GnomeVFSMimeActionType</link> action_type);</programlisting>
<para>
Sets the default action type to be performed on files of MIME type <parameter>mime_type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "image/png"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_type</parameter>&nbsp;:</term>
<listitem><simpara> A GnomeVFSMimeActionType containing the action to perform by default
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-default-application"/>gnome_vfs_mime_set_default_application ()</title>
<indexterm><primary>gnome_vfs_mime_set_default_application</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_default_application
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *application_id);</programlisting>
<para>
Sets the default application to be run on files of MIME type <parameter>mime_type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application_id</parameter>&nbsp;:</term>
<listitem><simpara> A key representing an application in the MIME database 
(GnomeVFSMimeApplication-&gt;id, for example)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-default-component"/>gnome_vfs_mime_set_default_component ()</title>
<indexterm><primary>gnome_vfs_mime_set_default_component</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_default_component
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *component_iid);</programlisting>
<para>
Sets the default component to be activated for files of MIME type <parameter>mime_type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component_iid</parameter>&nbsp;:</term>
<listitem><simpara> The OAFIID of a component
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-icon"/>gnome_vfs_mime_get_icon ()</title>
<indexterm><primary>gnome_vfs_mime_get_icon</primary></indexterm><programlisting>const <link linkend="char">char</link>* gnome_vfs_mime_get_icon         (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Query the MIME database for an icon representing the specified MIME type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a  MIME type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The filename of the icon as listed in the MIME database. This is
usually a filename without path information, e.g. "i-chardev.png", and sometimes
does not have an extension, e.g. "i-regular" if the icon is supposed to be image
type agnostic between icon themes. Icons are generic, and not theme specific. These
will not necessarily match with the icons a user sees in Nautilus, you have been warned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-icon"/>gnome_vfs_mime_set_icon ()</title>
<indexterm><primary>gnome_vfs_mime_set_icon</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_icon      (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *filename);</programlisting>
<para>
Set the icon entry for a particular MIME type in the MIME database. Note that
icon entries need not necessarily contain the full path, and do not necessarily need to
specify an extension. So "i-regular", "my-special-icon.png", and "some-icon"
are all valid icon filenames.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a  MIME type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> a const char * containing an image filename
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation
or any errors that may have occurred.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-description"/>gnome_vfs_mime_get_description ()</title>
<indexterm><primary>gnome_vfs_mime_get_description</primary></indexterm><programlisting>const <link linkend="char">char</link>* gnome_vfs_mime_get_description  (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Query the MIME database for a description of the specified MIME type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> the mime type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A description of MIME type <parameter>mime_type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-description"/>gnome_vfs_mime_set_description ()</title>
<indexterm><primary>gnome_vfs_mime_set_description</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_description
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *description);</programlisting>
<para>
Set the description of this MIME type in the MIME database. The description
should be something like "Gnumeric spreadsheet".</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>description</parameter>&nbsp;:</term>
<listitem><simpara> A description of this MIME type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GnomeVFSResult indicating the success of the operation or any
errors that may have occurred.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-can-be-executable"/>gnome_vfs_mime_can_be_executable ()</title>
<indexterm><primary>gnome_vfs_mime_can_be_executable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_mime_can_be_executable
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Check whether files of this MIME type might conceivably be executable.
Default for known types if FALSE. Default for unknown types is TRUE.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> gboolean containing TRUE if some files of this MIME type
are registered as being executable, and false otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-can-be-executable"/>gnome_vfs_mime_set_can_be_executable ()</title>
<indexterm><primary>gnome_vfs_mime_set_can_be_executable</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_can_be_executable
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="gboolean">gboolean</link> new_value);</programlisting>
<para>
Set whether files of this MIME type might conceivably be executable.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_value</parameter>&nbsp;:</term>
<listitem><simpara> A boolean value indicating whether <parameter>mime_type</parameter> could be executable.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GnomeVFSResult indicating the success of the operation or any
errors that may have occurred.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-short-list-applications"/>gnome_vfs_mime_set_short_list_applications ()</title>
<indexterm><primary>gnome_vfs_mime_set_short_list_applications</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_short_list_applications
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *application_ids);</programlisting>
<para>
Set the short list of applications for the specified MIME type. The short list
contains applications recommended for possible selection by the user.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application_ids</parameter>&nbsp;:</term>
<listitem><simpara> GList of const char * application ids
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-short-list-components"/>gnome_vfs_mime_set_short_list_components ()</title>
<indexterm><primary>gnome_vfs_mime_set_short_list_components</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_short_list_components
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *component_iids);</programlisting>
<para>
Set the short list of components for the specified MIME type. The short list
contains companents recommended for possible selection by the user. *</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component_iids</parameter>&nbsp;:</term>
<listitem><simpara> GList of const char * OAF IIDs
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-add-application-to-short-list"/>gnome_vfs_mime_add_application_to_short_list ()</title>
<indexterm><primary>gnome_vfs_mime_add_application_to_short_list</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_add_application_to_short_list
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *application_id);</programlisting>
<para>
Add an application to the short list for MIME type <parameter>mime_type</parameter>. The short list contains
applications recommended for display as choices to the user for a particular MIME type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application_id</parameter>&nbsp;:</term>
<listitem><simpara> const char * containing the application's id in the MIME database
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-remove-application-from-short-list"/>gnome_vfs_mime_remove_application_from_short_list ()</title>
<indexterm><primary>gnome_vfs_mime_remove_application_from_short_list</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_remove_application_from_short_list
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *application_id);</programlisting>
<para>
Remove an application from the short list for MIME type <parameter>mime_type</parameter>. The short list contains
applications recommended for display as choices to the user for a particular MIME type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application_id</parameter>&nbsp;:</term>
<listitem><simpara> const char * containing the application's id in the MIME database
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-add-component-to-short-list"/>gnome_vfs_mime_add_component_to_short_list ()</title>
<indexterm><primary>gnome_vfs_mime_add_component_to_short_list</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_add_component_to_short_list
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *iid);</programlisting>
<para>
Add a component to the short list for MIME type <parameter>mime_type</parameter>. The short list contains
components recommended for display as choices to the user for a particular MIME type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iid</parameter>&nbsp;:</term>
<listitem><simpara> const char * containing the component's OAF IID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-remove-component-from-short-list"/>gnome_vfs_mime_remove_component_from_short_list ()</title>
<indexterm><primary>gnome_vfs_mime_remove_component_from_short_list</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_remove_component_from_short_list
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *iid);</programlisting>
<para>
Remove a component from the short list for MIME type <parameter>mime_type</parameter>. The short list contains
components recommended for display as choices to the user for a particular MIME type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iid</parameter>&nbsp;:</term>
<listitem><simpara> const char * containing the component's OAF IID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-add-extension"/>gnome_vfs_mime_add_extension ()</title>
<indexterm><primary>gnome_vfs_mime_add_extension</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_add_extension (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *extension);</programlisting>
<para>
Add a file extension to the specificed MIME type in the MIME database.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> The mime type to add the mapping to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extension</parameter>&nbsp;:</term>
<listitem><simpara> The extension to add (e.g. "txt")
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GnomeVFSResult indicating the success of the operation or any
errors that may have occurred.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-remove-extension"/>gnome_vfs_mime_remove_extension ()</title>
<indexterm><primary>gnome_vfs_mime_remove_extension</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_remove_extension
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *extension);</programlisting>
<para>
Removes a file extension from the specificed MIME type in the MIME database.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> The mime type to remove the extension from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extension</parameter>&nbsp;:</term>
<listitem><simpara> The extension to remove
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GnomeVFSResult indicating the success of the operation or any
errors that may have occurred.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-extend-all-applications"/>gnome_vfs_mime_extend_all_applications ()</title>
<indexterm><primary>gnome_vfs_mime_extend_all_applications</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_extend_all_applications
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *application_ids);</programlisting>
<para>
Register <parameter>mime_type</parameter> as being handled by all applications list in <parameter>application_ids</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application_ids</parameter>&nbsp;:</term>
<listitem><simpara> a GList of const char * containing application ids
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-remove-from-all-applications"/>gnome_vfs_mime_remove_from_all_applications ()</title>
<indexterm><primary>gnome_vfs_mime_remove_from_all_applications</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_remove_from_all_applications
                                            (const <link linkend="char">char</link> *mime_type,
                                             <link linkend="GList">GList</link> *application_ids);</programlisting>
<para>
Remove <parameter>mime_type</parameter> as a handled type from every application in <parameter>application_ids</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing a mime type, e.g. "application/x-php"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application_ids</parameter>&nbsp;:</term>
<listitem><simpara> a GList of const char * containing application ids
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A GnomeVFSResult indicating the success of the operation or reporting 
any errors encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-application-new-from-id"/>gnome_vfs_mime_application_new_from_id ()</title>
<indexterm><primary>gnome_vfs_mime_application_new_from_id</primary></indexterm><programlisting><link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link>* gnome_vfs_mime_application_new_from_id
                                            (const <link linkend="char">char</link> *id);</programlisting>
<para>
Fetches the GnomeVFSMimeApplication associated with the specified
application ID from the MIME database.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> A const char * containing an application id
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GnomeVFSMimeApplication * corresponding to <parameter>id</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-application-free"/>gnome_vfs_mime_application_free ()</title>
<indexterm><primary>gnome_vfs_mime_application_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_application_free (<link linkend="GnomeVFSMimeApplication">GnomeVFSMimeApplication</link> *application);</programlisting>
<para>
Frees a GnomeVFSMimeApplication *.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>application</parameter>&nbsp;:</term>
<listitem><simpara> The GnomeVFSMimeApplication to be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-action-free"/>gnome_vfs_mime_action_free ()</title>
<indexterm><primary>gnome_vfs_mime_action_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_action_free      (<link linkend="GnomeVFSMimeAction">GnomeVFSMimeAction</link> *action);</programlisting>
<para>
Frees a GnomeVFSMimeAction *.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>action</parameter>&nbsp;:</term>
<listitem><simpara> The GnomeVFSMimeAction to be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-application-list-free"/>gnome_vfs_mime_application_list_free ()</title>
<indexterm><primary>gnome_vfs_mime_application_list_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_application_list_free
                                            (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Frees lists of GnomeVFSApplications, as returned from functions such
as <link linkend="gnome-vfs-get-all-applications"><function>gnome_vfs_get_all_applications()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a GList of GnomeVFSApplication * to be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-component-list-free"/>gnome_vfs_mime_component_list_free ()</title>
<indexterm><primary>gnome_vfs_mime_component_list_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_component_list_free
                                            (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Frees lists of Bonobo_ServerInfo * (as returned from functions such
as <parameter>gnome_vfs_get_all_components</parameter>)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a GList of Bonobo_ServerInfo * to be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-id-in-application-list"/>gnome_vfs_mime_id_in_application_list ()</title>
<indexterm><primary>gnome_vfs_mime_id_in_application_list</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_mime_id_in_application_list
                                            (const <link linkend="char">char</link> *id,
                                             <link linkend="GList">GList</link> *applications);</programlisting>
<para>
Check whether an application id is in a list of GnomeVFSMimeApplications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> An application id.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>applications</parameter>&nbsp;:</term>
<listitem><simpara> A GList * whose nodes are GnomeVFSMimeApplications, such as the
result of <link linkend="gnome-vfs-mime-get-short-list-applications"><function>gnome_vfs_mime_get_short_list_applications()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if an application whose id matches <parameter>id</parameter> is in <parameter>applications</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-id-in-component-list"/>gnome_vfs_mime_id_in_component_list ()</title>
<indexterm><primary>gnome_vfs_mime_id_in_component_list</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_mime_id_in_component_list
                                            (const <link linkend="char">char</link> *iid,
                                             <link linkend="GList">GList</link> *components);</programlisting>
<para>
Check whether a component iid is in a list of Bonobo_ServerInfos.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>iid</parameter>&nbsp;:</term>
<listitem><simpara> A component iid.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>components</parameter>&nbsp;:</term>
<listitem><simpara> A GList * whose nodes are Bonobo_ServerInfos, such as the
result of <link linkend="gnome-vfs-mime-get-short-list-components"><function>gnome_vfs_mime_get_short_list_components()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if a component whose iid matches <parameter>iid</parameter> is in <parameter>components</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-remove-application-from-list"/>gnome_vfs_mime_remove_application_from_list ()</title>
<indexterm><primary>gnome_vfs_mime_remove_application_from_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_remove_application_from_list
                                            (<link linkend="GList">GList</link> *applications,
                                             const <link linkend="char">char</link> *application_id,
                                             <link linkend="gboolean">gboolean</link> *did_remove);</programlisting>
<para>
Remove an application specified by id from a list of GnomeVFSMimeApplications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>applications</parameter>&nbsp;:</term>
<listitem><simpara> A GList * whose nodes are GnomeVFSMimeApplications, such as the
result of <link linkend="gnome-vfs-mime-get-short-list-applications"><function>gnome_vfs_mime_get_short_list_applications()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application_id</parameter>&nbsp;:</term>
<listitem><simpara> The id of an application to remove from <parameter>applications</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>did_remove</parameter>&nbsp;:</term>
<listitem><simpara> If non-NULL, this is filled in with TRUE if the application
was found in the list, FALSE otherwise.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The modified list. If the application is not found, the list will 
be unchanged.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-remove-component-from-list"/>gnome_vfs_mime_remove_component_from_list ()</title>
<indexterm><primary>gnome_vfs_mime_remove_component_from_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_remove_component_from_list
                                            (<link linkend="GList">GList</link> *components,
                                             const <link linkend="char">char</link> *iid,
                                             <link linkend="gboolean">gboolean</link> *did_remove);</programlisting>
<para>
Remove a component specified by iid from a list of Bonobo_ServerInfos.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>components</parameter>&nbsp;:</term>
<listitem><simpara> A GList * whose nodes are Bonobo_ServerInfos, such as the
result of <link linkend="gnome-vfs-mime-get-short-list-components"><function>gnome_vfs_mime_get_short_list_components()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iid</parameter>&nbsp;:</term>
<listitem><simpara> The iid of a component to remove from <parameter>components</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>did_remove</parameter>&nbsp;:</term>
<listitem><simpara> If non-NULL, this is filled in with TRUE if the component
was found in the list, FALSE otherwise.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> The modified list. If the component is not found, the list will 
be unchanged.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-id-list-from-component-list"/>gnome_vfs_mime_id_list_from_component_list ()</title>
<indexterm><primary>gnome_vfs_mime_id_list_from_component_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_id_list_from_component_list
                                            (<link linkend="GList">GList</link> *components);</programlisting>
<para>
Create a list of component iids from a list of Bonobo_ServerInfos.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>components</parameter>&nbsp;:</term>
<listitem><simpara> A GList * whose nodes are Bonobo_ServerInfos, such as the
result of <link linkend="gnome-vfs-mime-get-short-list-components"><function>gnome_vfs_mime_get_short_list_components()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A new list where each Bonobo_ServerInfo in the original
list is replaced by a char * with the component's iid. The original list is
not modified.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-id-list-from-application-list"/>gnome_vfs_mime_id_list_from_application_list ()</title>
<indexterm><primary>gnome_vfs_mime_id_list_from_application_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_id_list_from_application_list
                                            (<link linkend="GList">GList</link> *applications);</programlisting>
<para>
Create a list of application ids from a list of GnomeVFSMimeApplications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>applications</parameter>&nbsp;:</term>
<listitem><simpara> A GList * whose nodes are GnomeVFSMimeApplications, such as the
result of <link linkend="gnome-vfs-mime-get-short-list-applications"><function>gnome_vfs_mime_get_short_list_applications()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> A new list where each GnomeVFSMimeApplication in the original
list is replaced by a char * with the application's id. The original list is
not modified.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-freeze"/>gnome_vfs_mime_freeze ()</title>
<indexterm><primary>gnome_vfs_mime_freeze</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_freeze           (void);</programlisting>
<para>
Freezes the mime data so that you can do multiple
updates to the dat in one batch without needing
to back the files to disk or readind them</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-thaw"/>gnome_vfs_mime_thaw ()</title>
<indexterm><primary>gnome_vfs_mime_thaw</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_thaw             (void);</programlisting>
<para>
UnFreezes the mime data so that you can do multiple
updates to the dat in one batch without needing
to back the files to disk or readind them</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-info-reload"/>gnome_vfs_mime_info_reload ()</title>
<indexterm><primary>gnome_vfs_mime_info_reload</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_info_reload      (void);</programlisting>
<para>
Reload the MIME database from disk and notify any listeners
holding active <link linkend="GnomeVFSMIMEMonitor"><type>GnomeVFSMIMEMonitor</type></link> objects.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-type-is-known"/>gnome_vfs_mime_type_is_known ()</title>
<indexterm><primary>gnome_vfs_mime_type_is_known</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gnome_vfs_mime_type_is_known    (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
This function returns TRUE if <parameter>mime_type</parameter> is in the MIME database at all.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> a mime type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> TRUE if anything is known about <parameter>mime_type</parameter>, otherwise FALSE
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-value"/>gnome_vfs_mime_get_value ()</title>
<indexterm><primary>gnome_vfs_mime_get_value</primary></indexterm><programlisting>const <link linkend="char">char</link>* gnome_vfs_mime_get_value        (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *key);</programlisting>
<para>
This function retrieves the value associated with <parameter>key</parameter> in
the given GnomeMimeContext.  The string is private, you
should not free the result.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> a mime type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> A key to lookup for the given mime-type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GNOME_VFS_OK if the operation succeeded, otherwise an error code
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-value"/>gnome_vfs_mime_set_value ()</title>
<indexterm><primary>gnome_vfs_mime_set_value</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_value     (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *key,
                                             const <link linkend="char">char</link> *value);</programlisting>
<para>
This function is going to set the value
associated to the key and it will save it
to the user' file if necessary.
You should not free the key/values passed to
this function. They are used internally.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> a mime type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> a key to store the value in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> the value to store in the key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> GNOME_VFS_OK if the operation succeeded, otherwise an error code

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-key-list"/>gnome_vfs_mime_get_key_list ()</title>
<indexterm><primary>gnome_vfs_mime_get_key_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_get_key_list     (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-keys-list-free"/>gnome_vfs_mime_keys_list_free ()</title>
<indexterm><primary>gnome_vfs_mime_keys_list_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_keys_list_free   (<link linkend="GList">GList</link> *mime_type_list);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type_list</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-extensions-list"/>gnome_vfs_mime_get_extensions_list ()</title>
<indexterm><primary>gnome_vfs_mime_get_extensions_list</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_mime_get_extensions_list
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>
Get the file extensions associated with mime type <parameter>mime_type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> type to get the extensions of
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a GList of char *s
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-extensions-list-free"/>gnome_vfs_mime_extensions_list_free ()</title>
<indexterm><primary>gnome_vfs_mime_extensions_list_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_extensions_list_free
                                            (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Call this function on the list returned by gnome_vfs_mime_extensions
to free the list and all of its elements.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> the extensions list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-extensions-string"/>gnome_vfs_mime_get_extensions_string ()</title>
<indexterm><primary>gnome_vfs_mime_get_extensions_string</primary></indexterm><programlisting><link linkend="char">char</link>*       gnome_vfs_mime_get_extensions_string
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-get-extensions-pretty-string"/>gnome_vfs_mime_get_extensions_pretty_string ()</title>
<indexterm><primary>gnome_vfs_mime_get_extensions_pretty_string</primary></indexterm><programlisting><link linkend="char">char</link>*       gnome_vfs_mime_get_extensions_pretty_string
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-registered-mime-types"/>gnome_vfs_get_registered_mime_types ()</title>
<indexterm><primary>gnome_vfs_get_registered_mime_types</primary></indexterm><programlisting><link linkend="GList">GList</link>*      gnome_vfs_get_registered_mime_types
                                            (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-registered-mime-type-list-free"/>gnome_vfs_mime_registered_mime_type_list_free ()</title>
<indexterm><primary>gnome_vfs_mime_registered_mime_type_list_free</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_registered_mime_type_list_free
                                            (<link linkend="GList">GList</link> *list);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-registered-type-key"/>gnome_vfs_mime_set_registered_type_key ()</title>
<indexterm><primary>gnome_vfs_mime_set_registered_type_key</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_registered_type_key
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *key,
                                             const <link linkend="char">char</link> *data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-set-extensions-list"/>gnome_vfs_mime_set_extensions_list ()</title>
<indexterm><primary>gnome_vfs_mime_set_extensions_list</primary></indexterm><programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_mime_set_extensions_list
                                            (const <link linkend="char">char</link> *mime_type,
                                             const <link linkend="char">char</link> *extensions_list);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extensions_list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-registered-mime-type-delete"/>gnome_vfs_mime_registered_mime_type_delete ()</title>
<indexterm><primary>gnome_vfs_mime_registered_mime_type_delete</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_registered_mime_type_delete
                                            (const <link linkend="char">char</link> *mime_type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-mime-reset"/>gnome_vfs_mime_reset ()</title>
<indexterm><primary>gnome_vfs_mime_reset</primary></indexterm><programlisting><link linkend="void">void</link>        gnome_vfs_mime_reset            (void);</programlisting>
<para>

</para></refsect2>

</refsect1>




</refentry>
