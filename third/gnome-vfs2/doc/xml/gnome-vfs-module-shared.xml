<refentry id="gnome-vfs-gnome-vfs-module-shared">
<refmeta>
<refentrytitle>gnome-vfs-module-shared</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-VFS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-vfs-module-shared</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



const <link linkend="gchar">gchar</link>* <link linkend="gnome-vfs-mime-type-from-mode">gnome_vfs_mime_type_from_mode</link>  (<link linkend="mode-t">mode_t</link> mode);
void        <link linkend="gnome-vfs-stat-to-file-info">gnome_vfs_stat_to_file_info</link>     (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *file_info,
                                             const struct <link linkend="stat">stat</link> *statptr);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-set-meta">gnome_vfs_set_meta</link>           (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info,
                                             const char *file_name,
                                             const char *meta_key);
<link linkend="GnomeVFSResult">GnomeVFSResult</link> <link linkend="gnome-vfs-set-meta-for-list">gnome_vfs_set_meta_for_list</link>  (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info,
                                             const char *file_name,
                                             const <link linkend="GList">GList</link> *meta_keys);
const char* <link linkend="gnome-vfs-get-special-mime-type">gnome_vfs_get_special_mime_type</link> (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-vfs-mime-type-from-mode"/>gnome_vfs_mime_type_from_mode ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* gnome_vfs_mime_type_from_mode  (<link linkend="mode-t">mode_t</link> mode);</programlisting>
<para>
Returns a MIME type based on the mode passed. It only works when mode
references a special file (directory, device, fifo, socket or symlink)
</para>
<para>
Returns: a string containing the MIME type, if <parameter>mode</parameter> is a normal file</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-stat-to-file-info"/>gnome_vfs_stat_to_file_info ()</title>
<programlisting>void        gnome_vfs_stat_to_file_info     (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *file_info,
                                             const struct <link linkend="stat">stat</link> *statptr);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file_info</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>statptr</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-set-meta"/>gnome_vfs_set_meta ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_set_meta           (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info,
                                             const char *file_name,
                                             const char *meta_key);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>meta_key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-set-meta-for-list"/>gnome_vfs_set_meta_for_list ()</title>
<programlisting><link linkend="GnomeVFSResult">GnomeVFSResult</link> gnome_vfs_set_meta_for_list  (<link linkend="GnomeVFSFileInfo">GnomeVFSFileInfo</link> *info,
                                             const char *file_name,
                                             const <link linkend="GList">GList</link> *meta_keys);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>info</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file_name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>meta_keys</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnome-vfs-get-special-mime-type"/>gnome_vfs_get_special_mime_type ()</title>
<programlisting>const char* gnome_vfs_get_special_mime_type (<link linkend="GnomeVFSURI">GnomeVFSURI</link> *uri);</programlisting>
<para>
Gets the MIME type for <parameter>uri</parameter>, this function only returns the type
when the URI points to a file that can't be sniffed (sockets, 
directories, devices, and fifos).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a string containing the mime type, NULL if the <parameter>uri</parameter> doesn't 
present an special file.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
