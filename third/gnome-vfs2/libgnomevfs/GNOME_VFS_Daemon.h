/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef GNOME_VFS_Daemon_H
#define GNOME_VFS_Daemon_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <bonobo-activation/Bonobo_Unknown.h>
#if !defined(_GNOME_VFS_Result_defined)
#define _GNOME_VFS_Result_defined 1
   typedef CORBA_long GNOME_VFS_Result;
#define GNOME_VFS_Result_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
#define GNOME_VFS_Result_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_Result_0)
#define TC_IMPL_TC_GNOME_VFS_Result_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Result_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Result_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Result_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Result_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Result_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Result_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Result_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Result_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Result_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Result_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Result_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Result_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Result_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Result_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Result_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Result_struct;
#define TC_GNOME_VFS_Result ((CORBA_TypeCode)&TC_GNOME_VFS_Result_struct)
#endif
#define GNOME_VFS_Result__alloc() ((GNOME_VFS_Result *)ORBit_small_alloc (TC_CORBA_long))
#define GNOME_VFS_Result__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
#endif
#if !defined(_GNOME_VFS_FileOffset_defined)
#define _GNOME_VFS_FileOffset_defined 1
   typedef CORBA_long_long GNOME_VFS_FileOffset;
#define GNOME_VFS_FileOffset_marshal(x,y,z) CORBA_long_long_marshal((x),(y),(z))
#define GNOME_VFS_FileOffset_demarshal(x,y,z,i) CORBA_long_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_FileOffset_0)
#define TC_IMPL_TC_GNOME_VFS_FileOffset_0 'G'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_1 'N'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_2 'O'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_3 'M'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_4 'E'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_5 '_'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_6 'V'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_7 'F'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_8 'S'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_9 '_'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_10 'D'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_11 'a'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_12 'e'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_13 'm'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_14 'o'
#define TC_IMPL_TC_GNOME_VFS_FileOffset_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_FileOffset_struct;
#define TC_GNOME_VFS_FileOffset ((CORBA_TypeCode)&TC_GNOME_VFS_FileOffset_struct)
#endif
#define GNOME_VFS_FileOffset__alloc() ((GNOME_VFS_FileOffset *)ORBit_small_alloc (TC_CORBA_long_long))
#define GNOME_VFS_FileOffset__freekids(m,d) ORBit_small_freekids (TC_CORBA_long_long,(m),(d))
#endif
#if !defined(_GNOME_VFS_FileSize_defined)
#define _GNOME_VFS_FileSize_defined 1
   typedef CORBA_unsigned_long_long GNOME_VFS_FileSize;
#define GNOME_VFS_FileSize_marshal(x,y,z) CORBA_unsigned_long_long_marshal((x),(y),(z))
#define GNOME_VFS_FileSize_demarshal(x,y,z,i) CORBA_unsigned_long_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_FileSize_0)
#define TC_IMPL_TC_GNOME_VFS_FileSize_0 'G'
#define TC_IMPL_TC_GNOME_VFS_FileSize_1 'N'
#define TC_IMPL_TC_GNOME_VFS_FileSize_2 'O'
#define TC_IMPL_TC_GNOME_VFS_FileSize_3 'M'
#define TC_IMPL_TC_GNOME_VFS_FileSize_4 'E'
#define TC_IMPL_TC_GNOME_VFS_FileSize_5 '_'
#define TC_IMPL_TC_GNOME_VFS_FileSize_6 'V'
#define TC_IMPL_TC_GNOME_VFS_FileSize_7 'F'
#define TC_IMPL_TC_GNOME_VFS_FileSize_8 'S'
#define TC_IMPL_TC_GNOME_VFS_FileSize_9 '_'
#define TC_IMPL_TC_GNOME_VFS_FileSize_10 'D'
#define TC_IMPL_TC_GNOME_VFS_FileSize_11 'a'
#define TC_IMPL_TC_GNOME_VFS_FileSize_12 'e'
#define TC_IMPL_TC_GNOME_VFS_FileSize_13 'm'
#define TC_IMPL_TC_GNOME_VFS_FileSize_14 'o'
#define TC_IMPL_TC_GNOME_VFS_FileSize_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_FileSize_struct;
#define TC_GNOME_VFS_FileSize ((CORBA_TypeCode)&TC_GNOME_VFS_FileSize_struct)
#endif
#define GNOME_VFS_FileSize__alloc() ((GNOME_VFS_FileSize *)ORBit_small_alloc (TC_CORBA_unsigned_long_long))
#define GNOME_VFS_FileSize__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long_long,(m),(d))
#endif
#if !defined(_GNOME_VFS_Time_defined)
#define _GNOME_VFS_Time_defined 1
   typedef CORBA_unsigned_long GNOME_VFS_Time;
#define GNOME_VFS_Time_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
#define GNOME_VFS_Time_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_Time_0)
#define TC_IMPL_TC_GNOME_VFS_Time_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Time_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Time_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Time_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Time_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Time_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Time_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Time_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Time_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Time_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Time_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Time_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Time_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Time_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Time_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Time_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Time_struct;
#define TC_GNOME_VFS_Time ((CORBA_TypeCode)&TC_GNOME_VFS_Time_struct)
#endif
#define GNOME_VFS_Time__alloc() ((GNOME_VFS_Time *)ORBit_small_alloc (TC_CORBA_unsigned_long))
#define GNOME_VFS_Time__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'N'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'O'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'E'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_6 'V'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_7 'F'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_8 'S'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_9 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_10 'D'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_11 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_12 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_13 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_14 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_15 'n'
#if !defined(_CORBA_sequence_CORBA_octet_defined)
#define _CORBA_sequence_CORBA_octet_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_octet;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'N'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'O'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'E'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_6 'V'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_7 'F'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_8 'S'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_9 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_10 'D'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_11 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_12 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_13 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_14 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
#define CORBA_sequence_CORBA_octet__alloc() ((CORBA_sequence_CORBA_octet *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
#define CORBA_sequence_CORBA_octet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#endif
#if !defined(_GNOME_VFS_buffer_defined)
#define _GNOME_VFS_buffer_defined 1
   typedef CORBA_sequence_CORBA_octet GNOME_VFS_buffer;
#define GNOME_VFS_buffer_marshal(x,y,z) CORBA_sequence_CORBA_octet_marshal((x),(y),(z))
#define GNOME_VFS_buffer_demarshal(x,y,z,i) CORBA_sequence_CORBA_octet_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_buffer_0)
#define TC_IMPL_TC_GNOME_VFS_buffer_0 'G'
#define TC_IMPL_TC_GNOME_VFS_buffer_1 'N'
#define TC_IMPL_TC_GNOME_VFS_buffer_2 'O'
#define TC_IMPL_TC_GNOME_VFS_buffer_3 'M'
#define TC_IMPL_TC_GNOME_VFS_buffer_4 'E'
#define TC_IMPL_TC_GNOME_VFS_buffer_5 '_'
#define TC_IMPL_TC_GNOME_VFS_buffer_6 'V'
#define TC_IMPL_TC_GNOME_VFS_buffer_7 'F'
#define TC_IMPL_TC_GNOME_VFS_buffer_8 'S'
#define TC_IMPL_TC_GNOME_VFS_buffer_9 '_'
#define TC_IMPL_TC_GNOME_VFS_buffer_10 'D'
#define TC_IMPL_TC_GNOME_VFS_buffer_11 'a'
#define TC_IMPL_TC_GNOME_VFS_buffer_12 'e'
#define TC_IMPL_TC_GNOME_VFS_buffer_13 'm'
#define TC_IMPL_TC_GNOME_VFS_buffer_14 'o'
#define TC_IMPL_TC_GNOME_VFS_buffer_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_buffer_struct;
#define TC_GNOME_VFS_buffer ((CORBA_TypeCode)&TC_GNOME_VFS_buffer_struct)
#endif
#define GNOME_VFS_buffer__alloc() ((GNOME_VFS_buffer *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
#define GNOME_VFS_buffer__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
#define GNOME_VFS_buffer_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#endif
#if !defined(_GNOME_VFS_FileInfo_defined)
#define _GNOME_VFS_FileInfo_defined 1
   typedef struct GNOME_VFS_FileInfo_type GNOME_VFS_FileInfo;
   struct GNOME_VFS_FileInfo_type
   {
      CORBA_string name;
      CORBA_long valid_fields;
      CORBA_unsigned_long type;
      CORBA_unsigned_long permissions;
      CORBA_unsigned_long flags;
      CORBA_unsigned_long device;
      GNOME_VFS_FileSize inode;
      CORBA_unsigned_long link_count;
      CORBA_unsigned_long uid;
      CORBA_unsigned_long gid;
      GNOME_VFS_FileSize size;
      GNOME_VFS_FileSize block_count;
      CORBA_unsigned_long io_block_size;
      GNOME_VFS_Time atime;
      GNOME_VFS_Time mtime;
      GNOME_VFS_Time ctime;
      CORBA_string symlink_name;
      CORBA_string mime_type;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_FileInfo_0)
#define TC_IMPL_TC_GNOME_VFS_FileInfo_0 'G'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_1 'N'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_2 'O'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_3 'M'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_4 'E'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_5 '_'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_6 'V'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_7 'F'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_8 'S'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_9 '_'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_10 'D'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_11 'a'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_12 'e'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_13 'm'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_14 'o'
#define TC_IMPL_TC_GNOME_VFS_FileInfo_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_FileInfo_struct;
#define TC_GNOME_VFS_FileInfo ((CORBA_TypeCode)&TC_GNOME_VFS_FileInfo_struct)
#endif
#define GNOME_VFS_FileInfo__alloc() ((GNOME_VFS_FileInfo *)ORBit_small_alloc (TC_GNOME_VFS_FileInfo))
#define GNOME_VFS_FileInfo__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_FileInfo,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_VFS_FileInfo)
#define ORBIT_DECL_CORBA_sequence_GNOME_VFS_FileInfo 1
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_0 'G'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_1 'N'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_2 'O'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_3 'M'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_4 'E'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_5 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_6 'V'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_7 'F'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_8 'S'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_9 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_10 'D'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_11 'a'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_12 'e'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_13 'm'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_14 'o'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_FileInfo_15 'n'
#if !defined(_CORBA_sequence_GNOME_VFS_FileInfo_defined)
#define _CORBA_sequence_GNOME_VFS_FileInfo_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      GNOME_VFS_FileInfo *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_GNOME_VFS_FileInfo;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_0)
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_0 'G'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_1 'N'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_2 'O'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_3 'M'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_4 'E'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_5 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_6 'V'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_7 'F'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_8 'S'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_9 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_10 'D'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_11 'a'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_12 'e'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_13 'm'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_14 'o'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_FileInfo_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_GNOME_VFS_FileInfo_struct;
#define TC_CORBA_sequence_GNOME_VFS_FileInfo ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_VFS_FileInfo_struct)
#endif
#define CORBA_sequence_GNOME_VFS_FileInfo__alloc() ((CORBA_sequence_GNOME_VFS_FileInfo *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_VFS_FileInfo))
#define CORBA_sequence_GNOME_VFS_FileInfo__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_VFS_FileInfo,(m),(d))
#define CORBA_sequence_GNOME_VFS_FileInfo_allocbuf(l) ((GNOME_VFS_FileInfo*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_FileInfo, (l)))
#define CORBA_sequence_GNOME_VFS_FileInfo_allocbuf(l) ((GNOME_VFS_FileInfo*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_FileInfo, (l)))
#endif
#if !defined(_GNOME_VFS_FileInfoList_defined)
#define _GNOME_VFS_FileInfoList_defined 1
   typedef CORBA_sequence_GNOME_VFS_FileInfo GNOME_VFS_FileInfoList;
#define GNOME_VFS_FileInfoList_marshal(x,y,z) CORBA_sequence_GNOME_VFS_FileInfo_marshal((x),(y),(z))
#define GNOME_VFS_FileInfoList_demarshal(x,y,z,i) CORBA_sequence_GNOME_VFS_FileInfo_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_FileInfoList_0)
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_0 'G'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_1 'N'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_2 'O'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_3 'M'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_4 'E'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_6 'V'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_7 'F'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_8 'S'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_10 'D'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_11 'a'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_12 'e'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_13 'm'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_14 'o'
#define TC_IMPL_TC_GNOME_VFS_FileInfoList_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_FileInfoList_struct;
#define TC_GNOME_VFS_FileInfoList ((CORBA_TypeCode)&TC_GNOME_VFS_FileInfoList_struct)
#endif
#define GNOME_VFS_FileInfoList__alloc() ((GNOME_VFS_FileInfoList *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_VFS_FileInfo))
#define GNOME_VFS_FileInfoList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_VFS_FileInfo,(m),(d))
#define GNOME_VFS_FileInfoList_allocbuf(l) ((GNOME_VFS_FileInfo*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_FileInfo, (l)))
#endif
#if !defined(_GNOME_VFS_Volume_defined)
#define _GNOME_VFS_Volume_defined 1
   typedef struct GNOME_VFS_Volume_type GNOME_VFS_Volume;
   struct GNOME_VFS_Volume_type
   {
      CORBA_long id;
      CORBA_long volume_type;
      CORBA_long device_type;
      CORBA_long drive;
      CORBA_string activation_uri;
      CORBA_string filesystem_type;
      CORBA_string display_name;
      CORBA_string icon;
      CORBA_boolean is_user_visible;
      CORBA_boolean is_read_only;
      CORBA_boolean is_mounted;
      CORBA_string device_path;
      CORBA_long unix_device;
      CORBA_string gconf_id;
      CORBA_string hal_udi;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_Volume_0)
#define TC_IMPL_TC_GNOME_VFS_Volume_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Volume_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Volume_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Volume_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Volume_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Volume_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Volume_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Volume_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Volume_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Volume_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Volume_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Volume_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Volume_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Volume_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Volume_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Volume_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Volume_struct;
#define TC_GNOME_VFS_Volume ((CORBA_TypeCode)&TC_GNOME_VFS_Volume_struct)
#endif
#define GNOME_VFS_Volume__alloc() ((GNOME_VFS_Volume *)ORBit_small_alloc (TC_GNOME_VFS_Volume))
#define GNOME_VFS_Volume__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_Volume,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_VFS_Volume)
#define ORBIT_DECL_CORBA_sequence_GNOME_VFS_Volume 1
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_0 'G'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_1 'N'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_2 'O'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_3 'M'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_4 'E'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_5 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_6 'V'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_7 'F'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_8 'S'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_9 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_10 'D'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_11 'a'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_12 'e'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_13 'm'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_14 'o'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Volume_15 'n'
#if !defined(_CORBA_sequence_GNOME_VFS_Volume_defined)
#define _CORBA_sequence_GNOME_VFS_Volume_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      GNOME_VFS_Volume *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_GNOME_VFS_Volume;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_0)
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_0 'G'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_1 'N'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_2 'O'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_3 'M'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_4 'E'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_5 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_6 'V'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_7 'F'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_8 'S'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_9 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_10 'D'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_11 'a'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_12 'e'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_13 'm'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_14 'o'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Volume_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_GNOME_VFS_Volume_struct;
#define TC_CORBA_sequence_GNOME_VFS_Volume ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_VFS_Volume_struct)
#endif
#define CORBA_sequence_GNOME_VFS_Volume__alloc() ((CORBA_sequence_GNOME_VFS_Volume *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_VFS_Volume))
#define CORBA_sequence_GNOME_VFS_Volume__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_VFS_Volume,(m),(d))
#define CORBA_sequence_GNOME_VFS_Volume_allocbuf(l) ((GNOME_VFS_Volume*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_Volume, (l)))
#define CORBA_sequence_GNOME_VFS_Volume_allocbuf(l) ((GNOME_VFS_Volume*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_Volume, (l)))
#endif
#if !defined(_GNOME_VFS_VolumeList_defined)
#define _GNOME_VFS_VolumeList_defined 1
   typedef CORBA_sequence_GNOME_VFS_Volume GNOME_VFS_VolumeList;
#define GNOME_VFS_VolumeList_marshal(x,y,z) CORBA_sequence_GNOME_VFS_Volume_marshal((x),(y),(z))
#define GNOME_VFS_VolumeList_demarshal(x,y,z,i) CORBA_sequence_GNOME_VFS_Volume_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_VolumeList_0)
#define TC_IMPL_TC_GNOME_VFS_VolumeList_0 'G'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_1 'N'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_2 'O'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_3 'M'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_4 'E'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_6 'V'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_7 'F'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_8 'S'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_10 'D'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_11 'a'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_12 'e'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_13 'm'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_14 'o'
#define TC_IMPL_TC_GNOME_VFS_VolumeList_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_VolumeList_struct;
#define TC_GNOME_VFS_VolumeList ((CORBA_TypeCode)&TC_GNOME_VFS_VolumeList_struct)
#endif
#define GNOME_VFS_VolumeList__alloc() ((GNOME_VFS_VolumeList *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_VFS_Volume))
#define GNOME_VFS_VolumeList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_VFS_Volume,(m),(d))
#define GNOME_VFS_VolumeList_allocbuf(l) ((GNOME_VFS_Volume*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_Volume, (l)))
#endif
#if !defined(_GNOME_VFS_Drive_defined)
#define _GNOME_VFS_Drive_defined 1
   typedef struct GNOME_VFS_Drive_type GNOME_VFS_Drive;
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_long)
#define ORBIT_DECL_CORBA_sequence_CORBA_long 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_1 'N'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_2 'O'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_3 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_4 'E'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_6 'V'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_7 'F'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_8 'S'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_9 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_10 'D'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_11 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_12 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_13 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_14 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_15 'n'
#if !defined(_CORBA_sequence_CORBA_long_defined)
#define _CORBA_sequence_CORBA_long_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_long *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_long;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_long_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_1 'N'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_2 'O'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_3 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_4 'E'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_6 'V'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_7 'F'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_8 'S'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_9 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_10 'D'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_11 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_12 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_13 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_14 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_long_struct;
#define TC_CORBA_sequence_CORBA_long ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_long_struct)
#endif
#define CORBA_sequence_CORBA_long__alloc() ((CORBA_sequence_CORBA_long *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_long))
#define CORBA_sequence_CORBA_long__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_long,(m),(d))
#define CORBA_sequence_CORBA_long_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#define CORBA_sequence_CORBA_long_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#endif
   struct GNOME_VFS_Drive_type
   {
      CORBA_long id;
      CORBA_long device_type;
      CORBA_sequence_CORBA_long volumes;
      CORBA_string device_path;
      CORBA_string activation_uri;
      CORBA_string display_name;
      CORBA_string icon;
      CORBA_boolean is_user_visible;
      CORBA_boolean is_connected;
      CORBA_string hal_udi;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_Drive_0)
#define TC_IMPL_TC_GNOME_VFS_Drive_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Drive_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Drive_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Drive_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Drive_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Drive_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Drive_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Drive_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Drive_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Drive_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Drive_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Drive_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Drive_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Drive_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Drive_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Drive_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Drive_struct;
#define TC_GNOME_VFS_Drive ((CORBA_TypeCode)&TC_GNOME_VFS_Drive_struct)
#endif
#define GNOME_VFS_Drive__alloc() ((GNOME_VFS_Drive *)ORBit_small_alloc (TC_GNOME_VFS_Drive))
#define GNOME_VFS_Drive__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_Drive,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_VFS_Drive)
#define ORBIT_DECL_CORBA_sequence_GNOME_VFS_Drive 1
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_0 'G'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_1 'N'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_2 'O'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_3 'M'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_4 'E'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_5 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_6 'V'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_7 'F'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_8 'S'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_9 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_10 'D'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_11 'a'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_12 'e'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_13 'm'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_14 'o'
#define ORBIT_IMPL_CORBA_sequence_GNOME_VFS_Drive_15 'n'
#if !defined(_CORBA_sequence_GNOME_VFS_Drive_defined)
#define _CORBA_sequence_GNOME_VFS_Drive_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      GNOME_VFS_Drive *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_GNOME_VFS_Drive;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_0)
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_0 'G'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_1 'N'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_2 'O'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_3 'M'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_4 'E'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_5 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_6 'V'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_7 'F'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_8 'S'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_9 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_10 'D'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_11 'a'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_12 'e'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_13 'm'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_14 'o'
#define TC_IMPL_TC_CORBA_sequence_GNOME_VFS_Drive_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_GNOME_VFS_Drive_struct;
#define TC_CORBA_sequence_GNOME_VFS_Drive ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_VFS_Drive_struct)
#endif
#define CORBA_sequence_GNOME_VFS_Drive__alloc() ((CORBA_sequence_GNOME_VFS_Drive *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_VFS_Drive))
#define CORBA_sequence_GNOME_VFS_Drive__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_VFS_Drive,(m),(d))
#define CORBA_sequence_GNOME_VFS_Drive_allocbuf(l) ((GNOME_VFS_Drive*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_Drive, (l)))
#define CORBA_sequence_GNOME_VFS_Drive_allocbuf(l) ((GNOME_VFS_Drive*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_Drive, (l)))
#endif
#if !defined(_GNOME_VFS_DriveList_defined)
#define _GNOME_VFS_DriveList_defined 1
   typedef CORBA_sequence_GNOME_VFS_Drive GNOME_VFS_DriveList;
#define GNOME_VFS_DriveList_marshal(x,y,z) CORBA_sequence_GNOME_VFS_Drive_marshal((x),(y),(z))
#define GNOME_VFS_DriveList_demarshal(x,y,z,i) CORBA_sequence_GNOME_VFS_Drive_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_VFS_DriveList_0)
#define TC_IMPL_TC_GNOME_VFS_DriveList_0 'G'
#define TC_IMPL_TC_GNOME_VFS_DriveList_1 'N'
#define TC_IMPL_TC_GNOME_VFS_DriveList_2 'O'
#define TC_IMPL_TC_GNOME_VFS_DriveList_3 'M'
#define TC_IMPL_TC_GNOME_VFS_DriveList_4 'E'
#define TC_IMPL_TC_GNOME_VFS_DriveList_5 '_'
#define TC_IMPL_TC_GNOME_VFS_DriveList_6 'V'
#define TC_IMPL_TC_GNOME_VFS_DriveList_7 'F'
#define TC_IMPL_TC_GNOME_VFS_DriveList_8 'S'
#define TC_IMPL_TC_GNOME_VFS_DriveList_9 '_'
#define TC_IMPL_TC_GNOME_VFS_DriveList_10 'D'
#define TC_IMPL_TC_GNOME_VFS_DriveList_11 'a'
#define TC_IMPL_TC_GNOME_VFS_DriveList_12 'e'
#define TC_IMPL_TC_GNOME_VFS_DriveList_13 'm'
#define TC_IMPL_TC_GNOME_VFS_DriveList_14 'o'
#define TC_IMPL_TC_GNOME_VFS_DriveList_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_DriveList_struct;
#define TC_GNOME_VFS_DriveList ((CORBA_TypeCode)&TC_GNOME_VFS_DriveList_struct)
#endif
#define GNOME_VFS_DriveList__alloc() ((GNOME_VFS_DriveList *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_VFS_Drive))
#define GNOME_VFS_DriveList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_VFS_Drive,(m),(d))
#define GNOME_VFS_DriveList_allocbuf(l) ((GNOME_VFS_Drive*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_VFS_Drive, (l)))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackQuestionIn_defined)
#define _GNOME_VFS_ModuleCallbackQuestionIn_defined 1
   typedef struct GNOME_VFS_ModuleCallbackQuestionIn_type
      GNOME_VFS_ModuleCallbackQuestionIn;
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'N'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'O'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'E'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'V'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'F'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 'S'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_10 'D'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_11 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_12 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_13 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_14 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_15 'n'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_string *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'N'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'O'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'E'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'V'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'F'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 'S'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_10 'D'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_11 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_12 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_13 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_14 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
   struct GNOME_VFS_ModuleCallbackQuestionIn_type
   {
      CORBA_string primary_message;
      CORBA_string secondary_message;
      CORBA_sequence_CORBA_string choices;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionIn_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackQuestionIn_struct;
#define TC_GNOME_VFS_ModuleCallbackQuestionIn ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackQuestionIn_struct)
#endif
#define GNOME_VFS_ModuleCallbackQuestionIn__alloc() ((GNOME_VFS_ModuleCallbackQuestionIn *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackQuestionIn))
#define GNOME_VFS_ModuleCallbackQuestionIn__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackQuestionIn,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackQuestionOut_defined)
#define _GNOME_VFS_ModuleCallbackQuestionOut_defined 1
   typedef struct GNOME_VFS_ModuleCallbackQuestionOut_type
      GNOME_VFS_ModuleCallbackQuestionOut;
   struct GNOME_VFS_ModuleCallbackQuestionOut_type
   {
      CORBA_short answer;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackQuestionOut_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackQuestionOut_struct;
#define TC_GNOME_VFS_ModuleCallbackQuestionOut ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackQuestionOut_struct)
#endif
#define GNOME_VFS_ModuleCallbackQuestionOut__alloc() ((GNOME_VFS_ModuleCallbackQuestionOut *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackQuestionOut))
#define GNOME_VFS_ModuleCallbackQuestionOut__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackQuestionOut,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackAuthenticationIn_defined)
#define _GNOME_VFS_ModuleCallbackAuthenticationIn_defined 1
   typedef struct GNOME_VFS_ModuleCallbackAuthenticationIn_type
      GNOME_VFS_ModuleCallbackAuthenticationIn;
   struct GNOME_VFS_ModuleCallbackAuthenticationIn_type
   {
      CORBA_string uri;
      CORBA_string realm;
      CORBA_boolean previous_attempt_failed;
      CORBA_unsigned_short auth_type;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationIn_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackAuthenticationIn_struct;
#define TC_GNOME_VFS_ModuleCallbackAuthenticationIn ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackAuthenticationIn_struct)
#endif
#define GNOME_VFS_ModuleCallbackAuthenticationIn__alloc() ((GNOME_VFS_ModuleCallbackAuthenticationIn *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackAuthenticationIn))
#define GNOME_VFS_ModuleCallbackAuthenticationIn__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackAuthenticationIn,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackAuthenticationOut_defined)
#define _GNOME_VFS_ModuleCallbackAuthenticationOut_defined 1
   typedef struct GNOME_VFS_ModuleCallbackAuthenticationOut_type
      GNOME_VFS_ModuleCallbackAuthenticationOut;
   struct GNOME_VFS_ModuleCallbackAuthenticationOut_type
   {
      CORBA_string username;
      CORBA_boolean no_username;
      CORBA_string password;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackAuthenticationOut_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackAuthenticationOut_struct;
#define TC_GNOME_VFS_ModuleCallbackAuthenticationOut ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackAuthenticationOut_struct)
#endif
#define GNOME_VFS_ModuleCallbackAuthenticationOut__alloc() ((GNOME_VFS_ModuleCallbackAuthenticationOut *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackAuthenticationOut))
#define GNOME_VFS_ModuleCallbackAuthenticationOut__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackAuthenticationOut,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackFullAuthenticationIn_defined)
#define _GNOME_VFS_ModuleCallbackFullAuthenticationIn_defined 1
   typedef struct GNOME_VFS_ModuleCallbackFullAuthenticationIn_type
      GNOME_VFS_ModuleCallbackFullAuthenticationIn;
   struct GNOME_VFS_ModuleCallbackFullAuthenticationIn_type
   {
      CORBA_long flags;
      CORBA_string uri;
      CORBA_string protocol;
      CORBA_string server;
      CORBA_string object;
      CORBA_long port;
      CORBA_string authtype;
      CORBA_string username;
      CORBA_string domain;
      CORBA_string default_user;
      CORBA_string default_domain;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_struct;
#define TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn_struct)
#endif
#define GNOME_VFS_ModuleCallbackFullAuthenticationIn__alloc() ((GNOME_VFS_ModuleCallbackFullAuthenticationIn *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn))
#define GNOME_VFS_ModuleCallbackFullAuthenticationIn__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackFullAuthenticationIn,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackFullAuthenticationOut_defined)
#define _GNOME_VFS_ModuleCallbackFullAuthenticationOut_defined 1
   typedef struct GNOME_VFS_ModuleCallbackFullAuthenticationOut_type
      GNOME_VFS_ModuleCallbackFullAuthenticationOut;
   struct GNOME_VFS_ModuleCallbackFullAuthenticationOut_type
   {
      CORBA_boolean abort_auth;
      CORBA_string username;
      CORBA_string domain;
      CORBA_string password;
      CORBA_boolean save_password;
      CORBA_string keyring;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_struct;
#define TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut_struct)
#endif
#define GNOME_VFS_ModuleCallbackFullAuthenticationOut__alloc() ((GNOME_VFS_ModuleCallbackFullAuthenticationOut *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut))
#define GNOME_VFS_ModuleCallbackFullAuthenticationOut__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackFullAuthenticationOut,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackFillAuthenticationIn_defined)
#define _GNOME_VFS_ModuleCallbackFillAuthenticationIn_defined 1
   typedef struct GNOME_VFS_ModuleCallbackFillAuthenticationIn_type
      GNOME_VFS_ModuleCallbackFillAuthenticationIn;
   struct GNOME_VFS_ModuleCallbackFillAuthenticationIn_type
   {
      CORBA_string uri;
      CORBA_string protocol;
      CORBA_string server;
      CORBA_string object;
      CORBA_long port;
      CORBA_string authtype;
      CORBA_string username;
      CORBA_string domain;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_struct;
#define TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn_struct)
#endif
#define GNOME_VFS_ModuleCallbackFillAuthenticationIn__alloc() ((GNOME_VFS_ModuleCallbackFillAuthenticationIn *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn))
#define GNOME_VFS_ModuleCallbackFillAuthenticationIn__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackFillAuthenticationIn,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackFillAuthenticationOut_defined)
#define _GNOME_VFS_ModuleCallbackFillAuthenticationOut_defined 1
   typedef struct GNOME_VFS_ModuleCallbackFillAuthenticationOut_type
      GNOME_VFS_ModuleCallbackFillAuthenticationOut;
   struct GNOME_VFS_ModuleCallbackFillAuthenticationOut_type
   {
      CORBA_boolean valid;
      CORBA_string username;
      CORBA_string domain;
      CORBA_string password;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_struct;
#define TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut_struct)
#endif
#define GNOME_VFS_ModuleCallbackFillAuthenticationOut__alloc() ((GNOME_VFS_ModuleCallbackFillAuthenticationOut *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut))
#define GNOME_VFS_ModuleCallbackFillAuthenticationOut__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackFillAuthenticationOut,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_defined)
#define _GNOME_VFS_ModuleCallbackSaveAuthenticationIn_defined 1
   typedef struct GNOME_VFS_ModuleCallbackSaveAuthenticationIn_type
      GNOME_VFS_ModuleCallbackSaveAuthenticationIn;
   struct GNOME_VFS_ModuleCallbackSaveAuthenticationIn_type
   {
      CORBA_string keyring;
      CORBA_string uri;
      CORBA_string protocol;
      CORBA_string server;
      CORBA_string object;
      CORBA_long port;
      CORBA_string authtype;
      CORBA_string username;
      CORBA_string domain;
      CORBA_string password;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_struct;
#define TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn_struct)
#endif
#define GNOME_VFS_ModuleCallbackSaveAuthenticationIn__alloc() ((GNOME_VFS_ModuleCallbackSaveAuthenticationIn *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn))
#define GNOME_VFS_ModuleCallbackSaveAuthenticationIn__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackSaveAuthenticationIn,(m),(d))
#endif
#if !defined(_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_defined)
#define _GNOME_VFS_ModuleCallbackSaveAuthenticationOut_defined 1
   typedef struct GNOME_VFS_ModuleCallbackSaveAuthenticationOut_type
      GNOME_VFS_ModuleCallbackSaveAuthenticationOut;
   struct GNOME_VFS_ModuleCallbackSaveAuthenticationOut_type
   {
      CORBA_long empty;
   };

#if !defined(TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_0)
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct
      TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_struct;
#define TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut ((CORBA_TypeCode)&TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut_struct)
#endif
#define GNOME_VFS_ModuleCallbackSaveAuthenticationOut__alloc() ((GNOME_VFS_ModuleCallbackSaveAuthenticationOut *)ORBit_small_alloc (TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut))
#define GNOME_VFS_ModuleCallbackSaveAuthenticationOut__freekids(m,d) ORBit_small_freekids (TC_GNOME_VFS_ModuleCallbackSaveAuthenticationOut,(m),(d))
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_DaemonMonitor) && !defined(_GNOME_VFS_DaemonMonitor_defined)
#define ORBIT_DECL_GNOME_VFS_DaemonMonitor 1
#define _GNOME_VFS_DaemonMonitor_defined 1
#define GNOME_VFS_DaemonMonitor__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_DaemonMonitor;
   extern CORBA_unsigned_long GNOME_VFS_DaemonMonitor__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_DaemonMonitor_0)
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_0 'G'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_1 'N'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_2 'O'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_3 'M'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_4 'E'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_5 '_'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_6 'V'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_7 'F'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_8 'S'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_9 '_'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_10 'D'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_11 'a'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_12 'e'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_13 'm'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_14 'o'
#define TC_IMPL_TC_GNOME_VFS_DaemonMonitor_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_DaemonMonitor_struct;
#define TC_GNOME_VFS_DaemonMonitor ((CORBA_TypeCode)&TC_GNOME_VFS_DaemonMonitor_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Client) && !defined(_GNOME_VFS_Client_defined)
#define ORBIT_DECL_GNOME_VFS_Client 1
#define _GNOME_VFS_Client_defined 1
#define GNOME_VFS_Client__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_Client;
   extern CORBA_unsigned_long GNOME_VFS_Client__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Client_0)
#define TC_IMPL_TC_GNOME_VFS_Client_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Client_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Client_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Client_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Client_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Client_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Client_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Client_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Client_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Client_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Client_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Client_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Client_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Client_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Client_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Client_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Client_struct;
#define TC_GNOME_VFS_Client ((CORBA_TypeCode)&TC_GNOME_VFS_Client_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_ClientCall) && !defined(_GNOME_VFS_ClientCall_defined)
#define ORBIT_DECL_GNOME_VFS_ClientCall 1
#define _GNOME_VFS_ClientCall_defined 1
#define GNOME_VFS_ClientCall__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_ClientCall;
   extern CORBA_unsigned_long GNOME_VFS_ClientCall__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_ClientCall_0)
#define TC_IMPL_TC_GNOME_VFS_ClientCall_0 'G'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_1 'N'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_2 'O'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_3 'M'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_4 'E'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_5 '_'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_6 'V'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_7 'F'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_8 'S'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_9 '_'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_10 'D'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_11 'a'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_12 'e'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_13 'm'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_14 'o'
#define TC_IMPL_TC_GNOME_VFS_ClientCall_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_ClientCall_struct;
#define TC_GNOME_VFS_ClientCall ((CORBA_TypeCode)&TC_GNOME_VFS_ClientCall_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_DaemonHandle) && !defined(_GNOME_VFS_DaemonHandle_defined)
#define ORBIT_DECL_GNOME_VFS_DaemonHandle 1
#define _GNOME_VFS_DaemonHandle_defined 1
#define GNOME_VFS_DaemonHandle__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_DaemonHandle;
   extern CORBA_unsigned_long GNOME_VFS_DaemonHandle__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_DaemonHandle_0)
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_0 'G'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_1 'N'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_2 'O'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_3 'M'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_4 'E'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_5 '_'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_6 'V'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_7 'F'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_8 'S'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_9 '_'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_10 'D'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_11 'a'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_12 'e'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_13 'm'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_14 'o'
#define TC_IMPL_TC_GNOME_VFS_DaemonHandle_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_DaemonHandle_struct;
#define TC_GNOME_VFS_DaemonHandle ((CORBA_TypeCode)&TC_GNOME_VFS_DaemonHandle_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_DaemonDirHandle) && !defined(_GNOME_VFS_DaemonDirHandle_defined)
#define ORBIT_DECL_GNOME_VFS_DaemonDirHandle 1
#define _GNOME_VFS_DaemonDirHandle_defined 1
#define GNOME_VFS_DaemonDirHandle__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_DaemonDirHandle;
   extern CORBA_unsigned_long GNOME_VFS_DaemonDirHandle__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_0)
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_0 'G'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_1 'N'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_2 'O'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_3 'M'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_4 'E'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_5 '_'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_6 'V'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_7 'F'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_8 'S'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_9 '_'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_10 'D'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_11 'a'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_12 'e'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_13 'm'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_14 'o'
#define TC_IMPL_TC_GNOME_VFS_DaemonDirHandle_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_DaemonDirHandle_struct;
#define TC_GNOME_VFS_DaemonDirHandle ((CORBA_TypeCode)&TC_GNOME_VFS_DaemonDirHandle_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_Daemon) && !defined(_GNOME_VFS_Daemon_defined)
#define ORBIT_DECL_GNOME_VFS_Daemon 1
#define _GNOME_VFS_Daemon_defined 1
#define GNOME_VFS_Daemon__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_Daemon;
   extern CORBA_unsigned_long GNOME_VFS_Daemon__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_Daemon_0)
#define TC_IMPL_TC_GNOME_VFS_Daemon_0 'G'
#define TC_IMPL_TC_GNOME_VFS_Daemon_1 'N'
#define TC_IMPL_TC_GNOME_VFS_Daemon_2 'O'
#define TC_IMPL_TC_GNOME_VFS_Daemon_3 'M'
#define TC_IMPL_TC_GNOME_VFS_Daemon_4 'E'
#define TC_IMPL_TC_GNOME_VFS_Daemon_5 '_'
#define TC_IMPL_TC_GNOME_VFS_Daemon_6 'V'
#define TC_IMPL_TC_GNOME_VFS_Daemon_7 'F'
#define TC_IMPL_TC_GNOME_VFS_Daemon_8 'S'
#define TC_IMPL_TC_GNOME_VFS_Daemon_9 '_'
#define TC_IMPL_TC_GNOME_VFS_Daemon_10 'D'
#define TC_IMPL_TC_GNOME_VFS_Daemon_11 'a'
#define TC_IMPL_TC_GNOME_VFS_Daemon_12 'e'
#define TC_IMPL_TC_GNOME_VFS_Daemon_13 'm'
#define TC_IMPL_TC_GNOME_VFS_Daemon_14 'o'
#define TC_IMPL_TC_GNOME_VFS_Daemon_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_Daemon_struct;
#define TC_GNOME_VFS_Daemon ((CORBA_TypeCode)&TC_GNOME_VFS_Daemon_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_VFS_AsyncDaemon) && !defined(_GNOME_VFS_AsyncDaemon_defined)
#define ORBIT_DECL_GNOME_VFS_AsyncDaemon 1
#define _GNOME_VFS_AsyncDaemon_defined 1
#define GNOME_VFS_AsyncDaemon__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_VFS_AsyncDaemon;
   extern CORBA_unsigned_long GNOME_VFS_AsyncDaemon__classid;
#if !defined(TC_IMPL_TC_GNOME_VFS_AsyncDaemon_0)
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_0 'G'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_1 'N'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_2 'O'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_3 'M'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_4 'E'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_5 '_'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_6 'V'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_7 'F'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_8 'S'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_9 '_'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_10 'D'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_11 'a'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_12 'e'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_13 'm'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_14 'o'
#define TC_IMPL_TC_GNOME_VFS_AsyncDaemon_15 'n'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_VFS_AsyncDaemon_struct;
#define TC_GNOME_VFS_AsyncDaemon ((CORBA_TypeCode)&TC_GNOME_VFS_AsyncDaemon_struct)
#endif
#endif

/** POA structures **/
#ifndef _defined_POA_GNOME_VFS_DaemonMonitor
#define _defined_POA_GNOME_VFS_DaemonMonitor 1
   typedef struct
   {
      void *_private;
       GNOME_VFS_Result(*Cancel) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
   } POA_GNOME_VFS_DaemonMonitor__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_DaemonMonitor__epv *GNOME_VFS_DaemonMonitor_epv;
   } POA_GNOME_VFS_DaemonMonitor__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_DaemonMonitor__vepv *vepv;
   } POA_GNOME_VFS_DaemonMonitor;
   extern void POA_GNOME_VFS_DaemonMonitor__init(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   extern void POA_GNOME_VFS_DaemonMonitor__fini(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_DaemonMonitor */
#ifndef _defined_POA_GNOME_VFS_Client
#define _defined_POA_GNOME_VFS_Client 1
   typedef struct
   {
      void *_private;
      void (*MonitorCallback) (PortableServer_Servant _servant,
			       const GNOME_VFS_DaemonMonitor monitor,
			       const CORBA_char * monitor_uri,
			       const CORBA_char * info_uri,
			       const CORBA_long event_type,
			       CORBA_Environment * ev);
      void (*VolumeMounted) (PortableServer_Servant _servant,
			     const GNOME_VFS_Volume * volume,
			     CORBA_Environment * ev);
      void (*VolumePreUnmount) (PortableServer_Servant _servant,
				const CORBA_long id, CORBA_Environment * ev);
      void (*VolumeUnmounted) (PortableServer_Servant _servant,
			       const CORBA_long id, CORBA_Environment * ev);
      void (*DriveConnected) (PortableServer_Servant _servant,
			      const GNOME_VFS_Drive * drive,
			      CORBA_Environment * ev);
      void (*DriveDisconnected) (PortableServer_Servant _servant,
				 const CORBA_long id, CORBA_Environment * ev);
   } POA_GNOME_VFS_Client__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_Client__epv *GNOME_VFS_Client_epv;
   } POA_GNOME_VFS_Client__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_Client__vepv *vepv;
   } POA_GNOME_VFS_Client;
   extern void POA_GNOME_VFS_Client__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_GNOME_VFS_Client__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_Client */
#ifndef _defined_POA_GNOME_VFS_ClientCall
#define _defined_POA_GNOME_VFS_ClientCall 1
   typedef struct
   {
      void *_private;
       CORBA_boolean(*ModuleCallbackInvoke) (PortableServer_Servant _servant,
					     const CORBA_char * name,
					     const CORBA_any * module_in,
					     CORBA_any ** module_out,
					     CORBA_Environment * ev);
   } POA_GNOME_VFS_ClientCall__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_ClientCall__epv *GNOME_VFS_ClientCall_epv;
   } POA_GNOME_VFS_ClientCall__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_ClientCall__vepv *vepv;
   } POA_GNOME_VFS_ClientCall;
   extern void POA_GNOME_VFS_ClientCall__init(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   extern void POA_GNOME_VFS_ClientCall__fini(PortableServer_Servant servant,
					      CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_ClientCall */
#ifndef _defined_POA_GNOME_VFS_DaemonHandle
#define _defined_POA_GNOME_VFS_DaemonHandle 1
   typedef struct
   {
      void *_private;
       GNOME_VFS_Result(*Close) (PortableServer_Servant _servant,
				 const GNOME_VFS_ClientCall client_call,
				 const GNOME_VFS_Client client,
				 CORBA_Environment * ev);
       GNOME_VFS_Result(*Read) (PortableServer_Servant _servant,
				GNOME_VFS_buffer ** buf,
				const GNOME_VFS_FileSize num_bytes,
				const GNOME_VFS_ClientCall client_call,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
       GNOME_VFS_Result(*Write) (PortableServer_Servant _servant,
				 const GNOME_VFS_buffer * buf,
				 GNOME_VFS_FileSize * bytes_written_return,
				 const GNOME_VFS_ClientCall client_call,
				 const GNOME_VFS_Client client,
				 CORBA_Environment * ev);
       GNOME_VFS_Result(*Seek) (PortableServer_Servant _servant,
				const CORBA_long whence,
				const GNOME_VFS_FileOffset offset,
				const GNOME_VFS_ClientCall client_call,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
       GNOME_VFS_Result(*Tell) (PortableServer_Servant _servant,
				GNOME_VFS_FileOffset * offset,
				const GNOME_VFS_ClientCall client_call,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
       GNOME_VFS_Result(*GetFileInfo) (PortableServer_Servant _servant,
				       GNOME_VFS_FileInfo ** file_info,
				       const CORBA_long options,
				       const GNOME_VFS_ClientCall client_call,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev);
       GNOME_VFS_Result(*Truncate) (PortableServer_Servant _servant,
				    const GNOME_VFS_FileSize length,
				    const GNOME_VFS_ClientCall client_call,
				    const GNOME_VFS_Client client,
				    CORBA_Environment * ev);
   } POA_GNOME_VFS_DaemonHandle__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_DaemonHandle__epv *GNOME_VFS_DaemonHandle_epv;
   } POA_GNOME_VFS_DaemonHandle__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_DaemonHandle__vepv *vepv;
   } POA_GNOME_VFS_DaemonHandle;
   extern void POA_GNOME_VFS_DaemonHandle__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_GNOME_VFS_DaemonHandle__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_DaemonHandle */
#ifndef _defined_POA_GNOME_VFS_DaemonDirHandle
#define _defined_POA_GNOME_VFS_DaemonDirHandle 1
   typedef struct
   {
      void *_private;
       GNOME_VFS_Result(*Close) (PortableServer_Servant _servant,
				 const GNOME_VFS_ClientCall client_call,
				 const GNOME_VFS_Client client,
				 CORBA_Environment * ev);
       GNOME_VFS_Result(*Read) (PortableServer_Servant _servant,
				GNOME_VFS_FileInfoList ** file_info_list,
				const GNOME_VFS_ClientCall client_call,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
   } POA_GNOME_VFS_DaemonDirHandle__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_DaemonDirHandle__epv *GNOME_VFS_DaemonDirHandle_epv;
   } POA_GNOME_VFS_DaemonDirHandle__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_DaemonDirHandle__vepv *vepv;
   } POA_GNOME_VFS_DaemonDirHandle;
   extern void POA_GNOME_VFS_DaemonDirHandle__init(PortableServer_Servant
						   servant,
						   CORBA_Environment * ev);
   extern void POA_GNOME_VFS_DaemonDirHandle__fini(PortableServer_Servant
						   servant,
						   CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_DaemonDirHandle */
#ifndef _defined_POA_GNOME_VFS_Daemon
#define _defined_POA_GNOME_VFS_Daemon 1
   typedef struct
   {
      void *_private;
      void (*registerClient) (PortableServer_Servant _servant,
			      const GNOME_VFS_Client client,
			      CORBA_Environment * ev);
      void (*deRegisterClient) (PortableServer_Servant _servant,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
      void (*registerVolumeMonitor) (PortableServer_Servant _servant,
				     const GNOME_VFS_Client client,
				     CORBA_Environment * ev);
      void (*deRegisterVolumeMonitor) (PortableServer_Servant _servant,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev);
      GNOME_VFS_VolumeList *(*getVolumes) (PortableServer_Servant _servant,
					   const GNOME_VFS_Client client,
					   CORBA_Environment * ev);
      GNOME_VFS_DriveList *(*getDrives) (PortableServer_Servant _servant,
					 const GNOME_VFS_Client client,
					 CORBA_Environment * ev);
      void (*emitPreUnmountVolume) (PortableServer_Servant _servant,
				    const GNOME_VFS_Client client,
				    const CORBA_long volume_id,
				    CORBA_Environment * ev);
      void (*forceProbe) (PortableServer_Servant _servant,
			  const GNOME_VFS_Client client,
			  CORBA_Environment * ev);
   } POA_GNOME_VFS_Daemon__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_Daemon__epv *GNOME_VFS_Daemon_epv;
   } POA_GNOME_VFS_Daemon__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_Daemon__vepv *vepv;
   } POA_GNOME_VFS_Daemon;
   extern void POA_GNOME_VFS_Daemon__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_GNOME_VFS_Daemon__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_Daemon */
#ifndef _defined_POA_GNOME_VFS_AsyncDaemon
#define _defined_POA_GNOME_VFS_AsyncDaemon 1
   typedef struct
   {
      void *_private;
      void (*Cancel) (PortableServer_Servant _servant,
		      const GNOME_VFS_ClientCall client_call,
		      CORBA_Environment * ev);
       GNOME_VFS_Result(*Open) (PortableServer_Servant _servant,
				GNOME_VFS_DaemonHandle * handle_return,
				const CORBA_char * uri,
				const CORBA_long open_mode,
				const GNOME_VFS_ClientCall client_call,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
       GNOME_VFS_Result(*Create) (PortableServer_Servant _servant,
				  GNOME_VFS_DaemonHandle * handle_return,
				  const CORBA_char * uri,
				  const CORBA_long open_mode,
				  const CORBA_boolean exclusive,
				  const CORBA_long perm,
				  const GNOME_VFS_ClientCall client_call,
				  const GNOME_VFS_Client client,
				  CORBA_Environment * ev);
       GNOME_VFS_Result(*OpenDirectory) (PortableServer_Servant _servant,
					 GNOME_VFS_DaemonDirHandle *
					 handle_return,
					 const CORBA_char * uri,
					 const CORBA_long options,
					 const GNOME_VFS_ClientCall
					 client_call,
					 const GNOME_VFS_Client client,
					 CORBA_Environment * ev);
       GNOME_VFS_Result(*GetFileInfo) (PortableServer_Servant _servant,
				       const CORBA_char * uri,
				       GNOME_VFS_FileInfo ** file_info,
				       const CORBA_long options,
				       const GNOME_VFS_ClientCall client_call,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev);
       GNOME_VFS_Result(*Truncate) (PortableServer_Servant _servant,
				    const CORBA_char * uri,
				    const GNOME_VFS_FileSize length,
				    const GNOME_VFS_ClientCall client_call,
				    const GNOME_VFS_Client client,
				    CORBA_Environment * ev);
       CORBA_boolean(*IsLocal) (PortableServer_Servant _servant,
				const CORBA_char * uri,
				const GNOME_VFS_ClientCall client_call,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
       GNOME_VFS_Result(*FindDirectory) (PortableServer_Servant _servant,
					 const CORBA_char * find_near_uri,
					 const CORBA_long kind,
					 CORBA_string * result_uri,
					 const CORBA_boolean create_if_needed,
					 const CORBA_boolean find_if_needed,
					 const CORBA_unsigned_long perm,
					 const GNOME_VFS_ClientCall
					 client_call,
					 const GNOME_VFS_Client client,
					 CORBA_Environment * ev);
       GNOME_VFS_Result(*MakeDirectory) (PortableServer_Servant _servant,
					 const CORBA_char * uri,
					 const CORBA_unsigned_long perm,
					 const GNOME_VFS_ClientCall
					 client_call,
					 const GNOME_VFS_Client client,
					 CORBA_Environment * ev);
       GNOME_VFS_Result(*RemoveDirectory) (PortableServer_Servant _servant,
					   const CORBA_char * uri,
					   const GNOME_VFS_ClientCall
					   client_call,
					   const GNOME_VFS_Client client,
					   CORBA_Environment * ev);
       GNOME_VFS_Result(*Move) (PortableServer_Servant _servant,
				const CORBA_char * old_uri,
				const CORBA_char * new_uri,
				const CORBA_boolean force_replace,
				const GNOME_VFS_ClientCall client_call,
				const GNOME_VFS_Client client,
				CORBA_Environment * ev);
       GNOME_VFS_Result(*Unlink) (PortableServer_Servant _servant,
				  const CORBA_char * uri,
				  const GNOME_VFS_ClientCall client_call,
				  const GNOME_VFS_Client client,
				  CORBA_Environment * ev);
       GNOME_VFS_Result(*CheckSameFS) (PortableServer_Servant _servant,
				       const CORBA_char * uri_a,
				       const CORBA_char * uri_b,
				       CORBA_boolean * same_fs,
				       const GNOME_VFS_ClientCall client_call,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev);
       GNOME_VFS_Result(*SetFileInfo) (PortableServer_Servant _servant,
				       const CORBA_char * uri,
				       const GNOME_VFS_FileInfo * info,
				       const CORBA_long mask,
				       const GNOME_VFS_ClientCall client_call,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev);
       GNOME_VFS_Result(*CreateSymbolicLink) (PortableServer_Servant _servant,
					      const CORBA_char * uri,
					      const CORBA_char *
					      target_reference,
					      const GNOME_VFS_ClientCall
					      client_call,
					      const GNOME_VFS_Client client,
					      CORBA_Environment * ev);
       GNOME_VFS_Result(*MonitorAdd) (PortableServer_Servant _servant,
				      const CORBA_char * uri,
				      const CORBA_long monitor_type,
				      GNOME_VFS_DaemonMonitor * monitor,
				      const GNOME_VFS_ClientCall client_call,
				      const GNOME_VFS_Client client,
				      CORBA_Environment * ev);
   } POA_GNOME_VFS_AsyncDaemon__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_VFS_AsyncDaemon__epv *GNOME_VFS_AsyncDaemon_epv;
   } POA_GNOME_VFS_AsyncDaemon__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_VFS_AsyncDaemon__vepv *vepv;
   } POA_GNOME_VFS_AsyncDaemon;
   extern void POA_GNOME_VFS_AsyncDaemon__init(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   extern void POA_GNOME_VFS_AsyncDaemon__fini(PortableServer_Servant servant,
					       CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_VFS_AsyncDaemon */

/** skel prototypes **/
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonMonitor_Cancel
      (POA_GNOME_VFS_DaemonMonitor * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_Cancel) (PortableServer_Servant _servant,
					CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Client_MonitorCallback(POA_GNOME_VFS_Client
							 * _ORBIT_servant,
							 gpointer
							 _ORBIT_retval,
							 gpointer *
							 _ORBIT_args,
							 CORBA_Context ctx,
							 CORBA_Environment *
							 ev,
							 void
							 (*_impl_MonitorCallback)
							 (PortableServer_Servant
							  _servant,
							  const
							  GNOME_VFS_DaemonMonitor
							  monitor,
							  const CORBA_char *
							  monitor_uri,
							  const CORBA_char *
							  info_uri,
							  const CORBA_long
							  event_type,
							  CORBA_Environment *
							  ev));
   void _ORBIT_skel_small_GNOME_VFS_Client_VolumeMounted(POA_GNOME_VFS_Client
							 * _ORBIT_servant,
							 gpointer
							 _ORBIT_retval,
							 gpointer *
							 _ORBIT_args,
							 CORBA_Context ctx,
							 CORBA_Environment *
							 ev,
							 void
							 (*_impl_VolumeMounted)
							 (PortableServer_Servant
							  _servant,
							  const
							  GNOME_VFS_Volume *
							  volume,
							  CORBA_Environment *
							  ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Client_VolumePreUnmount(POA_GNOME_VFS_Client
							  * _ORBIT_servant,
							  gpointer
							  _ORBIT_retval,
							  gpointer *
							  _ORBIT_args,
							  CORBA_Context ctx,
							  CORBA_Environment *
							  ev,
							  void
							  (*_impl_VolumePreUnmount)
							  (PortableServer_Servant
							   _servant,
							   const CORBA_long
							   id,
							   CORBA_Environment *
							   ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Client_VolumeUnmounted(POA_GNOME_VFS_Client
							 * _ORBIT_servant,
							 gpointer
							 _ORBIT_retval,
							 gpointer *
							 _ORBIT_args,
							 CORBA_Context ctx,
							 CORBA_Environment *
							 ev,
							 void
							 (*_impl_VolumeUnmounted)
							 (PortableServer_Servant
							  _servant,
							  const CORBA_long id,
							  CORBA_Environment *
							  ev));
   void _ORBIT_skel_small_GNOME_VFS_Client_DriveConnected(POA_GNOME_VFS_Client
							  * _ORBIT_servant,
							  gpointer
							  _ORBIT_retval,
							  gpointer *
							  _ORBIT_args,
							  CORBA_Context ctx,
							  CORBA_Environment *
							  ev,
							  void
							  (*_impl_DriveConnected)
							  (PortableServer_Servant
							   _servant,
							   const
							   GNOME_VFS_Drive *
							   drive,
							   CORBA_Environment *
							   ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Client_DriveDisconnected
      (POA_GNOME_VFS_Client * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       void (*_impl_DriveDisconnected) (PortableServer_Servant _servant,
					const CORBA_long id,
					CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_ClientCall_ModuleCallbackInvoke
      (POA_GNOME_VFS_ClientCall * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       CORBA_boolean(*_impl_ModuleCallbackInvoke) (PortableServer_Servant
						   _servant,
						   const CORBA_char * name,
						   const CORBA_any *
						   module_in,
						   CORBA_any ** module_out,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonHandle_Close
      (POA_GNOME_VFS_DaemonHandle * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_Close) (PortableServer_Servant _servant,
				       const GNOME_VFS_ClientCall client_call,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonHandle_Read(POA_GNOME_VFS_DaemonHandle
						    * _ORBIT_servant,
						    gpointer _ORBIT_retval,
						    gpointer * _ORBIT_args,
						    CORBA_Context ctx,
						    CORBA_Environment * ev,
						    GNOME_VFS_Result
						    (*_impl_Read)
						    (PortableServer_Servant
						     _servant,
						     GNOME_VFS_buffer ** buf,
						     const GNOME_VFS_FileSize
						     num_bytes,
						     const
						     GNOME_VFS_ClientCall
						     client_call,
						     const GNOME_VFS_Client
						     client,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonHandle_Write
      (POA_GNOME_VFS_DaemonHandle * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_Write) (PortableServer_Servant _servant,
				       const GNOME_VFS_buffer * buf,
				       GNOME_VFS_FileSize *
				       bytes_written_return,
				       const GNOME_VFS_ClientCall client_call,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonHandle_Seek(POA_GNOME_VFS_DaemonHandle
						    * _ORBIT_servant,
						    gpointer _ORBIT_retval,
						    gpointer * _ORBIT_args,
						    CORBA_Context ctx,
						    CORBA_Environment * ev,
						    GNOME_VFS_Result
						    (*_impl_Seek)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_long whence,
						     const
						     GNOME_VFS_FileOffset
						     offset,
						     const
						     GNOME_VFS_ClientCall
						     client_call,
						     const GNOME_VFS_Client
						     client,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonHandle_Tell(POA_GNOME_VFS_DaemonHandle
						    * _ORBIT_servant,
						    gpointer _ORBIT_retval,
						    gpointer * _ORBIT_args,
						    CORBA_Context ctx,
						    CORBA_Environment * ev,
						    GNOME_VFS_Result
						    (*_impl_Tell)
						    (PortableServer_Servant
						     _servant,
						     GNOME_VFS_FileOffset *
						     offset,
						     const
						     GNOME_VFS_ClientCall
						     client_call,
						     const GNOME_VFS_Client
						     client,
						     CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonHandle_GetFileInfo
      (POA_GNOME_VFS_DaemonHandle * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_GetFileInfo) (PortableServer_Servant _servant,
					     GNOME_VFS_FileInfo ** file_info,
					     const CORBA_long options,
					     const GNOME_VFS_ClientCall
					     client_call,
					     const GNOME_VFS_Client client,
					     CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonHandle_Truncate
      (POA_GNOME_VFS_DaemonHandle * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_Truncate) (PortableServer_Servant _servant,
					  const GNOME_VFS_FileSize length,
					  const GNOME_VFS_ClientCall
					  client_call,
					  const GNOME_VFS_Client client,
					  CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonDirHandle_Close
      (POA_GNOME_VFS_DaemonDirHandle * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_Close) (PortableServer_Servant _servant,
				       const GNOME_VFS_ClientCall client_call,
				       const GNOME_VFS_Client client,
				       CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_DaemonDirHandle_Read
      (POA_GNOME_VFS_DaemonDirHandle * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_Read) (PortableServer_Servant _servant,
				      GNOME_VFS_FileInfoList **
				      file_info_list,
				      const GNOME_VFS_ClientCall client_call,
				      const GNOME_VFS_Client client,
				      CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_VFS_Daemon_registerClient(POA_GNOME_VFS_Daemon
							  * _ORBIT_servant,
							  gpointer
							  _ORBIT_retval,
							  gpointer *
							  _ORBIT_args,
							  CORBA_Context ctx,
							  CORBA_Environment *
							  ev,
							  void
							  (*_impl_registerClient)
							  (PortableServer_Servant
							   _servant,
							   const
							   GNOME_VFS_Client
							   client,
							   CORBA_Environment *
							   ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Daemon_deRegisterClient(POA_GNOME_VFS_Daemon
							  * _ORBIT_servant,
							  gpointer
							  _ORBIT_retval,
							  gpointer *
							  _ORBIT_args,
							  CORBA_Context ctx,
							  CORBA_Environment *
							  ev,
							  void
							  (*_impl_deRegisterClient)
							  (PortableServer_Servant
							   _servant,
							   const
							   GNOME_VFS_Client
							   client,
							   CORBA_Environment *
							   ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Daemon_registerVolumeMonitor
      (POA_GNOME_VFS_Daemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       void (*_impl_registerVolumeMonitor) (PortableServer_Servant _servant,
					    const GNOME_VFS_Client client,
					    CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Daemon_deRegisterVolumeMonitor
      (POA_GNOME_VFS_Daemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       void (*_impl_deRegisterVolumeMonitor) (PortableServer_Servant _servant,
					      const GNOME_VFS_Client client,
					      CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_VFS_Daemon_getVolumes(POA_GNOME_VFS_Daemon *
						      _ORBIT_servant,
						      gpointer _ORBIT_retval,
						      gpointer * _ORBIT_args,
						      CORBA_Context ctx,
						      CORBA_Environment * ev,
						      GNOME_VFS_VolumeList *
						      (*_impl_getVolumes)
						      (PortableServer_Servant
						       _servant,
						       const GNOME_VFS_Client
						       client,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_small_GNOME_VFS_Daemon_getDrives(POA_GNOME_VFS_Daemon *
						     _ORBIT_servant,
						     gpointer _ORBIT_retval,
						     gpointer * _ORBIT_args,
						     CORBA_Context ctx,
						     CORBA_Environment * ev,
						     GNOME_VFS_DriveList *
						     (*_impl_getDrives)
						     (PortableServer_Servant
						      _servant,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_small_GNOME_VFS_Daemon_emitPreUnmountVolume
      (POA_GNOME_VFS_Daemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       void (*_impl_emitPreUnmountVolume) (PortableServer_Servant _servant,
					   const GNOME_VFS_Client client,
					   const CORBA_long volume_id,
					   CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_VFS_Daemon_forceProbe(POA_GNOME_VFS_Daemon *
						      _ORBIT_servant,
						      gpointer _ORBIT_retval,
						      gpointer * _ORBIT_args,
						      CORBA_Context ctx,
						      CORBA_Environment * ev,
						      void (*_impl_forceProbe)
						      (PortableServer_Servant
						       _servant,
						       const GNOME_VFS_Client
						       client,
						       CORBA_Environment *
						       ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_Cancel(POA_GNOME_VFS_AsyncDaemon
						     * _ORBIT_servant,
						     gpointer _ORBIT_retval,
						     gpointer * _ORBIT_args,
						     CORBA_Context ctx,
						     CORBA_Environment * ev,
						     void (*_impl_Cancel)
						     (PortableServer_Servant
						      _servant,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_Open(POA_GNOME_VFS_AsyncDaemon
						     * _ORBIT_servant,
						     gpointer _ORBIT_retval,
						     gpointer * _ORBIT_args,
						     CORBA_Context ctx,
						     CORBA_Environment * ev,
						     GNOME_VFS_Result
						     (*_impl_Open)
						     (PortableServer_Servant
						      _servant,
						      GNOME_VFS_DaemonHandle *
						      handle_return,
						      const CORBA_char * uri,
						      const CORBA_long
						      open_mode,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_Create(POA_GNOME_VFS_AsyncDaemon
						     * _ORBIT_servant,
						     gpointer _ORBIT_retval,
						     gpointer * _ORBIT_args,
						     CORBA_Context ctx,
						     CORBA_Environment * ev,
						     GNOME_VFS_Result
						     (*_impl_Create)
						     (PortableServer_Servant
						      _servant,
						      GNOME_VFS_DaemonHandle *
						      handle_return,
						      const CORBA_char * uri,
						      const CORBA_long
						      open_mode,
						      const CORBA_boolean
						      exclusive,
						      const CORBA_long perm,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_OpenDirectory
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_OpenDirectory) (PortableServer_Servant
					       _servant,
					       GNOME_VFS_DaemonDirHandle *
					       handle_return,
					       const CORBA_char * uri,
					       const CORBA_long options,
					       const GNOME_VFS_ClientCall
					       client_call,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_GetFileInfo
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_GetFileInfo) (PortableServer_Servant _servant,
					     const CORBA_char * uri,
					     GNOME_VFS_FileInfo ** file_info,
					     const CORBA_long options,
					     const GNOME_VFS_ClientCall
					     client_call,
					     const GNOME_VFS_Client client,
					     CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_Truncate
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_Truncate) (PortableServer_Servant _servant,
					  const CORBA_char * uri,
					  const GNOME_VFS_FileSize length,
					  const GNOME_VFS_ClientCall
					  client_call,
					  const GNOME_VFS_Client client,
					  CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_IsLocal
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       CORBA_boolean(*_impl_IsLocal) (PortableServer_Servant _servant,
				      const CORBA_char * uri,
				      const GNOME_VFS_ClientCall client_call,
				      const GNOME_VFS_Client client,
				      CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_FindDirectory
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_FindDirectory) (PortableServer_Servant
					       _servant,
					       const CORBA_char *
					       find_near_uri,
					       const CORBA_long kind,
					       CORBA_string * result_uri,
					       const CORBA_boolean
					       create_if_needed,
					       const CORBA_boolean
					       find_if_needed,
					       const CORBA_unsigned_long perm,
					       const GNOME_VFS_ClientCall
					       client_call,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_MakeDirectory
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_MakeDirectory) (PortableServer_Servant
					       _servant,
					       const CORBA_char * uri,
					       const CORBA_unsigned_long perm,
					       const GNOME_VFS_ClientCall
					       client_call,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_RemoveDirectory
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_RemoveDirectory) (PortableServer_Servant
						 _servant,
						 const CORBA_char * uri,
						 const GNOME_VFS_ClientCall
						 client_call,
						 const GNOME_VFS_Client
						 client,
						 CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_Move(POA_GNOME_VFS_AsyncDaemon
						     * _ORBIT_servant,
						     gpointer _ORBIT_retval,
						     gpointer * _ORBIT_args,
						     CORBA_Context ctx,
						     CORBA_Environment * ev,
						     GNOME_VFS_Result
						     (*_impl_Move)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_char *
						      old_uri,
						      const CORBA_char *
						      new_uri,
						      const CORBA_boolean
						      force_replace,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_Unlink(POA_GNOME_VFS_AsyncDaemon
						     * _ORBIT_servant,
						     gpointer _ORBIT_retval,
						     gpointer * _ORBIT_args,
						     CORBA_Context ctx,
						     CORBA_Environment * ev,
						     GNOME_VFS_Result
						     (*_impl_Unlink)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_char * uri,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_CheckSameFS
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_CheckSameFS) (PortableServer_Servant _servant,
					     const CORBA_char * uri_a,
					     const CORBA_char * uri_b,
					     CORBA_boolean * same_fs,
					     const GNOME_VFS_ClientCall
					     client_call,
					     const GNOME_VFS_Client client,
					     CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_SetFileInfo
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_SetFileInfo) (PortableServer_Servant _servant,
					     const CORBA_char * uri,
					     const GNOME_VFS_FileInfo * info,
					     const CORBA_long mask,
					     const GNOME_VFS_ClientCall
					     client_call,
					     const GNOME_VFS_Client client,
					     CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_CreateSymbolicLink
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_CreateSymbolicLink) (PortableServer_Servant
						    _servant,
						    const CORBA_char * uri,
						    const CORBA_char *
						    target_reference,
						    const GNOME_VFS_ClientCall
						    client_call,
						    const GNOME_VFS_Client
						    client,
						    CORBA_Environment * ev));
   void
      _ORBIT_skel_small_GNOME_VFS_AsyncDaemon_MonitorAdd
      (POA_GNOME_VFS_AsyncDaemon * _ORBIT_servant, gpointer _ORBIT_retval,
       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
       GNOME_VFS_Result(*_impl_MonitorAdd) (PortableServer_Servant _servant,
					    const CORBA_char * uri,
					    const CORBA_long monitor_type,
					    GNOME_VFS_DaemonMonitor * monitor,
					    const GNOME_VFS_ClientCall
					    client_call,
					    const GNOME_VFS_Client client,
					    CORBA_Environment * ev));

/** stub prototypes **/
#define GNOME_VFS_DaemonMonitor_ref Bonobo_Unknown_ref
#define GNOME_VFS_DaemonMonitor_unref Bonobo_Unknown_unref
#define GNOME_VFS_DaemonMonitor_queryInterface Bonobo_Unknown_queryInterface
   GNOME_VFS_Result GNOME_VFS_DaemonMonitor_Cancel(GNOME_VFS_DaemonMonitor
						   _obj,
						   CORBA_Environment * ev);
#define GNOME_VFS_Client_ref Bonobo_Unknown_ref
#define GNOME_VFS_Client_unref Bonobo_Unknown_unref
#define GNOME_VFS_Client_queryInterface Bonobo_Unknown_queryInterface
   void GNOME_VFS_Client_MonitorCallback(GNOME_VFS_Client _obj,
					 const GNOME_VFS_DaemonMonitor
					 monitor,
					 const CORBA_char * monitor_uri,
					 const CORBA_char * info_uri,
					 const CORBA_long event_type,
					 CORBA_Environment * ev);
   void GNOME_VFS_Client_VolumeMounted(GNOME_VFS_Client _obj,
				       const GNOME_VFS_Volume * volume,
				       CORBA_Environment * ev);
   void GNOME_VFS_Client_VolumePreUnmount(GNOME_VFS_Client _obj,
					  const CORBA_long id,
					  CORBA_Environment * ev);
   void GNOME_VFS_Client_VolumeUnmounted(GNOME_VFS_Client _obj,
					 const CORBA_long id,
					 CORBA_Environment * ev);
   void GNOME_VFS_Client_DriveConnected(GNOME_VFS_Client _obj,
					const GNOME_VFS_Drive * drive,
					CORBA_Environment * ev);
   void GNOME_VFS_Client_DriveDisconnected(GNOME_VFS_Client _obj,
					   const CORBA_long id,
					   CORBA_Environment * ev);
#define GNOME_VFS_ClientCall_ref Bonobo_Unknown_ref
#define GNOME_VFS_ClientCall_unref Bonobo_Unknown_unref
#define GNOME_VFS_ClientCall_queryInterface Bonobo_Unknown_queryInterface
   CORBA_boolean
      GNOME_VFS_ClientCall_ModuleCallbackInvoke(GNOME_VFS_ClientCall _obj,
						const CORBA_char * name,
						const CORBA_any * module_in,
						CORBA_any ** module_out,
						CORBA_Environment * ev);
#define GNOME_VFS_DaemonHandle_ref Bonobo_Unknown_ref
#define GNOME_VFS_DaemonHandle_unref Bonobo_Unknown_unref
#define GNOME_VFS_DaemonHandle_queryInterface Bonobo_Unknown_queryInterface
   GNOME_VFS_Result GNOME_VFS_DaemonHandle_Close(GNOME_VFS_DaemonHandle _obj,
						 const GNOME_VFS_ClientCall
						 client_call,
						 const GNOME_VFS_Client
						 client,
						 CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_DaemonHandle_Read(GNOME_VFS_DaemonHandle _obj,
						GNOME_VFS_buffer ** buf,
						const GNOME_VFS_FileSize
						num_bytes,
						const GNOME_VFS_ClientCall
						client_call,
						const GNOME_VFS_Client client,
						CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_DaemonHandle_Write(GNOME_VFS_DaemonHandle _obj,
						 const GNOME_VFS_buffer * buf,
						 GNOME_VFS_FileSize *
						 bytes_written_return,
						 const GNOME_VFS_ClientCall
						 client_call,
						 const GNOME_VFS_Client
						 client,
						 CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_DaemonHandle_Seek(GNOME_VFS_DaemonHandle _obj,
						const CORBA_long whence,
						const GNOME_VFS_FileOffset
						offset,
						const GNOME_VFS_ClientCall
						client_call,
						const GNOME_VFS_Client client,
						CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_DaemonHandle_Tell(GNOME_VFS_DaemonHandle _obj,
						GNOME_VFS_FileOffset * offset,
						const GNOME_VFS_ClientCall
						client_call,
						const GNOME_VFS_Client client,
						CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_DaemonHandle_GetFileInfo(GNOME_VFS_DaemonHandle
						       _obj,
						       GNOME_VFS_FileInfo **
						       file_info,
						       const CORBA_long
						       options,
						       const
						       GNOME_VFS_ClientCall
						       client_call,
						       const GNOME_VFS_Client
						       client,
						       CORBA_Environment *
						       ev);
   GNOME_VFS_Result GNOME_VFS_DaemonHandle_Truncate(GNOME_VFS_DaemonHandle
						    _obj,
						    const GNOME_VFS_FileSize
						    length,
						    const GNOME_VFS_ClientCall
						    client_call,
						    const GNOME_VFS_Client
						    client,
						    CORBA_Environment * ev);
#define GNOME_VFS_DaemonDirHandle_ref Bonobo_Unknown_ref
#define GNOME_VFS_DaemonDirHandle_unref Bonobo_Unknown_unref
#define GNOME_VFS_DaemonDirHandle_queryInterface Bonobo_Unknown_queryInterface
   GNOME_VFS_Result GNOME_VFS_DaemonDirHandle_Close(GNOME_VFS_DaemonDirHandle
						    _obj,
						    const GNOME_VFS_ClientCall
						    client_call,
						    const GNOME_VFS_Client
						    client,
						    CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_DaemonDirHandle_Read(GNOME_VFS_DaemonDirHandle
						   _obj,
						   GNOME_VFS_FileInfoList **
						   file_info_list,
						   const GNOME_VFS_ClientCall
						   client_call,
						   const GNOME_VFS_Client
						   client,
						   CORBA_Environment * ev);
#define GNOME_VFS_Daemon_ref Bonobo_Unknown_ref
#define GNOME_VFS_Daemon_unref Bonobo_Unknown_unref
#define GNOME_VFS_Daemon_queryInterface Bonobo_Unknown_queryInterface
   void GNOME_VFS_Daemon_registerClient(GNOME_VFS_Daemon _obj,
					const GNOME_VFS_Client client,
					CORBA_Environment * ev);
   void GNOME_VFS_Daemon_deRegisterClient(GNOME_VFS_Daemon _obj,
					  const GNOME_VFS_Client client,
					  CORBA_Environment * ev);
   void GNOME_VFS_Daemon_registerVolumeMonitor(GNOME_VFS_Daemon _obj,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev);
   void GNOME_VFS_Daemon_deRegisterVolumeMonitor(GNOME_VFS_Daemon _obj,
						 const GNOME_VFS_Client
						 client,
						 CORBA_Environment * ev);
   GNOME_VFS_VolumeList *GNOME_VFS_Daemon_getVolumes(GNOME_VFS_Daemon _obj,
						     const GNOME_VFS_Client
						     client,
						     CORBA_Environment * ev);
   GNOME_VFS_DriveList *GNOME_VFS_Daemon_getDrives(GNOME_VFS_Daemon _obj,
						   const GNOME_VFS_Client
						   client,
						   CORBA_Environment * ev);
   void GNOME_VFS_Daemon_emitPreUnmountVolume(GNOME_VFS_Daemon _obj,
					      const GNOME_VFS_Client client,
					      const CORBA_long volume_id,
					      CORBA_Environment * ev);
   void GNOME_VFS_Daemon_forceProbe(GNOME_VFS_Daemon _obj,
				    const GNOME_VFS_Client client,
				    CORBA_Environment * ev);
#define GNOME_VFS_AsyncDaemon_ref Bonobo_Unknown_ref
#define GNOME_VFS_AsyncDaemon_unref Bonobo_Unknown_unref
#define GNOME_VFS_AsyncDaemon_queryInterface Bonobo_Unknown_queryInterface
   void GNOME_VFS_AsyncDaemon_Cancel(GNOME_VFS_AsyncDaemon _obj,
				     const GNOME_VFS_ClientCall client_call,
				     CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_Open(GNOME_VFS_AsyncDaemon _obj,
					       GNOME_VFS_DaemonHandle *
					       handle_return,
					       const CORBA_char * uri,
					       const CORBA_long open_mode,
					       const GNOME_VFS_ClientCall
					       client_call,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_Create(GNOME_VFS_AsyncDaemon _obj,
						 GNOME_VFS_DaemonHandle *
						 handle_return,
						 const CORBA_char * uri,
						 const CORBA_long open_mode,
						 const CORBA_boolean
						 exclusive,
						 const CORBA_long perm,
						 const GNOME_VFS_ClientCall
						 client_call,
						 const GNOME_VFS_Client
						 client,
						 CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_OpenDirectory(GNOME_VFS_AsyncDaemon
							_obj,
							GNOME_VFS_DaemonDirHandle
							* handle_return,
							const CORBA_char *
							uri,
							const CORBA_long
							options,
							const
							GNOME_VFS_ClientCall
							client_call,
							const GNOME_VFS_Client
							client,
							CORBA_Environment *
							ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_GetFileInfo(GNOME_VFS_AsyncDaemon
						      _obj,
						      const CORBA_char * uri,
						      GNOME_VFS_FileInfo **
						      file_info,
						      const CORBA_long
						      options,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_Truncate(GNOME_VFS_AsyncDaemon _obj,
						   const CORBA_char * uri,
						   const GNOME_VFS_FileSize
						   length,
						   const GNOME_VFS_ClientCall
						   client_call,
						   const GNOME_VFS_Client
						   client,
						   CORBA_Environment * ev);
   CORBA_boolean GNOME_VFS_AsyncDaemon_IsLocal(GNOME_VFS_AsyncDaemon _obj,
					       const CORBA_char * uri,
					       const GNOME_VFS_ClientCall
					       client_call,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_FindDirectory(GNOME_VFS_AsyncDaemon
							_obj,
							const CORBA_char *
							find_near_uri,
							const CORBA_long kind,
							CORBA_string *
							result_uri,
							const CORBA_boolean
							create_if_needed,
							const CORBA_boolean
							find_if_needed,
							const
							CORBA_unsigned_long
							perm,
							const
							GNOME_VFS_ClientCall
							client_call,
							const GNOME_VFS_Client
							client,
							CORBA_Environment *
							ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_MakeDirectory(GNOME_VFS_AsyncDaemon
							_obj,
							const CORBA_char *
							uri,
							const
							CORBA_unsigned_long
							perm,
							const
							GNOME_VFS_ClientCall
							client_call,
							const GNOME_VFS_Client
							client,
							CORBA_Environment *
							ev);
   GNOME_VFS_Result
      GNOME_VFS_AsyncDaemon_RemoveDirectory(GNOME_VFS_AsyncDaemon _obj,
					    const CORBA_char * uri,
					    const GNOME_VFS_ClientCall
					    client_call,
					    const GNOME_VFS_Client client,
					    CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_Move(GNOME_VFS_AsyncDaemon _obj,
					       const CORBA_char * old_uri,
					       const CORBA_char * new_uri,
					       const CORBA_boolean
					       force_replace,
					       const GNOME_VFS_ClientCall
					       client_call,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_Unlink(GNOME_VFS_AsyncDaemon _obj,
						 const CORBA_char * uri,
						 const GNOME_VFS_ClientCall
						 client_call,
						 const GNOME_VFS_Client
						 client,
						 CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_CheckSameFS(GNOME_VFS_AsyncDaemon
						      _obj,
						      const CORBA_char *
						      uri_a,
						      const CORBA_char *
						      uri_b,
						      CORBA_boolean * same_fs,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_SetFileInfo(GNOME_VFS_AsyncDaemon
						      _obj,
						      const CORBA_char * uri,
						      const GNOME_VFS_FileInfo
						      * info,
						      const CORBA_long mask,
						      const
						      GNOME_VFS_ClientCall
						      client_call,
						      const GNOME_VFS_Client
						      client,
						      CORBA_Environment * ev);
   GNOME_VFS_Result
      GNOME_VFS_AsyncDaemon_CreateSymbolicLink(GNOME_VFS_AsyncDaemon _obj,
					       const CORBA_char * uri,
					       const CORBA_char *
					       target_reference,
					       const GNOME_VFS_ClientCall
					       client_call,
					       const GNOME_VFS_Client client,
					       CORBA_Environment * ev);
   GNOME_VFS_Result GNOME_VFS_AsyncDaemon_MonitorAdd(GNOME_VFS_AsyncDaemon
						     _obj,
						     const CORBA_char * uri,
						     const CORBA_long
						     monitor_type,
						     GNOME_VFS_DaemonMonitor *
						     monitor,
						     const
						     GNOME_VFS_ClientCall
						     client_call,
						     const GNOME_VFS_Client
						     client,
						     CORBA_Environment * ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_DaemonMonitor__iinterface;
#define GNOME_VFS_DaemonMonitor_IMETHODS_LEN 1
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod
      GNOME_VFS_DaemonMonitor__imethods[GNOME_VFS_DaemonMonitor_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_Client__iinterface;
#define GNOME_VFS_Client_IMETHODS_LEN 6
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod GNOME_VFS_Client__imethods[GNOME_VFS_Client_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_ClientCall__iinterface;
#define GNOME_VFS_ClientCall_IMETHODS_LEN 1
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod
      GNOME_VFS_ClientCall__imethods[GNOME_VFS_ClientCall_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_DaemonHandle__iinterface;
#define GNOME_VFS_DaemonHandle_IMETHODS_LEN 7
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod
      GNOME_VFS_DaemonHandle__imethods[GNOME_VFS_DaemonHandle_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_DaemonDirHandle__iinterface;
#define GNOME_VFS_DaemonDirHandle_IMETHODS_LEN 2
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod
      GNOME_VFS_DaemonDirHandle__imethods
      [GNOME_VFS_DaemonDirHandle_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_Daemon__iinterface;
#define GNOME_VFS_Daemon_IMETHODS_LEN 8
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod GNOME_VFS_Daemon__imethods[GNOME_VFS_Daemon_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_VFS_AsyncDaemon__iinterface;
#define GNOME_VFS_AsyncDaemon_IMETHODS_LEN 16
#ifdef ORBIT_IDL_C_IMODULE_GNOME_VFS_Daemon
   static
#else
   extern
#endif
   ORBit_IMethod
      GNOME_VFS_AsyncDaemon__imethods[GNOME_VFS_AsyncDaemon_IMETHODS_LEN];
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif				/* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
