.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
.\" DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
.\" INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
.\" FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
.\" NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
.\" WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $Id: lwres_noop.3,v 1.1.1.1 2001-10-22 13:06:19 ghudson Exp $
.\"
.Dd Jun 30, 2000
.Dt LWRES_NOOP 3
.Os BIND9 9
.ds vT BIND9 Programmer's Manual
.Sh NAME
.Nm lwres_nooprequest_render ,
.Nm lwres_noopresponse_render ,
.Nm lwres_nooprequest_parse ,
.Nm lwres_noopresponse_parse ,
.Nm lwres_noopresponse_free ,
.Nm lwres_nooprequest_free
.Nd lightweight resolver no-op message handling
.Sh SYNOPSIS
.Fd #include <lwres/lwres.h>
.Fd
.Ft lwres_result_t
.Fo lwres_nooprequest_render
.Fa "lwres_context_t *ctx"
.Fa "lwres_nooprequest_t *req"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_buffer_t *b"
.Fc
.Ft lwres_result_t
.Fo lwres_noopresponse_render
.Fa "lwres_context_t *ctx"
.Fa "lwres_noopresponse_t *req"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_buffer_t *b"
.Fc
.Ft lwres_result_t
.Fo lwres_nooprequest_parse
.Fa "lwres_context_t *ctx"
.Fa "lwres_buffer_t *b"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_nooprequest_t **structp"
.Fc
.Ft lwres_result_t
.Fo lwres_noopresponse_parse
.Fa "lwres_context_t *ctx"
.Fa "lwres_buffer_t *b"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_noopresponse_t **structp"
.Fc
.Ft void
.Fo lwres_noopresponse_free
.Fa "lwres_context_t *ctx"
.Fa "lwres_noopresponse_t **structp"
.Fc
.Ft void
.Fo lwres_nooprequest_free
.Fa "lwres_context_t *ctx"
.Fa "lwres_nooprequest_t **structp"
.Fc
.Sh DESCRIPTION
These are low-level routines for creating and parsing
lightweight resolver no-op request and response messages.
.P
The no-op message is analogous to a \*qping\*q packet: 
a packet is sent to the resolver daemon and is simply echoed back.
The opcode is intended to allow a client to determine if the server is
operational or not.
.Pp
There are four main functions for the no-op opcode.
One render function converts a no-op request structure -
.Dv lwres_nooprequest_t -
to the lighweight resolver's canonical format.
It is complemented by a parse function that converts a packet in this
canonical format to a no-op request structure.
Another render function converts the no-op response structure -
.Dv lwres_noopresponse_t
to the canonical format.
This is complemented by a parse function which converts a packet in
canonical format to a no-op response structure.
.Pp
These structures are defined in
.Pa lwres/lwres.h .
They are shown below.
.Bd -literal -offset indent
#define LWRES_OPCODE_NOOP	0x00000000U

typedef struct {
	lwres_uint16_t	datalength;
	unsigned char   *data;
} lwres_nooprequest_t;

typedef struct {
	lwres_uint16_t	datalength;
	unsigned char	*data;
} lwres_noopresponse_t;
.Ed
Although the structures have different types, they are identical.
This is because the no-op opcode simply echos whatever data was sent:
the response is therefore identical to the request.
.Pp
.Fn lwres_nooprequest_render
uses resolver context
.Fa ctx
to convert no-op request structure
.Fa req
to canonical format.
The packet header structure
.Fa pkt
is initialised and transferred to
buffer
.Fa b .
The contents of
.Fa *req
are then appended to the buffer in canonical format.
.Fn lwres_noopresponse_render
performs the same task, except it converts a no-op response structure
.Dv lwres_noopresponse_t
to the lightweight resolver's canonical format.
.Pp
.Fn lwres_nooprequest_parse
uses context
.Fa ctx
to convert the contents of packet
.Fa pkt
to a
.Dv lwres_nooprequest_t
structure.
Buffer
.Fa b
provides space to be used for storing this structure.
When the function succeeds, the resulting
.Dv lwres_nooprequest_t
is made available through
.Fa *structp .
.Fn lwres_noopresponse_parse
offers the same semantics as
.Fn lwres_nooprequest_parse
except it yields a
.Dv lwres_noopresponse_t
structure.
.Pp
.Fn lwres_noopresponse_free
and
.Fn lwres_nooprequest_free
release the memory in resolver context
.Fa ctx
that was allocated to the
.Dv lwres_noopresponse_t
or
.Dv lwres_nooprequest_t
structures referenced via
.Fa structp .
.Sh RETURN VALUES
The no-op opcode functions
.Fn lwres_nooprequest_render ,
.Fn lwres_noopresponse_render
.Fn lwres_nooprequest_parse
and
.Fn lwres_noopresponse_parse
all return
.Er LWRES_R_SUCCESS
on success.
They return
.Er LWRES_R_NOMEMORY
if memory allocation fails.
.Er LWRES_R_UNEXPECTEDEND
is returned if the available space in the buffer
.Fa b
is too small to accommodate the packet header or the
.Dv lwres_nooprequest_t
and
.Dv lwres_noopresponse_t
structures.
.Fn lwres_nooprequest_parse
and
.Fn lwres_noopresponse_parse
will return
.Er LWRES_R_UNEXPECTEDEND
if the buffer is not empty after decoding the received packet.
These functions will return
.Er LWRES_R_FAILURE
if
.Li pktflags
in the packet header structure
.Dv lwres_lwpacket_t
indicate that the packet is not a response to an earlier query.
.Sh SEE ALSO
.Xr lwres_packet 3
