.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
.\" DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
.\" INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
.\" FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
.\" NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
.\" WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $Id: lwres_gabn.3,v 1.1.1.1 2001-10-22 13:06:07 ghudson Exp $
.\"
.Dd Jun 30, 2000
.Dt LWRES_GABN 3
.Os BIND9 9
.ds vT BIND9 Programmer's Manual
.Sh NAME
.Nm lwres_gabnrequest_render ,
.Nm lwres_gabnresponse_render ,
.Nm lwres_gabnrequest_parse ,
.Nm lwres_gabnresponse_parse ,
.Nm lwres_gabnresponse_free ,
.Nm lwres_gabnrequest_free
.Nd lightweight resolver getaddrbyname message handling
.Sh SYNOPSIS
.Fd #include <lwres/lwres.h>
.Fd
.Ft lwres_result_t
.Fo lwres_gabnrequest_render
.Fa "lwres_context_t *ctx"
.Fa "lwres_gabnrequest_t *req"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_buffer_t *b"
.Fc
.Ft lwres_result_t
.Fo lwres_gabnresponse_render
.Fa "lwres_context_t *ctx"
.Fa "lwres_gabnresponse_t *req"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_buffer_t *b"
.Fc
.Ft lwres_result_t
.Fo lwres_gabnrequest_parse
.Fa "lwres_context_t *ctx"
.Fa "lwres_buffer_t *b"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_gabnrequest_t **structp"
.Fc
.Ft lwres_result_t
.Fo lwres_gabnresponse_parse
.Fa "lwres_context_t *ctx"
.Fa "lwres_buffer_t *b"
.Fa "lwres_lwpacket_t *pkt"
.Fa "lwres_gabnresponse_t **structp"
.Fc
.Ft void
.Fo lwres_gabnresponse_free
.Fa "lwres_context_t *ctx"
.Fa "lwres_gabnresponse_t **structp"
.Fc
.Ft void
.Fo lwres_gabnrequest_free
.Fa "lwres_context_t *ctx"
.Fa "lwres_gabnrequest_t **structp"
.Fc
.Sh DESCRIPTION
These are low-level routines for creating and parsing
lightweight resolver name-to-address lookup request and 
response messages.
.P
There are four main functions for the getaddrbyname opcode.
One render function converts a getaddrbyname request structure -
.Dv lwres_gabnrequest_t -
to the lighweight resolver's canonical format.
It is complemented by a parse function that converts a packet in this
canonical format to a getaddrbyname request structure.
Another render function converts the getaddrbyname response structure -
.Dv lwres_gabnresponse_t
to the canonical format.
This is complemented by a parse function which converts a packet in
canonical format to a getaddrbyname response structure.
.Pp
These structures are defined in
.Pa <lwres/lwres.h> .
They are shown below.
.Bd -literal -offset indent
#define LWRES_OPCODE_GETADDRSBYNAME	0x00010001U

typedef struct lwres_addr lwres_addr_t;
typedef LWRES_LIST(lwres_addr_t) lwres_addrlist_t;

typedef struct {
	lwres_uint32_t	flags;
	lwres_uint32_t	addrtypes;
	lwres_uint16_t	namelen;
	char	       *name;
} lwres_gabnrequest_t;

typedef struct {
	lwres_uint32_t		flags;
	lwres_uint16_t		naliases;
	lwres_uint16_t		naddrs;
	char		       *realname;
	char		      **aliases;
	lwres_uint16_t		realnamelen;
	lwres_uint16_t 	       *aliaslen;
	lwres_addrlist_t	addrs;
	void		       *base;
	size_t			baselen;
} lwres_gabnresponse_t;
.Ed
.Pp
.Fn lwres_gabnrequest_render
uses resolver context
.Fa ctx
to convert getaddrbyname request structure
.Fa req
to canonical format.
The packet header structure
.Fa pkt
is initialised and transferred to
buffer
.Fa b .
The contents of
.Fa *req
are then appended to the buffer in canonical format.
.Fn lwres_gabnresponse_render
performs the same task, except it converts a getaddrbyname response structure
.Dv lwres_gabnresponse_t
to the lightweight resolver's canonical format.
.Pp
.Fn lwres_gabnrequest_parse
uses context
.Fa ctx
to convert the contents of packet
.Fa pkt
to a
.Dv lwres_gabnrequest_t
structure.
Buffer
.Fa b
provides space to be used for storing this structure.
When the function succeeds, the resulting
.Dv lwres_gabnrequest_t
is made available through
.Fa *structp .
.Fn lwres_gabnresponse_parse
offers the same semantics as
.Fn lwres_gabnrequest_parse
except it yields a
.Dv lwres_gabnresponse_t
structure.
.Pp
.Fn lwres_gabnresponse_free
and
.Fn lwres_gabnrequest_free
release the memory in resolver context
.Fa ctx
that was allocated to the
.Dv lwres_gabnresponse_t
or
.Dv lwres_gabnrequest_t
structures referenced via
.Fa structp .
Any memory associated with ancillary buffers and strings for those
structures is also discarded.
.Sh RETURN VALUES
The getaddrbyname opcode functions
.Fn lwres_gabnrequest_render ,
.Fn lwres_gabnresponse_render
.Fn lwres_gabnrequest_parse
and
.Fn lwres_gabnresponse_parse
all return
.Er LWRES_R_SUCCESS
on success.
They return
.Er LWRES_R_NOMEMORY
if memory allocation fails.
.Er LWRES_R_UNEXPECTEDEND
is returned if the available space in the buffer
.Fa b
is too small to accommodate the packet header or the
.Dv lwres_gabnrequest_t
and
.Dv lwres_gabnresponse_t
structures.
.Fn lwres_gabnrequest_parse
and
.Fn lwres_gabnresponse_parse
will return
.Er LWRES_R_UNEXPECTEDEND
if the buffer is not empty after decoding the received packet.
These functions will return
.Er LWRES_R_FAILURE
if
.Li pktflags
in the packet header structure
.Dv lwres_lwpacket_t
indicate that the packet is not a response to an earlier query.
.Sh SEE ALSO
.Xr lwres_packet 3
