.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
.\" DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
.\" INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
.\" FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
.\" NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
.\" WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $Id: lwres.3,v 1.1.1.1 2001-10-22 13:05:54 ghudson Exp $
.\"
.Dd Jun 30, 2000
.Dt LWRES 3
.Os BIND9 9
.ds vT BIND9 Programmer's Manual
.Sh NAME
.Nm lwres
.Nd introduction to the lightweight resolver library
.Sh SYNOPSIS
.Fd #include <lwres/lwres.h>
.Sh DESCRIPTION
The BIND 9 lightweight resolver library is a simple, name service
independent stub resolver library.  It provides hostname-to-address
and address-to-hostname lookup services to applications by
transmitting lookup requests to a resolver daemon
.Nm lwresd
running on the local host. The resover daemon performs the
lookup using the DNS or possibly other name service protocols,
and returns the results to the application through the library.  
The library and resolver daemon communicate using a simple
UDP-based protocol.
.Pp
.Sh OVERVIEW
The lwresd library implements multiple name service APIs.
The standard
.Fn gethostbyname ,
.Fn gethostbyaddr ,
.Fn gethostbyname_r ,
.Fn gethostbyaddr_r ,
.Fn getaddrinfo ,
.Fn getipnodebyname ,
and
.Fn getipnodebyaddr
functions are all supported.  To allow the lwres library to coexist
with system libraries that define functions of the same name, 
the library defines these functions with names prefixed by
.Va lwres_ .
To define the standard names, applications must include the
header file
.Fd <lwres/netdb.h>
which contains macro definitions mapping the standard function names
into
.Va lwres_
prefixed ones.  Operating system vendors who integrate the lwres
library into their base distributions should rename the functions
in the library proper so that the renaming macros are not needed.
.Pp
The library also provides a native API consisting of the functions
.Fn lwres_getaddrsbyname
and
.Fn lwres_getnamebyaddr .
These may be called by applications that require more detailed
control over the lookup process than the standard functions
provide.
.Pp
In addition to these name service independent address lookup
functions, the library implements a new, experimental API
for looking up arbitrary DNS resource records, using the
.Fn lwres_getaddrsbyname
function.
.Pp
Finally, there is a low-level API for converting lookup
requests and responses to and from raw lwres protocol packets.  
This API can be used by clients requiring nonblocking operation, 
and is also used when implementing the server side of the lwres
protocol, for example in the
.Nm lwresd
resolver daemon.  The use of this low-level API in clients
and servers is outlined in the following sections.
.P
.Sh CLIENT-SIDE LOW-LEVEL API CALL FLOW
When a client program wishes to make an lwres request using the
native low-level API, it typically performs the following 
sequence of actions.
.Pp
(1) Allocate or use an existing lwres_packet_t, called "pkt" below.
.Pp
(2) Set pkt.recvlength to the maximum length we will accept.  
This is done so the receiver of our packets knows how large our receive 
buffer is.  The "default" is a constant in lwres.h: LWRES_RECVLENGTH = 4096.
.Pp
(3) Set the pkt.serial to a unique serial number.  This value is echoed
back to the application by the remote server.
.Pp
(4) Set pkt.pktflags.  Usually this is set to 0.
.Pp
(5) Set pkt.result to 0.
.Pp
(6) Call lwres_*request_render, or marshall in the data using the primitives
such as lwres_packet_render() and storing the packet data.
.Pp
(7) Transmit the resulting buffer.
.Pp
(8) Call lwres_*response_parse() to parse any packets received.
.Pp
(9) Verify that the opcode and serial match a request, and process the
packet specific information contained in the body.
.Sh SERVER-SIDE LOW-LEVEL API CALL FLOW
When implementing the server side of the lightweight resolver
protocol using the lwres library, a sequence of actions like the
following is typically involved in processing each request packet.
.Pp
Note that the same lwres_packet_t is used
in both the _parse() and _render() calls, with only a few modifications made
to the packet header's contents between uses.  This method is recommended
as it keeps the serial, opcode, and other fields correct.
.Pp
(1) When a packet is received, call lwres_*request_parse() to
unmarshall it.  This returns a lwres_packet_t (also called pkt, below)
as well as a data specific type, such as lwres_gabnrequest_t.
.Pp
(2) Process the request in the data specific type.
.Pp
(3) Set the pkt.result, pkt.recvlength as above.  All other fields can
be left untouched since they were filled in by the *_parse() call
above.  If using lwres_*response_render(), pkt.pktflags will be set up
properly.  Otherwise, the LWRES_LWPACKETFLAG_RESPONSE bit should be
set.
.Pp
(4) Call the data specific rendering function, such as
lwres_gabnresponse_render().
.Pp
(5) Send the resulting packet to the client.
.Pp
.Sh SEE ALSO
.Xr lwres_gethostent 3 ,
.Xr lwres_getipnode 3 ,
.Xr lwres_getnameinfo 3 ,
.Xr lwres_noop 3 ,
.Xr lwres_gabn 3 ,
.Xr lwres_gnba 3 ,
.Xr lwres_context 3 ,
.Xr lwres_config 3 ,
.Xr resolver 5 ,
.Xr lwresd 8 .
