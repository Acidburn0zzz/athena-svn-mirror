<refentry id="gsf-utils">
<refmeta>
<refentrytitle>utils</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GSF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>utils</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>




<link linkend="void">void</link>        <link linkend="gsf-init">gsf_init</link>                        (void);
<link linkend="void">void</link>        <link linkend="gsf-shutdown">gsf_shutdown</link>                    (void);
extern      int <link linkend="libgsf-major-version">libgsf_major_version</link>;
extern      int <link linkend="libgsf-minor-version">libgsf_minor_version</link>;
extern      int <link linkend="libgsf-micro-version">libgsf_micro_version</link>;

#define     <link linkend="GSF-CLASS-CAPS">GSF_CLASS</link>                       (name, prefix, class_init, instance_init, parent)
#define     <link linkend="GSF-CLASS-FULL-CAPS">GSF_CLASS_FULL</link>                  (name, prefix, class_init, instance_init, parent_type, \
		       abstract, interface_decl)
#define     <link linkend="GSF-CLASS-ABSTRACT-CAPS">GSF_CLASS_ABSTRACT</link>              (name, prefix, class_init, instance_init, parent)
#define     <link linkend="GSF-DYNAMIC-CLASS-CAPS">GSF_DYNAMIC_CLASS</link>               (name, prefix, class_init, instance_init, parent, plugin, type)
#define     <link linkend="GSF-DYNAMIC-CLASS-FULL-CAPS">GSF_DYNAMIC_CLASS_FULL</link>          (name, prefix, class_init, instance_init, parent_type, \
			       abstract, interface_decl, plugin, type)
#define     <link linkend="GSF-DYNAMIC-CLASS-ABSTRACT-CAPS">GSF_DYNAMIC_CLASS_ABSTRACT</link>      (name, prefix, class_init, instance_init, parent, plugin, type)
#define     <link linkend="GSF-INTERFACE-CAPS">GSF_INTERFACE</link>                   (init_func, iface_type)
#define     <link linkend="GSF-INTERFACE-FULL-CAPS">GSF_INTERFACE_FULL</link>              (type, init_func, iface_type)

<link linkend="void">void</link>        <link linkend="gsf-mem-dump">gsf_mem_dump</link>                    (<link linkend="guint8">guint8</link> const *ptr,
                                             <link linkend="size-t">size_t</link> len);
<link linkend="void">void</link>        <link linkend="gsf-input-dump">gsf_input_dump</link>                  (<link linkend="GsfInput">GsfInput</link> *input,
                                             <link linkend="gboolean">gboolean</link> dump_as_hex);

#define     <link linkend="GSF-OFF-T-FORMAT-CAPS">GSF_OFF_T_FORMAT</link>
typedef     <link linkend="gsf-off-t">gsf_off_t</link>;
<link linkend="char">char</link>*       <link linkend="gsf-filename-to-utf8">gsf_filename_to_utf8</link>            (const <link linkend="char">char</link> *filename,
                                             <link linkend="gboolean">gboolean</link> quoted);
<link linkend="void">void</link>        <link linkend="gsf-iconv-close">gsf_iconv_close</link>                 (<link linkend="GIConv">GIConv</link> handle);

<link linkend="guint8">guint8</link>*     <link linkend="gsf-base64-encode-simple">gsf_base64_encode_simple</link>        (<link linkend="guint8">guint8</link> const *data,
                                             <link linkend="size-t">size_t</link> len);
<link linkend="size-t">size_t</link>      <link linkend="gsf-base64-encode-close">gsf_base64_encode_close</link>         (<link linkend="guint8">guint8</link> const *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guint8">guint8</link> *out,
                                             <link linkend="int">int</link> *state,
                                             unsigned <link linkend="int">int</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="gsf-base64-encode-step">gsf_base64_encode_step</link>          (<link linkend="guint8">guint8</link> const *in,
                                             <link linkend="size-t">size_t</link> len,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guint8">guint8</link> *out,
                                             <link linkend="int">int</link> *state,
                                             unsigned <link linkend="int">int</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="gsf-base64-decode-simple">gsf_base64_decode_simple</link>        (<link linkend="guint8">guint8</link> *data,
                                             <link linkend="size-t">size_t</link> len);
<link linkend="size-t">size_t</link>      <link linkend="gsf-base64-decode-step">gsf_base64_decode_step</link>          (<link linkend="guint8">guint8</link> const *in,
                                             <link linkend="size-t">size_t</link> len,
                                             <link linkend="guint8">guint8</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="unsigned">unsigned</link> *save);
#define     <link linkend="GSF-LE-GET-GINT8-CAPS">GSF_LE_GET_GINT8</link>                (p)
#define     <link linkend="GSF-LE-GET-GUINT64-CAPS">GSF_LE_GET_GUINT64</link>              (p)
#define     <link linkend="GSF-LE-GET-GINT16-CAPS">GSF_LE_GET_GINT16</link>               (p)
#define     <link linkend="GSF-LE-GET-GUINT8-CAPS">GSF_LE_GET_GUINT8</link>               (p)
#define     <link linkend="GSF-LE-GET-GINT32-CAPS">GSF_LE_GET_GINT32</link>               (p)
#define     <link linkend="GSF-LE-GET-GUINT16-CAPS">GSF_LE_GET_GUINT16</link>              (p)
#define     <link linkend="GSF-LE-GET-GUINT32-CAPS">GSF_LE_GET_GUINT32</link>              (p)
#define     <link linkend="GSF-LE-GET-FLOAT-CAPS">GSF_LE_GET_FLOAT</link>                (p)
#define     <link linkend="GSF-LE-GET-DOUBLE-CAPS">GSF_LE_GET_DOUBLE</link>               (p)
<link linkend="guint64">guint64</link>     <link linkend="gsf-le-get-guint64">gsf_le_get_guint64</link>              (<link linkend="void">void</link> const *p);
<link linkend="float">float</link>       <link linkend="gsf-le-get-float">gsf_le_get_float</link>                (<link linkend="void">void</link> const *p);
<link linkend="double">double</link>      <link linkend="gsf-le-get-double">gsf_le_get_double</link>               (<link linkend="void">void</link> const *p);
#define     <link linkend="GSF-LE-SET-GUINT8-CAPS">GSF_LE_SET_GUINT8</link>               (p, dat)
#define     <link linkend="GSF-LE-SET-GUINT16-CAPS">GSF_LE_SET_GUINT16</link>              (p, dat)
#define     <link linkend="GSF-LE-SET-GUINT32-CAPS">GSF_LE_SET_GUINT32</link>              (p, dat)
#define     <link linkend="GSF-LE-SET-GINT8-CAPS">GSF_LE_SET_GINT8</link>                (p,dat)
#define     <link linkend="GSF-LE-SET-GINT16-CAPS">GSF_LE_SET_GINT16</link>               (p,dat)
#define     <link linkend="GSF-LE-SET-GINT32-CAPS">GSF_LE_SET_GINT32</link>               (p,dat)
#define     <link linkend="GSF-LE-SET-FLOAT-CAPS">GSF_LE_SET_FLOAT</link>                (p,dat)
#define     <link linkend="GSF-LE-SET-DOUBLE-CAPS">GSF_LE_SET_DOUBLE</link>               (p,dat)
<link linkend="void">void</link>        <link linkend="gsf-le-set-float">gsf_le_set_float</link>                (<link linkend="void">void</link> *p,
                                             <link linkend="float">float</link> f);
<link linkend="void">void</link>        <link linkend="gsf-le-set-double">gsf_le_set_double</link>               (<link linkend="void">void</link> *p,
                                             <link linkend="double">double</link> d);

<link linkend="GsfTimestamp">GsfTimestamp</link>* <link linkend="gsf-timestamp-copy">gsf_timestamp_copy</link>            (<link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);
<link linkend="void">void</link>        <link linkend="gsf-timestamp-free">gsf_timestamp_free</link>              (<link linkend="GsfTimestamp">GsfTimestamp</link> *stamp);
<link linkend="GsfTimestamp">GsfTimestamp</link>* <link linkend="gsf-timestamp-new-now">gsf_timestamp_new_now</link>         (void);
<link linkend="GType">GType</link>       <link linkend="gsf-timestamp-get-type">gsf_timestamp_get_type</link>          (void);
<link linkend="char">char</link>*       <link linkend="gsf-timestamp-as-string">gsf_timestamp_as_string</link>         (<link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);
<link linkend="int">int</link>         <link linkend="gsf-timestamp-parse">gsf_timestamp_parse</link>             (<link linkend="char">char</link> const *spec,
                                             <link linkend="GsfTimestamp">GsfTimestamp</link> *stamp);
<link linkend="guint">guint</link>       <link linkend="gsf-timestamp-hash">gsf_timestamp_hash</link>              (<link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);
<link linkend="gboolean">gboolean</link>    <link linkend="gsf-timestamp-equal">gsf_timestamp_equal</link>             (<link linkend="GsfTimestamp">GsfTimestamp</link> const *a,
                                             <link linkend="GsfTimestamp">GsfTimestamp</link> const *b);
#define     <link linkend="GSF-TIMESTAMP-TYPE-CAPS">GSF_TIMESTAMP_TYPE</link>
struct      <link linkend="GsfTimestamp">GsfTimestamp</link>;
<link linkend="GsfTimestamp">GsfTimestamp</link>* <link linkend="gsf-timestamp-new">gsf_timestamp_new</link>             (<link linkend="GDate">GDate</link> const *date,
                                             <link linkend="glong">glong</link> seconds,
                                             <link linkend="char">char</link> const *tz);
<link linkend="void">void</link>        <link linkend="g-value-set-timestamp">g_value_set_timestamp</link>           (<link linkend="GValue">GValue</link> *value,
                                             <link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gsf-init"/>gsf_init ()</title>
<indexterm><primary>gsf_init</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_init                        (void);</programlisting>
<para>
Initializes the GSF library</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gsf-shutdown"/>gsf_shutdown ()</title>
<indexterm><primary>gsf_shutdown</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_shutdown                    (void);</programlisting>
<para>
De-intializes the GSF library</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="libgsf-major-version"/>libgsf_major_version</title>
<indexterm><primary>libgsf_major_version</primary></indexterm><programlisting>extern int libgsf_major_version;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="libgsf-minor-version"/>libgsf_minor_version</title>
<indexterm><primary>libgsf_minor_version</primary></indexterm><programlisting>extern int libgsf_minor_version;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="libgsf-micro-version"/>libgsf_micro_version</title>
<indexterm><primary>libgsf_micro_version</primary></indexterm><programlisting>extern int libgsf_micro_version;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GSF-CLASS-CAPS"/>GSF_CLASS()</title>
<indexterm><primary>GSF_CLASS</primary></indexterm><programlisting>#define     GSF_CLASS(name, prefix, class_init, instance_init, parent)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prefix</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>class_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>instance_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-CLASS-FULL-CAPS"/>GSF_CLASS_FULL()</title>
<indexterm><primary>GSF_CLASS_FULL</primary></indexterm><programlisting>#define     GSF_CLASS_FULL(name, prefix, class_init, instance_init, parent_type, \
		       abstract, interface_decl)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prefix</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>class_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>instance_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_type</parameter>&nbsp;:</term>
<listitem><simpara>
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract:
@\
		       abstract: 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_decl</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-CLASS-ABSTRACT-CAPS"/>GSF_CLASS_ABSTRACT()</title>
<indexterm><primary>GSF_CLASS_ABSTRACT</primary></indexterm><programlisting>#define     GSF_CLASS_ABSTRACT(name, prefix, class_init, instance_init, parent)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prefix</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>class_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>instance_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-DYNAMIC-CLASS-CAPS"/>GSF_DYNAMIC_CLASS()</title>
<indexterm><primary>GSF_DYNAMIC_CLASS</primary></indexterm><programlisting>#define     GSF_DYNAMIC_CLASS(name, prefix, class_init, instance_init, parent, plugin, type)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prefix</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>class_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>instance_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>plugin</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-DYNAMIC-CLASS-FULL-CAPS"/>GSF_DYNAMIC_CLASS_FULL()</title>
<indexterm><primary>GSF_DYNAMIC_CLASS_FULL</primary></indexterm><programlisting>#define     GSF_DYNAMIC_CLASS_FULL(name, prefix, class_init, instance_init, parent_type, \
			       abstract, interface_decl, plugin, type)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prefix</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>class_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>instance_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_type</parameter>&nbsp;:</term>
<listitem><simpara>
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract:
@\
			       abstract: 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_decl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>plugin</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-DYNAMIC-CLASS-ABSTRACT-CAPS"/>GSF_DYNAMIC_CLASS_ABSTRACT()</title>
<indexterm><primary>GSF_DYNAMIC_CLASS_ABSTRACT</primary></indexterm><programlisting>#define     GSF_DYNAMIC_CLASS_ABSTRACT(name, prefix, class_init, instance_init, parent, plugin, type)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prefix</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>class_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>instance_init</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>plugin</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-INTERFACE-CAPS"/>GSF_INTERFACE()</title>
<indexterm><primary>GSF_INTERFACE</primary></indexterm><programlisting>#define     GSF_INTERFACE(init_func, iface_type)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>init_func</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_type</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-INTERFACE-FULL-CAPS"/>GSF_INTERFACE_FULL()</title>
<indexterm><primary>GSF_INTERFACE_FULL</primary></indexterm><programlisting>#define     GSF_INTERFACE_FULL(type, init_func, iface_type)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>init_func</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iface_type</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-mem-dump"/>gsf_mem_dump ()</title>
<indexterm><primary>gsf_mem_dump</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_mem_dump                    (<link linkend="guint8">guint8</link> const *ptr,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>
Dump <parameter>len</parameter> bytes from the memory location given by <parameter>ptr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara> memory area to be dumped.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> how many bytes will be dumped.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-input-dump"/>gsf_input_dump ()</title>
<indexterm><primary>gsf_input_dump</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_input_dump                  (<link linkend="GsfInput">GsfInput</link> *input,
                                             <link linkend="gboolean">gboolean</link> dump_as_hex);</programlisting>
<para>
Dumps <parameter>input</parameter>'s contents to STDOUT, optionally in hex format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>input</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GsfInput"><type>GsfInput</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dump_as_hex</parameter>&nbsp;:</term>
<listitem><simpara> If TRUE, dump in hexidecmal format
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-OFF-T-FORMAT-CAPS"/>GSF_OFF_T_FORMAT</title>
<indexterm><primary>GSF_OFF_T_FORMAT</primary></indexterm><programlisting>#define GSF_OFF_T_FORMAT	G_GINT64_FORMAT
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gsf-off-t"/>gsf_off_t</title>
<indexterm><primary>gsf_off_t</primary></indexterm><programlisting>typedef gint64 gsf_off_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gsf-filename-to-utf8"/>gsf_filename_to_utf8 ()</title>
<indexterm><primary>gsf_filename_to_utf8</primary></indexterm><programlisting><link linkend="char">char</link>*       gsf_filename_to_utf8            (const <link linkend="char">char</link> *filename,
                                             <link linkend="gboolean">gboolean</link> quoted);</programlisting>
<para>
A utility wrapper to make sure filenames are valid utf8.
Caller must g_free the result.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> file name suitable for open(2).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>quoted</parameter>&nbsp;:</term>
<listitem><simpara> if TRUE, the resulting utf8 file name will be quoted
   (unless it is invalid).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara><parameter>filename</parameter> using utf-8 encoding for display
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-iconv-close"/>gsf_iconv_close ()</title>
<indexterm><primary>gsf_iconv_close</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_iconv_close                 (<link linkend="GIConv">GIConv</link> handle);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>handle</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-base64-encode-simple"/>gsf_base64_encode_simple ()</title>
<indexterm><primary>gsf_base64_encode_simple</primary></indexterm><programlisting><link linkend="guint8">guint8</link>*     gsf_base64_encode_simple        (<link linkend="guint8">guint8</link> const *data,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-base64-encode-close"/>gsf_base64_encode_close ()</title>
<indexterm><primary>gsf_base64_encode_close</primary></indexterm><programlisting><link linkend="size-t">size_t</link>      gsf_base64_encode_close         (<link linkend="guint8">guint8</link> const *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guint8">guint8</link> *out,
                                             <link linkend="int">int</link> *state,
                                             unsigned <link linkend="int">int</link> *save);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>break_lines</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-base64-encode-step"/>gsf_base64_encode_step ()</title>
<indexterm><primary>gsf_base64_encode_step</primary></indexterm><programlisting><link linkend="size-t">size_t</link>      gsf_base64_encode_step          (<link linkend="guint8">guint8</link> const *in,
                                             <link linkend="size-t">size_t</link> len,
                                             <link linkend="gboolean">gboolean</link> break_lines,
                                             <link linkend="guint8">guint8</link> *out,
                                             <link linkend="int">int</link> *state,
                                             unsigned <link linkend="int">int</link> *save);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>break_lines</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-base64-decode-simple"/>gsf_base64_decode_simple ()</title>
<indexterm><primary>gsf_base64_decode_simple</primary></indexterm><programlisting><link linkend="size-t">size_t</link>      gsf_base64_decode_simple        (<link linkend="guint8">guint8</link> *data,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-base64-decode-step"/>gsf_base64_decode_step ()</title>
<indexterm><primary>gsf_base64_decode_step</primary></indexterm><programlisting><link linkend="size-t">size_t</link>      gsf_base64_decode_step          (<link linkend="guint8">guint8</link> const *in,
                                             <link linkend="size-t">size_t</link> len,
                                             <link linkend="guint8">guint8</link> *out,
                                             <link linkend="int">int</link> *state,
                                             <link linkend="unsigned">unsigned</link> *save);</programlisting>
<para>
Decodes a chunk of base64 encoded data</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> max length of data to decode
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been decoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes converted
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-GINT8-CAPS"/>GSF_LE_GET_GINT8()</title>
<indexterm><primary>GSF_LE_GET_GINT8</primary></indexterm><programlisting>#define GSF_LE_GET_GINT8(p) ((gint8)GSF_LE_GET_GUINT8(p))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-GUINT64-CAPS"/>GSF_LE_GET_GUINT64()</title>
<indexterm><primary>GSF_LE_GET_GUINT64</primary></indexterm><programlisting>#define GSF_LE_GET_GUINT64(p) (gsf_le_get_guint64 (p))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-GINT16-CAPS"/>GSF_LE_GET_GINT16()</title>
<indexterm><primary>GSF_LE_GET_GINT16</primary></indexterm><programlisting>#define GSF_LE_GET_GINT16(p) ((gint16)GSF_LE_GET_GUINT16(p))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-GUINT8-CAPS"/>GSF_LE_GET_GUINT8()</title>
<indexterm><primary>GSF_LE_GET_GUINT8</primary></indexterm><programlisting>#define GSF_LE_GET_GUINT8(p) (*(guint8 const *)(p))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-GINT32-CAPS"/>GSF_LE_GET_GINT32()</title>
<indexterm><primary>GSF_LE_GET_GINT32</primary></indexterm><programlisting>#define GSF_LE_GET_GINT32(p) ((gint32)GSF_LE_GET_GUINT32(p))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-GUINT16-CAPS"/>GSF_LE_GET_GUINT16()</title>
<indexterm><primary>GSF_LE_GET_GUINT16</primary></indexterm><programlisting>#define     GSF_LE_GET_GUINT16(p)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-GUINT32-CAPS"/>GSF_LE_GET_GUINT32()</title>
<indexterm><primary>GSF_LE_GET_GUINT32</primary></indexterm><programlisting>#define     GSF_LE_GET_GUINT32(p)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-FLOAT-CAPS"/>GSF_LE_GET_FLOAT()</title>
<indexterm><primary>GSF_LE_GET_FLOAT</primary></indexterm><programlisting>#define GSF_LE_GET_FLOAT(p) (gsf_le_get_float (p))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-GET-DOUBLE-CAPS"/>GSF_LE_GET_DOUBLE()</title>
<indexterm><primary>GSF_LE_GET_DOUBLE</primary></indexterm><programlisting>#define GSF_LE_GET_DOUBLE(p) (gsf_le_get_double (p))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-le-get-guint64"/>gsf_le_get_guint64 ()</title>
<indexterm><primary>gsf_le_get_guint64</primary></indexterm><programlisting><link linkend="guint64">guint64</link>     gsf_le_get_guint64              (<link linkend="void">void</link> const *p);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-le-get-float"/>gsf_le_get_float ()</title>
<indexterm><primary>gsf_le_get_float</primary></indexterm><programlisting><link linkend="float">float</link>       gsf_le_get_float                (<link linkend="void">void</link> const *p);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-le-get-double"/>gsf_le_get_double ()</title>
<indexterm><primary>gsf_le_get_double</primary></indexterm><programlisting><link linkend="double">double</link>      gsf_le_get_double               (<link linkend="void">void</link> const *p);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-GUINT8-CAPS"/>GSF_LE_SET_GUINT8()</title>
<indexterm><primary>GSF_LE_SET_GUINT8</primary></indexterm><programlisting>#define     GSF_LE_SET_GUINT8(p, dat)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-GUINT16-CAPS"/>GSF_LE_SET_GUINT16()</title>
<indexterm><primary>GSF_LE_SET_GUINT16</primary></indexterm><programlisting>#define     GSF_LE_SET_GUINT16(p, dat)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-GUINT32-CAPS"/>GSF_LE_SET_GUINT32()</title>
<indexterm><primary>GSF_LE_SET_GUINT32</primary></indexterm><programlisting>#define     GSF_LE_SET_GUINT32(p, dat)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-GINT8-CAPS"/>GSF_LE_SET_GINT8()</title>
<indexterm><primary>GSF_LE_SET_GINT8</primary></indexterm><programlisting>#define GSF_LE_SET_GINT8(p,dat) GSF_LE_SET_GUINT8((p),(dat))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-GINT16-CAPS"/>GSF_LE_SET_GINT16()</title>
<indexterm><primary>GSF_LE_SET_GINT16</primary></indexterm><programlisting>#define GSF_LE_SET_GINT16(p,dat) GSF_LE_SET_GUINT16((p),(dat))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-GINT32-CAPS"/>GSF_LE_SET_GINT32()</title>
<indexterm><primary>GSF_LE_SET_GINT32</primary></indexterm><programlisting>#define GSF_LE_SET_GINT32(p,dat) GSF_LE_SET_GUINT32((p),(dat))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-FLOAT-CAPS"/>GSF_LE_SET_FLOAT()</title>
<indexterm><primary>GSF_LE_SET_FLOAT</primary></indexterm><programlisting>#define GSF_LE_SET_FLOAT(p,dat) gsf_le_set_float((p),(dat))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-LE-SET-DOUBLE-CAPS"/>GSF_LE_SET_DOUBLE()</title>
<indexterm><primary>GSF_LE_SET_DOUBLE</primary></indexterm><programlisting>#define GSF_LE_SET_DOUBLE(p,dat) gsf_le_set_double((p),(dat))
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dat</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-le-set-float"/>gsf_le_set_float ()</title>
<indexterm><primary>gsf_le_set_float</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_le_set_float                (<link linkend="void">void</link> *p,
                                             <link linkend="float">float</link> f);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>f</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-le-set-double"/>gsf_le_set_double ()</title>
<indexterm><primary>gsf_le_set_double</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_le_set_double               (<link linkend="void">void</link> *p,
                                             <link linkend="double">double</link> d);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-copy"/>gsf_timestamp_copy ()</title>
<indexterm><primary>gsf_timestamp_copy</primary></indexterm><programlisting><link linkend="GsfTimestamp">GsfTimestamp</link>* gsf_timestamp_copy            (<link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stamp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-free"/>gsf_timestamp_free ()</title>
<indexterm><primary>gsf_timestamp_free</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_timestamp_free              (<link linkend="GsfTimestamp">GsfTimestamp</link> *stamp);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stamp</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-new-now"/>gsf_timestamp_new_now ()</title>
<indexterm><primary>gsf_timestamp_new_now</primary></indexterm><programlisting><link linkend="GsfTimestamp">GsfTimestamp</link>* gsf_timestamp_new_now         (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-get-type"/>gsf_timestamp_get_type ()</title>
<indexterm><primary>gsf_timestamp_get_type</primary></indexterm><programlisting><link linkend="GType">GType</link>       gsf_timestamp_get_type          (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-as-string"/>gsf_timestamp_as_string ()</title>
<indexterm><primary>gsf_timestamp_as_string</primary></indexterm><programlisting><link linkend="char">char</link>*       gsf_timestamp_as_string         (<link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stamp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-parse"/>gsf_timestamp_parse ()</title>
<indexterm><primary>gsf_timestamp_parse</primary></indexterm><programlisting><link linkend="int">int</link>         gsf_timestamp_parse             (<link linkend="char">char</link> const *spec,
                                             <link linkend="GsfTimestamp">GsfTimestamp</link> *stamp);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>spec</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stamp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-hash"/>gsf_timestamp_hash ()</title>
<indexterm><primary>gsf_timestamp_hash</primary></indexterm><programlisting><link linkend="guint">guint</link>       gsf_timestamp_hash              (<link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stamp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-equal"/>gsf_timestamp_equal ()</title>
<indexterm><primary>gsf_timestamp_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gsf_timestamp_equal             (<link linkend="GsfTimestamp">GsfTimestamp</link> const *a,
                                             <link linkend="GsfTimestamp">GsfTimestamp</link> const *b);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-TIMESTAMP-TYPE-CAPS"/>GSF_TIMESTAMP_TYPE</title>
<indexterm><primary>GSF_TIMESTAMP_TYPE</primary></indexterm><programlisting>#define GSF_TIMESTAMP_TYPE        (gsf_timestamp_get_type ())
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GsfTimestamp"/>struct GsfTimestamp</title>
<indexterm><primary>GsfTimestamp</primary></indexterm><programlisting>struct GsfTimestamp {

	GDate	  date;			/* In local timezone */
	glong     seconds;		/* time of day */
	GString	  time_zone;		/* possibly blank */

	guint32	  timet;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gsf-timestamp-new"/>gsf_timestamp_new ()</title>
<indexterm><primary>gsf_timestamp_new</primary></indexterm><programlisting><link linkend="GsfTimestamp">GsfTimestamp</link>* gsf_timestamp_new             (<link linkend="GDate">GDate</link> const *date,
                                             <link linkend="glong">glong</link> seconds,
                                             <link linkend="char">char</link> const *tz);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>date</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seconds</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tz</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-value-set-timestamp"/>g_value_set_timestamp ()</title>
<indexterm><primary>g_value_set_timestamp</primary></indexterm><programlisting><link linkend="void">void</link>        g_value_set_timestamp           (<link linkend="GValue">GValue</link> *value,
                                             <link linkend="GsfTimestamp">GsfTimestamp</link> const *stamp);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stamp</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
